angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","LocalStorageModule","angular-sortable-view"]),function(){"use strict ";function e(e,t){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache",t.options({appendToBody:!0})}e.$inject=["$httpProvider","$uibTooltipProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e,t){function n(e){t.set("sidebarLocked",e)}var r=this;r.$state=e,r.lockSidebar=t.get("sidebarLocked"),r.toggleSidebarLocked=n}e.$inject=["$state","localStorageService"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,i,o){var a={superAdmin:n,admin:t,user:r};o.html5Mode(!0),i.otherwise("/"),i.when("/pyramids/","/pyramids"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("pyramids",{url:"/pyramids",views:{content:{controller:"PyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramids.html"}}}).state("pyramids.myPyramids",{url:"/my-pyramids",views:{"content@":{controller:"MyPyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/my-pyramids.html"}},resolve:{auth:a.user}}).state("pyramids.view",{url:"/view/:competitionId",views:{"content@":{controller:"PyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramid.html"}}}).state("pyramids.stats",{url:"/stats/:competitionId",views:{"content@":{controller:"StatsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/stats.html"}}}).state("pyramids.admin",{url:"/admin/:competitionId",views:{"content@":{controller:"AdminCtrl",controllerAs:"vm",templateUrl:"pyramids/views/admin.html"}},resolve:{auth:a.user}}).state("pyramids.create",{url:"/create",views:{"content@":{controller:"CreatePyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/create-pyramid.html"}},resolve:{auth:a.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}}).state("verify",{url:"/verification",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("verification",{url:"/verification/:userId/:verificationToken",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}})}function t(e){return e.authorizeCurrentUserForRoute("admin")}function n(e){return e.authorizeCurrentUserForRoute("super-admin")}function r(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),t.$inject=["authService"],n.$inject=["authService"],r.$inject=["authService"]}(),function(){"use strict";function e(e,t,n){e.$on("$stateChangeError",function(e,n,r,i,o,a){"not authorized"===a&&(t.go("login"),t.previous=n,t.prevParams=r)}),e.$on("$stateChangeStart",function(){n.setSidebarStatus(!1)})}e.$inject=["$rootScope","$state","sidebarService"],angular.module("app").run(e)}(),function(){"use strict";function e(e,t,n,r,i,o){function a(e,r){var o=n.defer();return t.post("/login",{username:e,password:r}).then(function(e){e.data.success?(i.currentUser=e.data.user,o.resolve(!0)):"unverified"===e.data.message?o.resolve("unverified"):o.resolve(!1)}),o.promise}function l(e){var r=n.defer();return t.post("/api/users",{userData:e}).then(function(e){e.data?r.resolve(!0):r.resolve(!1)},function(e){"Error: Duplicate Username"===e.data.reason&&o.error("Sorry, an account already exists with that email address.")}),r.promise}function s(){var r=n.defer();return t.post("/logout",{logout:!0}).then(function(){i.currentUser=void 0,r.resolve(),e.go("home")}),r.promise}function c(e){return!!i.isAuthorized(e)||n.reject("not authorized")}function u(){return!!i.isAuthenticated()||n.reject("not authorized")}var d={authenticateUser:a,createUser:l,logout:s,authorizeCurrentUserForRoute:c,authenticatedUserForRoute:u};return d}e.$inject=["$state","$http","$q","userService","identityService","notifyService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e){function t(){return e.get("/api/users").then(function(e){return e})}function n(t,n){return e.get("/api/user/verification",{params:{userId:t,verificationToken:n}})}var r={getAllUsers:t,verifyUser:n};return r}e.$inject=["$http"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(e,t,n){function r(){}function i(r,i){t.authenticateUser(r,i).then(function(t){t?"unverified"===t?n.error("You must verify your email before you can login"):e.previous?(e.go(e.previous,e.prevParams),e.previous=null,e.prevParams=null):e.go("home"):n.error("Username / password combinaiton incorrect")})}var o=this;o.login=i,r()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){}function i(r){r.password!==r.confirmPassword?n.error("Passwords don't match!"):t.createUser(r).then(function(){e.go("verify")})}var o=this;o.register=i,r()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){t.userId&&t.verificationToken&&(i.verifying=!0,i.verified=null,n.verifyUser(t.userId,t.verificationToken).then(function(e){e.data?i.verified=!0:i.verified=!1}))}var i=this;i.verified=void 0,i.verifying=!1,r()}e.$inject=["$state","$stateParams","userService"],angular.module("app").controller("VerificationCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@"},templateUrl:"/challenges/components/active-challenges.html"};return e}function t(e,t){function n(){r()}function r(){i.challenges=[],t.getActiveChallengesByCompetition(i.competitionId).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){0!==e.timeLimit&&(e.expires=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1)}))})}var i=this;i.challenges=[],n(),e.$on("ws:challenge_created",function(e,t){i.competitionId===t.competitionId&&r()}),e.$on("ws:challenge_completed",function(e,t){i.competitionId===t.competitionId&&r()}),e.$on("ws:pyramid_updated",function(e,t){i.competitionId===t.competitionId&&r()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpActiveChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@",limit:"@"},templateUrl:"/challenges/components/completed-challenges.html"};return e}function t(e,t){function n(){r()}function r(){i.challenges=[],t.getCompletedChallengesByCompetition(i.competitionId,i.limit).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){e.loser="challenger"===e.winner?"opponent":"challenger",e.whenCompleted=moment(e.completed).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd",sameElse:"DD/MM/YYYY"})}))})}var i=this;i.challenges=[],n(),e.$on("ws:challenge_completed",function(e,t){i.competitionId===t.competitionId&&r()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpCompletedChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@",player:"="},templateUrl:"/challenges/components/player-overall-results.html"};return e}function t(e){function t(){n(r.competitionId,r.player._id)}function n(t,n){e.getPlayerResultsByCompetition(t,n).then(function(e){for(var t=[],i=0;i<r.maxLevels;i++)t.push(i*(i+1)/2+1);r.player.level=t.length;for(var o=0;o<t.length;o++)if(r.player.position<t[o+1]){r.player.level=t.indexOf(t[o])+1;break}var a,l=0,s=!0;_.forEach(e.data,function(e){s&&("challenger"===e.winner&&e.challenger._id===n||"opponent"===e.winner&&e.opponent._id===n?"losing"!==a?(l+=1,a="winning"):s=!1:("opponent"===e.winner&&e.challenger._id===n||"challenger"===e.winner&&e.opponent._id===n)&&("winning"!==a?(l+=1,a="losing"):s=!1)),r.streak={type:a,value:l}}),r.wins.asOpponent=_.size(_.filter(e.data,function(e){return e.opponent._id===n&&"opponent"===e.winner})),r.wins.asChallenger=_.size(_.filter(e.data,function(e){return e.challenger._id===n&&"challenger"===e.winner})),r.wins.total=r.wins.asChallenger+r.wins.asOpponent,r.wins.byForfeit=_.size(_.filter(e.data,function(e){return e.forfeit&&(e.challenger._id===n&&"challenger"===e.winner||e.opponent._id===n&&"opponent"===e.winner)})),r.loses.asOpponent=_.size(_.filter(e.data,function(e){return e.opponent._id===n&&"challenger"===e.winner})),r.loses.asChallenger=_.size(_.filter(e.data,function(e){return e.challenger._id===n&&"opponent"===e.winner})),r.loses.total=r.loses.asChallenger+r.loses.asOpponent,r.loses.byForfeit=_.size(_.filter(e.data,function(e){return e.forfeit&&(e.challenger._id===n&&"opponent"===e.winner||e.opponent._id===n&&"challenger"===e.winner)}))})}var r=this;r.maxLevels=10,r.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},r.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},r.streak={type:null,value:0},t()}t.$inject=["challengesService"],angular.module("app").directive("kpPlayerOverallResults",e)}(),function(){"use strict";function e(e){function t(t){return e.post("/api/challenges/create",{challenge:t})}function n(t){return e.post("/api/challenges/complete",{challenge:t})}function r(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function i(t){return e.get("/api/challenges/active/competition",{params:{competitionId:t}})}function o(t,n){return e.get("/api/challenges/active/competition/player",{params:{competitionId:t,playerId:n}})}function a(t,n){return e.get("/api/challenges/completed/competition",{params:{competitionId:t,limit:n}})}function l(t,n){return e.delete("/api/challenges/active/competition/player/delete",{params:{competitionId:t,playerId:n}})}function s(t,n){return e.get("/api/challenges/results/competition/player",{params:{competitionId:t,playerId:n}})}var c={createChallenge:t,completeChallenge:n,getChallengesByCompetition:r,getActiveChallengesByCompetition:i,getActiveChallengeByCompetitionByPlayer:o,getCompletedChallengesByCompetition:a,deleteActiveChallengeByCompetitionByPlayer:l,getPlayerResultsByCompetition:s};return c}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/footer.html"};return e}function t(e,t){function n(){t.logout()}var r=this;r.indentity=e,r.logout=n}t.$inject=["identityService","authService"],angular.module("app").directive("kpFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"headerCtrl",restrict:"A",templateUrl:"/common/components/header.html"};return e}function t(e,t,n){function r(){o.sidebarStatus.left=!o.sidebarStatus.left,e.setSidebarStatus(o.sidebarStatus.left)}function i(){n.logout()}var o=this;o.indentity=t,o.logout=i,o.sidebarStatus=e.getSidebarStatus(),o.toggleSidebar=r}t.$inject=["sidebarService","identityService","authService"],angular.module("app").directive("kpHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"/common/components/sidebar.html"};return e}function t(e,t,n){function r(){t.logout()}var i=this;i.indentity=e,i.logout=r,i.sidebarStatus=n.getSidebarStatus()}t.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("kpSidebar",e)}(),function(){"use strict";function e(){return function(e,t){if(!angular.isObject(e))return e;var n=[];for(var r in e)n.push(e[r]);return n.sort(function(e,n){return e=parseInt(e[t]),n=parseInt(n[t]),e-n}),n}}angular.module("app").filter("orderObjectBy",e)}(),function(){"use strict";function e(){function e(){}e()}angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(e){function t(){return!!this.currentUser}function n(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var r;null!==e.bootstrappedUserObject&&(r=e.bootstrappedUserObject);var i={currentUser:r,isAuthenticated:t,isAuthorized:n};return i}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,t,n){$.notify({message:e,url:t,target:n},{type:"info"})}function t(e,t,n){$.notify({message:e,url:t,target:n},{type:"success"})}function n(e,t,n){$.notify({message:e,url:t,target:n},{type:"warning"})}function r(e,t,n){$.notify({message:e,url:t,target:n},{type:"danger"})}function i(e,t,n){$.notify({message:e,url:t,target:n},{type:"inverse"})}var o={info:e,success:t,warning:n,error:r,inverse:i};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85}}),o}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(e,t,n,r){$(e).mCustomScrollbar({theme:t,scrollInertia:100,axis:n,mouseWheel:{enable:!0,axis:r,preventDefault:!0}})}var t={malihuScroll:e};return t}angular.module("app").factory("scrollbarService",e)}(),function(){"use strict";function e(){function e(){return n}function t(e){n.left=e}var n={left:!1,right:!1},r={getSidebarStatus:e,setSidebarStatus:t};return r}angular.module("app").factory("sidebarService",e)}(),angular.module("app").service("websocketService",["$rootScope","$window",function(e,t){function n(){return"https:"===t.location.protocol?"wss://"+t.location.host:"ws://"+t.location.host}var r;this.connect=function(){r=new WebSocket(n()),r.onmessage=function(t){var n=JSON.parse(t.data);e.$broadcast("ws:"+n.topic,n.data)}},this.send=function(e,t){var n=JSON.stringify({topic:e,data:t});r.send(n)}}]).run(["websocketService",function(e){e.connect()}]),function(){"use strict";function e(e){function t(t){return e.get("/api/pyramid",{params:{competitionId:t}})}function n(t){return e.get("/api/pyramids/user",{params:{userId:t}})}function r(){return e.get("/api/pyramids")}function i(t){return e.post("/api/pyramids/create",{pyramid:t})}function o(t){return e.post("/api/pyramids/update",{pyramid:t})}function a(t,n,r){return e.post("/api/pyramids/swapPositions",{competitionId:t,challenger:n,opponent:r})}function l(t,n){return e.post("/api/pyramids/addPlayer",{competitionId:t,player:n})}function s(t,n){return e.post("/api/pyramids/addPlayerRequest",{competition:t,player:n})}function c(t,n,r){return e.post("/api/pyramids/removePlayer",{competitionId:t,removedPlayer:n,players:r})}function u(t,n){return e.post("/api/pyramids/approvePlayer",{competitionId:t,player:n})}function d(t,n){return e.post("/api/pyramids/denyPlayer",{competitionId:t,player:n})}var p={getPyramid:t,getPyramidsForUser:n,getPyramids:r,createPyramid:i,updatePyramid:o,swapPositions:a,addPlayerToPyramid:l,addPlayerToPyramidRequest:s,removedPlayerFromPyramid:c,approvePendingPlayer:u,denyPendingPlayer:d};return p}e.$inject=["$http"],angular.module("app").factory("pyramidsService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/pyramids/components/pending-players.html"};return e}function t(e){function t(){}function n(t){t.position=i.pyramid.players.length+1,e.approvePendingPlayer(i.pyramid._id,t)}function r(t){e.denyPendingPlayer(i.pyramid._id,t)}var i=this;i.pendingPlayers=[],i.approvePendingPlayer=n,i.denyPendingPlayer=r,t()}t.$inject=["pyramidsService"],angular.module("app").directive("kpPendingPlayers",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{type:"@"},templateUrl:"/pyramids/components/pyramid-compact.html"};return e}function t(e,t){function n(){"user"===r.type?e.getPyramidsForUser(t.currentUser._id).then(function(e){r.pyramids=e.data}):e.getPyramids().then(function(e){r.pyramids=e.data})}var r=this;r.pyramids=null,n()}t.$inject=["pyramidsService","identityService"],angular.module("app").directive("kpPyramidCompact",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/pyramids/components/pyramid.html",replace:!0,scope:{competitionId:"@"},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,n,r,i,o,a){function l(){n.getPyramid(S.competitionId).then(function(e){for(var t=I;t>0;--t)S.maxPlayers+=t;e.data&&(S.pyramid=e.data,s(),c(),d(),p(),m())})}function s(){S.pyramid.players=r("orderBy")(S.pyramid.players,"position")}function c(){o.isAuthenticated()&&(S.currentUserIsOwner=_.some(S.pyramid.owners,["_id",o.currentUser._id])),S.currentUserIsOnPyramid=!1,S.hasActiveChallenge=!1,_.forEach(S.pyramid.players,function(e){o.isAuthenticated()&&e._id===o.currentUser._id&&(S.currentUserIsOnPyramid=!0,e.class="current-user",S.currentUserPlayer=e,a.getActiveChallengeByCompetitionByPlayer(S.competitionId,e._id).then(function(e){e.data&&(S.hasActiveChallenge=!0)}))}),S.currentUserIsPending=!1,_.forEach(S.pyramid.pendingPlayers,function(e){o.isAuthenticated()&&e._id===o.currentUser._id&&(S.currentUserIsPending=!0)}),a.getActiveChallengesByCompetition(S.competitionId).then(function(e){_.forEach(e.data,function(e){var t=_.find(S.pyramid.players,{_id:e.challenger._id});t.class="unavailable",t.challenge={position:"challenger"};var n=_.find(S.pyramid.players,{_id:e.opponent._id});if(n.class="unavailable",n.challenge={position:"opponent"},0!==e.timeLimit){var r=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1;r>0?n.challenge.expires=r:r<=0&&v(null,!0,n)}}),f()})}function u(){S.breakPoints=[];for(var e=0;e<I;e++)S.breakPoints.push(e*(e+1)/2+1)}function d(){var e=0;S.levels=[],u();for(var t=0;t<S.pyramid.players.length;t++)S.breakPoints.indexOf(t+1)>-1&&(e+=1,S.levels.push(e)),S.pyramid.players[t].level=e}function p(){S.numberOfBlocks=0;for(var e=_.last(S.levels);e>0;e--)S.numberOfBlocks+=e}function m(){S.numberOfRealPlayers=S.pyramid.players.length;for(var e=S.pyramid.players.length;e<S.numberOfBlocks;e++)S.pyramid.players.push({firstName:"Empty",lastName:"Spot",position:99,class:"empty"});d()}function f(){var e=S.currentUserPlayer.level>1?S.currentUserPlayer.level-1:null;_.forEach(S.pyramid.players,function(t){t.level===e&&99!==t.position&&"unavailable"!==t.class&&(S.availableChallenges=!0,t.available=!0)})}function y(e){if(e.available){S.hasActiveChallenge=!0;var t={competitionName:S.pyramid.name,competitionId:S.competitionId,complete:!1,forfeit:!1,timeLimit:S.pyramid.forfeitDays,challenger:{_id:S.currentUserPlayer._id,email:S.currentUserPlayer.email,firstName:S.currentUserPlayer.firstName,lastName:S.currentUserPlayer.lastName,position:S.currentUserPlayer.position},opponent:{_id:e._id,email:e.email,firstName:e.firstName,lastName:e.lastName,position:e.position}};a.createChallenge(t).then(function(){S.pyramidMenuToggle=!1})}else i.error("Sorry, that is not a valid challenge.")}function v(e,t,r){var i=r||S.currentUserPlayer;a.getActiveChallengeByCompetitionByPlayer(S.competitionId,i._id).then(function(i){S.hasActiveChallenge=!1;var o=!1;t?(i.data.forfeit=!0,"opponent"===r.challenge.position?(i.data.winner="challenger",o=!0):i.data.winner="opponent"):e?i.data.challenger._id===S.currentUserPlayer._id?(i.data.winner="challenger",o=!0):i.data.winner="opponent":i.data.challenger._id===S.currentUserPlayer._id?i.data.winner="opponent":(i.data.winner="challenger",o=!0),o?n.swapPositions(S.competitionId,i.data.opponent,i.data.challenger).then(function(){a.completeChallenge(i.data).then(function(){$&&w()})}):a.completeChallenge(i.data).then(function(){$&&w()}),S.pyramidMenuToggle=!1})}function g(e){v(null,!0,e)}function h(){if(o.isAuthenticated())if(S.numberOfRealPlayers<S.maxPlayers){var e={_id:o.currentUser._id,firstName:o.currentUser.firstName,lastName:o.currentUser.lastName,email:o.currentUser.username,position:S.numberOfRealPlayers+1};S.pyramid.open?swal({title:"Join Competition?",text:"You'll be added to the bottom",type:"warning",showCancelButton:!0,confirmButtonText:"Join",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToPyramid(S.competitionId,e),swal("Welcome Aboard!","Now start fighting your way to the top","success")}):swal({title:"Send Join Request?",text:"This is a closed competition so the owner must approve your request",type:"warning",showCancelButton:!0,confirmButtonText:"Send Request",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToPyramidRequest(S.pyramid,e).then(function(){S.currentUserIsPending=!0}),swal("Request Sent","You will receive an email once the owner processes the request.","success")})}else i.warning("Sorry, this pyramid is full");else t.go("login")}function P(){swal({title:"Leave Pyramid?",text:"You will lose your spot and forfeit any active challenges.",type:"error",showCancelButton:!0,confirmButtonText:"Yes, leave",confirmButtonClass:"btn-danger",cancelButtonText:"No, stay",closeOnConfirm:!1,closeOnCancel:!0},function(){w(),swal("OK, you'r out!","You've been removed from the pyramid.","success")})}function w(){o.isAuthenticated()&&S.currentUserIsOnPyramid&&($=!0,S.hasActiveChallenge?v(null,!0,S.currentUserPlayer):(S.currentUserIsOnPyramid=!1,S.hasActiveChallenge=!1,n.getPyramid(S.competitionId).then(function(e){var t=e.data,r=S.currentUserPlayer.position;_.forEach(t.players,function(e){e.position>=r&&(e.position-=1)});for(var i=_.remove(t.players,function(e){return e._id===S.currentUserPlayer._id}),o=[],a=0;a<S.numberOfRealPlayers-1;++a){var l={_id:t.players[a]._id,firstName:t.players[a].firstName,lastName:t.players[a].lastName,position:t.players[a].position};o.push(l)}n.removedPlayerFromPyramid(S.competitionId,i[0],o).then(function(){$=!1})})))}function C(){n.getPyramid(S.competitionId).then(function(e){S.pyramid=e.data,s(),c(),d(),p(),m()})}var I=10,S=this;S.pyramid={},S.breakPoints=[],S.levels=[],S.numberOfBlocks=0,S.currentUserIsOnPyramid=!1,S.currentUserIsPending=!1,S.currentUserIsOwner=!1,S.hasActiveChallenge=!1,S.availableChallenges=!1,S.createChallenge=y,S.completeChallenge=v,S.challengeExpired=g,S.currentUserPlayer={},S.pyramidMenuToggle=!1,S.addCurrentUserToPyramid=h,S.confirmRemoveCurrentUserFromPyramid=P,S.numberOfRealPlayers=0,S.maxPlayers=0,l();var $=!1;e.$on("ws:challenge_created",function(e,t){S.competitionId===t.competitionId&&(i.info(t.description),C())}),e.$on("ws:challenge_completed",function(e,t){S.competitionId===t.competitionId&&(i.info(t.description),$||C())}),e.$on("ws:player_added",function(e,t){S.competitionId===t.competitionId&&(i.info(t.description),C())}),e.$on("ws:player_removed",function(e,t){S.competitionId===t.competitionId&&(i.info(t.description),C())}),e.$on("ws:pyramid_updated",function(e,t){S.competitionId===t.competitionId&&(i.info(t.description),C())})}t.$inject=["$scope","$state","pyramidsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("kpPyramid",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/pyramids/components/update-players.html"};return e}function t(e,t,n){function r(){}function i(){_.forEach(s,function(e){n.deleteActiveChallengeByCompetitionByPlayer(c.pyramid._id,e._id)}),t.updatePyramid(c.pyramid)}function o(){t.getPyramid(c.pyramid._id).then(function(t){t.data.players=e("orderBy")(t.data.players,"position"),c.pyramid=t.data})}function a(){var e=1;_.forEach(c.pyramid.players,function(t){t.position=e,++e})}function l(e,t){s.push(e),c.pyramid.players.splice(t,1),a()}var s=[],c=this;c.updatePyramid=i,c.cancelUpdate=o,c.reorderPlayers=a,c.removePlayer=l,r()}t.$inject=["$filter","pyramidsService","challengesService"],angular.module("app").directive("kpUpdatePlayers",e)}(),function(){"use strict";function e(e,t,n,r,i,o,a){function l(){n.competitionId?(u.competitionId=n.competitionId,s()):t.go("pyramids.myPyramids")}function s(){i.getPyramid(u.competitionId).then(function(e){e.data&&_.some(e.data.owners,["_id",o.currentUser._id])?(e.data.players=r("orderBy")(e.data.players,"position"),u.pyramid=e.data):t.go("pyramids.myPyramids")})}function c(){i.getPyramid(u.competitionId).then(function(e){var t=e.data;t.open=u.pyramid.open,i.updatePyramid(t)})}var u=this;u.competitionId=null,u.updatePyramidOpenStatus=c,l(),e.$on("ws:challenge_completed",function(e,t){u.competitionId===t.competitionId&&(a.info(t.description),s())}),e.$on("ws:player_added",function(e,t){u.competitionId===t.competitionId&&(a.info(t.description),s())}),e.$on("ws:player_removed",function(e,t){u.competitionId===t.competitionId&&(a.info(t.description),s())}),e.$on("ws:pyramid_updated",function(e,t){u.competitionId===t.competitionId&&(a.info(t.description),s())}),e.$on("ws:add_player_request",function(e,t){u.competitionId===t.competitionId&&(a.info(t.description),s())}),e.$on("ws:add_player_request_denied",function(e,t){u.competitionId===t.competitionId&&(a.info(t.description),s())})}e.$inject=["$scope","$state","$stateParams","$filter","pyramidsService","identityService","notifyService"],angular.module("app").controller("AdminCtrl",e)}(),function(){"use strict";function e(e,t,n,r){function i(){t.getAllUsers().then(function(e){d.availablePlayers=e.data});for(var e=0;e<u;e++)c.push(e*(e+1)/2+1)}function o(e){e.position=d.addedPlayers.length+1,d.addedPlayers.push(_.remove(d.availablePlayers,{_id:e._id})[0])}function a(e){d.availablePlayers.push(_.remove(d.addedPlayers,{_id:e._id})[0]),l()}function l(){var e=1;_.forEach(d.addedPlayers,function(t){t.position=e,++e})}function s(t){angular.forEach(d.addedPlayers,function(e){p+=1;var n={position:p,_id:e._id,email:e.username,firstName:e.firstName,lastName:e.lastName};t.players.push(n)}),t.owners=[{_id:r.currentUser._id,email:r.currentUser.username,firstName:r.currentUser.firstName,lastName:r.currentUser.lastName}];for(var i=0;i<c.length;i++)if(t.players.length<c[i]){t.levels=i;break}n.createPyramid(t).then(function(t){e.go("pyramids.view",{competitionId:t.data._id})})}var c=[],u=10,d=this;d.newPyramid={players:[],open:!1},d.availablePlayers=[],d.addedPlayers=[],d.createPyramid=s,d.addPlayer=o,d.removePlayer=a,d.reorderPlayers=l,d.newPyramid.forfeitDays=1,i();var p=0}e.$inject=["$state","userService","pyramidsService","identityService"],angular.module("app").controller("CreatePyramidCtrl",e)}(),function(){"use strict";function e(){function e(){}e()}angular.module("app").controller("MyPyramidsCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){t.competitionId&&(i.competitionId=t.competitionId,n.getPyramid(i.competitionId).then(function(t){t.data?i.pyramid=t.data:e.go("pyramids.myPyramids")}))}var i=this;i.competitionId=null,i.pyramid=null,r()}e.$inject=["$state","$stateParams","pyramidsService"],angular.module("app").controller("PyramidCtrl",e)}(),function(){"use strict";function e(){function e(){}e()}angular.module("app").controller("PyramidsCtrl",e)}(),function(){"use strict";function e(e,t,n,r,i){function o(){t.competitionId&&(l.competitionId=t.competitionId,a())}function a(){r.getPyramid(l.competitionId).then(function(e){e.data?l.pyramid=e.data:n.go("pyramids.myPyramids")})}var l=this;l.competitionId=null,l.pyramid=null,o(),e.$on("ws:challenge_completed",function(e,t){l.competitionId===t.competitionId&&(i.info(t.description),a())})}e.$inject=["$scope","$stateParams","$state","pyramidsService","notifyService"],angular.module("app").controller("StatsCtrl",e)}(),function(){"use strict";function e(e){function t(t,n,r){var i=r.scrollaxis||"y",o=r.theme||"minimal-dark",a=r.mousewheelaxis||"y";$("html").hasClass("ismobile")||e.malihuScroll(n,o,i,a)}var n={restrict:"C",link:t};return n}e.$inject=["scrollbarService"],angular.module("app").directive("cOverflow",e)}(),function(){"use strict";function e(){function e(e,t){t.click(function(){t.next().slideToggle(200),t.parent().toggleClass("toggled")})}var t={restrict:"A",link:e};return t}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,t){t.hasClass("btn-icon")||t.hasClass("btn-float")?Waves.attach(t,["waves-circle"]):t.hasClass("btn-light")?Waves.attach(t,["waves-light"]):Waves.attach(t),Waves.init()}var t={restrict:"C",link:e};return t}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,t){var n=t.children().first(),r=t.parent().hasClass("fg-float");n.focus(function(){t.addClass("fg-toggled")}),n.blur(function(){(!r||r&&0===n.val().length)&&t.removeClass("fg-toggled")})}var t={restrict:"C",link:e};return t}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
