angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","LocalStorageModule","angular-sortable-view","angular.vertilize"]),function(){"use strict ";function e(e,t,n){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache",t.options({appendToBody:!0}),n.errorOnUnhandledRejections(!1)}e.$inject=["$httpProvider","$uibTooltipProvider","$qProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e,t){function n(e){t.set("sidebarLocked",e)}var i=this;i.$state=e,i.lockSidebar=t.get("sidebarLocked"),i.toggleSidebarLocked=n}e.$inject=["$state","localStorageService"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,o,r){var a={superAdmin:n,admin:t,user:i};r.html5Mode(!0),o.otherwise("/"),o.when("/competitions/","/competitions"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("competitions",{url:"/competitions",views:{content:{controller:"CompetitionsCtrl",controllerAs:"vm",templateUrl:"competitions/views/competitions.html"}}}).state("competitions.myCompetitions",{url:"/my-competitions",views:{"content@":{controller:"MyCompetitionsCtrl",controllerAs:"vm",templateUrl:"competitions/views/my-competitions.html"}},resolve:{auth:a.user}}).state("competitions.view",{url:"/view/:competitionId",views:{"content@":{controller:"CompetitionCtrl",controllerAs:"vm",templateUrl:"competitions/views/competition.html"}}}).state("competitions.stats",{url:"/stats/:competitionId",views:{"content@":{controller:"CompetitionStatsCtrl",controllerAs:"vm",templateUrl:"competitions/views/competition-stats.html"}}}).state("competitions.admin",{url:"/admin/:competitionId",views:{"content@":{controller:"CompetitionAdminCtrl",controllerAs:"vm",templateUrl:"competitions/views/competition-admin.html"}},resolve:{auth:a.user}}).state("competitions.create",{url:"/create",views:{"content@":{controller:"CreateCompetitionCtrl",controllerAs:"vm",templateUrl:"competitions/views/create-competition.html"}},resolve:{auth:a.user}}).state("user",{url:"/user",views:{content:{controller:"UserCtrl",controllerAs:"vm",templateUrl:"users/views/user.html"}},resolve:{auth:a.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}}).state("verify",{url:"/verification",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("verification",{url:"/verification/:userId/:verificationToken",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("password-reset-request",{url:"/password-reset",views:{content:{controller:"PasswordResetCtrl",controllerAs:"vm",templateUrl:"authentication/views/password-reset.html"}}}).state("password-reset",{url:"/password-reset/:userId/:verificationToken",views:{content:{controller:"PasswordResetCtrl",controllerAs:"vm",templateUrl:"authentication/views/password-reset.html"}}})}function t(e){return e.authorizeCurrentUserForRoute("admin")}function n(e){return e.authorizeCurrentUserForRoute("super-admin")}function i(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),t.$inject=["authService"],n.$inject=["authService"],i.$inject=["authService"]}(),function(){"use strict";function e(e,t,n){e.$on("$stateChangeError",function(e,n,i,o,r,a){"not authorized"===a&&(t.go("login"),t.previous=n,t.prevParams=i)}),e.$on("$stateChangeStart",function(){n.setSidebarStatus(!1)})}e.$inject=["$rootScope","$state","sidebarService"],angular.module("app").run(e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"/challenges/components/active-challenges.html"};return e}function t(e,t){function n(){e.$watch("vm.competition",function(){o.competition&&i()})}function i(){o.challenges=[],t.getActiveChallengesByCompetition(o.competition._id).then(function(e){e.data.length>0&&(o.challenges=e.data,_.forEach(o.challenges,function(e){"versus"===e.type&&(e.challenger.displayName="Team "+e.challenger.team,e.opponent.displayName="Team "+e.opponent.team),0!==e.timeLimit&&(e.expires=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1)}))})}var o=this;o.challenges=[],n()}t.$inject=["$scope","challengesService"],angular.module("app").directive("wpmActiveChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@",allowDelete:"=",challenges:"="},templateUrl:"/challenges/components/completed-challenges.html"};return e}function t(e,t,n){function i(){e.$watch("vm.challenges",function(){a.challenges&&a.challenges.length>0&&o()})}function o(){_.forEach(a.challenges,function(e){e.loser="challenger"===e.winner?"opponent":"challenger","versus"===e.type&&(e.challenger.displayName="Team "+e.challenger.team,e.opponent.displayName="Team "+e.opponent.team),e.whenCompleted=moment(e.completed).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd",sameElse:"DD/MM/YYYY"})})}function r(e,t){n.deleteChallenge(a.competitionId,e).then(function(){a.challenges.splice(t,1)})}var a=this;a.challenges=[],a.deleteChallenge=r,i()}t.$inject=["$scope","$state","challengesService"],angular.module("app").directive("wpmCompletedChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{player:"="},templateUrl:"/challenges/components/player-overall-results.html"};return e}function t(e){function t(){e.$watch("vm.player.results",function(){r.player&&(n(r.player),i(r.player),o(r.player))})}function n(e){for(var t=[],n=0;n<r.maxLevels;n++)t.push(n*(n+1)/2+1);e.level=t.length;for(var i=0;i<t.length;i++)if(e.position<t[i+1]){e.level=t.indexOf(t[i])+1;break}}function i(e){var t,n=0,i=!0;_.forEach(e.results,function(o){i&&("challenger"===o.winner&&o.challenger._id===e._id||"opponent"===o.winner&&o.opponent._id===e._id?"losing"!==t?(n+=1,t="winning"):i=!1:("opponent"===o.winner&&o.challenger._id===e._id||"challenger"===o.winner&&o.opponent._id===e._id)&&("winning"!==t?(n+=1,t="losing"):i=!1)),r.streak={type:t,value:n}})}function o(e){r.wins.asOpponent=_.size(_.filter(e.results,function(t){return t.opponent._id===e._id&&"opponent"===t.winner})),r.wins.asChallenger=_.size(_.filter(e.results,function(t){return t.challenger._id===e._id&&"challenger"===t.winner})),r.wins.total=r.wins.asChallenger+r.wins.asOpponent,r.wins.byForfeit=_.size(_.filter(e.results,function(t){return t.forfeit&&(t.challenger._id===e._id&&"challenger"===t.winner||t.opponent._id===e._id&&"opponent"===t.winner)})),r.loses.asOpponent=_.size(_.filter(e.results,function(t){return t.opponent._id===e._id&&"challenger"===t.winner})),r.loses.asChallenger=_.size(_.filter(e.results,function(t){return t.challenger._id===e._id&&"opponent"===t.winner})),r.loses.total=r.loses.asChallenger+r.loses.asOpponent,r.loses.byForfeit=_.size(_.filter(e.results,function(t){return t.forfeit&&(t.challenger._id===e._id&&"opponent"===t.winner||t.opponent._id===e._id&&"challenger"===t.winner)}))}var r=this;r.maxLevels=7,r.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},r.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},r.streak={type:null,value:0},t()}t.$inject=["$scope"],angular.module("app").directive("wpmPlayerOverallResults",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{team:"=",challenges:"="},templateUrl:"/challenges/components/team-overall-results.html"};return e}function t(e){function t(){e.$watch("vm.challenges",function(){o.challenges&&o.challenges.length>0&&(n(o.team,o.challenges),i(o.team,o.challenges))})}function n(e,t){var n,i=0,r=!0;_.forEach(t,function(t){r&&("challenger"===t.winner&&t.challenger.team===e||"opponent"===t.winner&&t.opponent.team===e?"losing"!==n?(i+=1,n="winning"):r=!1:("opponent"===t.winner&&t.challenger.team===e||"challenger"===t.winner&&t.opponent.team===e)&&("winning"!==n?(i+=1,n="losing"):r=!1)),o.streak={type:n,value:i}})}function i(e,t){o.wins.asOpponent=_.size(_.filter(t,function(t){return t.opponent.team===e&&"opponent"===t.winner})),o.wins.asChallenger=_.size(_.filter(t,function(t){return t.challenger.team===e&&"challenger"===t.winner})),o.wins.total=o.wins.asChallenger+o.wins.asOpponent,o.wins.byForfeit=_.size(_.filter(t,function(t){return t.forfeit&&(t.challenger.team===e&&"challenger"===t.winner||t.opponent.team===e&&"opponent"===t.winner)})),o.loses.asOpponent=_.size(_.filter(t,function(t){return t.opponent.team===e&&"challenger"===t.winner})),o.loses.asChallenger=_.size(_.filter(t,function(t){return t.challenger.team===e&&"opponent"===t.winner})),o.loses.total=o.loses.asChallenger+o.loses.asOpponent,o.loses.byForfeit=_.size(_.filter(t,function(t){return t.forfeit&&(t.challenger.team===e&&"opponent"===t.winner||t.opponent.team===e&&"challenger"===t.winner)}))}var o=this;o.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},o.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},o.streak={type:null,value:0},t()}t.$inject=["$scope"],angular.module("app").directive("wpmTeamOverallResults",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/footer.html"};return e}function t(e,t){function n(){t.logout()}var i=this;i.indentity=e,i.logout=n}t.$inject=["identityService","authService"],angular.module("app").directive("wpmFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"headerCtrl",restrict:"A",templateUrl:"/common/components/header.html"};return e}function t(e,t,n,i,o){function r(){a(),e.$watch("headerCtrl.indentity.currentUser",function(){n.isAuthenticated()&&a()})}function a(){p.alerts=[],n.isAuthenticated()&&o.getActiveAlertsByPlayer(n.currentUser._id).then(function(e){p.alerts=e.data})}function s(e,t){o.clearAlert(e).then(function(){p.alerts.splice(t,1)})}function l(){o.clearAllAlertsByPlayer(n.currentUser._id).then(function(){p.alerts=[]})}function c(){t.setSidebarStatus(!p.sidebarStatus.left)}function u(){i.logout()}var p=this;p.indentity=n,p.logout=u,p.sidebarStatus=t.getSidebarStatus(),p.toggleSidebar=c,p.clearAlert=s,p.clearAllAlerts=l,p.alerts=[],r(),e.$on("ws:update_alerts",function(e,t){n.isAuthenticated()&&_.some(t,["userId",n.currentUser._id])&&a()})}t.$inject=["$scope","sidebarService","identityService","authService","alertsService"],angular.module("app").directive("wpmHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"/common/components/sidebar.html"};return e}function t(e,t,n){function i(){t.logout()}var o=this;o.indentity=e,o.logout=i,o.sidebarStatus=n.getSidebarStatus()}t.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("wpmSidebar",e)}(),function(){"use strict";function e(){return function(e,t){if(!angular.isObject(e))return e;var n=[];for(var i in e)n.push(e[i]);return n.sort(function(e,n){return e=parseInt(e[t]),n=parseInt(n[t]),e-n}),n}}angular.module("app").filter("orderObjectBy",e)}(),function(){"use strict";function e(e){function t(t){return e.post("/api/challenges/pyramid/create",{challenge:t})}function n(t){return e.post("/api/challenges/versus/create",{challenge:t})}function i(t){return e.post("/api/challenges/pyramid/complete",{challenge:t})}function o(t){return e.post("/api/challenges/versus/complete",{challenge:t})}function r(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function a(t){return e.get("/api/challenges/active/competition",{params:{competitionId:t}})}function s(t,n){return e.get("/api/challenges/active/competition/player",{params:{competitionId:t,playerId:n}})}function l(t,n){return e.get("/api/challenges/completed/competition",{params:{competitionId:t,limit:n}})}function c(t,n){return e.delete("/api/challenges/active/competition/player/delete",{params:{competitionId:t,playerId:n}})}function u(t,n){return e.delete("/api/challenges/delete",{params:{competitionId:t,challengeId:n}})}function p(t,n){return e.get("/api/challenges/results/competition/player",{params:{competitionId:t,playerId:n}})}var m={createPyramidChallenge:t,createVersusChallenge:n,completePyramidChallenge:i,completeVersusChallenge:o,getChallengesByCompetition:r,getActiveChallengesByCompetition:a,getActiveChallengeByCompetitionByPlayer:s,getCompletedChallengesByCompetition:l,deleteActiveChallengeByCompetitionByPlayer:c,deleteChallenge:u,getPlayerResultsByCompetition:p};return m}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/alerts/",{params:{userId:t}})}function n(t){return e.put("/api/alert/clear",{alertId:t})}function i(t){return e.put("/api/alerts/clear",{userId:t})}var o={getActiveAlertsByPlayer:t,clearAlert:n,clearAllAlertsByPlayer:i};return o}e.$inject=["$http"],angular.module("app").factory("alertsService",e)}(),function(){"use strict";function e(e){function t(){return!!this.currentUser}function n(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var i;null!==e.bootstrappedUserObject&&(i=e.bootstrappedUserObject);var o={currentUser:i,isAuthenticated:t,isAuthorized:n};return o}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,t,n){$.notify({message:e,url:t,target:n},{type:"info"})}function t(e,t,n){$.notify({message:e,url:t,target:n},{type:"success"})}function n(e,t,n){$.notify({message:e,url:t,target:n},{type:"warning"})}function i(e,t,n){$.notify({message:e,url:t,target:n},{type:"danger"})}function o(e,t,n){$.notify({message:e,url:t,target:n},{type:"inverse"})}var r={info:e,success:t,warning:n,error:i,inverse:o};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85},delay:5e3}),r}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(e,t,n,i){$(e).mCustomScrollbar({theme:t,scrollInertia:100,axis:n,mouseWheel:{enable:!0,axis:i,preventDefault:!0}})}var t={malihuScroll:e};return t}angular.module("app").factory("scrollbarService",e)}(),function(){"use strict";function e(){function e(){return n}function t(e){n.left=e}var n={left:!1,right:!1},i={getSidebarStatus:e,setSidebarStatus:t};return i}angular.module("app").factory("sidebarService",e)}(),function(){"use strict";function e(e,t,n){function i(){return"https:"===t.location.protocol?"wss://"+t.location.host:"ws://"+t.location.host}function o(){a=new WebSocket(i()),a.onmessage=function(t){l=0;var n=JSON.parse(t.data);e.$broadcast("ws:"+n.topic,n.data)},a.onclose=function(){l<s.length?(console.log("WebSocket closed. Reconnecting..."),n(o,1e3*s[l]),l+=1):console.log("Giving up on WebSocket")}}function r(e,t){var n=JSON.stringify({topic:e,data:t});a.send(n)}var a,s=[3,10,100,1e3],l=0,c={connect:o,send:r};return c}e.$inject=["$rootScope","$window","$timeout"],angular.module("app").factory("websocketService",e).run(["websocketService",function(e){e.connect()}])}(),function(){"use strict";function e(e,t,n,i,o,r){function a(e,i){var r=n.defer();return t.post("/login",{username:e,password:i}).then(function(e){e.data.success?(o.currentUser=e.data.user,r.resolve(!0)):"unverified"===e.data.message?r.resolve("unverified"):r.resolve(!1)}),r.promise}function s(e){var i=n.defer();return t.post("/api/users",{userData:e}).then(function(e){e.data?i.resolve(!0):i.resolve(!1)},function(e){"Error: Email already in use"===e.data.reason&&r.error("Sorry, an account already exists with that email address.")}),i.promise}function l(){var i=n.defer();return t.post("/logout",{logout:!0}).then(function(){o.currentUser=void 0,i.resolve(),e.go("home")}),i.promise}function c(e){return!!o.isAuthorized(e)||n.reject("not authorized")}function u(){return!!o.isAuthenticated()||n.reject("not authorized")}var p={authenticateUser:a,createUser:s,logout:l,authorizeCurrentUserForRoute:c,authenticatedUserForRoute:u};return p}e.$inject=["$state","$http","$q","userService","identityService","notifyService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e){function t(){return e.get("/api/users").then(function(e){return _.forEach(e.data,function(e){e.displayName||(e.displayName=e.firstName+" "+e.lastName)}),e.data=_.sortBy(e.data,"displayName"),e})}function n(t,n){return e.get("/api/user/verification",{params:{userId:t,verificationToken:n}})}function i(t){return e.get("/api/user/password/link",{params:{username:t}})}function o(t,n,i){return e.put("/api/user/password/reset",{userId:t,verificationToken:n,password:i})}function r(t){return e.put("/api/user",{user:t})}var a={getAllUsers:t,verifyUser:n,generatePasswordResetLink:i,resetPassword:o,updateUser:r};return a}e.$inject=["$http"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(e,t,n){function i(){}function o(i,o){t.authenticateUser(i,o).then(function(t){t?"unverified"===t?n.error("You must verify your email before you can login"):e.previous?(e.go(e.previous,e.prevParams),e.previous=null,e.prevParams=null):e.go("competitions.myCompetitions"):n.error("Username / password combinaiton incorrect")})}var r=this;r.login=o,i()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o,r){function a(){r.isAuthenticated()?e.go("home"):t.userId&&t.verificationToken&&n.verifyUser(t.userId,t.verificationToken).then(function(e){e.data&&(c.verified=!0)})}function s(t){n.generatePasswordResetLink(t).then(function(t){t.data?(i.success("Please check your email for a password reset link"),e.go("home")):i.error("Could not find that email address")})}function l(r){r.password!==r.confirmPassword?i.error("Passwords don't match!"):n.resetPassword(t.userId,t.verificationToken,r.password).then(function(t){t.data&&o.authenticateUser(t.data.username,r.password).then(function(t){e.go("home")})})}var c=this;c.username="",c.verified=!1,c.resetPasswordForm={},c.generatePasswordResetLink=s,c.resetPassword=l,a()}e.$inject=["$state","$stateParams","userService","notifyService","authService","identityService"],angular.module("app").controller("PasswordResetCtrl",e)}(),function(){"use strict";function e(e,t,n){function i(){}function o(i){i.password!==i.confirmPassword?n.error("Passwords don't match!"):(i.displayName||(i.displayName=i.firstName+" "+i.lastName),t.createUser(i).then(function(){e.go("verify")}))}var r=this;r.register=o,i()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(e,t,n){function i(){t.userId&&t.verificationToken&&(o.verifying=!0,o.verified=null,n.verifyUser(t.userId,t.verificationToken).then(function(e){e.data?o.verified=!0:o.verified=!1}))}var o=this;o.verified=void 0,o.verifying=!1,i()}e.$inject=["$state","$stateParams","userService"],angular.module("app").controller("VerificationCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"/competitions/components/competition-compact.html"};return e}function t(){function e(){}e()}angular.module("app").directive("wpmCompetitionCompact",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"/competitions/components/pending-players.html"};return e}function t(e){function t(){}function n(t){t.position=o.competition.players.length+1,e.approvePendingPlayer(o.competition._id,t)}function i(t){e.denyPendingPlayer(o.competition._id,t)}var o=this;o.pendingPlayers=[],o.approvePendingPlayer=n,o.denyPendingPlayer=i,t()}t.$inject=["competitionsService"],angular.module("app").directive("wpmPendingPlayers",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/competitions/components/pyramid.html",replace:!0,scope:{competition:"="},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,n,i,o,r,a){function s(){for(var t=U;t>0;--t)A.maxPlayers+=t;e.$watch("vm.competition",function(){A.competition&&(A.competitionId=A.competition._id,l(),c(),p(),m(),d())})}function l(){A.competition.players=i("orderBy")(A.competition.players,"position")}function c(){A.currentUserIsAdmin=!1,A.currentUserIsPending=!1,r.isAuthenticated()&&(A.currentUserIsAdmin=_.some(A.competition.admins,["_id",r.currentUser._id]),A.currentUserIsPending=_.some(A.competition.pendingPlayers,["_id",r.currentUser._id])),A.currentUserIsOnCompetition=!1,A.hasActiveChallenge=!1,_.forEach(A.competition.players,function(e){r.isAuthenticated()&&e._id===r.currentUser._id&&(A.currentUserIsOnCompetition=!0,e.class="current-user",A.currentUserPlayer=e,a.getActiveChallengeByCompetitionByPlayer(A.competitionId,e._id).then(function(t){if(t.data){A.hasActiveChallenge=!0,A.activeChallengeOpponent=t.data.challenger._id===e._id?t.data.opponent:t.data.challenger;var n=_.find(A.competition.players,{_id:A.activeChallengeOpponent._id});n.class=n.class?n.class+" current-opponent":"current-opponent"}else f()}))}),a.getActiveChallengesByCompetition(A.competitionId).then(function(e){_.forEach(e.data,function(e){var t=_.find(A.competition.players,{_id:e.challenger._id});"available"===t.class&&(t.class=""),t.class=t.class?t.class+" unavailable":"unavailable",t.available=!1,t.challenge={position:"challenger"};var n=_.find(A.competition.players,{_id:e.opponent._id});if("available"===n.class&&(n.class=""),n.class=n.class?n.class+" unavailable":"unavailable",n.available=!1,n.challenge={position:"opponent"},0!==e.timeLimit){var i=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1;i>0?n.challenge.expires=i:i<=0&&v(null,!0,n)}})})}function u(){A.breakPoints=[];for(var e=0;e<U;e++)A.breakPoints.push(e*(e+1)/2+1)}function p(){var e=0;A.levels=[],u();for(var t=0;t<A.competition.players.length;t++)A.breakPoints.indexOf(t+1)>-1&&(e+=1,A.levels.push(e)),A.competition.players[t].level=e}function m(){A.numberOfBlocks=0;for(var e=_.last(A.levels);e>0;e--)A.numberOfBlocks+=e}function d(){A.numberOfRealPlayers=A.competition.players.length;for(var e=A.competition.players.length;e<A.numberOfBlocks;e++)A.competition.players.push({firstName:"Empty",lastName:"Spot",displayName:"Empty Spot",position:99,class:A.currentUserIsOnCompetition?"empty":"joinable empty"});p()}function f(){if(A.currentUserIsOnCompetition&&!A.hasActiveChallenge){var e=A.currentUserPlayer.level>1?A.currentUserPlayer.level-1:null;_.forEach(A.competition.players,function(t){t.level===e&&99!==t.position&&"unavailable"!==t.class&&t.available!==!1&&(A.availableChallenges=!0,t.available=!0,t.class="available")})}}function h(e){if(e.available){A.hasActiveChallenge=!0;var t={type:A.competition.type,competitionName:A.competition.name,competitionId:A.competitionId,complete:!1,forfeit:!1,timeLimit:A.competition.forfeitDays,challenger:{_id:A.currentUserPlayer._id,email:A.currentUserPlayer.email,firstName:A.currentUserPlayer.firstName,lastName:A.currentUserPlayer.lastName,displayName:A.currentUserPlayer.displayName,position:A.currentUserPlayer.position},opponent:{_id:e._id,email:e.email,firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,position:e.position}};a.createPyramidChallenge(t).then(function(){A.competitionMenuToggle=!1})}else o.error("Sorry, that is not a valid challenge.")}function v(e,t,i){var o=i||A.currentUserPlayer;a.getActiveChallengeByCompetitionByPlayer(A.competitionId,o._id).then(function(o){A.hasActiveChallenge=!1;var r=!1;t?(o.data.forfeit=!0,"opponent"===i.challenge.position?(o.data.winner="challenger",r=!0):o.data.winner="opponent"):e?o.data.challenger._id===A.currentUserPlayer._id?(o.data.winner="challenger",r=!0):o.data.winner="opponent":o.data.challenger._id===A.currentUserPlayer._id?o.data.winner="opponent":(o.data.winner="challenger",r=!0),r?n.swapPositions(A.competitionId,o.data.opponent,o.data.challenger).then(function(){a.completePyramidChallenge(o.data).then(function(){S&&w()})}):a.completePyramidChallenge(o.data).then(function(){S&&w()}),A.competitionMenuToggle=!1})}function g(e){v(null,!0,e)}function y(){if(r.isAuthenticated())if(A.numberOfRealPlayers<A.maxPlayers){var e={_id:r.currentUser._id,firstName:r.currentUser.firstName,lastName:r.currentUser.lastName,displayName:r.currentUser.displayName,email:r.currentUser.username,position:A.numberOfRealPlayers+1};A.competition.restrictJoins?swal({title:"Send Join Request?",text:"This is a closed competition so an admin must approve your request",type:"warning",showCancelButton:!0,confirmButtonText:"Send Request",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToCompetitionRequest(A.competition,e).then(function(){A.currentUserIsPending=!0}),swal("Request Sent","You will receive an email once an admin processes the request.","success")}):swal({title:"Join Competition?",text:"You'll be added to the bottom",type:"warning",showCancelButton:!0,confirmButtonText:"Join",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToCompetition(A.competitionId,e),swal("Welcome Aboard!","Now start fighting your way to the top","success")})}else o.warning("Sorry, this competition is full");else o.warning("Please login to join a competition"),t.previous="competitions.view",t.prevParams={competitionId:A.competitionId},t.go("login")}function C(){swal({title:"Leave Competition?",text:"You will lose your spot and forfeit any active challenges.",type:"error",showCancelButton:!0,confirmButtonText:"Yes, leave",confirmButtonClass:"btn-danger",cancelButtonText:"No, stay",closeOnConfirm:!1,closeOnCancel:!0},function(){w(),swal("OK, you'r out!","You've been removed from the competition.","success")})}function w(){r.isAuthenticated()&&A.currentUserIsOnCompetition&&(S=!0,A.hasActiveChallenge?v(null,!0,A.currentUserPlayer):(A.currentUserIsOnCompetition=!1,A.hasActiveChallenge=!1,n.getCompetition(A.competitionId).then(function(e){var t=e.data,i=A.currentUserPlayer.position;_.forEach(t.players,function(e){e.position>=i&&(e.position-=1)});for(var o=_.remove(t.players,function(e){return e._id===A.currentUserPlayer._id}),r=[],a=0;a<A.numberOfRealPlayers-1;++a){var s={_id:t.players[a]._id,firstName:t.players[a].firstName,lastName:t.players[a].lastName,displayName:t.players[a].displayName,position:t.players[a].position};r.push(s)}n.removedPlayerFromCompetition(A.competitionId,o[0],r).then(function(){S=!1})})))}function P(e){99!==e.position||A.currentUserIsOnCompetition?e.showChallengeModal=!e.showChallengeModal:y()}function b(){n.getCompetition(A.competitionId).then(function(e){A.competition=e.data})}var U=7,A=this;A.competitionId=null,A.breakPoints=[],A.levels=[],A.numberOfBlocks=0,A.currentUserIsOnCompetition=!1,A.currentUserIsPending=!1,A.currentUserIsAdmin=!1,A.hasActiveChallenge=!1,A.activeChallengeOpponent=null,A.availableChallenges=!1,A.createChallenge=h,A.completeChallenge=v,A.challengeExpired=g,A.currentUserPlayer={},A.competitionMenuToggle=!1,A.addCurrentUserToCompetition=y,A.confirmRemoveCurrentUserFromCompetition=C,A.playerClick=P,A.numberOfRealPlayers=0,A.maxPlayers=0,s();var S=!1;e.$on("ws:competition_updated",function(e,t){A.competitionId===t.competitionId&&(o.info(t.description),b())})}t.$inject=["$scope","$state","competitionsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("wpmPyramid",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"/competitions/components/update-admins.html"};return e}function t(e,t,n,i,o){function r(){e.$watch("vm.competition",function(){d.competition&&(d.addedAdmins=_.cloneDeep(d.competition.admins),d.disableSubmit=!0,d.userIsPrimaryAdmin=_.find(d.competition.admins,{primary:!0})._id===o.currentUser._id,a())})}function a(){d.availableAdmins=[],p=[],i.getAllUsers().then(function(e){_.forEach(d.competition.admins,function(t){_.remove(e.data,function(e){return t._id===e._id})}),_.forEach(e.data,function(e){d.availableAdmins.push({firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,email:e.username,_id:e._id})}),m=_.cloneDeep(d.availableAdmins)})}function s(){d.competition.admins=d.addedAdmins,t.updateCompetition(d.competition).then(function(){d.disableSubmit=!0})}function l(){p=[],d.addedAdmins=_.cloneDeep(d.competition.admins),d.availableAdmins=_.cloneDeep(m)}function c(e){p.push(e),d.availableAdmins.push(_.remove(d.addedAdmins,{_id:e._id})[0]),d.disableSubmit=!1}function u(e){d.addedAdmins.push(_.remove(d.availableAdmins,{_id:e._id})[0]),d.disableSubmit=!1}var p=[],m=[],d=this;d.availableAdmins=[],d.addedAdmins=[],d.userIsPrimaryAdmin=!1,d.updateCompetition=s,d.cancelUpdate=l,d.removeAdmin=c,d.addAdmin=u,d.disableSubmit=!0,r()}t.$inject=["$scope","competitionsService","challengesService","userService","identityService"],angular.module("app").directive("wpmUpdateAdmins",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"/competitions/components/update-players.html"};return e}function t(e,t,n,i,o,r){function a(){for(var t=g;t>0;--t)y+=t;e.$watch("vm.competition",function(){C.competition&&(C.addedPlayers=_.cloneDeep(C.competition.players),C.disableSubmit=!0,s())})}function s(){C.availablePlayers=[],h=[],o.getAllUsers().then(function(e){_.forEach(C.competition.players,function(t){_.remove(e.data,function(e){return t._id===e._id})}),_.forEach(e.data,function(e){C.availablePlayers.push({firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,email:e.username,_id:e._id})}),v=_.cloneDeep(C.availablePlayers)})}function l(){"versus"===C.competition.type&&C.addedPlayers.length%2>0?r.error("A Versus competition must have an even number of players"):C.addedPlayers.length>y?r.error("A competition can have a maximum of "+y+" players"):(_.forEach(h,function(e){i.deleteActiveChallengeByCompetitionByPlayer(C.competition._id,e._id)}),C.competition.players=C.addedPlayers,n.updateCompetition(C.competition).then(function(){C.disableSubmit=!0}))}function c(){h=[],C.addedPlayers=_.cloneDeep(C.competition.players),C.availablePlayers=_.cloneDeep(v)}function u(){"versus"===C.competition.type?m():"pyramid"===C.competition.type&&p(),C.disableSubmit=!1}function p(){var e=1;_.forEach(C.addedPlayers,function(t){t.position=e,++e})}function m(){_.forEach(C.addedPlayers,function(e){e.position=2});for(var e=0;e<C.addedPlayers.length/2;e++)C.addedPlayers[e].position=1}function d(e){h.push(e),C.availablePlayers.push(_.remove(C.addedPlayers,{_id:e._id})[0]),u()}function f(e){C.addedPlayers.push(_.remove(C.availablePlayers,{_id:e._id})[0]),u(),C.disableSubmit=!1}var h=[],v=[],g=7,y=null,C=this;C.availablePlayers=[],C.addedPlayers=[],C.updateCompetition=l,C.cancelUpdate=c,C.reorderPlayers=u,C.removePlayer=d,C.addPlayer=f,C.disableSubmit=!0,a()}t.$inject=["$scope","$filter","competitionsService","challengesService","userService","notifyService"],angular.module("app").directive("wpmUpdatePlayers",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/competitions/components/versus.html",
replace:!0,scope:{competition:"="},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,n,i,o){function r(){e.$watch("vm.competition",function(){m.competition&&(m.competitionId=m.competition._id,m.showControls=!1,m.showChallengeModal=!1,a(),s())})}function a(){m.competition.teams=[{players:_.filter(m.competition.players,["position",1])},{players:_.filter(m.competition.players,["position",2])}]}function s(){m.currentUserIsAdmin=!1,m.currentUserIsPending=!1,n.isAuthenticated()&&(m.currentUserIsAdmin=_.some(m.competition.admins,["_id",n.currentUser._id]),m.currentUserIsPending=_.some(m.competition.pendingPlayers,["_id",n.currentUser._id])),m.currentUserIsOnCompetition=!1,m.hasActiveChallenge=!1,_.forEach(m.competition.players,function(e){n.isAuthenticated()&&e._id===n.currentUser._id&&(m.currentUserIsOnCompetition=!0,e.class="current-user",m.currentUserPlayer=e,m.competition.teams[e.position-1].class="current-user-team",m.competition.class="current-user-on-competition")}),i.getActiveChallengesByCompetition(m.competitionId).then(function(e){if(e.data.length>0&&(m.activeChallenge=e.data[0],m.hasActiveChallenge=!0,0!==m.activeChallenge.timeLimit)){var t=moment().diff(moment(m.activeChallenge.created).add(m.activeChallenge.timeLimit,"d"),"s")*-1;t>0?m.challengeExpireTime=t:t<=0&&u(null,!0)}})}function l(){m.hasActiveChallenge&&m.currentUserIsOnCompetition&&(m.showControls=!m.showControls)}function c(e){if(m.showChallengeModal=!1,m.hasActiveChallenge)o.error("Sorry, you are already in an active challenge.");else{m.hasActiveChallenge=!0;var t={type:m.competition.type,competitionName:m.competition.name,competitionId:m.competitionId,complete:!1,forfeit:!1,timeLimit:m.competition.forfeitDays,challenger:{team:m.currentUserPlayer.position,_id:m.currentUserPlayer._id},opponent:{team:e}};i.createVersusChallenge(t).then(function(){m.competitionMenuToggle=!1})}}function u(e,t){m.hasActiveChallenge=!1;var n=m.activeChallenge;t?(n.forfeit=!0,n.winner="challenger"):m.activeChallenge.challenger.team===e?n.winner="challenger":n.winner="opponent",i.completeVersusChallenge(n),m.competitionMenuToggle=!1}function p(){t.getCompetition(m.competitionId).then(function(e){m.competition=e.data})}var m=this;m.competitionId=null,m.currentUserIsAdmin=!1,m.currentUserIsPending=!1,m.currentUserIsOnCompetition=!1,m.activeChallenge=null,m.hasActiveChallenge=!1,m.currentUserPlayer=null,m.createChallenge=c,m.completeChallenge=u,m.challengeExpireTime=null,m.showControls=!1,m.showChallengeModal=!1,m.toggleControls=l,r(),e.$on("ws:competition_updated",function(e,t){m.competitionId===t.competitionId&&(o.info(t.description),p())})}t.$inject=["$scope","competitionsService","identityService","challengesService","notifyService"],angular.module("app").directive("wpmVersus",e)}(),function(){"use strict";function e(e,t,n){function i(){e.currentUser.displayName||(r.user.displayName=e.currentUser.firstName+" "+e.currentUser.lastName)}function o(i){if(i.password!==i.confirmPassword)n.error("Passwords don't match!");else if(i.firstName.length<1||i.lastName.length<1||i.displayName.length<1)n.error("Don't leave names blank!  How will people know who you are?");else{var o={_id:i._id};(i.firstName!==e.currentUser.firstName&&i.firstName.length>0||i.lastName!==e.currentUser.lastName&&i.lastName.length>0||i.displayName!==e.currentUser.displayName&&i.displayName.length>0)&&(o.firstName=i.firstName,o.lastName=i.lastName,o.displayName=i.displayName),i.password&&i.password.lentgh>0&&(o.password=i.password),t.updateUser(o).then(function(){n.success("Your information has been updated"),r.userForm.$setPristine();var t=angular.copy(e.currentUser);angular.extend(t,o),e.currentUser=t,r.user.confirmPassword=r.user.password=""})}}var r=this;r.user={_id:e.currentUser._id,firstName:e.currentUser.firstName,lastName:e.currentUser.lastName,displayName:e.currentUser.displayName},r.updateUser=o,r.userForm={},i()}e.$inject=["identityService","userService","notifyService"],angular.module("app").controller("UserCtrl",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/competition",{params:{competitionId:t}})}function n(t){return e.get("/api/competitions/user",{params:{userId:t}})}function i(){return e.get("/api/competitions/public")}function o(){return e.get("/api/competitions/private")}function r(t){return e.post("/api/competitions/create",{competition:t})}function a(t){return e.post("/api/competitions/update",{competition:t})}function s(t){return e.delete("/api/competitions/delete",{params:{competitionId:t}})}function l(t,n,i){return e.post("/api/competitions/swapPositions",{competitionId:t,challenger:n,opponent:i})}function c(t,n){return e.post("/api/competitions/addPlayer",{competitionId:t,player:n})}function u(t,n){return e.post("/api/competitions/addPlayerRequest",{competition:t,player:n})}function p(t,n,i){return e.post("/api/competitions/removePlayer",{competitionId:t,removedPlayer:n,players:i})}function m(t,n){return e.post("/api/competitions/approvePlayer",{competitionId:t,player:n})}function d(t,n){return e.post("/api/competitions/denyPlayer",{competitionId:t,player:n})}var f={getCompetition:t,getCompetitionsForUser:n,getPublicCompetitions:i,getPrivateCompetitions:o,createCompetition:r,updateCompetition:a,deleteCompetition:s,swapPositions:l,addPlayerToCompetition:c,addPlayerToCompetitionRequest:u,removedPlayerFromCompetition:p,approvePendingPlayer:m,denyPendingPlayer:d};return f}e.$inject=["$http"],angular.module("app").factory("competitionsService",e)}(),function(){"use strict";function e(e,t){function n(){e.getPublicCompetitions().then(function(e){i.publicCompetitions=e.data}),t.isAuthorized("super-admin")&&e.getPrivateCompetitions().then(function(e){i.privateCompetitions=e.data})}var i=this;i.publicCompetitions=[],i.privateCompetitions=[],n()}e.$inject=["competitionsService","identityService"],angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o,r,a,s){function l(){n.competitionId?(d.competitionId=n.competitionId,c()):t.go("competitions.myCompetitions")}function c(){o.getCompetition(d.competitionId).then(function(e){e.data&&_.some(e.data.admins,["_id",r.currentUser._id])?(d.isAdmin=!0,e.data.players=i("orderBy")(e.data.players,"position"),d.competition=e.data):t.go("competitions.myCompetitions")}),s.getCompletedChallengesByCompetition(d.competitionId).then(function(e){d.challenges=e.data})}function u(){o.getCompetition(d.competitionId).then(function(e){var t=e.data;t.restrictJoins=d.competition.restrictJoins,o.updateCompetition(t)})}function p(){o.getCompetition(d.competitionId).then(function(e){var t=e.data;t.private=d.competition.private,o.updateCompetition(t)})}function m(){swal({title:"Delete Competition?",text:"This can not be undone",type:"error",showCancelButton:!0,confirmButtonText:"Delete",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){o.deleteCompetition(d.competitionId).then(function(){t.go("competitions.myCompetitions")})})}var d=this;d.competitionId=null,d.updateCompetitionRestrictJoins=u,d.updateCompetitionPrivate=p,d.deleteCompetition=m,l(),e.$on("ws:competition_updated",function(e,t){d.competitionId===t.competitionId&&(a.info(t.description),c())}),e.$on("ws:competition_deleted",function(e,n){d.competitionId===n.competitionId&&(a.info(n.description),t.go("competitions.myCompetitions"))})}e.$inject=["$scope","$state","$stateParams","$filter","competitionsService","identityService","notifyService","challengesService"],angular.module("app").controller("CompetitionAdminCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o,r){function a(){t.competitionId&&(l.competitionId=t.competitionId,s())}function s(){i.getCompetition(l.competitionId).then(function(e){e.data?(l.competition=e.data,"pyramid"===l.competition.type?_.forEach(l.competition.players,function(e){r.getPlayerResultsByCompetition(l.competitionId,e._id).then(function(t){e.results=t.data})}):"versus"===l.competition.type&&(l.teams=[{number:1},{number:2}])):n.go("competitions.myCompetitions")}),r.getCompletedChallengesByCompetition(l.competitionId).then(function(e){l.challenges=e.data})}var l=this;l.competitionId=null,l.competition={},l.playersResults=[],l.challenges=[],a(),e.$on("ws:competition_updated",function(e,t){l.competitionId===t.competitionId&&(o.info(t.description),s())}),e.$on("ws:competition_deleted",function(e,t){l.competitionId===t.competitionId&&(o.info(t.description),n.go("competitions.myCompetitions"))})}e.$inject=["$scope","$stateParams","$state","competitionsService","notifyService","challengesService"],angular.module("app").controller("CompetitionStatsCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o){function r(){n.competitionId&&(a.competitionId=n.competitionId,i.getCompetition(a.competitionId).then(function(e){e.data?a.competition=e.data:t.go("competitions.myCompetitions")}))}var a=this;a.competitionId=null,a.competition=null,r(),e.$on("ws:competition_deleted",function(e,n){a.competitionId===n.competitionId&&(o.info(n.description),t.go("competitions.myCompetitions"))})}e.$inject=["$scope","$state","$stateParams","competitionsService","notifyService"],angular.module("app").controller("CompetitionCtrl",e)}(),function(){"use strict";function e(e){function t(){e.getPublicCompetitions().then(function(e){n.competitions=e.data})}var n=this;n.competitions=[],t()}e.$inject=["competitionsService"],angular.module("app").controller("CompetitionsCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o){function r(){t.getAllUsers().then(function(e){h.availablePlayers=e.data});for(var e=d;e>0;--e)f+=e;for(e=0;e<d;e++)m.push(e*(e+1)/2+1)}function a(e){h.addedPlayers.push(_.remove(h.availablePlayers,{_id:e._id})[0]),l()}function s(e){h.availablePlayers.push(_.remove(h.addedPlayers,{_id:e._id})[0]),l()}function l(){"versus"===h.newCompetition.type?u():"pyramid"===h.newCompetition.type&&c()}function c(){var e=1;_.forEach(h.addedPlayers,function(t){t.position=e,++e})}function u(){_.forEach(h.addedPlayers,function(e){e.position=2});for(var e=0;e<h.addedPlayers.length/2;e++)h.addedPlayers[e].position=1}function p(t){if("versus"===t.type&&h.addedPlayers.length%2>0)o.error("A Versus competition must have an even number of players");else if(h.addedPlayers.length>f)o.error("A competition can have a maximum of "+f+" players");else{angular.forEach(h.addedPlayers,function(e){var n={_id:e._id,email:e.username,firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,position:e.position};t.players.push(n)}),t.admins=[{_id:i.currentUser._id,email:i.currentUser.username,firstName:i.currentUser.firstName,lastName:i.currentUser.lastName,displayName:i.currentUser.displayName,primary:!0}];for(var r=0;r<m.length;r++)if(t.players.length<m[r]){t.levels=r;break}n.createCompetition(t).then(function(t){e.go("competitions.view",{competitionId:t.data._id})})}}var m=[],d=7,f=null,h=this;h.newCompetition={players:[],restrictJoins:!1,private:!1},h.availablePlayers=[],h.addedPlayers=[],h.createCompetition=p,h.addPlayer=a,h.removePlayer=s,h.reorderPlayers=l,h.newCompetition.forfeitDays=1,h.competitionTypes=["pyramid","versus"],r()}e.$inject=["$state","userService","competitionsService","identityService","notifyService"],angular.module("app").controller("CreateCompetitionCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o){function r(){a()}function a(){s=[],l.activeChallenge=null,i.isAuthenticated()&&t.getCompetitionsForUser(i.currentUser._id).then(function(e){l.competitions=e.data,_.forEach(l.competitions,function(e){s.push(e._id),"pyramid"===e.type?n.getActiveChallengeByCompetitionByPlayer(e._id,i.currentUser._id).then(function(t){t.data&&(e.activeChallenge=t.data,0!==e.activeChallenge.timeLimit&&(e.activeChallenge.expires=moment().diff(moment(e.activeChallenge.created).add(e.activeChallenge.timeLimit,"d"),"s")*-1))}):"versus"===e.type&&n.getActiveChallengesByCompetition(e._id).then(function(t){t.data.length>0&&(e.activeChallenge=t.data[0],0!==e.activeChallenge.timeLimit&&(e.activeChallenge.expires=moment().diff(moment(e.activeChallenge.created).add(e.activeChallenge.timeLimit,"d"),"s")*-1))})})})}var s=[],l=this;l.activeChallenge=null,r(),e.$on("ws:competition_updated",function(e,t){s.indexOf(t.competitionId)>=0&&(o.info(t.description),a())})}e.$inject=["$scope","competitionsService","challengesService","identityService","notifyService"],angular.module("app").controller("MyCompetitionsCtrl",e)}(),function(){"use strict";function e(e){function t(t,n,i){var o=i.scrollaxis||"y",r=i.theme||"minimal-dark",a=i.mousewheelaxis||"y";$("html").hasClass("ismobile")||e.malihuScroll(n,r,o,a)}var n={restrict:"C",link:t};return n}e.$inject=["scrollbarService"],angular.module("app").directive("cOverflow",e)}(),function(){"use strict";function e(){function e(e,t){t.click(function(){t.next().slideToggle(200),t.parent().toggleClass("toggled")})}var t={restrict:"A",link:e};return t}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,t){t.hasClass("btn-icon")||t.hasClass("btn-float")?Waves.attach(t,["waves-circle"]):t.hasClass("btn-light")?Waves.attach(t,["waves-light"]):Waves.attach(t),Waves.init()}var t={restrict:"C",link:e};return t}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,t){var n=t.children().first(),i=t.parent().hasClass("fg-float");n.focus(function(){t.addClass("fg-toggled")}),n.blur(function(){(!i||i&&0===n.val().length)&&t.removeClass("fg-toggled")})}var t={restrict:"C",link:e};return t}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;base64,
