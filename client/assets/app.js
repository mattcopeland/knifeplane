angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","luegg.directives"]),function(){"use strict ";function e(e){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache"}e.$inject=["$httpProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e){var t=this;t.$state=e}e.$inject=["$state"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,a,i){var o={superAdmin:r,admin:t,user:n};i.html5Mode(!0),a.otherwise("/"),a.when("/pyramids/","/pyramids"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("pyramids",{url:"/pyramids",views:{content:{controller:"PyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramids.html"}}}).state("pyramids.myPyramids",{url:"/my-pyramids",views:{"content@":{controller:"MyPyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/my-pyramids.html"}},resolve:{auth:o.user}}).state("pyramids.view",{url:"/view/:pyramidId",views:{"content@":{controller:"PyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramid.html"}}}).state("pyramids.create",{url:"/create",views:{"content@":{controller:"CreatePyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/create-pyramid.html"}},resolve:{auth:o.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}})}function t(e){return e.authorizeCurrentUserForRoute("admin")}function r(e){return e.authorizeCurrentUserForRoute("super-admin")}function n(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),t.$inject=["authService"],r.$inject=["authService"],n.$inject=["authService"]}(),function(){"use strict";function e(e,t,r){e.$on("$stateChangeError",function(e,r,n,a,i,o){"not authorized"===o&&(t.go("login"),t.previous=r)}),e.$on("$stateChangeStart",function(){r.setSidebarStatus(!1)})}e.$inject=["$rootScope","$state","sidebarService"],angular.module("app").run(e)}(),function(){"use strict";function e(e,t,r,n,a){function i(e,n){var i=r.defer();return t.post("/login",{username:e,password:n}).then(function(e){e.data.success?(a.currentUser=e.data.user,i.resolve(!0)):i.resolve(!1)}),i.promise}function o(e){var n=r.defer();return t.post("/api/users",{userData:e}).then(function(t){t.data?(i(e.username,e.password),n.resolve(!0)):n.resolve(!1)}),n.promise}function l(){var n=r.defer();return t.post("/logout",{logout:!0}).then(function(){a.currentUser=void 0,n.resolve(),e.go("home")}),n.promise}function s(e){return!!a.isAuthorized(e)||r.reject("not authorized")}function c(){return!!a.isAuthenticated()||r.reject("not authorized")}var u={authenticateUser:i,createUser:o,logout:l,authorizeCurrentUserForRoute:s,authenticatedUserForRoute:c};return u}e.$inject=["$state","$http","$q","userService","identityService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e,t){function r(){return e.get("/api/users").then(function(e){return e})}var n={getAllUsers:r};return n}e.$inject=["$http","identityService"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(e,t,r){function n(){}function a(n,a){t.authenticateUser(n,a).then(function(t){t?e.previous?e.go(e.previous):e.go("home"):r.error("Username / password combinaiton incorrect")})}var i=this;i.login=a,n()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,t,r,n){function a(){}function i(e){e.password!==e.confirmPassword?n.error("Passwords don't match!"):r.createUser(e).then(function(){t.go("home")})}var o=this;o.register=i,a()}e.$inject=["$scope","$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@"},templateUrl:"/challenges/components/active-challenges.html"};return e}function t(e,t){function r(){n()}function n(){a.challenges=[],t.getActiveChallengesByCompetition(a.competitionId).then(function(e){e.data.length>0&&(a.challenges=e.data,_.forEach(a.challenges,function(e){0!==e.timeLimit&&(e.expires=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1)}))})}var a=this;a.challenges=[],r(),e.$on("ws:challenge_created",function(e,t){a.competitionId===t.competitionId&&n()}),e.$on("ws:challenge_completed",function(e,t){a.competitionId===t.competitionId&&n()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpActiveChalleneges",e)}(),function(){"use strict";function e(e){function t(t){return e.post("/api/challenges/create",{challenge:t})}function r(t){return e.post("/api/challenges/complete",{challenge:t})}function n(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function a(t){return e.get("/api/challenges/active/competition",{params:{competitionId:t}})}function i(t,r){return e.get("/api/challenges/active/competition/player",{params:{competitionId:t,playerId:r}})}var o={createChallenge:t,completeChallenge:r,getChallengesByCompetition:n,getActiveChallengesByCompetition:a,getActiveChallengeByCompetitionByPlayer:i};return o}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/footer.html"};return e}function t(e,t){function r(){t.logout()}var n=this;n.indentity=e,n.logout=r}t.$inject=["identityService","authService"],angular.module("app").directive("kpFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"headerCtrl",restrict:"A",templateUrl:"/common/components/header.html"};return e}function t(e,t,r){function n(){i.sidebarStatus.left=!i.sidebarStatus.left,e.setSidebarStatus(i.sidebarStatus.left)}function a(){r.logout()}var i=this;i.indentity=t,i.logout=a,i.sidebarStatus=e.getSidebarStatus(),i.toggleSidebar=n}t.$inject=["sidebarService","identityService","authService"],angular.module("app").directive("kpHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"/common/components/sidebar.html"};return e}function t(e,t,r){function n(){t.logout()}var a=this;a.indentity=e,a.logout=n,a.sidebarStatus=r.getSidebarStatus()}t.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("kpSidebar",e)}(),function(){"use strict";function e(e){function t(){return!!this.currentUser}function r(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var n;null!==e.bootstrappedUserObject&&(n=e.bootstrappedUserObject);var a={currentUser:n,isAuthenticated:t,isAuthorized:r};return a}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,t,r){$.notify({message:e,url:t,target:r},{type:"info"})}function t(e,t,r){$.notify({message:e,url:t,target:r},{type:"success"})}function r(e,t,r){$.notify({message:e,url:t,target:r},{type:"warning"})}function n(e,t,r){$.notify({message:e,url:t,target:r},{type:"danger"})}function a(e,t,r){$.notify({message:e,url:t,target:r},{type:"inverse"})}var i={info:e,success:t,warning:r,error:n,inverse:a};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85}}),i}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(){return r}function t(e){r.left=e}var r={left:!1,right:!1},n={getSidebarStatus:e,setSidebarStatus:t};return n}angular.module("app").factory("sidebarService",e)}(),angular.module("app").service("websocketService",["$rootScope","$window",function(e,t){function r(){return"https:"===t.location.protocol?"wss://"+t.location.host:"ws://"+t.location.host}var n;this.connect=function(){n=new WebSocket(r()),n.onmessage=function(t){var r=JSON.parse(t.data);e.$broadcast("ws:"+r.topic,r.data)}},this.send=function(e,t){var r=JSON.stringify({topic:e,data:t});n.send(r)}}]).run(["websocketService",function(e){e.connect()}]),function(){"use strict";function e(){function e(){}e()}angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/pyramids/components/pyramid.html",replace:!0,scope:{competitionId:"@"},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,r,n,a,i){function o(){t.getPyramid(h.competitionId).then(function(e){h.pyramid=e.data,h.levels=[];for(var t=1;t<=e.data.levels;++t)h.levels.push(t);l(),s(),u(),d(),p()})}function l(){h.pyramid.players=r("orderBy")(h.pyramid.players,"position")}function s(){_.forEach(h.pyramid.players,function(e){a.currentUser&&e._id===a.currentUser._id&&(h.isCurrentUserOnPyramid=!0,e.class="current-user",h.currentUserPlayer=e,i.getActiveChallengeByCompetitionByPlayer(h.competitionId,e._id).then(function(e){e.data&&(h.hasActiveChallenge=!0)}))}),i.getActiveChallengesByCompetition(h.competitionId).then(function(e){_.forEach(e.data,function(e){var t=_.find(h.pyramid.players,{_id:e.challenger._id});t.class="unavailable",t.challenge={position:"challenger"};var r=_.find(h.pyramid.players,{_id:e.opponent._id});if(r.class="unavailable",r.challenge={position:"opponent"},0!==e.timeLimit){var n=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1;n>0?r.challenge.expires=n:n<=0&&y(null,!0,r)}}),m()})}function c(){h.breakPoints=[];for(var e=0;e<h.pyramid.levels;e++)h.breakPoints.push(e*(e+1)/2+1)}function u(){h.numberOfBlocks=0;for(var e=h.pyramid.levels;e>0;e--)h.numberOfBlocks+=e}function d(){for(var e=h.pyramid.players.length;e<h.numberOfBlocks;e++)h.pyramid.players.push({firstName:"Empty",lastName:"Spot",position:99,class:"empty"})}function p(){var e=0;c();for(var t=0;t<h.pyramid.players.length;t++)h.breakPoints.indexOf(t+1)>-1&&(e+=1),h.pyramid.players[t].level=e}function m(){var e=h.currentUserPlayer.level>1?h.currentUserPlayer.level-1:null;_.forEach(h.pyramid.players,function(t){t.level===e&&99!==t.position&&"unavailable"!==t.class&&(h.availableChallenges=!0,t.available=!0)})}function f(e){if(e.available){h.hasActiveChallenge=!0;var t={competitionId:h.competitionId,complete:!1,forfeit:!1,timeLimit:h.pyramid.forfeitDays,challenger:{_id:h.currentUserPlayer._id,firstName:h.currentUserPlayer.firstName,lastName:h.currentUserPlayer.lastName,nickname:h.currentUserPlayer.nickname,position:h.currentUserPlayer.position},opponent:{_id:e._id,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname,position:e.position}};i.createChallenge(t).then(function(){g(),h.pyramidMenuToggle=!1})}else n.error("Sorry, that is not a valid challenge.")}function y(e,r,n){var a=n||h.currentUserPlayer;i.getActiveChallengeByCompetitionByPlayer(h.competitionId,a._id).then(function(n){h.hasActiveChallenge=!1;var a=!1;r?(n.data.forfeit=!0,n.data.challenger.winner=!0,a=!0):e?n.data.challenger._id===h.currentUserPlayer._id?(n.data.challenger.winner=!0,a=!0):n.data.opponent.winner=!0:n.data.challenger._id===h.currentUserPlayer._id?n.data.opponent.winner=!0:(n.data.challenger.winner=!0,a=!0),a?t.swapPositions(h.competitionId,n.data.opponent,n.data.challenger).then(function(){i.completeChallenge(n.data)}):i.completeChallenge(n.data),h.pyramidMenuToggle=!1})}function v(e){y(null,!0,e)}function g(){t.getPyramid(h.competitionId).then(function(e){h.pyramid=e.data,l(),s(),d(),p()})}var h=this;h.pyramid={},h.breakPoints=[],h.numberOfBlocks=0,h.isCurrentUserOnPyramid=!1,h.hasActiveChallenge=!1,h.availableChallenges=!1,h.createChallenge=f,h.completeChallenge=y,h.challengeExpired=v,h.currentUserPlayer={},h.pyramidMenuToggle=!1,o(),e.$on("ws:challenge_created",function(e,t){h.competitionId===t.competitionId&&(n.info(t.description),g())}),e.$on("ws:challenge_completed",function(e,t){h.competitionId===t.competitionId&&(n.info(t.description),g())})}t.$inject=["$scope","pyramidsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("kpPyramid",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/pyramid",{params:{pyramidId:t}})}function r(t){return e.get("/api/pyramids/user",{params:{userId:t}})}function n(t){return e.post("/api/pyramids/create",{pyramid:t})}function a(t,r,n){return e.post("/api/pyramids/swapPositions",{pyramidId:t,challenger:r,opponent:n})}function i(t,r){return e.post("/api/pyramids/addPlayer",{pyramidId:t,player:r})}var o={getPyramid:t,getPyramidsForUser:r,createPyramid:n,swapPositions:a,addPlayerToPyramid:i};return o}e.$inject=["$http"],angular.module("app").factory("pyramidsService",e)}(),function(){"use strict";function e(e,t,r,n){function a(){r.getAllUsers().then(function(e){l.availablePlayers=e.data})}function i(e){s+=1;var t={position:s,_id:e._id,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname};l.newPyramid.players.push(t),_.remove(l.availablePlayers,{_id:e._id})}function o(t){n.createPyramid(t).then(function(t){e.go("pyramids.view",{pyramidId:t.data._id})})}var l=this;l.availablePlayers=[],l.addPlayerToPyramid=i,l.createPyramid=o,a();var s=0}e.$inject=["$state","$stateParams","userService","pyramidsService"],angular.module("app").controller("AddPlayerCtrl",e)}(),function(){"use strict";function e(e,t,r,n,a){function i(){r.getAllUsers().then(function(e){u.availablePlayers=e.data})}function o(e){u.addedPlayers.length<u.allowedPlayers?(u.addedPlayerAdded=!0,u.addedPlayers.push(_.remove(u.availablePlayers,{_id:e._id})[0])):a.error("All spots have been filled.<br />If you want to add more people please increase the levels.")}function l(e){u.addedPlayerAdded=!1,u.availablePlayers.push(_.remove(u.addedPlayers,{_id:e._id})[0])}function s(e){u.allowedPlayers=0;for(var t=e;t>0;t--)u.allowedPlayers+=t;if(u.addedPlayers.length>u.allowedPlayers){var r=u.addedPlayers.splice(u.allowedPlayers);u.availablePlayers=u.availablePlayers.concat(r),a.warning("Players were removed becasue there are not enough spots on the pyramid.")}}function c(e){angular.forEach(u.addedPlayers,function(e){d+=1;var t={position:d,_id:e._id,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname};u.newPyramid.players.push(t)}),n.createPyramid(e).then(function(e){t.go("pyramids.view",{pyramidId:e.data._id})})}var u=this;u.newPyramid={players:[]},u.availablePlayers=[],u.addedPlayers=[],u.createPyramid=c,u.addPlayer=o,u.removePlayer=l,u.allowedPlayers=10,u.newPyramid.levels=4,u.newPyramid.forfeitDays=1,i(),e.$watch("vm.newPyramid.levels",function(e,t){e!==t&&s(e)});var d=0}e.$inject=["$scope","$state","userService","pyramidsService","notifyService"],angular.module("app").controller("CreatePyramidCtrl",e)}(),function(){"use strict";function e(e,t,r){function n(){t.getPyramidsForUser(r.currentUser._id).then(function(e){a.pyramids=e.data})}var a=this;a.pyramids=null,n()}e.$inject=["$state","pyramidsService","identityService"],angular.module("app").controller("MyPyramidsCtrl",e)}(),function(){"use strict";function e(e){function t(){e.pyramidId&&(r.pyramidId=e.pyramidId)}var r=this;r.pyramidId=null,t()}e.$inject=["$stateParams"],angular.module("app").controller("PyramidCtrl",e)}(),function(){"use strict";function e(){function e(){}var t=this;t.pyramids=null,e()}angular.module("app").controller("PyramidsCtrl",e)}(),function(){"use strict";function e(){function e(e,t){t.click(function(){t.next().slideToggle(200),t.parent().toggleClass("toggled")})}var t={restrict:"A",link:e};return t}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,t){t.hasClass("btn-icon")||t.hasClass("btn-float")?Waves.attach(t,["waves-circle"]):t.hasClass("btn-light")?Waves.attach(t,["waves-light"]):Waves.attach(t),Waves.init()}var t={restrict:"C",link:e};return t}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,t){var r=t.children().first(),n=t.parent().hasClass("fg-float");r.focus(function(){t.addClass("fg-toggled")}),r.blur(function(){(!n||n&&0===r.val().length)&&t.removeClass("fg-toggled")})}var t={restrict:"C",link:e};return t}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;base64,
