angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","luegg.directives"]),function(){"use strict ";function e(e,t){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache",t.options({appendToBody:!0})}e.$inject=["$httpProvider","$uibTooltipProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e){var t=this;t.$state=e,t.lockSidebar=!1}e.$inject=["$state"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,i,a){var o={superAdmin:n,admin:t,user:r};a.html5Mode(!0),i.otherwise("/"),i.when("/pyramids/","/pyramids"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("pyramids",{url:"/pyramids",views:{content:{controller:"PyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramids.html"}}}).state("pyramids.myPyramids",{url:"/my-pyramids",views:{"content@":{controller:"MyPyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/my-pyramids.html"}},resolve:{auth:o.user}}).state("pyramids.view",{url:"/view/:competitionId",views:{"content@":{controller:"PyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramid.html"}}}).state("pyramids.stats",{url:"/stats/:competitionId",views:{"content@":{controller:"StatsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/stats.html"}}}).state("pyramids.create",{url:"/create",views:{"content@":{controller:"CreatePyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/create-pyramid.html"}},resolve:{auth:o.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}})}function t(e){return e.authorizeCurrentUserForRoute("admin")}function n(e){return e.authorizeCurrentUserForRoute("super-admin")}function r(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),t.$inject=["authService"],n.$inject=["authService"],r.$inject=["authService"]}(),function(){"use strict";function e(e,t,n){e.$on("$stateChangeError",function(e,n,r,i,a,o){"not authorized"===o&&(t.go("login"),t.previous=n)}),e.$on("$stateChangeStart",function(){n.setSidebarStatus(!1)})}e.$inject=["$rootScope","$state","sidebarService"],angular.module("app").run(e)}(),function(){"use strict";function e(e,t,n,r,i){function a(e,r){var a=n.defer();return t.post("/login",{username:e,password:r}).then(function(e){e.data.success?(i.currentUser=e.data.user,a.resolve(!0)):a.resolve(!1)}),a.promise}function o(e){var r=n.defer();return t.post("/api/users",{userData:e}).then(function(t){t.data?(a(e.username,e.password),r.resolve(!0)):r.resolve(!1)}),r.promise}function l(){var r=n.defer();return t.post("/logout",{logout:!0}).then(function(){i.currentUser=void 0,r.resolve(),e.go("home")}),r.promise}function s(e){return!!i.isAuthorized(e)||n.reject("not authorized")}function c(){return!!i.isAuthenticated()||n.reject("not authorized")}var u={authenticateUser:a,createUser:o,logout:l,authorizeCurrentUserForRoute:s,authenticatedUserForRoute:c};return u}e.$inject=["$state","$http","$q","userService","identityService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e,t){function n(){return e.get("/api/users").then(function(e){return e})}var r={getAllUsers:n};return r}e.$inject=["$http","identityService"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(e,t,n){function r(){}function i(r,i){t.authenticateUser(r,i).then(function(t){t?e.previous?e.go(e.previous):e.go("home"):n.error("Username / password combinaiton incorrect")})}var a=this;a.login=i,r()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,t,n,r){function i(){}function a(e){e.password!==e.confirmPassword?r.error("Passwords don't match!"):n.createUser(e).then(function(){t.go("home")})}var o=this;o.register=a,i()}e.$inject=["$scope","$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@"},templateUrl:"/challenges/components/active-challenges.html"};return e}function t(e,t){function n(){r()}function r(){i.challenges=[],t.getActiveChallengesByCompetition(i.competitionId).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){0!==e.timeLimit&&(e.expires=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1)}))})}var i=this;i.challenges=[],n(),e.$on("ws:challenge_created",function(e,t){i.competitionId===t.competitionId&&r()}),e.$on("ws:challenge_completed",function(e,t){i.competitionId===t.competitionId&&r()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpActiveChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@",limit:"@"},templateUrl:"/challenges/components/completed-challenges.html"};return e}function t(e,t){function n(){r()}function r(){i.challenges=[],t.getCompletedChallengesByCompetition(i.competitionId,i.limit).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){e.loser="challenger"===e.winner?"opponent":"challenger",e.whenCompleted=moment(e.completed).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd",sameElse:"DD/MM/YYYY"})}))})}var i=this;i.challenges=[],n(),e.$on("ws:challenge_completed",function(e,t){i.competitionId===t.competitionId&&r()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpCompletedChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@",player:"=",levels:"@"},templateUrl:"/challenges/components/player-overall-results.html"};return e}function t(e,t,n){function r(){i(a.competitionId,a.player._id)}function i(e,n){t.getPlayerResultsByCompetition(e,n).then(function(e){for(var t=[],r=0;r<a.levels;r++)t.push(r*(r+1)/2+1);a.player.level=t.length;for(var i=0;i<t.length;i++)if(a.player.position<t[i+1]){a.player.level=t.indexOf(t[i])+1;break}var o,l=0,s=!0;_.forEach(e.data,function(e){s&&("challenger"===e.winner&&e.challenger._id===n||"opponent"===e.winner&&e.opponent._id===n?"losing"!==o?(l+=1,o="winning"):s=!1:("opponent"===e.winner&&e.challenger._id===n||"challenger"===e.winner&&e.opponent._id===n)&&("winning"!==o?(l+=1,o="losing"):s=!1)),a.streak={type:o,value:l}}),a.wins.asOpponent=_.size(_.filter(e.data,function(e){return e.opponent._id===n&&"opponent"===e.winner})),a.wins.asChallenger=_.size(_.filter(e.data,function(e){return e.challenger._id===n&&"challenger"===e.winner})),a.wins.total=a.wins.asChallenger+a.wins.asOpponent,a.wins.byForfeit=_.size(_.filter(e.data,function(e){return e.forfeit&&(e.challenger._id===n&&"challenger"===e.winner||e.opponent._id===n&&"opponent"===e.winner)})),a.loses.asOpponent=_.size(_.filter(e.data,function(e){return e.opponent._id===n&&"challenger"===e.winner})),a.loses.asChallenger=_.size(_.filter(e.data,function(e){return e.challenger._id===n&&"opponent"===e.winner})),a.loses.total=a.loses.asChallenger+a.loses.asOpponent,a.loses.byForfeit=_.size(_.filter(e.data,function(e){return e.forfeit&&(e.challenger._id===n&&"opponent"===e.winner||e.opponent._id===n&&"challenger"===e.winner)}))})}var a=this;a.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},a.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},a.streak={type:null,value:0},r(),e.$on("ws:challenge_completed",function(e,t){a.competitionId===t.competitionId&&(a.player._id===t.challengerId?(n.info(t.description),i(t.competitionId,t.challengerId)):a.player._id===t.opponentId&&i(t.competitionId,t.opponentId))})}t.$inject=["$scope","challengesService","notifyService"],angular.module("app").directive("kpPlayerOverallResults",e)}(),function(){"use strict";function e(e){function t(t){return e.post("/api/challenges/create",{challenge:t})}function n(t){return e.post("/api/challenges/complete",{challenge:t})}function r(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function i(t){return e.get("/api/challenges/active/competition",{params:{competitionId:t}})}function a(t,n){return e.get("/api/challenges/active/competition/player",{params:{competitionId:t,playerId:n}})}function o(t,n){return e.get("/api/challenges/completed/competition",{params:{competitionId:t,limit:n}})}function l(t,n){return e.get("/api/challenges/results/competition/player",{params:{competitionId:t,playerId:n}})}var s={createChallenge:t,completeChallenge:n,getChallengesByCompetition:r,getActiveChallengesByCompetition:i,getActiveChallengeByCompetitionByPlayer:a,getCompletedChallengesByCompetition:o,getPlayerResultsByCompetition:l};return s}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/footer.html"};return e}function t(e,t){function n(){t.logout()}var r=this;r.indentity=e,r.logout=n}t.$inject=["identityService","authService"],angular.module("app").directive("kpFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"headerCtrl",restrict:"A",templateUrl:"/common/components/header.html"};return e}function t(e,t,n){function r(){a.sidebarStatus.left=!a.sidebarStatus.left,e.setSidebarStatus(a.sidebarStatus.left)}function i(){n.logout()}var a=this;a.indentity=t,a.logout=i,a.sidebarStatus=e.getSidebarStatus(),a.toggleSidebar=r}t.$inject=["sidebarService","identityService","authService"],angular.module("app").directive("kpHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"/common/components/sidebar.html"};return e}function t(e,t,n){function r(){t.logout()}var i=this;i.indentity=e,i.logout=r,i.sidebarStatus=n.getSidebarStatus()}t.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("kpSidebar",e)}(),function(){"use strict";function e(){return function(e,t){if(!angular.isObject(e))return e;var n=[];for(var r in e)n.push(e[r]);return n.sort(function(e,n){return e=parseInt(e[t]),n=parseInt(n[t]),e-n}),n}}angular.module("app").filter("orderObjectBy",e)}(),function(){"use strict";function e(e){function t(){return!!this.currentUser}function n(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var r;null!==e.bootstrappedUserObject&&(r=e.bootstrappedUserObject);var i={currentUser:r,isAuthenticated:t,isAuthorized:n};return i}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,t,n){$.notify({message:e,url:t,target:n},{type:"info"})}function t(e,t,n){$.notify({message:e,url:t,target:n},{type:"success"})}function n(e,t,n){$.notify({message:e,url:t,target:n},{type:"warning"})}function r(e,t,n){$.notify({message:e,url:t,target:n},{type:"danger"})}function i(e,t,n){$.notify({message:e,url:t,target:n},{type:"inverse"})}var a={info:e,success:t,warning:n,error:r,inverse:i};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85}}),a}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(e,t,n,r){$(e).mCustomScrollbar({theme:t,scrollInertia:100,axis:n,mouseWheel:{enable:!0,axis:r,preventDefault:!0}})}var t={malihuScroll:e};return t}angular.module("app").factory("scrollbarService",e)}(),function(){"use strict";function e(){function e(){return n}function t(e){n.left=e}var n={left:!1,right:!1},r={getSidebarStatus:e,setSidebarStatus:t};return r}angular.module("app").factory("sidebarService",e)}(),angular.module("app").service("websocketService",["$rootScope","$window",function(e,t){function n(){return"https:"===t.location.protocol?"wss://"+t.location.host:"ws://"+t.location.host}var r;this.connect=function(){r=new WebSocket(n()),r.onmessage=function(t){var n=JSON.parse(t.data);e.$broadcast("ws:"+n.topic,n.data)}},this.send=function(e,t){var n=JSON.stringify({topic:e,data:t});r.send(n)}}]).run(["websocketService",function(e){e.connect()}]),function(){"use strict";function e(e){function t(){e.getPyramids().then(function(e){n.pyramids=e.data})}var n=this;n.pyramids=[],t()}e.$inject=["pyramidsService"],angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/pyramids/components/pyramid.html",replace:!0,scope:{competitionId:"@"},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,n,r,i,a,o){function l(){n.getPyramid(b.competitionId).then(function(e){b.pyramid=e.data,b.levels=[];for(var t=1;t<=e.data.levels;++t)b.levels.push(t);s(),c(),d(),p(),m()})}function s(){b.pyramid.players=r("orderBy")(b.pyramid.players,"position")}function c(){_.forEach(b.pyramid.players,function(e){a.isAuthenticated()&&e._id===a.currentUser._id&&(b.currentUserIsOnPyramid=!0,e.class="current-user",b.currentUserPlayer=e,o.getActiveChallengeByCompetitionByPlayer(b.competitionId,e._id).then(function(e){e.data&&(b.hasActiveChallenge=!0)}))}),o.getActiveChallengesByCompetition(b.competitionId).then(function(e){_.forEach(e.data,function(e){var t=_.find(b.pyramid.players,{_id:e.challenger._id});t.class="unavailable",t.challenge={position:"challenger"};var n=_.find(b.pyramid.players,{_id:e.opponent._id});if(n.class="unavailable",n.challenge={position:"opponent"},0!==e.timeLimit){var r=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1;r>0?n.challenge.expires=r:r<=0&&h(null,!0,n)}}),f()})}function u(){b.breakPoints=[];for(var e=0;e<b.pyramid.levels;e++)b.breakPoints.push(e*(e+1)/2+1)}function d(){b.numberOfBlocks=0;for(var e=b.pyramid.levels;e>0;e--)b.numberOfBlocks+=e}function p(){b.numberOfRealPlayers=b.pyramid.players.length;for(var e=b.pyramid.players.length;e<b.numberOfBlocks;e++)b.pyramid.players.push({firstName:"Empty",lastName:"Spot",position:99,class:"empty"})}function m(){var e=0;u();for(var t=0;t<b.pyramid.players.length;t++)b.breakPoints.indexOf(t+1)>-1&&(e+=1),b.pyramid.players[t].level=e}function f(){var e=b.currentUserPlayer.level>1?b.currentUserPlayer.level-1:null;_.forEach(b.pyramid.players,function(t){t.level===e&&99!==t.position&&"unavailable"!==t.class&&(b.availableChallenges=!0,t.available=!0)})}function y(e){if(e.available){b.hasActiveChallenge=!0;var t={competitionId:b.competitionId,complete:!1,forfeit:!1,timeLimit:b.pyramid.forfeitDays,challenger:{_id:b.currentUserPlayer._id,firstName:b.currentUserPlayer.firstName,lastName:b.currentUserPlayer.lastName,nickname:b.currentUserPlayer.nickname,position:b.currentUserPlayer.position},opponent:{_id:e._id,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname,position:e.position}};o.createChallenge(t).then(function(){b.pyramidMenuToggle=!1})}else i.error("Sorry, that is not a valid challenge.")}function h(e,t,r){var i=r||b.currentUserPlayer;o.getActiveChallengeByCompetitionByPlayer(b.competitionId,i._id).then(function(i){b.hasActiveChallenge=!1;var a=!1;t?(i.data.forfeit=!0,"opponent"===r.challenge.position?(i.data.winner="challenger",a=!0):i.data.winner="opponent"):e?i.data.challenger._id===b.currentUserPlayer._id?(i.data.winner="challenger",a=!0):i.data.winner="opponent":i.data.challenger._id===b.currentUserPlayer._id?i.data.winner="opponent":(i.data.winner="challenger",a=!0),a?n.swapPositions(b.competitionId,i.data.opponent,i.data.challenger).then(function(){o.completeChallenge(i.data).then(function(){$&&w()})}):o.completeChallenge(i.data).then(function(){$&&w()}),b.pyramidMenuToggle=!1})}function g(e){h(null,!0,e)}function v(){if(a.isAuthenticated())if(b.numberOfRealPlayers<b.numberOfBlocks){var e={_id:a.currentUser._id,firstName:a.currentUser.firstName,lastName:a.currentUser.lastName,position:b.numberOfRealPlayers+1};n.addPlayerToPyramid(b.competitionId,e)}else i.warning("Sorry, this pyramid is full");else t.go("login")}function P(){swal({title:"Leave Pyramid?",text:"You will lose your spot and forfeit any active challenges.",type:"error",showCancelButton:!0,confirmButtonText:"Yes, leave",confirmButtonClass:"btn-danger",cancelButtonText:"No, stay",closeOnConfirm:!1,closeOnCancel:!0},function(){w(),swal("OK, you'r out!","You've been removed from the pyramid.","success")})}function w(){a.isAuthenticated()&&b.currentUserIsOnPyramid&&($=!0,b.hasActiveChallenge?h(null,!0,b.currentUserPlayer):(b.currentUserIsOnPyramid=!1,b.hasActiveChallenge=!1,n.getPyramid(b.competitionId).then(function(e){var t=e.data,r=b.currentUserPlayer.position;_.forEach(t.players,function(e){e.position>=r&&(e.position-=1)});for(var i=_.remove(t.players,function(e){return e._id===b.currentUserPlayer._id}),a=[],o=0;o<b.numberOfRealPlayers-1;++o){var l={_id:t.players[o]._id,firstName:t.players[o].firstName,lastName:t.players[o].lastName,position:t.players[o].position};a.push(l)}n.removedPlayerFromPyramid(b.competitionId,i[0],a).then(function(){$=!1})})))}function C(){n.getPyramid(b.competitionId).then(function(e){b.pyramid=e.data,s(),c(),p(),m()})}var b=this;b.pyramid={},b.breakPoints=[],b.numberOfBlocks=0,b.currentUserIsOnPyramid=!1,b.hasActiveChallenge=!1,b.availableChallenges=!1,b.createChallenge=y,b.completeChallenge=h,b.challengeExpired=g,b.currentUserPlayer={},b.pyramidMenuToggle=!1,b.addCurrentUserToPyramid=v,b.confirmRemoveCurrentUserFromPyramid=P,b.numberOfRealPlayers=0,l();var $=!1;e.$on("ws:challenge_created",function(e,t){b.competitionId===t.competitionId&&(i.info(t.description),C())}),e.$on("ws:challenge_completed",function(e,t){b.competitionId===t.competitionId&&(i.info(t.description),$||C())}),e.$on("ws:player_added",function(e,t){b.competitionId===t.competitionId&&(i.info(t.description),C())}),e.$on("ws:player_removed",function(e,t){b.competitionId===t.competitionId&&(i.info(t.description),C())})}t.$inject=["$scope","$state","pyramidsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("kpPyramid",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/pyramid",{params:{competitionId:t}})}function n(t){return e.get("/api/pyramids/user",{params:{userId:t}})}function r(){return e.get("/api/pyramids")}function i(t){return e.post("/api/pyramids/create",{pyramid:t})}function a(t,n,r){return e.post("/api/pyramids/swapPositions",{competitionId:t,challenger:n,opponent:r})}function o(t,n){return e.post("/api/pyramids/addPlayer",{competitionId:t,player:n})}function l(t,n,r){return e.post("/api/pyramids/removePlayer",{competitionId:t,removedPlayer:n,players:r})}var s={getPyramid:t,getPyramidsForUser:n,getPyramids:r,createPyramid:i,swapPositions:a,addPlayerToPyramid:o,removedPlayerFromPyramid:l};return s}e.$inject=["$http"],angular.module("app").factory("pyramidsService",e)}(),function(){"use strict";function e(e,t,n,r,i){function a(){n.getAllUsers().then(function(e){u.availablePlayers=e.data})}function o(e){u.addedPlayers.length<u.allowedPlayers?(u.addedPlayerAdded=!0,u.addedPlayers.push(_.remove(u.availablePlayers,{_id:e._id})[0])):i.error("All spots have been filled.<br />If you want to add more people please increase the levels.")}function l(e){u.addedPlayerAdded=!1,u.availablePlayers.push(_.remove(u.addedPlayers,{_id:e._id})[0])}function s(e){u.allowedPlayers=0;for(var t=e;t>0;t--)u.allowedPlayers+=t;if(u.addedPlayers.length>u.allowedPlayers){var n=u.addedPlayers.splice(u.allowedPlayers);u.availablePlayers=u.availablePlayers.concat(n),i.warning("Players were removed becasue there are not enough spots on the pyramid.")}}function c(e){angular.forEach(u.addedPlayers,function(e){d+=1;var t={position:d,_id:e._id,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname};u.newPyramid.players.push(t)}),r.createPyramid(e).then(function(e){t.go("pyramids.view",{competitionId:e.data._id})})}var u=this;u.newPyramid={players:[]},u.availablePlayers=[],u.addedPlayers=[],u.createPyramid=c,u.addPlayer=o,u.removePlayer=l,u.allowedPlayers=10,u.newPyramid.levels=4,u.newPyramid.forfeitDays=1,a(),e.$watch("vm.newPyramid.levels",function(e,t){e!==t&&s(e)});var d=0}e.$inject=["$scope","$state","userService","pyramidsService","notifyService"],angular.module("app").controller("CreatePyramidCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){t.getPyramidsForUser(n.currentUser._id).then(function(e){i.pyramids=e.data})}var i=this;i.pyramids=null,r()}e.$inject=["$state","pyramidsService","identityService"],angular.module("app").controller("MyPyramidsCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){t.competitionId&&(i.competitionId=t.competitionId,n.getPyramid(i.competitionId).then(function(t){t.data?i.pyramid=t.data:e.go("pyramids.myPyramids")}))}var i=this;i.competitionId=null,i.pyramid=null,r()}e.$inject=["$state","$stateParams","pyramidsService"],angular.module("app").controller("PyramidCtrl",e)}(),function(){"use strict";function e(){function e(){}var t=this;t.pyramids=null,e()}angular.module("app").controller("PyramidsCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){e.competitionId&&(i.competitionId=e.competitionId,n.getPyramid(i.competitionId).then(function(e){e.data?i.pyramid=e.data:t.go("pyramids.myPyramids")}))}var i=this;i.competitionId=null,i.pyramid=null,r()}e.$inject=["$stateParams","$state","pyramidsService"],angular.module("app").controller("StatsCtrl",e)}(),function(){"use strict";function e(e){function t(t,n,r){var i=r.scrollaxis||"y",a=r.theme||"minimal-dark",o=r.mousewheelaxis||"y";$("html").hasClass("ismobile")||e.malihuScroll(n,a,i,o)}var n={restrict:"C",link:t};return n}e.$inject=["scrollbarService"],angular.module("app").directive("cOverflow",e)}(),function(){"use strict";function e(){function e(e,t){t.click(function(){t.next().slideToggle(200),t.parent().toggleClass("toggled")})}var t={restrict:"A",link:e};return t}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,t){t.hasClass("btn-icon")||t.hasClass("btn-float")?Waves.attach(t,["waves-circle"]):t.hasClass("btn-light")?Waves.attach(t,["waves-light"]):Waves.attach(t),Waves.init()}var t={restrict:"C",link:e};return t}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,t){var n=t.children().first(),r=t.parent().hasClass("fg-float");n.focus(function(){t.addClass("fg-toggled")}),n.blur(function(){(!r||r&&0===n.val().length)&&t.removeClass("fg-toggled")})}var t={restrict:"C",link:e};return t}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;base64,
