angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","LocalStorageModule","angular-sortable-view","angular.vertilize","ngTable"]),function(){"use strict ";function e(e,t,n){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache",t.options({appendToBody:!0}),n.errorOnUnhandledRejections(!1)}e.$inject=["$httpProvider","$uibTooltipProvider","$qProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e,t){function n(e){t.set("sidebarLocked",e)}var i=this;i.$state=e,i.lockSidebar=t.get("sidebarLocked"),i.toggleSidebarLocked=n}e.$inject=["$state","localStorageService"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,o,r){var a={superAdmin:n,admin:t,user:i};r.html5Mode(!0),o.otherwise("/"),o.when("/competitions/","/competitions"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("competitions",{url:"/competitions",views:{content:{controller:"CompetitionsCtrl",controllerAs:"vm",templateUrl:"competitions/views/competitions.html"}}}).state("competitions.myCompetitions",{url:"/my-competitions",views:{"content@":{controller:"MyCompetitionsCtrl",controllerAs:"vm",templateUrl:"competitions/views/my-competitions.html"}},resolve:{auth:a.user}}).state("competitions.view",{url:"/view/:competitionId",views:{"content@":{controller:"CompetitionCtrl",controllerAs:"vm",templateUrl:"competitions/views/competition.html"}}}).state("competitions.stats",{url:"/stats/:competitionId",views:{"content@":{controller:"CompetitionStatsCtrl",controllerAs:"vm",templateUrl:"competitions/views/competition-stats.html"}}}).state("competitions.admin",{url:"/admin/:competitionId",views:{"content@":{controller:"CompetitionAdminCtrl",controllerAs:"vm",templateUrl:"competitions/views/competition-admin.html"}},resolve:{auth:a.user}}).state("competitions.create",{url:"/create",views:{"content@":{controller:"CreateCompetitionCtrl",controllerAs:"vm",templateUrl:"competitions/views/create-competition.html"}},resolve:{auth:a.user}}).state("user",{url:"/user",views:{content:{controller:"UserCtrl",controllerAs:"vm",templateUrl:"users/views/user.html"}},resolve:{auth:a.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}}).state("verify",{url:"/verification",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("verification",{url:"/verification/:userId/:verificationToken",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("password-reset-request",{url:"/password-reset",views:{content:{controller:"PasswordResetCtrl",controllerAs:"vm",templateUrl:"authentication/views/password-reset.html"}}}).state("password-reset",{url:"/password-reset/:userId/:verificationToken",views:{content:{controller:"PasswordResetCtrl",controllerAs:"vm",templateUrl:"authentication/views/password-reset.html"}}})}function t(e){return e.authorizeCurrentUserForRoute("admin")}function n(e){return e.authorizeCurrentUserForRoute("super-admin")}function i(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),t.$inject=["authService"],n.$inject=["authService"],i.$inject=["authService"]}(),function(){"use strict";function e(e,t,n,i){e.$on("$stateChangeError",function(e,n,i,o,r,a){"not authorized"===a&&(t.go("login"),t.previous=n,t.prevParams=i)}),e.$on("$stateChangeStart",function(){i.setSidebarStatus(!1),n[0].body.scrollTop=n[0].documentElement.scrollTop=0})}e.$inject=["$rootScope","$state","$document","sidebarService"],angular.module("app").run(e)}(),function(){"use strict";function e(e,t,n,i,o,r){function a(e,i){var r=n.defer();return t.post("/login",{username:e,password:i}).then(function(e){e.data.success?(o.currentUser=e.data.user,r.resolve(!0)):"unverified"===e.data.message?r.resolve("unverified"):r.resolve(!1)}),r.promise}function l(e){var i=n.defer();return t.post("/api/users",{userData:e}).then(function(e){e.data?i.resolve(!0):i.resolve(!1)},function(e){"Error: Email already in use"===e.data.reason&&r.error("Sorry, an account already exists with that email address.")}),i.promise}function s(){var i=n.defer();return t.post("/logout",{logout:!0}).then(function(){o.currentUser=void 0,i.resolve(),e.go("home")}),i.promise}function c(e){return!!o.isAuthorized(e)||n.reject("not authorized")}function p(){return!!o.isAuthenticated()||n.reject("not authorized")}var u={authenticateUser:a,createUser:l,logout:s,authorizeCurrentUserForRoute:c,authenticatedUserForRoute:p};return u}e.$inject=["$state","$http","$q","userService","identityService","notifyService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e){function t(){return e.get("/api/users").then(function(e){return _.forEach(e.data,function(e){e.displayName||(e.displayName=e.firstName+" "+e.lastName)}),e.data=_.sortBy(e.data,"displayName"),e})}function n(t,n){return e.get("/api/user/verification",{params:{userId:t,verificationToken:n}})}function i(t){return e.get("/api/user/password/link",{params:{username:t}})}function o(t,n,i){return e.put("/api/user/password/reset",{userId:t,verificationToken:n,password:i})}function r(t){return e.put("/api/user",{user:t})}var a={getAllUsers:t,verifyUser:n,generatePasswordResetLink:i,resetPassword:o,updateUser:r};return a}e.$inject=["$http"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(e,t,n){function i(){}function o(i,o){t.authenticateUser(i,o).then(function(t){t?"unverified"===t?n.error("You must verify your email before you can login"):e.previous?(e.go(e.previous,e.prevParams),e.previous=null,e.prevParams=null):e.go("competitions.myCompetitions"):n.error("Username / password combinaiton incorrect")})}var r=this;r.login=o,i()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o,r){function a(){r.isAuthenticated()?e.go("home"):t.userId&&t.verificationToken&&n.verifyUser(t.userId,t.verificationToken).then(function(e){e.data&&(c.verified=!0)})}function l(t){n.generatePasswordResetLink(t).then(function(t){t.data?(i.success("Please check your email for a password reset link"),e.go("home")):i.error("Could not find that email address")})}function s(r){r.password!==r.confirmPassword?i.error("Passwords don't match!"):n.resetPassword(t.userId,t.verificationToken,r.password).then(function(t){t.data&&o.authenticateUser(t.data.username,r.password).then(function(t){e.go("home")})})}var c=this;c.username="",c.verified=!1,c.resetPasswordForm={},c.generatePasswordResetLink=l,c.resetPassword=s,a()}e.$inject=["$state","$stateParams","userService","notifyService","authService","identityService"],angular.module("app").controller("PasswordResetCtrl",e)}(),function(){"use strict";function e(e,t,n){function i(){}function o(i){i.password!==i.confirmPassword?n.error("Passwords don't match!"):(i.displayName||(i.displayName=i.firstName+" "+i.lastName),t.createUser(i).then(function(){e.go("verify")}))}var r=this;r.register=o,i()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(e,t,n){function i(){t.userId&&t.verificationToken&&(o.verifying=!0,o.verified=null,n.verifyUser(t.userId,t.verificationToken).then(function(e){e.data?o.verified=!0:o.verified=!1}))}var o=this;o.verified=void 0,o.verifying=!1,i()}e.$inject=["$state","$stateParams","userService"],angular.module("app").controller("VerificationCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"=",allowDelete:"=",numberOfChallenges:"@",challengesPerPage:"@"},templateUrl:"/challenges/components/active-challenges.html"};return e}function t(e,t,n){function i(){e.$watch("vm.competition",function(){a.competition&&o()})}function o(){t.getActiveChallengesByCompetition(a.competition._id).then(function(e){a.challenges=e.data,e.data.length>0&&(a.tableData=new n({page:1,count:a.challengesPerPage||5},{counts:[],total:a.challenges.length,getData:function(e,t){e.resolve(a.challenges.slice((t.page()-1)*t.count(),t.page()*t.count()))}}),_.forEach(a.challenges,function(e){if("versus"===e.type&&(a.competition.players.length>2?(e.challenger.displayName="Team "+e.challenger.team,e.opponent.displayName="Team "+e.opponent.team):(e.challenger.displayName=_.find(a.competition.players,{position:e.challenger.team}).displayName,e.opponent.displayName=_.find(a.competition.players,{position:e.opponent.team}).displayName)),0!==e.timeLimit){var t=moment().diff(moment(e.created).add(e.timeLimit,"d"))*-1;e.expires=moment.duration(t).asHours()}}))})}function r(e,n){swal({title:"Delete Challenge Result?",text:"It'll be like it never happened",type:"error",showCancelButton:!0,confirmButtonText:"Delete",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){t.deleteChallenge(a.competition._id,e).then(function(){a.challenges.splice(n,1)})})}var a=this;a.challenges=null,a.deleteChallenge=r,i()}t.$inject=["$scope","challengesService","ngTableParams"],angular.module("app").directive("wpmActiveChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"=",allowDelete:"=",numberOfChallenges:"@",challengesPerPage:"@"},templateUrl:"/challenges/components/completed-challenges.html"};return e}function t(e,t,n,i){function o(){e.$watch("vm.competition",function(){l.competition&&r()})}function r(){n.getCompletedChallengesByCompetition(l.competition._id,l.numberOfChallenges).then(function(e){l.challenges=e.data,e.data.length>0&&(l.tableData=new i({page:1,count:l.challengesPerPage||5},{counts:[],total:l.challenges.length,getData:function(e,t){e.resolve(l.challenges.slice((t.page()-1)*t.count(),t.page()*t.count()))}}),_.forEach(l.challenges,function(e){e.loser="challenger"===e.winner?"opponent":"challenger","versus"===e.type&&(l.competition.players.length>2?(e.challenger.displayName="Team "+e.challenger.team,e.opponent.displayName="Team "+e.opponent.team):(e.challenger.displayName=_.find(l.competition.players,{position:e.challenger.team}).displayName,e.opponent.displayName=_.find(l.competition.players,{position:e.opponent.team}).displayName)),e.whenCompleted=moment(e.completed).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd",sameElse:"MMM DD, YYYY"})}))})}function a(e,t){swal({title:"Delete Challenge Result?",text:"You'll still need to reorder the players on your own",type:"error",showCancelButton:!0,confirmButtonText:"Delete",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){n.deleteChallenge(l.competition._id,e).then(function(){l.challenges.splice(t,1)})})}var l=this;l.challenges=null,l.deleteChallenge=a,o()}t.$inject=["$scope","$state","challengesService","ngTableParams"],angular.module("app").directive("wpmCompletedChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{player:"="},templateUrl:"/challenges/components/player-overall-results.html"};return e}function t(e){function t(){e.$watch("vm.player.results",function(){r.player&&(n(r.player),i(r.player),o(r.player))})}function n(e){for(var t=[],n=0;n<r.maxLevels;n++)t.push(n*(n+1)/2+1);e.level=t.length;for(var i=0;i<t.length;i++)if(e.position<t[i+1]){e.level=t.indexOf(t[i])+1;break}}function i(e){var t,n=0,i=!0;_.forEach(e.results,function(o){i&&("challenger"===o.winner&&o.challenger._id===e._id||"opponent"===o.winner&&o.opponent._id===e._id?"losing"!==t?(n+=1,t="winning"):i=!1:("opponent"===o.winner&&o.challenger._id===e._id||"challenger"===o.winner&&o.opponent._id===e._id)&&("winning"!==t?(n+=1,t="losing"):i=!1)),r.streak={type:t,value:n}})}function o(e){r.wins.asOpponent=_.size(_.filter(e.results,function(t){return t.opponent._id===e._id&&"opponent"===t.winner})),r.wins.asChallenger=_.size(_.filter(e.results,function(t){return t.challenger._id===e._id&&"challenger"===t.winner})),r.wins.total=r.wins.asChallenger+r.wins.asOpponent,r.wins.byForfeit=_.size(_.filter(e.results,function(t){return t.forfeit&&(t.challenger._id===e._id&&"challenger"===t.winner||t.opponent._id===e._id&&"opponent"===t.winner)})),r.loses.asOpponent=_.size(_.filter(e.results,function(t){return t.opponent._id===e._id&&"challenger"===t.winner})),r.loses.asChallenger=_.size(_.filter(e.results,function(t){return t.challenger._id===e._id&&"opponent"===t.winner})),r.loses.total=r.loses.asChallenger+r.loses.asOpponent,r.loses.byForfeit=_.size(_.filter(e.results,function(t){return t.forfeit&&(t.challenger._id===e._id&&"opponent"===t.winner||t.opponent._id===e._id&&"challenger"===t.winner)}))}var r=this;r.maxLevels=7,r.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},r.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},r.streak={type:null,value:0},t()}t.$inject=["$scope"],angular.module("app").directive("wpmPlayerOverallResults",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"=",team:"=",challenges:"="},templateUrl:"/challenges/components/team-overall-results.html"};return e}function t(e){function t(){e.$watch("vm.challenges",function(){o.challenges&&o.challenges.length>0&&o.competition&&(n(o.team,o.challenges),i(o.team,o.challenges),2===o.competition.players.length&&(o.singlePlayerTeams=!0,o.displayName=_.find(o.competition.players,{position:o.team}).displayName,o.playerName=_.find(o.competition.players,{position:o.team}).firstName+" "+_.find(o.competition.players,{position:o.team}).lastName))})}function n(e,t){var n,i=0,r=!0;_.forEach(t,function(t){r&&("challenger"===t.winner&&t.challenger.team===e||"opponent"===t.winner&&t.opponent.team===e?"losing"!==n?(i+=1,n="winning"):r=!1:("opponent"===t.winner&&t.challenger.team===e||"challenger"===t.winner&&t.opponent.team===e)&&("winning"!==n?(i+=1,n="losing"):r=!1)),o.streak={type:n,value:i}})}function i(e,t){o.wins.asOpponent=_.size(_.filter(t,function(t){return t.opponent.team===e&&"opponent"===t.winner})),o.wins.asChallenger=_.size(_.filter(t,function(t){return t.challenger.team===e&&"challenger"===t.winner})),o.wins.total=o.wins.asChallenger+o.wins.asOpponent,o.wins.byForfeit=_.size(_.filter(t,function(t){return t.forfeit&&(t.challenger.team===e&&"challenger"===t.winner||t.opponent.team===e&&"opponent"===t.winner)})),o.loses.asOpponent=_.size(_.filter(t,function(t){return t.opponent.team===e&&"challenger"===t.winner})),o.loses.asChallenger=_.size(_.filter(t,function(t){return t.challenger.team===e&&"opponent"===t.winner})),o.loses.total=o.loses.asChallenger+o.loses.asOpponent,o.loses.byForfeit=_.size(_.filter(t,function(t){return t.forfeit&&(t.challenger.team===e&&"opponent"===t.winner||t.opponent.team===e&&"challenger"===t.winner)}))}var o=this;o.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},o.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},o.streak={type:null,value:0},o.singlePlayerTeams=!1,t()}t.$inject=["$scope"],angular.module("app").directive("wpmTeamOverallResults",e)}(),function(){"use strict";function e(e){function t(t){return e.post("/api/challenges/pyramid/create",{challenge:t})}function n(t){return e.put("/api/challenges/pyramid/cancel",{challenge:t})}function i(t){return e.post("/api/challenges/versus/create",{challenge:t})}function o(t){return e.post("/api/challenges/pyramid/complete",{challenge:t})}function r(t){return e.post("/api/challenges/versus/complete",{challenge:t})}function a(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function l(t){return e.get("/api/challenges/active/competition",{params:{competitionId:t}})}function s(t,n){return e.get("/api/challenges/active/competition/player",{params:{competitionId:t,playerId:n}})}function c(t,n){return e.get("/api/challenges/completed/competition",{params:{competitionId:t,limit:n}})}function p(t,n){return e.delete("/api/challenges/active/competition/player/delete",{params:{competitionId:t,playerId:n}})}function u(t,n){return e.delete("/api/challenges/delete",{params:{competitionId:t,challengeId:n}})}function m(t,n){return e.get("/api/challenges/results/competition/player",{params:{competitionId:t,playerId:n}})}var d={createPyramidChallenge:t,createVersusChallenge:i,cancelPyramidChallenge:n,completePyramidChallenge:o,completeVersusChallenge:r,getChallengesByCompetition:a,getActiveChallengesByCompetition:l,getActiveChallengeByCompetitionByPlayer:s,getCompletedChallengesByCompetition:c,deleteActiveChallengeByCompetitionByPlayer:p,deleteChallenge:u,getPlayerResultsByCompetition:m};return d}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/footer.html"};return e}function t(e,t){function n(){t.logout()}var i=this;i.indentity=e,i.logout=n}t.$inject=["identityService","authService"],angular.module("app").directive("wpmFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"headerCtrl",restrict:"A",templateUrl:"/common/components/header.html"};return e}function t(e,t,n,i,o){function r(){a(),e.$watch("headerCtrl.indentity.currentUser",function(){n.isAuthenticated()&&a()})}function a(){u.alerts=[],n.isAuthenticated()&&o.getActiveAlertsByPlayer(n.currentUser._id).then(function(e){u.alerts=e.data})}function l(e,t){o.clearAlert(e).then(function(){u.alerts.splice(t,1)})}function s(){o.clearAllAlertsByPlayer(n.currentUser._id).then(function(){u.alerts=[]})}function c(){t.setSidebarStatus(!u.sidebarStatus.left)}function p(){i.logout()}var u=this;u.indentity=n,u.logout=p,u.sidebarStatus=t.getSidebarStatus(),u.toggleSidebar=c,u.clearAlert=l,u.clearAllAlerts=s,u.alerts=[],r(),e.$on("ws:update_alerts",function(e,t){n.isAuthenticated()&&_.some(t,["userId",n.currentUser._id])&&a()})}t.$inject=["$scope","sidebarService","identityService","authService","alertsService"],angular.module("app").directive("wpmHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"/common/components/sidebar.html"};return e}function t(e,t,n){function i(){t.logout()}var o=this;o.indentity=e,o.logout=i,o.sidebarStatus=n.getSidebarStatus()}t.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("wpmSidebar",e)}(),function(){"use strict";function e(){return function(e,t){if(!angular.isObject(e))return e;var n=[];for(var i in e)n.push(e[i]);return n.sort(function(e,n){return e=parseInt(e[t]),n=parseInt(n[t]),e-n}),n}}angular.module("app").filter("orderObjectBy",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/alerts/",{params:{userId:t}})}function n(t){return e.put("/api/alert/clear",{alertId:t})}function i(t){return e.put("/api/alerts/clear",{userId:t})}var o={getActiveAlertsByPlayer:t,clearAlert:n,clearAllAlertsByPlayer:i};return o}e.$inject=["$http"],angular.module("app").factory("alertsService",e)}(),function(){"use strict";function e(e){function t(){return!!this.currentUser}function n(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var i;null!==e.bootstrappedUserObject&&(i=e.bootstrappedUserObject);var o={currentUser:i,isAuthenticated:t,isAuthorized:n};return o}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,t,n){$.notify({message:e,url:t,target:n},{type:"info"})}function t(e,t,n){$.notify({message:e,url:t,target:n},{type:"success"})}function n(e,t,n){$.notify({message:e,url:t,target:n},{type:"warning"})}function i(e,t,n){$.notify({message:e,url:t,target:n},{type:"danger"})}function o(e,t,n){$.notify({message:e,url:t,target:n},{type:"inverse"})}var r={info:e,success:t,warning:n,error:i,inverse:o};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85},delay:5e3}),r}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(e,t,n,i){$(e).mCustomScrollbar({theme:t,scrollInertia:100,axis:n,mouseWheel:{enable:!0,axis:i,preventDefault:!0}})}var t={malihuScroll:e};return t}angular.module("app").factory("scrollbarService",e)}(),function(){"use strict";function e(){function e(){return n}function t(e){n.left=e}var n={left:!1,right:!1},i={getSidebarStatus:e,setSidebarStatus:t};return i}angular.module("app").factory("sidebarService",e)}(),function(){"use strict";function e(e,t,n){function i(){return"https:"===t.location.protocol?"wss://"+t.location.host:"ws://"+t.location.host}function o(){a=new WebSocket(i()),a.onmessage=function(t){s=0;var n=JSON.parse(t.data);e.$broadcast("ws:"+n.topic,n.data)},a.onclose=function(){s<l.length?(console.log("WebSocket closed. Reconnecting..."),n(o,1e3*l[s]),s+=1):console.log("Giving up on WebSocket")}}function r(e,t){var n=JSON.stringify({topic:e,data:t});a.send(n)}var a,l=[3,10,100,1e3],s=0,c={connect:o,send:r};return c}e.$inject=["$rootScope","$window","$timeout"],angular.module("app").factory("websocketService",e).run(["websocketService",function(e){e.connect()}])}(),function(){"use strict";function e(e,t){function n(){e.getPublicCompetitions().then(function(e){i.publicCompetitions=e.data}),t.isAuthorized("super-admin")&&e.getPrivateCompetitions().then(function(e){i.privateCompetitions=e.data})}var i=this;i.publicCompetitions=[],i.privateCompetitions=[],n()}e.$inject=["competitionsService","identityService"],angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"/competitions/components/competition-compact.html"};return e}function t(){function e(){}e()}angular.module("app").directive("wpmCompetitionCompact",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"/competitions/components/pending-players.html"};return e}function t(e){function t(){}function n(t){t.position=o.competition.players.length+1,e.approvePendingPlayer(o.competition._id,t)}function i(t){e.denyPendingPlayer(o.competition._id,t)}var o=this;o.pendingPlayers=[],o.approvePendingPlayer=n,o.denyPendingPlayer=i,t()}t.$inject=["competitionsService"],angular.module("app").directive("wpmPendingPlayers",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/competitions/components/pyramid.html",replace:!0,scope:{competition:"="},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,n,i,o,r,a){function l(){for(var t=A;t>0;--t)S.maxPlayers+=t;e.$watch("vm.competition",function(){S.competition&&(S.competitionId=S.competition._id,s(),c(),u(),m(),d())})}function s(){S.competition.players=i("orderBy")(S.competition.players,"position")}function c(){a.getActiveChallengesByCompetition(S.competitionId).then(function(e){_.forEach(e.data,function(e){var t=_.find(S.competition.players,{_id:e.challenger._id});t.class="unavailable",t.available=!1,t.challenge={position:"challenger",opponent:_.find(S.competition.players,{_id:e.opponent._id}).displayName};var n=_.find(S.competition.players,{_id:e.opponent._id});if(n.class="unavailable",n.available=!1,n.challenge={position:"opponent"},0!==e.timeLimit){var i=moment().diff(moment(e.created).add(e.timeLimit,"d"))*-1,o=moment.duration(i).asHours();i>0?n.challenge.expires=o:i<=0&&v(null,!0,n)}}),S.currentUserIsAdmin=!1,S.currentUserIsPending=!1,r.isAuthenticated()&&(S.currentUserIsAdmin=_.some(S.competition.admins,["_id",r.currentUser._id]),S.currentUserIsPending=_.some(S.competition.pendingPlayers,["_id",r.currentUser._id])),S.currentUserIsOnCompetition=!1,S.hasActiveChallenge=!1,_.forEach(S.competition.players,function(e){r.isAuthenticated()&&e._id===r.currentUser._id&&(S.currentUserIsOnCompetition=!0,e.class=e.class?e.class+" current-user":"current-user",S.currentUserPlayer=e,a.getActiveChallengeByCompetitionByPlayer(S.competitionId,e._id).then(function(t){if(t.data){S.hasActiveChallenge=!0,S.activeChallengeOpponent=t.data.challenger._id===e._id?t.data.opponent:t.data.challenger;var n=_.find(S.competition.players,{_id:S.activeChallengeOpponent._id});n.class=n.class?n.class+" current-opponent":"current-opponent"}else f()}))})})}function p(){S.breakPoints=[];for(var e=0;e<A;e++)S.breakPoints.push(e*(e+1)/2+1)}function u(){var e=0;S.levels=[],p();for(var t=0;t<S.competition.players.length;t++)S.breakPoints.indexOf(t+1)>-1&&(e+=1,S.levels.push(e)),S.competition.players[t].level=e}function m(){S.numberOfBlocks=0;for(var e=_.last(S.levels);e>0;e--)S.numberOfBlocks+=e}function d(){S.numberOfRealPlayers=S.competition.players.length;for(var e=S.competition.players.length;e<S.numberOfBlocks;e++)S.competition.players.push({firstName:"Empty",lastName:"Spot",displayName:"Empty Spot",position:99,class:"empty"});u()}function f(){if(S.availableChallenges=!1,S.currentUserIsOnCompetition&&!S.hasActiveChallenge){var e=S.currentUserPlayer.level>1?S.currentUserPlayer.level-1:null;_.forEach(S.competition.players,function(t){var n=null;t.level===e&&99!==t.position&&"unavailable"!==t.class&&t.available!==!1&&(n=_.find(S.currentUserPlayer.waitingPeriods,{player:t._id}),n&&moment().isBefore(n.expires)?(t.class="waiting",t.waitUntil=moment(n.expires).format("MMM Do  LT")):(S.availableChallenges=!0,t.available=!0,t.class="available"))})}}function h(e){if(e.available){S.hasActiveChallenge=!0;var t={type:S.competition.type,competitionName:S.competition.name,competitionId:S.competitionId,complete:!1,forfeit:!1,timeLimit:S.competition.forfeitDays,challenger:{_id:S.currentUserPlayer._id,email:S.currentUserPlayer.email,firstName:S.currentUserPlayer.firstName,lastName:S.currentUserPlayer.lastName,displayName:S.currentUserPlayer.displayName,position:S.currentUserPlayer.position},opponent:{_id:e._id,email:e.email,firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,position:e.position}};a.createPyramidChallenge(t).then(function(){S.competitionMenuToggle=!1})}else o.error("Sorry, that is not a valid challenge.")}function g(){a.getActiveChallengeByCompetitionByPlayer(S.competitionId,S.currentUserPlayer._id).then(function(e){e.data&&e.data.challenger._id===S.currentUserPlayer._id&&a.cancelPyramidChallenge(e.data).then(function(){S.hasActiveChallenge=!1})})}function v(e,t,i){var o=i||S.currentUserPlayer;a.getActiveChallengeByCompetitionByPlayer(S.competitionId,o._id).then(function(o){S.hasActiveChallenge=!1;var r=!1;t?(o.data.forfeit=!0,"opponent"===i.challenge.position?(o.data.winner="challenger",r=!0):o.data.winner="opponent"):e?o.data.challenger._id===S.currentUserPlayer._id?(o.data.winner="challenger",r=!0):o.data.winner="opponent":o.data.challenger._id===S.currentUserPlayer._id?o.data.winner="opponent":(o.data.winner="challenger",r=!0);var l,s=null;"opponent"===o.data.winner?(s=o.data.opponent,l=o.data.challenger):(s=o.data.challenger,l=o.data.opponent),n.createWaitingPeriod(S.competitionId,l._id,s._id,S.competition.waitingPeriodDays),r?n.swapPositions(S.competitionId,o.data.opponent,o.data.challenger).then(function(){a.completePyramidChallenge(o.data).then(function(){I&&P()})}):a.completePyramidChallenge(o.data).then(function(){I&&P()}),S.competitionMenuToggle=!1})}function y(e){v(null,!0,e)}function C(){if(r.isAuthenticated())if(S.numberOfRealPlayers<S.maxPlayers){var e={_id:r.currentUser._id,firstName:r.currentUser.firstName,lastName:r.currentUser.lastName,displayName:r.currentUser.displayName,email:r.currentUser.username,position:S.numberOfRealPlayers+1};S.competition.restrictJoins?swal({title:"Send Join Request?",text:"This is a closed competition so an admin must approve your request",type:"warning",showCancelButton:!0,confirmButtonText:"Send Request",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToCompetitionRequest(S.competition,e).then(function(){S.currentUserIsPending=!0}),swal("Request Sent","You will receive an email once an admin processes the request.","success")}):swal({title:"Join Competition?",text:"You'll be added to the bottom",type:"warning",showCancelButton:!0,confirmButtonText:"Join",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToCompetition(S.competitionId,e),swal("Welcome Aboard!","Now start fighting your way to the top","success")})}else o.warning("Sorry, this competition is full");else o.warning("Please login to join a competition"),t.previous="competitions.view",t.prevParams={competitionId:S.competitionId},t.go("login")}function w(){swal({title:"Leave Competition?",text:"You will lose your spot and forfeit any active challenges.",type:"error",showCancelButton:!0,confirmButtonText:"Yes, leave",confirmButtonClass:"btn-danger",cancelButtonText:"No, stay",closeOnConfirm:!1,closeOnCancel:!0},function(){P(),swal("OK, you'r out!","You've been removed from the competition.","success")})}function P(){r.isAuthenticated()&&S.currentUserIsOnCompetition&&(I=!0,S.hasActiveChallenge?v(null,!0,S.currentUserPlayer):(S.currentUserIsOnCompetition=!1,S.hasActiveChallenge=!1,n.getCompetition(S.competitionId).then(function(e){var t=e.data,i=S.currentUserPlayer.position;_.forEach(t.players,function(e){e.position>=i&&(e.position-=1)});for(var o=_.remove(t.players,function(e){return e._id===S.currentUserPlayer._id}),r=[],a=0;a<S.numberOfRealPlayers-1;++a){var l={_id:t.players[a]._id,firstName:t.players[a].firstName,lastName:t.players[a].lastName,displayName:t.players[a].displayName,position:t.players[a].position};r.push(l)}n.removedPlayerFromCompetition(S.competitionId,o[0],r).then(function(){I=!1})})))}function b(e){99!==e.position||S.currentUserIsOnCompetition?e.showChallengeModal=!e.showChallengeModal:C()}function U(){n.getCompetition(S.competitionId).then(function(e){S.competition=e.data})}var A=7,S=this;S.competitionId=null,S.breakPoints=[],S.levels=[],S.numberOfBlocks=0,S.currentUserIsOnCompetition=!1,S.currentUserIsPending=!1,S.currentUserIsAdmin=!1,S.hasActiveChallenge=!1,S.activeChallengeOpponent=null,S.availableChallenges=!1,S.createChallenge=h,S.cancelChallenge=g,S.completeChallenge=v,S.forfeitChallenge=y,S.currentUserPlayer={},S.competitionMenuToggle=!1,S.addCurrentUserToCompetition=C,S.confirmRemoveCurrentUserFromCompetition=w,S.playerClick=b,S.numberOfRealPlayers=0,S.maxPlayers=0,l();var I=!1;e.$on("ws:competition_updated",function(e,t){S.competitionId===t.competitionId&&(o.info(t.description),U())})}t.$inject=["$scope","$state","competitionsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("wpmPyramid",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"/competitions/components/update-admins.html"};return e}function t(e,t,n,i,o,r){function a(){e.$watch("vm.competition",function(){f.competition&&(f.addedAdmins=_.cloneDeep(f.competition.admins),f.disableSubmit=!0,f.userIsPrimaryAdmin=_.find(f.competition.admins,{primary:!0})._id===r.currentUser._id,l())})}function l(){f.availableAdmins=[],m=[],o.getAllUsers().then(function(e){_.forEach(f.competition.admins,function(t){_.remove(e.data,function(e){return t._id===e._id});
}),_.forEach(e.data,function(e){f.availableAdmins.push({firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,email:e.username,_id:e._id})}),f.availableAdmins=t("orderBy")(f.availableAdmins,"firstName"),d=_.cloneDeep(f.availableAdmins)})}function s(){f.competition.admins=f.addedAdmins,n.updateCompetition(f.competition).then(function(){f.disableSubmit=!0})}function c(){m=[],f.addedAdmins=_.cloneDeep(f.competition.admins),f.availableAdmins=_.cloneDeep(d)}function p(e){m.push(e),f.availableAdmins.push(_.remove(f.addedAdmins,{_id:e._id})[0]),f.disableSubmit=!1}function u(e){f.addedAdmins.push(_.remove(f.availableAdmins,{_id:e._id})[0]),f.disableSubmit=!1}var m=[],d=[],f=this;f.availableAdmins=[],f.addedAdmins=[],f.userIsPrimaryAdmin=!1,f.updateCompetition=s,f.cancelUpdate=c,f.removeAdmin=p,f.addAdmin=u,f.disableSubmit=!0,a()}t.$inject=["$scope","$filter","competitionsService","challengesService","userService","identityService"],angular.module("app").directive("wpmUpdateAdmins",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"/competitions/components/update-players.html"};return e}function t(e,t,n,i,o,r){function a(){for(var t=v;t>0;--t)y+=t;e.$watch("vm.competition",function(){C.competition&&(C.addedPlayers=_.cloneDeep(C.competition.players),C.disableSubmit=!0,l())})}function l(){C.availablePlayers=[],h=[],o.getAllUsers().then(function(e){_.forEach(C.competition.players,function(t){_.remove(e.data,function(e){return t._id===e._id})}),_.forEach(e.data,function(e){C.availablePlayers.push({firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,email:e.username,_id:e._id})}),C.availablePlayers=t("orderBy")(C.availablePlayers,"firstName"),g=_.cloneDeep(C.availablePlayers)})}function s(){"versus"===C.competition.type&&C.addedPlayers.length%2>0?r.error("A Versus competition must have an even number of players"):C.addedPlayers.length>y?r.error("A competition can have a maximum of "+y+" players"):(_.forEach(h,function(e){i.deleteActiveChallengeByCompetitionByPlayer(C.competition._id,e._id)}),C.competition.players=C.addedPlayers,n.updateCompetition(C.competition).then(function(){C.disableSubmit=!0}))}function c(){h=[],C.addedPlayers=_.cloneDeep(C.competition.players),C.availablePlayers=_.cloneDeep(g)}function p(){"versus"===C.competition.type?m():"pyramid"===C.competition.type&&u(),C.disableSubmit=!1}function u(){var e=1;_.forEach(C.addedPlayers,function(t){t.position=e,++e})}function m(){_.forEach(C.addedPlayers,function(e){e.position=2});for(var e=0;e<C.addedPlayers.length/2;e++)C.addedPlayers[e].position=1}function d(e){h.push(e),C.availablePlayers.push(_.remove(C.addedPlayers,{_id:e._id})[0]),p()}function f(e){C.addedPlayers.push(_.remove(C.availablePlayers,{_id:e._id})[0]),p(),C.disableSubmit=!1}var h=[],g=[],v=7,y=null,C=this;C.availablePlayers=[],C.addedPlayers=[],C.updateCompetition=s,C.cancelUpdate=c,C.reorderPlayers=p,C.removePlayer=d,C.addPlayer=f,C.disableSubmit=!0,a()}t.$inject=["$scope","$filter","competitionsService","challengesService","userService","notifyService"],angular.module("app").directive("wpmUpdatePlayers",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/competitions/components/versus.html",replace:!0,scope:{competition:"="},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,n,i,o){function r(){e.$watch("vm.competition",function(){m.competition&&(m.competitionId=m.competition._id,m.showControls=!1,m.showChallengeModal=!1,a(),l())})}function a(){m.competition.teams=[{players:_.filter(m.competition.players,["position",1])},{players:_.filter(m.competition.players,["position",2])}],2===m.competition.players.length&&(m.singlePlayerTeams=!0)}function l(){m.currentUserIsAdmin=!1,m.currentUserIsPending=!1,n.isAuthenticated()&&(m.currentUserIsAdmin=_.some(m.competition.admins,["_id",n.currentUser._id]),m.currentUserIsPending=_.some(m.competition.pendingPlayers,["_id",n.currentUser._id])),m.currentUserIsOnCompetition=!1,m.hasActiveChallenge=!1,_.forEach(m.competition.players,function(e){n.isAuthenticated()&&e._id===n.currentUser._id&&(m.currentUserIsOnCompetition=!0,e.class="current-user",m.currentUserPlayer=e,m.competition.teams[e.position-1].class="current-user-team",m.competition.class="current-user-on-competition")}),i.getActiveChallengesByCompetition(m.competitionId).then(function(e){if(e.data.length>0&&(m.activeChallenge=e.data[0],m.hasActiveChallenge=!0,0!==m.activeChallenge.timeLimit)){var t=moment().diff(moment(m.activeChallenge.created).add(m.activeChallenge.timeLimit,"d"))*-1,n=moment.duration(t).asHours();t>0?m.challengeExpireTime=n:t<=0&&p(null,!0)}})}function s(){m.hasActiveChallenge&&m.currentUserIsOnCompetition&&(m.showControls=!m.showControls)}function c(e){if(m.showChallengeModal=!1,m.hasActiveChallenge)o.error("Sorry, you are already in an active challenge.");else{m.hasActiveChallenge=!0;var t={type:m.competition.type,competitionName:m.competition.name,competitionId:m.competitionId,complete:!1,forfeit:!1,timeLimit:m.competition.forfeitDays,challenger:{team:m.currentUserPlayer.position,_id:m.currentUserPlayer._id},opponent:{team:e}};i.createVersusChallenge(t).then(function(){m.competitionMenuToggle=!1})}}function p(e,t){m.hasActiveChallenge=!1;var n=m.activeChallenge;t?(n.forfeit=!0,n.winner="challenger"):m.activeChallenge.challenger.team===e?n.winner="challenger":n.winner="opponent",i.completeVersusChallenge(n),m.competitionMenuToggle=!1}function u(){t.getCompetition(m.competitionId).then(function(e){m.competition=e.data})}var m=this;m.competitionId=null,m.currentUserIsAdmin=!1,m.currentUserIsPending=!1,m.currentUserIsOnCompetition=!1,m.activeChallenge=null,m.hasActiveChallenge=!1,m.currentUserPlayer=null,m.createChallenge=c,m.completeChallenge=p,m.challengeExpireTime=null,m.showControls=!1,m.showChallengeModal=!1,m.toggleControls=s,m.singlePlayerTeams=!1,r(),e.$on("ws:competition_updated",function(e,t){m.competitionId===t.competitionId&&(o.info(t.description),u())})}t.$inject=["$scope","competitionsService","identityService","challengesService","notifyService"],angular.module("app").directive("wpmVersus",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/competition",{params:{competitionId:t}})}function n(t){return e.get("/api/competitions/user",{params:{userId:t}})}function i(){return e.get("/api/competitions/public")}function o(){return e.get("/api/competitions/private")}function r(t){return e.post("/api/competitions/create",{competition:t})}function a(t){return e.post("/api/competitions/update",{competition:t})}function l(t){return e.delete("/api/competitions/delete",{params:{competitionId:t}})}function s(t,n,i,o){return e.put("/api/competitions/createWaitingPeriod",{competitionId:t,loserId:n,winnerId:i,waitingPeriod:o})}function c(t,n,i){return e.post("/api/competitions/swapPositions",{competitionId:t,challenger:n,opponent:i})}function p(t,n){return e.post("/api/competitions/addPlayer",{competitionId:t,player:n})}function u(t,n){return e.post("/api/competitions/addPlayerRequest",{competition:t,player:n})}function m(t,n,i){return e.post("/api/competitions/removePlayer",{competitionId:t,removedPlayer:n,players:i})}function d(t,n){return e.post("/api/competitions/approvePlayer",{competitionId:t,player:n})}function f(t,n){return e.post("/api/competitions/denyPlayer",{competitionId:t,player:n})}var h={getCompetition:t,getCompetitionsForUser:n,getPublicCompetitions:i,getPrivateCompetitions:o,createCompetition:r,updateCompetition:a,deleteCompetition:l,createWaitingPeriod:s,swapPositions:c,addPlayerToCompetition:p,addPlayerToCompetitionRequest:u,removedPlayerFromCompetition:m,approvePendingPlayer:d,denyPendingPlayer:f};return h}e.$inject=["$http"],angular.module("app").factory("competitionsService",e)}(),function(){"use strict";function e(e,t,n,i,o,r,a,l){function s(){n.competitionId?(d.competitionId=n.competitionId,c()):t.go("competitions.myCompetitions")}function c(){o.getCompetition(d.competitionId).then(function(e){e.data&&_.some(e.data.admins,["_id",r.currentUser._id])?(d.isAdmin=!0,e.data.players=i("orderBy")(e.data.players,"position"),d.competition=e.data):t.go("competitions.myCompetitions")}),l.getCompletedChallengesByCompetition(d.competitionId).then(function(e){d.challenges=e.data})}function p(){o.getCompetition(d.competitionId).then(function(e){var t=e.data;t.restrictJoins=d.competition.restrictJoins,o.updateCompetition(t)})}function u(){o.getCompetition(d.competitionId).then(function(e){var t=e.data;t.private=d.competition.private,o.updateCompetition(t)})}function m(){swal({title:"Delete Competition?",text:"This can not be undone",type:"error",showCancelButton:!0,confirmButtonText:"Delete",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){o.deleteCompetition(d.competitionId).then(function(){t.go("competitions.myCompetitions")})})}var d=this;d.competitionId=null,d.updateCompetitionRestrictJoins=p,d.updateCompetitionPrivate=u,d.deleteCompetition=m,s(),e.$on("ws:competition_updated",function(e,t){d.competitionId===t.competitionId&&(a.info(t.description),c())}),e.$on("ws:competition_deleted",function(e,n){d.competitionId===n.competitionId&&(a.info(n.description),t.go("competitions.myCompetitions"))})}e.$inject=["$scope","$state","$stateParams","$filter","competitionsService","identityService","notifyService","challengesService"],angular.module("app").controller("CompetitionAdminCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o,r){function a(){t.competitionId&&(s.competitionId=t.competitionId,l())}function l(){i.getCompetition(s.competitionId).then(function(e){e.data?(s.competition=e.data,"pyramid"===s.competition.type?_.forEach(s.competition.players,function(e){r.getPlayerResultsByCompetition(s.competitionId,e._id).then(function(t){e.results=t.data})}):"versus"===s.competition.type&&(s.teams=[{number:1},{number:2}])):n.go("competitions.myCompetitions")}),r.getCompletedChallengesByCompetition(s.competitionId).then(function(e){s.challenges=e.data})}var s=this;s.competitionId=null,s.competition={},s.playersResults=[],s.challenges=[],a(),e.$on("ws:competition_updated",function(e,t){s.competitionId===t.competitionId&&(o.info(t.description),l())}),e.$on("ws:competition_deleted",function(e,t){s.competitionId===t.competitionId&&(o.info(t.description),n.go("competitions.myCompetitions"))})}e.$inject=["$scope","$stateParams","$state","competitionsService","notifyService","challengesService"],angular.module("app").controller("CompetitionStatsCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o,r){function a(){n.competitionId&&(s.competitionId=n.competitionId,l())}function l(){i.getCompetition(s.competitionId).then(function(e){e.data?s.competition=e.data:t.go("competitions.myCompetitions")})}var s=this;s.competitionId=null,s.competition=null,a(),e.$on("ws:competition_deleted",function(e,n){s.competitionId===n.competitionId&&(r.info(n.description),t.go("competitions.myCompetitions"))})}e.$inject=["$scope","$state","$stateParams","competitionsService","challengesService","notifyService"],angular.module("app").controller("CompetitionCtrl",e)}(),function(){"use strict";function e(e){function t(){e.getPublicCompetitions().then(function(e){n.competitions=e.data})}var n=this;n.competitions=[],t()}e.$inject=["competitionsService"],angular.module("app").controller("CompetitionsCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o,r){function a(){n.getAllUsers().then(function(e){g.availablePlayers=t("orderBy")(e.data,"firstName")});for(var e=f;e>0;--e)h+=e;for(e=0;e<f;e++)d.push(e*(e+1)/2+1)}function l(e){g.addedPlayers.push(_.remove(g.availablePlayers,{_id:e._id})[0]),c()}function s(e){g.availablePlayers.push(_.remove(g.addedPlayers,{_id:e._id})[0]),c()}function c(){"versus"===g.newCompetition.type?u():"pyramid"===g.newCompetition.type&&p()}function p(){var e=1;_.forEach(g.addedPlayers,function(t){t.position=e,++e})}function u(){_.forEach(g.addedPlayers,function(e){e.position=2});for(var e=0;e<g.addedPlayers.length/2;e++)g.addedPlayers[e].position=1}function m(t){if("versus"===t.type&&g.addedPlayers.length%2>0)r.error("A Versus competition must have an even number of players");else if(g.addedPlayers.length>h)r.error("A competition can have a maximum of "+h+" players");else{angular.forEach(g.addedPlayers,function(e){var n={_id:e._id,email:e.username,firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,position:e.position};t.players.push(n)}),t.admins=[{_id:o.currentUser._id,email:o.currentUser.username,firstName:o.currentUser.firstName,lastName:o.currentUser.lastName,displayName:o.currentUser.displayName,primary:!0}];for(var n=0;n<d.length;n++)if(t.players.length<d[n]){t.levels=n;break}i.createCompetition(t).then(function(t){e.go("competitions.view",{competitionId:t.data._id})})}}var d=[],f=7,h=null,g=this;g.newCompetition={players:[],restrictJoins:!1,private:!1},g.availablePlayers=[],g.addedPlayers=[],g.createCompetition=m,g.addPlayer=l,g.removePlayer=s,g.reorderPlayers=c,g.newCompetition.forfeitDays=1,g.newCompetition.waitingPeriodDays=1,g.competitionTypes=["pyramid","versus"],a()}e.$inject=["$state","$filter","userService","competitionsService","identityService","notifyService"],angular.module("app").controller("CreateCompetitionCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o){function r(){a()}function a(){l=[],s.activeChallenge=null,i.isAuthenticated()&&t.getCompetitionsForUser(i.currentUser._id).then(function(e){s.competitions=e.data,_.forEach(s.competitions,function(e){l.push(e._id),"pyramid"===e.type?n.getActiveChallengeByCompetitionByPlayer(e._id,i.currentUser._id).then(function(t){t.data&&(e.activeChallenge=t.data,0!==e.activeChallenge.timeLimit&&(e.activeChallenge.expires=moment().diff(moment(e.activeChallenge.created).add(e.activeChallenge.timeLimit,"d"),"s")*-1))}):"versus"===e.type&&n.getActiveChallengesByCompetition(e._id).then(function(t){t.data.length>0&&(e.activeChallenge=t.data[0],0!==e.activeChallenge.timeLimit&&(e.activeChallenge.expires=moment().diff(moment(e.activeChallenge.created).add(e.activeChallenge.timeLimit,"d"),"s")*-1))})})})}var l=[],s=this;s.activeChallenge=null,r(),e.$on("ws:competition_updated",function(e,t){l.indexOf(t.competitionId)>=0&&(o.info(t.description),a())})}e.$inject=["$scope","competitionsService","challengesService","identityService","notifyService"],angular.module("app").controller("MyCompetitionsCtrl",e)}(),function(){"use strict";function e(e,t,n){function i(){e.currentUser.displayName||(r.user.displayName=e.currentUser.firstName+" "+e.currentUser.lastName)}function o(i){var o=[];t.getAllUsers().then(function(a){if(_.forEach(a.data,function(e){o.push(e.displayName.toLowerCase())}),i.password!==i.confirmPassword)n.error("Passwords don't match!");else if(i.firstName.length<1||i.lastName.length<1||i.displayName.length<1)n.error("Don't leave names blank!  How will people know who you are?");else if(_.indexOf(o,i.displayName.toLowerCase())>-1)n.error("Sorry, someone else is already using that display name");else{var l={_id:i._id};(i.firstName!==e.currentUser.firstName&&i.firstName.length>0||i.lastName!==e.currentUser.lastName&&i.lastName.length>0||i.displayName!==e.currentUser.displayName&&i.displayName.length>0)&&(l.firstName=i.firstName,l.lastName=i.lastName,l.displayName=i.displayName),i.password&&i.password.lentgh>0&&(l.password=i.password),t.updateUser(l).then(function(){n.success("Your information has been updated"),r.userForm.$setPristine();var t=angular.copy(e.currentUser);angular.extend(t,l),e.currentUser=t,r.user.confirmPassword=r.user.password=""})}})}var r=this;r.user={_id:e.currentUser._id,firstName:e.currentUser.firstName,lastName:e.currentUser.lastName,displayName:e.currentUser.displayName},r.updateUser=o,r.userForm={},i()}e.$inject=["identityService","userService","notifyService"],angular.module("app").controller("UserCtrl",e)}(),function(){"use strict";function e(e){function t(t,n,i){var o=i.scrollaxis||"y",r=i.theme||"minimal-dark",a=i.mousewheelaxis||"y";$("html").hasClass("ismobile")||e.malihuScroll(n,r,o,a)}var n={restrict:"C",link:t};return n}e.$inject=["scrollbarService"],angular.module("app").directive("cOverflow",e)}(),function(){"use strict";function e(){function e(e,t){t.click(function(){t.next().slideToggle(200),t.parent().toggleClass("toggled")})}var t={restrict:"A",link:e};return t}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,t){t.hasClass("btn-icon")||t.hasClass("btn-float")?Waves.attach(t,["waves-circle"]):t.hasClass("btn-light")?Waves.attach(t,["waves-light"]):Waves.attach(t),Waves.init()}var t={restrict:"C",link:e};return t}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,t){var n=t.children().first(),i=t.parent().hasClass("fg-float");n.focus(function(){t.addClass("fg-toggled")}),n.blur(function(){(!i||i&&0===n.val().length)&&t.removeClass("fg-toggled")})}var t={restrict:"C",link:e};return t}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAuY29uZmlnLmpzIiwiYXBwLmNvbnRyb2xsZXIuanMiLCJhcHAucm91dGVzLmpzIiwiYXBwLnJ1bi5qcyIsImF1dGhlbnRpY2F0aW9uL3NlcnZpY2VzL2F1dGguc2VydmljZS5qcyIsImF1dGhlbnRpY2F0aW9uL3NlcnZpY2VzL3VzZXIuc2VydmljZS5qcyIsImF1dGhlbnRpY2F0aW9uL3ZpZXdzL2xvZ2luLmNvbnRyb2xsZXIuanMiLCJhdXRoZW50aWNhdGlvbi92aWV3cy9wYXNzd29yZC1yZXNldC5jb250cm9sbGVyLmpzIiwiYXV0aGVudGljYXRpb24vdmlld3MvcmVnaXN0ZXIuY29udHJvbGxlci5qcyIsImF1dGhlbnRpY2F0aW9uL3ZpZXdzL3ZlcmlmaWNhdGlvbi5jb250cm9sbGVyLmpzIiwiY2hhbGxlbmdlcy9jb21wb25lbnRzL2FjdGl2ZS1jaGFsbGVuZ2VzLmRpcmVjdGl2ZS5qcyIsImNoYWxsZW5nZXMvY29tcG9uZW50cy9jb21wbGV0ZWQtY2hhbGxlbmdlcy5kaXJlY3RpdmUuanMiLCJjaGFsbGVuZ2VzL2NvbXBvbmVudHMvcGxheWVyLW92ZXJhbGwtcmVzdWx0cy5kaXJlY3RpdmUuanMiLCJjaGFsbGVuZ2VzL2NvbXBvbmVudHMvdGVhbS1vdmVyYWxsLXJlc3VsdHMuZGlyZWN0aXZlLmpzIiwiY2hhbGxlbmdlcy9zZXJ2aWNlcy9jaGFsbGVuZ2VzLnNlcnZpY2UuanMiLCJjb21tb24vY29tcG9uZW50cy9mb290ZXIuZGlyZWN0aXZlLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvaGVhZGVyLmRpcmVjdGl2ZS5qcyIsImNvbW1vbi9jb21wb25lbnRzL3NpZGViYXIuZGlyZWN0aXZlLmpzIiwiY29tbW9uL2ZpbHRlcnMvb3JkZXItb2JqZWN0LWJ5LmZpbHRlci5qcyIsImNvbW1vbi9zZXJ2aWNlcy9hbGVydHMuc2VydmljZS5qcyIsImNvbW1vbi9zZXJ2aWNlcy9pbmRlbnRpdHkuc2VydmljZS5qcyIsImNvbW1vbi9zZXJ2aWNlcy9ub3RpZnkuc2VydmljZS5qcyIsImNvbW1vbi9zZXJ2aWNlcy9zY3JvbGxiYXIuc2VydmljZS5qcyIsImNvbW1vbi9zZXJ2aWNlcy9zaWRlYmFyLnNlcnZpY2UuanMiLCJjb21tb24vc2VydmljZXMvd2Vic29ja2V0LnNlcnZpY2UuanMiLCJjb21tb24vdmlld3MvaG9tZS5jb250cm9sbGVyLmpzIiwiY29tcGV0aXRpb25zL2NvbXBvbmVudHMvY29tcGV0aXRpb24tY29tcGFjdC5kaXJlY3RpdmUuanMiLCJjb21wZXRpdGlvbnMvY29tcG9uZW50cy9wZW5kaW5nLXBsYXllcnMuZGlyZWN0aXZlLmpzIiwiY29tcGV0aXRpb25zL2NvbXBvbmVudHMvcHlyYW1pZC5kaXJlY3RpdmUuanMiLCJjb21wZXRpdGlvbnMvY29tcG9uZW50cy91cGRhdGUtYWRtaW5zLmRpcmVjdGl2ZS5qcyIsImNvbXBldGl0aW9ucy9jb21wb25lbnRzL3VwZGF0ZS1wbGF5ZXJzLmRpcmVjdGl2ZS5qcyIsImNvbXBldGl0aW9ucy9jb21wb25lbnRzL3ZlcnN1cy5kaXJlY3RpdmUuanMiLCJjb21wZXRpdGlvbnMvc2VydmljZXMvY29tcGV0aXRpb25zLnNlcnZpY2UuanMiLCJjb21wZXRpdGlvbnMvdmlld3MvY29tcGV0aXRpb24tYWRtaW4uY29udHJvbGxlci5qcyIsImNvbXBldGl0aW9ucy92aWV3cy9jb21wZXRpdGlvbi1zdGF0cy5jb250cm9sbGVyLmpzIiwiY29tcGV0aXRpb25zL3ZpZXdzL2NvbXBldGl0aW9uLmNvbnRyb2xsZXIuanMiLCJjb21wZXRpdGlvbnMvdmlld3MvY29tcGV0aXRpb25zLmNvbnRyb2xsZXIuanMiLCJjb21wZXRpdGlvbnMvdmlld3MvY3JlYXRlLWNvbXBldGl0aW9uLmNvbnRyb2xsZXIuanMiLCJjb21wZXRpdGlvbnMvdmlld3MvbXktY29tcGV0aXRpb25zLmNvbnRyb2xsZXIuanMiLCJ1c2Vycy92aWV3cy91c2VyLmNvbnRyb2xsZXIuanMiLCJjb21tb24vY29tcG9uZW50cy91aS9zY3JvbGxiYXIuZGlyZWN0aXZlLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvdWkvdG9nZ2xlLXN1Ym1lbnUuZGlyZWN0aXZlLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvdWkvd2F2ZXMuZGlyZWN0aXZlLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvdWkvZm9ybXMvZmctbGluZS5kaXJlY3RpdmUuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZ3VyYXRpb24iLCIkaHR0cFByb3ZpZGVyIiwiJHVpYlRvb2x0aXBQcm92aWRlciIsIiRxUHJvdmlkZXIiLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJnZXQiLCJvcHRpb25zIiwiYXBwZW5kVG9Cb2R5IiwiZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMiLCJjb25maWciLCJBcHBDdHJsIiwiJHN0YXRlIiwibG9jYWxTdG9yYWdlU2VydmljZSIsInRvZ2dsZVNpZGViYXJMb2NrZWQiLCJsb2NrZWQiLCJzZXQiLCJhcHBDdHJsIiwidGhpcyIsImxvY2tTaWRlYmFyIiwiY29udHJvbGxlciIsImNvbmZpZ3VyZVJvdXRlcyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJyb3V0ZVJvbGVDaGVja3MiLCJzdXBlckFkbWluIiwicmVxdWlyZVN1cGVyQWRtaW4iLCJhZG1pbiIsInJlcXVpcmVBZG1pbiIsInVzZXIiLCJyZXF1aXJlQXV0aCIsImh0bWw1TW9kZSIsIm90aGVyd2lzZSIsIndoZW4iLCJzdGF0ZSIsInVybCIsInZpZXdzIiwiY29udGVudCIsImNvbnRyb2xsZXJBcyIsInRlbXBsYXRlVXJsIiwiY29udGVudEAiLCJyZXNvbHZlIiwiYXV0aCIsImF1dGhTZXJ2aWNlIiwiYXV0aG9yaXplQ3VycmVudFVzZXJGb3JSb3V0ZSIsImF1dGhlbnRpY2F0ZWRVc2VyRm9yUm91dGUiLCIkaW5qZWN0IiwiYXBwUnVuIiwiJHJvb3RTY29wZSIsIiRkb2N1bWVudCIsInNpZGViYXJTZXJ2aWNlIiwiJG9uIiwiZXZlbnQiLCJ0b1N0YXRlIiwidG9QYXJhbXMiLCJmcm9tU3RhdGUiLCJmcm9tUGFyYW1zIiwiZXJyb3IiLCJnbyIsInByZXZpb3VzIiwicHJldlBhcmFtcyIsInNldFNpZGViYXJTdGF0dXMiLCJib2R5Iiwic2Nyb2xsVG9wIiwiZG9jdW1lbnRFbGVtZW50IiwicnVuIiwiJGh0dHAiLCIkcSIsInVzZXJTZXJ2aWNlIiwiaWRlbnRpdHlTZXJ2aWNlIiwibm90aWZ5U2VydmljZSIsImF1dGhlbnRpY2F0ZVVzZXIiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiZGZkIiwiZGVmZXIiLCJwb3N0IiwidGhlbiIsInJlc3BvbnNlIiwiZGF0YSIsInN1Y2Nlc3MiLCJjdXJyZW50VXNlciIsIm1lc3NhZ2UiLCJwcm9taXNlIiwiY3JlYXRlVXNlciIsInVzZXJEYXRhIiwicmVhc29uIiwibG9nb3V0IiwidW5kZWZpbmVkIiwicm9sZSIsImlzQXV0aG9yaXplZCIsInJlamVjdCIsImlzQXV0aGVudGljYXRlZCIsInNlcnZpY2UiLCJmYWN0b3J5IiwiZ2V0QWxsVXNlcnMiLCJ1c2VycyIsIl8iLCJmb3JFYWNoIiwiZGlzcGxheU5hbWUiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsInNvcnRCeSIsInZlcmlmeVVzZXIiLCJ1c2VySWQiLCJ2ZXJpZmljYXRpb25Ub2tlbiIsInBhcmFtcyIsImdlbmVyYXRlUGFzc3dvcmRSZXNldExpbmsiLCJyZXNldFBhc3N3b3JkIiwicHV0IiwidXBkYXRlVXNlciIsIkxvZ2luQ3RybCIsImFjdGl2YXRlIiwibG9naW4iLCJ2bSIsIlBhc3N3b3JkUmVzZXRDdHJsIiwiJHN0YXRlUGFyYW1zIiwidmVyaWZpZWQiLCJyZXNldFBhc3N3b3JkRm9ybSIsImNvbmZpcm1QYXNzd29yZCIsIlJlZ2lzdGVyQ3RybCIsInJlZ2lzdGVyIiwibmV3VXNlciIsIlZlcmlmaWNhdGlvbkN0cmwiLCJ2ZXJpZnlpbmciLCJ3cG1BY3RpdmVDaGFsbGVuZWdlcyIsImRpcmVjdGl2ZSIsImJpbmRUb0NvbnRyb2xsZXIiLCJjdHJsRnVuYyIsInJlc3RyaWN0Iiwic2NvcGUiLCJjb21wZXRpdGlvbiIsImFsbG93RGVsZXRlIiwibnVtYmVyT2ZDaGFsbGVuZ2VzIiwiY2hhbGxlbmdlc1BlclBhZ2UiLCIkc2NvcGUiLCJjaGFsbGVuZ2VzU2VydmljZSIsIm5nVGFibGVQYXJhbXMiLCIkd2F0Y2giLCJnZXRBY3RpdmVDaGFsbGVuZ2VzIiwiZ2V0QWN0aXZlQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24iLCJfaWQiLCJjaGFsbGVuZ2VzIiwibGVuZ3RoIiwidGFibGVEYXRhIiwicGFnZSIsImNvdW50IiwiY291bnRzIiwidG90YWwiLCJnZXREYXRhIiwiJGRlZmVyIiwic2xpY2UiLCJjaGFsbGVuZ2UiLCJ0eXBlIiwicGxheWVycyIsImNoYWxsZW5nZXIiLCJ0ZWFtIiwib3Bwb25lbnQiLCJmaW5kIiwicG9zaXRpb24iLCJ0aW1lTGltaXQiLCJ0aW1lVG9FeHBpcmUiLCJtb21lbnQiLCJkaWZmIiwiY3JlYXRlZCIsImFkZCIsImV4cGlyZXMiLCJkdXJhdGlvbiIsImFzSG91cnMiLCJkZWxldGVDaGFsbGVuZ2UiLCJjaGFsbGVuZ2VJZCIsIiRpbmRleCIsInN3YWwiLCJ0aXRsZSIsInRleHQiLCJzaG93Q2FuY2VsQnV0dG9uIiwiY29uZmlybUJ1dHRvblRleHQiLCJjYW5jZWxCdXR0b25UZXh0IiwiY2xvc2VPbkNvbmZpcm0iLCJjbG9zZU9uQ2FuY2VsIiwic3BsaWNlIiwid3BtQ29tcGxldGVkQ2hhbGxlbmVnZXMiLCJnZXRDb21wbGV0ZWRDaGFsbGVuZ2VzIiwiZ2V0Q29tcGxldGVkQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24iLCJsb3NlciIsIndpbm5lciIsIndoZW5Db21wbGV0ZWQiLCJjb21wbGV0ZWQiLCJjYWxlbmRhciIsInNhbWVEYXkiLCJuZXh0RGF5IiwibmV4dFdlZWsiLCJsYXN0RGF5IiwibGFzdFdlZWsiLCJzYW1lRWxzZSIsIndwbVBsYXllck92ZXJhbGxSZXN1bHRzIiwicGxheWVyIiwiYXNzaWducGxheWVyc1RvTGV2ZWxzIiwiY2FsY3VsYXRlU3RyZWFrIiwiY2FsY3VhdGVXaW5BbmRMb3NlcyIsImJyZWFrUG9pbnRzIiwiaSIsIm1heExldmVscyIsInB1c2giLCJsZXZlbCIsImoiLCJpbmRleE9mIiwic3RyZWFrVHlwZSIsInN0cmVhayIsImNvbnRpbnVlU3RyZWFrIiwicmVzdWx0cyIsInZhbHVlIiwid2lucyIsImFzT3Bwb25lbnQiLCJzaXplIiwiZmlsdGVyIiwiYXNDaGFsbGVuZ2VyIiwiYnlGb3JmZWl0IiwiZm9yZmVpdCIsImxvc2VzIiwid3BtVGVhbU92ZXJhbGxSZXN1bHRzIiwic2luZ2xlUGxheWVyVGVhbXMiLCJwbGF5ZXJOYW1lIiwiY3JlYXRlUHlyYW1pZENoYWxsZW5nZSIsImNhbmNlbFB5cmFtaWRDaGFsbGVuZ2UiLCJjcmVhdGVWZXJzdXNDaGFsbGVuZ2UiLCJjb21wbGV0ZVB5cmFtaWRDaGFsbGVuZ2UiLCJjb21wbGV0ZVZlcnN1c0NoYWxsZW5nZSIsImdldENoYWxsZW5nZXNCeUNvbXBldGl0aW9uIiwiY29tcGV0aXRpb25JZCIsImdldEFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllciIsInBsYXllcklkIiwibGltaXQiLCJkZWxldGVBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXIiLCJkZWxldGUiLCJnZXRQbGF5ZXJSZXN1bHRzQnlDb21wZXRpdGlvbiIsIndwbUZvb3RlciIsImluZGVudGl0eSIsIndwbUhlYWRlciIsImFsZXJ0c1NlcnZpY2UiLCJnZXRBY3RpdmVBbGVydHMiLCJoZWFkZXJDdHJsIiwiYWxlcnRzIiwiZ2V0QWN0aXZlQWxlcnRzQnlQbGF5ZXIiLCJjbGVhckFsZXJ0IiwiaW5kZXgiLCJjbGVhckFsbEFsZXJ0cyIsImNsZWFyQWxsQWxlcnRzQnlQbGF5ZXIiLCJ0b2dnbGVTaWRlYmFyIiwic2lkZWJhclN0YXR1cyIsImxlZnQiLCJnZXRTaWRlYmFyU3RhdHVzIiwiZSIsInNvbWUiLCJ3cG1TaWRlYmFyIiwib3JkZXJPYmplY3RCeSIsImlucHV0IiwiYXR0cmlidXRlIiwiaXNPYmplY3QiLCJhcnJheSIsIm9iamVjdEtleSIsInNvcnQiLCJhIiwiYiIsInBhcnNlSW50IiwiYWxlcnRJZCIsIiR3aW5kb3ciLCJyb2xlcyIsImJvb3RzdHJhcHBlZFVzZXJPYmplY3QiLCJpbmZvIiwidGFyZ2V0IiwiJCIsIm5vdGlmeSIsIndhcm5pbmciLCJpbnZlcnNlIiwibm90aWZ5RGVmYXVsdHMiLCJuZXdlc3Rfb25fdG9wIiwib2Zmc2V0IiwieCIsInkiLCJkZWxheSIsInNjcm9sbGJhclNlcnZpY2UiLCJtYWxpaHVTY3JvbGwiLCJzZWxlY3RvciIsInRoZW1lIiwic2Nyb2xsYXhpcyIsIm1vdXNld2hlZWxheGlzIiwibUN1c3RvbVNjcm9sbGJhciIsInNjcm9sbEluZXJ0aWEiLCJheGlzIiwibW91c2VXaGVlbCIsImVuYWJsZSIsInByZXZlbnREZWZhdWx0Iiwic3RhdHVzIiwicmlnaHQiLCJ3ZWJzb2NrZXRTZXJ2aWNlIiwiJHRpbWVvdXQiLCJ3ZWJzb2NrZXRIb3N0IiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3QiLCJjb25uZWN0IiwiY29ubmVjdGlvbiIsIldlYlNvY2tldCIsIm9ubWVzc2FnZSIsInJldHJ5IiwicGF5bG9hZCIsIkpTT04iLCJwYXJzZSIsIiRicm9hZGNhc3QiLCJ0b3BpYyIsIm9uY2xvc2UiLCJyZXRyeVNlY29uZHMiLCJjb25zb2xlIiwibG9nIiwic2VuZCIsImpzb24iLCJzdHJpbmdpZnkiLCJIb21lQ3RybCIsImNvbXBldGl0aW9uc1NlcnZpY2UiLCJnZXRQdWJsaWNDb21wZXRpdGlvbnMiLCJjb21wZXRpdGlvbnMiLCJwdWJsaWNDb21wZXRpdGlvbnMiLCJnZXRQcml2YXRlQ29tcGV0aXRpb25zIiwicHJpdmF0ZUNvbXBldGl0aW9ucyIsIndwbUNvbXBldGl0aW9uQ29tcGFjdCIsIndwbVBlbmRpbmdQbGF5ZXJzIiwiYXBwcm92ZVBlbmRpbmdQbGF5ZXIiLCJkZW55UGVuZGluZ1BsYXllciIsInBlbmRpbmdQbGF5ZXJzIiwid3BtUHlyYW1pZCIsInJlcGxhY2UiLCIkZmlsdGVyIiwibWF4UGxheWVycyIsIm9yZGVyUGxheWVycyIsImdldFBsYXllcnNTdGF0dXMiLCJhc3NpZ25MZXZlbHNUb1BsYXllcnMiLCJjYWxjdWxhdGVDb21wZXRpdGlvbkJsb2NrcyIsImZpbGxJbkVtcHR5QmxvY2tzIiwiY2xhc3MiLCJhdmFpbGFibGUiLCJob3Vyc1RvRXhwaXJlIiwiY29tcGxldGVDaGFsbGVuZ2UiLCJjdXJyZW50VXNlcklzQWRtaW4iLCJjdXJyZW50VXNlcklzUGVuZGluZyIsImFkbWlucyIsImN1cnJlbnRVc2VySXNPbkNvbXBldGl0aW9uIiwiaGFzQWN0aXZlQ2hhbGxlbmdlIiwiY3VycmVudFVzZXJQbGF5ZXIiLCJhY3RpdmVDaGFsbGVuZ2VPcHBvbmVudCIsImN1cnJlbnRPcHBvbmVudCIsImZpbmRBdmFpbGFibGVDaGFsbGVuZ2VzIiwiY3JlYXRlQnJlYWtQb2ludHMiLCJsZXZlbHMiLCJudW1iZXJPZkJsb2NrcyIsImxhc3QiLCJudW1iZXJPZlJlYWxQbGF5ZXJzIiwiYXZhaWxhYmxlQ2hhbGxlbmdlcyIsImxldmVsQWJvdmUiLCJ3YWl0aW5nRm9yUGxheWVyIiwid2FpdGluZ1BlcmlvZHMiLCJpc0JlZm9yZSIsIndhaXRVbnRpbCIsImZvcm1hdCIsImNyZWF0ZUNoYWxsZW5nZSIsImNvbXBldGl0aW9uTmFtZSIsIm5hbWUiLCJjb21wbGV0ZSIsImZvcmZlaXREYXlzIiwiZW1haWwiLCJjb21wZXRpdGlvbk1lbnVUb2dnbGUiLCJjYW5jZWxDaGFsbGVuZ2UiLCJ3aW5uZXJJc0N1cnJlbnRVc2VyIiwiZm9yZmVpdExvc2VyIiwic3dhcFBvc2l0aW9ucyIsImNyZWF0ZVdhaXRpbmdQZXJpb2QiLCJ3YWl0aW5nUGVyaW9kRGF5cyIsInJlbW92aW5nQ3VycmVudFVzZXIiLCJyZW1vdmVDdXJyZW50VXNlckZyb21Db21wZXRpdGlvbiIsImZvcmZlaXRDaGFsbGVuZ2UiLCJhZGRDdXJyZW50VXNlclRvQ29tcGV0aXRpb24iLCJyZXN0cmljdEpvaW5zIiwiYWRkUGxheWVyVG9Db21wZXRpdGlvblJlcXVlc3QiLCJhZGRQbGF5ZXJUb0NvbXBldGl0aW9uIiwiY29uZmlybVJlbW92ZUN1cnJlbnRVc2VyRnJvbUNvbXBldGl0aW9uIiwiY29uZmlybUJ1dHRvbkNsYXNzIiwiZ2V0Q29tcGV0aXRpb24iLCJwIiwib3BlblBvc2l0aW9uIiwicmVtb3ZlZFBsYXllciIsInJlbW92ZSIsInVwZGF0ZWRQbGF5ZXJzIiwidXBkYXRlZFBsYXllciIsInJlbW92ZWRQbGF5ZXJGcm9tQ29tcGV0aXRpb24iLCJwbGF5ZXJDbGljayIsInNob3dDaGFsbGVuZ2VNb2RhbCIsInJlZnJlc2hDb21wZXRpdGlvbiIsImNoYWxsZW5nZURldGFpbHMiLCJkZXNjcmlwdGlvbiIsIndwbVVwZGF0ZUFkbWlucyIsImFkZGVkQWRtaW5zIiwiY2xvbmVEZWVwIiwiZGlzYWJsZVN1Ym1pdCIsInVzZXJJc1ByaW1hcnlBZG1pbiIsInByaW1hcnkiLCJnZXRBdmFpbGFibGVBZG1pbnMiLCJhdmFpbGFibGVBZG1pbnMiLCJyZW1vdmVkQWRtaW5zIiwiY29tcGV0aXRpb25BZG1pbiIsImF2YWlsYWJsZUFkbWluIiwib3JpZ2luYWxBdmFpbGFibGVBZG1pbnMiLCJ1cGRhdGVDb21wZXRpdGlvbiIsImNhbmNlbFVwZGF0ZSIsInJlbW92ZUFkbWluIiwiYWRkQWRtaW4iLCJ3cG1VcGRhdGVQbGF5ZXJzIiwiYWRkZWRQbGF5ZXJzIiwiZ2V0QXZhaWxhYmxlUGxheWVycyIsImF2YWlsYWJsZVBsYXllcnMiLCJyZW1vdmVkUGxheWVycyIsImNvbXBldGl0aW9uUGxheWVyIiwiYXZhaWxhYmxlUGxheWVyIiwib3JpZ2luYWxBdmFpbGFibGVQbGF5ZXJzIiwicmVvcmRlclBsYXllcnMiLCJyZW9yZGVyVmVyc3VzUGxheWVycyIsInJlb3JkZXJQeXJhbWlkUGxheWVycyIsInJlbW92ZVBsYXllciIsImFkZFBsYXllciIsIndwbVZlcnN1cyIsInNob3dDb250cm9scyIsImdyb3VwUGxheWVycyIsImdldEN1cnJlbnRVc2VyU3RhdHVzIiwidGVhbXMiLCJhY3RpdmVDaGFsbGVuZ2UiLCJjaGFsbGVuZ2VFeHBpcmVUaW1lIiwidG9nZ2xlQ29udHJvbHMiLCJ3aW5uaW5nVGVhbSIsImdldENvbXBldGl0aW9uc0ZvclVzZXIiLCJjcmVhdGVDb21wZXRpdGlvbiIsImRlbGV0ZUNvbXBldGl0aW9uIiwibG9zZXJJZCIsIndpbm5lcklkIiwid2FpdGluZ1BlcmlvZCIsIkNvbXBldGl0aW9uQWRtaW5DdHJsIiwiaXNBZG1pbiIsInVwZGF0ZUNvbXBldGl0aW9uUmVzdHJpY3RKb2lucyIsInVwZGF0ZWRDb21wZXRpdGlvbiIsInVwZGF0ZUNvbXBldGl0aW9uUHJpdmF0ZSIsInByaXZhdGUiLCJjb21wZXRpdGlvbkRldGFpbHMiLCJDb21wZXRpdGlvblN0YXRzQ3RybCIsIm51bWJlciIsInBsYXllcnNSZXN1bHRzIiwiQ29tcGV0aXRpb25DdHJsIiwiQ29tcGV0aXRpb25zQ3RybCIsIkNyZWF0ZUNvbXBldGl0aW9uQ3RybCIsIm5ld0NvbXBldGl0aW9uIiwiY29tcGV0aXRpb25UeXBlcyIsIk15Q29tcGV0aXRpb25zQ3RybCIsIm15Q29tcGV0aXRpb25zIiwiVXNlckN0cmwiLCJkaXNwbGF5TmFtZXMiLCJ0b0xvd2VyQ2FzZSIsInVzZXJVcGRhdGVzIiwibGVudGdoIiwidXNlckZvcm0iLCIkc2V0UHJpc3RpbmUiLCJjdXJyZW50VXNlckNsb25lIiwiY29weSIsImV4dGVuZCIsImNPdmVyZmxvdyIsImxpbmtGdW5jIiwiZWxlbWVudCIsImF0dHJzIiwiaGFzQ2xhc3MiLCJsaW5rIiwidG9nZ2xlU3VibWVudSIsImVsIiwiY2xpY2siLCJuZXh0Iiwic2xpZGVUb2dnbGUiLCJwYXJlbnQiLCJ0b2dnbGVDbGFzcyIsIndhdmVzRWZmZWN0IiwiV2F2ZXMiLCJhdHRhY2giLCJpbml0IiwiZmdMaW5lIiwiY2hpbGRyZW4iLCJmaXJzdCIsImlzRmxvYXRMYWJlbCIsImZvY3Vz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TUFBQS9WLFNBQ0F5VSxFQUFBdUIsWUFBQSxnQkFoQkEsR0FBQWpYLElBQ0FHLFNBQUEsSUFDQTBWLEtBQUFKLEVBR0EsT0FBQXpWLEdBVkFqSSxRQUNBQyxPQUFBLE9BQ0FnSSxVQUFBLFNBQUF5VyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnYXBwJywgW1xuICAndWkucm91dGVyJyxcbiAgJ3VpLmJvb3RzdHJhcCcsXG4gICduZ0FuaW1hdGUnLFxuICAnYW5ndWxhci1sb2FkaW5nLWJhcicsXG4gICdub3Vpc2xpZGVyJyxcbiAgJ2xvY2FseXRpY3MuZGlyZWN0aXZlcycsXG4gICd0aW1lcicsXG4gICdMb2NhbFN0b3JhZ2VNb2R1bGUnLFxuICAnYW5ndWxhci1zb3J0YWJsZS12aWV3JyxcbiAgJ2FuZ3VsYXIudmVydGlsaXplJyxcbiAgJ25nVGFibGUnXG5dKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCAnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29uZmlnKGNvbmZpZ3VyYXRpb24pO1xuXG4gIGZ1bmN0aW9uIGNvbmZpZ3VyYXRpb24oJGh0dHBQcm92aWRlciwgJHVpYlRvb2x0aXBQcm92aWRlciwgJHFQcm92aWRlcikge1xuICAgIC8vaW5pdGlhbGl6ZSBnZXQgaWYgbm90IHRoZXJlXG4gICAgaWYgKCEkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0KSB7XG4gICAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0ID0ge307ICAgIFxuICAgIH0gICAgXG4gICAgLy9kaXNhYmxlIElFIGFqYXggcmVxdWVzdCBjYWNoaW5nXG4gICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldFsnSWYtTW9kaWZpZWQtU2luY2UnXSA9ICdGcmksIDAxIEphbiAyMDE2IDA1OjAwOjAwIEdNVCc7XG4gICAgLy8gZXh0cmFcbiAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0WydDYWNoZS1Db250cm9sJ10gPSAnbm8tY2FjaGUnO1xuICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXRbJ1ByYWdtYSddID0gJ25vLWNhY2hlJztcblxuICAgICR1aWJUb29sdGlwUHJvdmlkZXIub3B0aW9ucyh7IGFwcGVuZFRvQm9keTogdHJ1ZSB9KTtcbiAgICAkcVByb3ZpZGVyLmVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zKGZhbHNlKTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdBcHBDdHJsJywgQXBwQ3RybCk7XG5cbiAgZnVuY3Rpb24gQXBwQ3RybCgkc3RhdGUsIGxvY2FsU3RvcmFnZVNlcnZpY2UpIHtcbiAgICB2YXIgYXBwQ3RybCA9IHRoaXM7XG4gICAgLy8gVXNlIHRoaXMgZm9yIFNpZGViYXIgbWVudVxuICAgIGFwcEN0cmwuJHN0YXRlID0gJHN0YXRlO1xuICAgIC8vIExvY2sgdGhlIHNpZGViYXIgaW4gdmlld1xuICAgIGFwcEN0cmwubG9ja1NpZGViYXIgPSBsb2NhbFN0b3JhZ2VTZXJ2aWNlLmdldCgnc2lkZWJhckxvY2tlZCcpO1xuICAgIGFwcEN0cmwudG9nZ2xlU2lkZWJhckxvY2tlZCA9IHRvZ2dsZVNpZGViYXJMb2NrZWQ7XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVTaWRlYmFyTG9ja2VkKGxvY2tlZCkge1xuICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5zZXQoJ3NpZGViYXJMb2NrZWQnLCBsb2NrZWQpO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb25maWcoY29uZmlndXJlUm91dGVzKTtcblxuICBmdW5jdGlvbiBjb25maWd1cmVSb3V0ZXMoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcbiAgICB2YXIgcm91dGVSb2xlQ2hlY2tzID0ge1xuICAgICAgc3VwZXJBZG1pbjogcmVxdWlyZVN1cGVyQWRtaW4sXG4gICAgICBhZG1pbjogcmVxdWlyZUFkbWluLFxuICAgICAgdXNlcjogcmVxdWlyZUF1dGhcbiAgICB9O1xuXG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuXG4gICAgLy8gZm9yIGFueSB1bm1hdGNoZWQgdXJsXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLndoZW4oJy9jb21wZXRpdGlvbnMvJywgJy9jb21wZXRpdGlvbnMnKTtcblxuICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAuc3RhdGUoJ2hvbWUnLCB7XG4gICAgICAgIHVybDogJy8nLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ0hvbWVDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tbW9uL3ZpZXdzL2hvbWUuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdjb21wZXRpdGlvbnMnLCB7XG4gICAgICAgIHVybDogJy9jb21wZXRpdGlvbnMnLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbXBldGl0aW9uc0N0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wZXRpdGlvbnMvdmlld3MvY29tcGV0aXRpb25zLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgnY29tcGV0aXRpb25zLm15Q29tcGV0aXRpb25zJywge1xuICAgICAgICB1cmw6ICcvbXktY29tcGV0aXRpb25zJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudEAnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnTXlDb21wZXRpdGlvbnNDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcGV0aXRpb25zL3ZpZXdzL215LWNvbXBldGl0aW9ucy5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgIGF1dGg6IHJvdXRlUm9sZUNoZWNrcy51c2VyXG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdjb21wZXRpdGlvbnMudmlldycsIHtcbiAgICAgICAgdXJsOiAnL3ZpZXcvOmNvbXBldGl0aW9uSWQnLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50QCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb21wZXRpdGlvbkN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wZXRpdGlvbnMvdmlld3MvY29tcGV0aXRpb24uaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdjb21wZXRpdGlvbnMuc3RhdHMnLCB7XG4gICAgICAgIHVybDogJy9zdGF0cy86Y29tcGV0aXRpb25JZCcsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnRAJzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbXBldGl0aW9uU3RhdHNDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcGV0aXRpb25zL3ZpZXdzL2NvbXBldGl0aW9uLXN0YXRzLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgnY29tcGV0aXRpb25zLmFkbWluJywge1xuICAgICAgICB1cmw6ICcvYWRtaW4vOmNvbXBldGl0aW9uSWQnLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50QCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb21wZXRpdGlvbkFkbWluQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBldGl0aW9ucy92aWV3cy9jb21wZXRpdGlvbi1hZG1pbi5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgIGF1dGg6IHJvdXRlUm9sZUNoZWNrcy51c2VyXG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdjb21wZXRpdGlvbnMuY3JlYXRlJywge1xuICAgICAgICB1cmw6ICcvY3JlYXRlJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudEAnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQ3JlYXRlQ29tcGV0aXRpb25DdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcGV0aXRpb25zL3ZpZXdzL2NyZWF0ZS1jb21wZXRpdGlvbi5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgIGF1dGg6IHJvdXRlUm9sZUNoZWNrcy51c2VyXG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCd1c2VyJywge1xuICAgICAgICB1cmw6ICcvdXNlcicsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnQnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnVXNlckN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd1c2Vycy92aWV3cy91c2VyLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgYXV0aDogcm91dGVSb2xlQ2hlY2tzLnVzZXJcbiAgICAgICAgfVxuICAgICAgfSkuc3RhdGUoJ2xvZ2luJywge1xuICAgICAgICB1cmw6ICcvbG9naW4nLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ0xvZ2luQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2F1dGhlbnRpY2F0aW9uL3ZpZXdzL2xvZ2luLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncmVnaXN0ZXInLCB7XG4gICAgICAgIHVybDogJy9yZWdpc3RlcicsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnQnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXV0aGVudGljYXRpb24vdmlld3MvcmVnaXN0ZXIuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCd2ZXJpZnknLCB7XG4gICAgICAgIHVybDogJy92ZXJpZmljYXRpb24nLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ1ZlcmlmaWNhdGlvbkN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhdXRoZW50aWNhdGlvbi92aWV3cy92ZXJpZmljYXRpb24uaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCd2ZXJpZmljYXRpb24nLCB7XG4gICAgICAgIHVybDogJy92ZXJpZmljYXRpb24vOnVzZXJJZC86dmVyaWZpY2F0aW9uVG9rZW4nLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ1ZlcmlmaWNhdGlvbkN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhdXRoZW50aWNhdGlvbi92aWV3cy92ZXJpZmljYXRpb24uaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdwYXNzd29yZC1yZXNldC1yZXF1ZXN0Jywge1xuICAgICAgICB1cmw6ICcvcGFzc3dvcmQtcmVzZXQnLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ1Bhc3N3b3JkUmVzZXRDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXV0aGVudGljYXRpb24vdmlld3MvcGFzc3dvcmQtcmVzZXQuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdwYXNzd29yZC1yZXNldCcsIHtcbiAgICAgICAgdXJsOiAnL3Bhc3N3b3JkLXJlc2V0Lzp1c2VySWQvOnZlcmlmaWNhdGlvblRva2VuJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdQYXNzd29yZFJlc2V0Q3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2F1dGhlbnRpY2F0aW9uL3ZpZXdzL3Bhc3N3b3JkLXJlc2V0Lmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIHJlcXVpcmVBZG1pbi4kaW5qZWN0ID0gWydhdXRoU2VydmljZSddO1xuXG4gIGZ1bmN0aW9uIHJlcXVpcmVBZG1pbihhdXRoU2VydmljZSkge1xuICAgIHJldHVybiBhdXRoU2VydmljZS5hdXRob3JpemVDdXJyZW50VXNlckZvclJvdXRlKCdhZG1pbicpO1xuICB9XG5cbiAgcmVxdWlyZVN1cGVyQWRtaW4uJGluamVjdCA9IFsnYXV0aFNlcnZpY2UnXTtcblxuICBmdW5jdGlvbiByZXF1aXJlU3VwZXJBZG1pbihhdXRoU2VydmljZSkge1xuICAgIHJldHVybiBhdXRoU2VydmljZS5hdXRob3JpemVDdXJyZW50VXNlckZvclJvdXRlKCdzdXBlci1hZG1pbicpO1xuICB9XG5cbiAgcmVxdWlyZUF1dGguJGluamVjdCA9IFsnYXV0aFNlcnZpY2UnXTtcblxuICBmdW5jdGlvbiByZXF1aXJlQXV0aChhdXRoU2VydmljZSkge1xuICAgIHJldHVybiBhdXRoU2VydmljZS5hdXRoZW50aWNhdGVkVXNlckZvclJvdXRlKCk7XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykucnVuKGFwcFJ1bik7XG5cbiAgZnVuY3Rpb24gYXBwUnVuKCRyb290U2NvcGUsICRzdGF0ZSwgJGRvY3VtZW50LCBzaWRlYmFyU2VydmljZSkge1xuICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VFcnJvcicsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcywgZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciA9PT0gJ25vdCBhdXRob3JpemVkJykge1xuICAgICAgICAkc3RhdGUuZ28oJ2xvZ2luJyk7XG4gICAgICAgICRzdGF0ZS5wcmV2aW91cyA9IHRvU3RhdGU7XG4gICAgICAgICRzdGF0ZS5wcmV2UGFyYW1zID0gdG9QYXJhbXM7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzaWRlYmFyU2VydmljZS5zZXRTaWRlYmFyU3RhdHVzKGZhbHNlKTtcbiAgICAgIC8vIFNjcm9sbCB0byB0aGUgdG9wIG9uIHJvdXRlIGNoYW5nZXNcbiAgICAgICRkb2N1bWVudFswXS5ib2R5LnNjcm9sbFRvcCA9ICRkb2N1bWVudFswXS5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcbiAgICB9KTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5mYWN0b3J5KCdhdXRoU2VydmljZScsIGF1dGhTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBhdXRoU2VydmljZSgkc3RhdGUsICRodHRwLCAkcSwgdXNlclNlcnZpY2UsIGlkZW50aXR5U2VydmljZSwgbm90aWZ5U2VydmljZSkge1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgYXV0aGVudGljYXRlVXNlcjogYXV0aGVudGljYXRlVXNlcixcbiAgICAgIGNyZWF0ZVVzZXI6IGNyZWF0ZVVzZXIsXG4gICAgICBsb2dvdXQ6IGxvZ291dCxcbiAgICAgIGF1dGhvcml6ZUN1cnJlbnRVc2VyRm9yUm91dGU6IGF1dGhvcml6ZUN1cnJlbnRVc2VyRm9yUm91dGUsXG4gICAgICBhdXRoZW50aWNhdGVkVXNlckZvclJvdXRlOiBhdXRoZW50aWNhdGVkVXNlckZvclJvdXRlXG4gICAgfTtcbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZVVzZXIodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICB2YXIgZGZkID0gJHEuZGVmZXIoKTtcbiAgICAgICRodHRwLnBvc3QoJy9sb2dpbicsIHtcbiAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIgPSByZXNwb25zZS5kYXRhLnVzZXI7XG4gICAgICAgICAgZGZkLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlID09PSAndW52ZXJpZmllZCcpIHtcbiAgICAgICAgICBkZmQucmVzb2x2ZSgndW52ZXJpZmllZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRmZC5yZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGZkLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVXNlcih1c2VyRGF0YSkge1xuICAgICAgdmFyIGRmZCA9ICRxLmRlZmVyKCk7XG4gICAgICAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywge1xuICAgICAgICB1c2VyRGF0YTogdXNlckRhdGFcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5kYXRhKSB7XG4gICAgICAgICAgZGZkLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGZkLnJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEucmVhc29uID09PSAnRXJyb3I6IEVtYWlsIGFscmVhZHkgaW4gdXNlJykge1xuICAgICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ1NvcnJ5LCBhbiBhY2NvdW50IGFscmVhZHkgZXhpc3RzIHdpdGggdGhhdCBlbWFpbCBhZGRyZXNzLicpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZmQucHJvbWlzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gICAgICB2YXIgZGZkID0gJHEuZGVmZXIoKTtcbiAgICAgICRodHRwLnBvc3QoJy9sb2dvdXQnLCB7XG4gICAgICAgIGxvZ291dDogdHJ1ZVxuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgZGZkLnJlc29sdmUoKTtcbiAgICAgICAgJHN0YXRlLmdvKCdob21lJyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZmQucHJvbWlzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdXRob3JpemVDdXJyZW50VXNlckZvclJvdXRlKHJvbGUpIHtcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRob3JpemVkKHJvbGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICRxLnJlamVjdCgnbm90IGF1dGhvcml6ZWQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdXRoZW50aWNhdGVkVXNlckZvclJvdXRlKCkge1xuICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAkcS5yZWplY3QoJ25vdCBhdXRob3JpemVkJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmZhY3RvcnkoJ3VzZXJTZXJ2aWNlJywgdXNlclNlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIHVzZXJTZXJ2aWNlKCRodHRwKSB7XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBnZXRBbGxVc2VyczogZ2V0QWxsVXNlcnMsXG4gICAgICB2ZXJpZnlVc2VyOiB2ZXJpZnlVc2VyLFxuICAgICAgZ2VuZXJhdGVQYXNzd29yZFJlc2V0TGluazogZ2VuZXJhdGVQYXNzd29yZFJlc2V0TGluayxcbiAgICAgIHJlc2V0UGFzc3dvcmQ6IHJlc2V0UGFzc3dvcmQsXG4gICAgICB1cGRhdGVVc2VyOiB1cGRhdGVVc2VyXG4gICAgfTtcbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGdldEFsbFVzZXJzKCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycpLnRoZW4oZnVuY3Rpb24gKHVzZXJzKSB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSBldmVyeSB1c2VyIGhhcyBhIGRpc3BsYXkgbmFtZVxuICAgICAgICBfLmZvckVhY2godXNlcnMuZGF0YSwgZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgICBpZiAoIXVzZXIuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgICAgIHVzZXIuZGlzcGxheU5hbWUgPSB1c2VyLmZpcnN0TmFtZSArICcgJyArIHVzZXIubGFzdE5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdXNlcnMuZGF0YSA9IF8uc29ydEJ5KHVzZXJzLmRhdGEsICdkaXNwbGF5TmFtZScpO1xuICAgICAgICByZXR1cm4gdXNlcnM7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2ZXJpZnlVc2VyKHVzZXJJZCwgdmVyaWZpY2F0aW9uVG9rZW4pIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlci92ZXJpZmljYXRpb24nLCB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIHVzZXJJZDogdXNlcklkLFxuICAgICAgICAgIHZlcmlmaWNhdGlvblRva2VuOiB2ZXJpZmljYXRpb25Ub2tlblxuICAgICAgICB9XG4gICAgICB9KTsgIFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlUGFzc3dvcmRSZXNldExpbmsodXNlcm5hbWUpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlci9wYXNzd29yZC9saW5rJywge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWVcbiAgICAgICAgfVxuICAgICAgfSk7ICBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNldFBhc3N3b3JkKHVzZXJJZCwgdmVyaWZpY2F0aW9uVG9rZW4sIHBhc3N3b3JkKSB7XG4gICAgICByZXR1cm4gJGh0dHAucHV0KCcvYXBpL3VzZXIvcGFzc3dvcmQvcmVzZXQnLCB7XG4gICAgICAgIHVzZXJJZDogdXNlcklkLFxuICAgICAgICB2ZXJpZmljYXRpb25Ub2tlbjogdmVyaWZpY2F0aW9uVG9rZW4sXG4gICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgfSk7ICBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVVc2VyKHVzZXIpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvdXNlcicsIHtcbiAgICAgICAgdXNlcjogdXNlclxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIExvZ2luQ3RybCk7XG5cbiAgZnVuY3Rpb24gTG9naW5DdHJsKCRzdGF0ZSwgYXV0aFNlcnZpY2UsIG5vdGlmeVNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmxvZ2luID0gbG9naW47XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICBhdXRoU2VydmljZS5hdXRoZW50aWNhdGVVc2VyKHVzZXJuYW1lLCBwYXNzd29yZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ1VzZXJuYW1lIC8gcGFzc3dvcmQgY29tYmluYWl0b24gaW5jb3JyZWN0Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UgPT09ICd1bnZlcmlmaWVkJykge1xuICAgICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ1lvdSBtdXN0IHZlcmlmeSB5b3VyIGVtYWlsIGJlZm9yZSB5b3UgY2FuIGxvZ2luJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCRzdGF0ZS5wcmV2aW91cykge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCRzdGF0ZS5wcmV2aW91cywgJHN0YXRlLnByZXZQYXJhbXMpO1xuICAgICAgICAgICAgJHN0YXRlLnByZXZpb3VzID0gbnVsbDtcbiAgICAgICAgICAgICRzdGF0ZS5wcmV2UGFyYW1zID0gbnVsbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCdjb21wZXRpdGlvbnMubXlDb21wZXRpdGlvbnMnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdQYXNzd29yZFJlc2V0Q3RybCcsIFBhc3N3b3JkUmVzZXRDdHJsKTtcblxuICBmdW5jdGlvbiBQYXNzd29yZFJlc2V0Q3RybCgkc3RhdGUsICRzdGF0ZVBhcmFtcywgdXNlclNlcnZpY2UsIG5vdGlmeVNlcnZpY2UsIGF1dGhTZXJ2aWNlLCBpZGVudGl0eVNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnVzZXJuYW1lID0gJyc7XG4gICAgdm0udmVyaWZpZWQgPSBmYWxzZTtcbiAgICB2bS5yZXNldFBhc3N3b3JkRm9ybSA9IHt9O1xuICAgIHZtLmdlbmVyYXRlUGFzc3dvcmRSZXNldExpbmsgPSBnZW5lcmF0ZVBhc3N3b3JkUmVzZXRMaW5rO1xuICAgIHZtLnJlc2V0UGFzc3dvcmQgPSByZXNldFBhc3N3b3JkO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICAkc3RhdGUuZ28oJ2hvbWUnKTtcbiAgICAgIH0gZWxzZSBpZiAoJHN0YXRlUGFyYW1zLnVzZXJJZCAmJiAkc3RhdGVQYXJhbXMudmVyaWZpY2F0aW9uVG9rZW4pIHtcbiAgICAgICAgdXNlclNlcnZpY2UudmVyaWZ5VXNlcigkc3RhdGVQYXJhbXMudXNlcklkLCAkc3RhdGVQYXJhbXMudmVyaWZpY2F0aW9uVG9rZW4pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICAgIHZtLnZlcmlmaWVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlUGFzc3dvcmRSZXNldExpbmsodXNlcm5hbWUpIHtcbiAgICAgIHVzZXJTZXJ2aWNlLmdlbmVyYXRlUGFzc3dvcmRSZXNldExpbmsodXNlcm5hbWUpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICghcmVzcG9uc2UuZGF0YSkge1xuICAgICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHRoYXQgZW1haWwgYWRkcmVzcycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vdGlmeVNlcnZpY2Uuc3VjY2VzcygnUGxlYXNlIGNoZWNrIHlvdXIgZW1haWwgZm9yIGEgcGFzc3dvcmQgcmVzZXQgbGluaycpO1xuICAgICAgICAgICRzdGF0ZS5nbygnaG9tZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNldFBhc3N3b3JkKHJlc2V0UGFzc3dvcmRGb3JtKSB7XG4gICAgICBpZiAocmVzZXRQYXNzd29yZEZvcm0ucGFzc3dvcmQgIT09IHJlc2V0UGFzc3dvcmRGb3JtLmNvbmZpcm1QYXNzd29yZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdQYXNzd29yZHMgZG9uXFwndCBtYXRjaCEnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVzZXJTZXJ2aWNlLnJlc2V0UGFzc3dvcmQoJHN0YXRlUGFyYW1zLnVzZXJJZCwgJHN0YXRlUGFyYW1zLnZlcmlmaWNhdGlvblRva2VuLCByZXNldFBhc3N3b3JkRm9ybS5wYXNzd29yZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSkge1xuICAgICAgICAgICAgYXV0aFNlcnZpY2UuYXV0aGVudGljYXRlVXNlcihyZXNwb25zZS5kYXRhLnVzZXJuYW1lLCByZXNldFBhc3N3b3JkRm9ybS5wYXNzd29yZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgJHN0YXRlLmdvKCdob21lJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBSZWdpc3RlckN0cmwpO1xuXG4gIGZ1bmN0aW9uIFJlZ2lzdGVyQ3RybCgkc3RhdGUsIGF1dGhTZXJ2aWNlLCBub3RpZnlTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5yZWdpc3RlciA9IHJlZ2lzdGVyO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge31cblxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyKG5ld1VzZXIpIHtcbiAgICAgIGlmIChuZXdVc2VyLnBhc3N3b3JkICE9PSBuZXdVc2VyLmNvbmZpcm1QYXNzd29yZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdQYXNzd29yZHMgZG9uXFwndCBtYXRjaCEnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghbmV3VXNlci5kaXNwbGF5TmFtZSkge1xuICAgICAgICAgIG5ld1VzZXIuZGlzcGxheU5hbWUgPSBuZXdVc2VyLmZpcnN0TmFtZSArICcgJyArIG5ld1VzZXIubGFzdE5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgYXV0aFNlcnZpY2UuY3JlYXRlVXNlcihuZXdVc2VyKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkc3RhdGUuZ28oJ3ZlcmlmeScpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignVmVyaWZpY2F0aW9uQ3RybCcsIFZlcmlmaWNhdGlvbkN0cmwpO1xuXG4gIGZ1bmN0aW9uIFZlcmlmaWNhdGlvbkN0cmwoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIHVzZXJTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS52ZXJpZmllZCA9IHVuZGVmaW5lZDtcbiAgICB2bS52ZXJpZnlpbmcgPSBmYWxzZTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGlmICgkc3RhdGVQYXJhbXMudXNlcklkICYmICRzdGF0ZVBhcmFtcy52ZXJpZmljYXRpb25Ub2tlbikge1xuICAgICAgICB2bS52ZXJpZnlpbmcgPSB0cnVlO1xuICAgICAgICB2bS52ZXJpZmllZCA9IG51bGw7XG4gICAgICAgIHVzZXJTZXJ2aWNlLnZlcmlmeVVzZXIoJHN0YXRlUGFyYW1zLnVzZXJJZCwgJHN0YXRlUGFyYW1zLnZlcmlmaWNhdGlvblRva2VuKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhKSB7XG4gICAgICAgICAgICB2bS52ZXJpZmllZCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZtLnZlcmlmaWVkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ3dwbUFjdGl2ZUNoYWxsZW5lZ2VzJywgd3BtQWN0aXZlQ2hhbGxlbmVnZXMpO1xuXG4gIGZ1bmN0aW9uIHdwbUFjdGl2ZUNoYWxsZW5lZ2VzKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogY3RybEZ1bmMsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgY29tcGV0aXRpb246ICc9JyxcbiAgICAgICAgYWxsb3dEZWxldGU6ICc9JyxcbiAgICAgICAgbnVtYmVyT2ZDaGFsbGVuZ2VzOiAnQCcsXG4gICAgICAgIGNoYWxsZW5nZXNQZXJQYWdlOiAnQCdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jaGFsbGVuZ2VzL2NvbXBvbmVudHMvYWN0aXZlLWNoYWxsZW5nZXMuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoJHNjb3BlLCBjaGFsbGVuZ2VzU2VydmljZSwgbmdUYWJsZVBhcmFtcykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uY2hhbGxlbmdlcyA9IG51bGw7XG4gICAgdm0uZGVsZXRlQ2hhbGxlbmdlID0gZGVsZXRlQ2hhbGxlbmdlO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgJHNjb3BlLiR3YXRjaCgndm0uY29tcGV0aXRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS5jb21wZXRpdGlvbikge1xuICAgICAgICAgIGdldEFjdGl2ZUNoYWxsZW5nZXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QWN0aXZlQ2hhbGxlbmdlcygpIHtcbiAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmdldEFjdGl2ZUNoYWxsZW5nZXNCeUNvbXBldGl0aW9uKHZtLmNvbXBldGl0aW9uLl9pZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlcykge1xuICAgICAgICB2bS5jaGFsbGVuZ2VzID0gY2hhbGxlbmdlcy5kYXRhOyBcbiAgICAgICAgaWYgKGNoYWxsZW5nZXMuZGF0YS5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICAvL0RhdGEgVGFibGUgaW5mb1xuICAgICAgICAgIHZtLnRhYmxlRGF0YSA9IG5ldyBuZ1RhYmxlUGFyYW1zKHtcbiAgICAgICAgICAgIHBhZ2U6IDEsIC8vIHNob3cgZmlyc3QgcGFnZVxuICAgICAgICAgICAgY291bnQ6IHZtLmNoYWxsZW5nZXNQZXJQYWdlIHx8IDUgLy8gY291bnQgcGVyIHBhZ2VcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBjb3VudHM6IFtdLCAvLyBoaWRlcyBwYWdlIHNpemVzXG4gICAgICAgICAgICB0b3RhbDogdm0uY2hhbGxlbmdlcy5sZW5ndGgsIC8vIGxlbmd0aCBvZiBkYXRhXG4gICAgICAgICAgICBnZXREYXRhOiBmdW5jdGlvbiAoJGRlZmVyLCBwYXJhbXMpIHtcbiAgICAgICAgICAgICAgJGRlZmVyLnJlc29sdmUodm0uY2hhbGxlbmdlcy5zbGljZSgocGFyYW1zLnBhZ2UoKSAtIDEpICogcGFyYW1zLmNvdW50KCksIHBhcmFtcy5wYWdlKCkgKiBwYXJhbXMuY291bnQoKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgXG4gICAgICAgICAgXy5mb3JFYWNoKHZtLmNoYWxsZW5nZXMsIGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgICAgIGlmIChjaGFsbGVuZ2UudHlwZSA9PT0gJ3ZlcnN1cycpIHtcbiAgICAgICAgICAgICAgLy8gSWYgbW9yZSB0aGFuIDEgcGxheWVyIHBlciB0ZWFtIHRoYW4gdXNlIFRlYW0gbmFtZVxuICAgICAgICAgICAgICBpZiAodm0uY29tcGV0aXRpb24ucGxheWVycy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlLmNoYWxsZW5nZXIuZGlzcGxheU5hbWUgPSAnVGVhbSAnICsgY2hhbGxlbmdlLmNoYWxsZW5nZXIudGVhbTtcbiAgICAgICAgICAgICAgICBjaGFsbGVuZ2Uub3Bwb25lbnQuZGlzcGxheU5hbWUgPSAnVGVhbSAnICsgY2hhbGxlbmdlLm9wcG9uZW50LnRlYW07XG4gICAgICAgICAgICAgIC8vIElmIG9ubHkgMSBwbGF5ZXIgcGVyIHRlYW0gdGhhbiBqdXN0IHVzZSB0aGUgcGxheWVycyBuYW1lc1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLmRpc3BsYXlOYW1lID0gXy5maW5kKHZtLmNvbXBldGl0aW9uLnBsYXllcnMsIHsgJ3Bvc2l0aW9uJzogIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLnRlYW19KS5kaXNwbGF5TmFtZTtcbiAgICAgICAgICAgICAgICBjaGFsbGVuZ2Uub3Bwb25lbnQuZGlzcGxheU5hbWUgPSBfLmZpbmQodm0uY29tcGV0aXRpb24ucGxheWVycywgeyAncG9zaXRpb24nOiAgY2hhbGxlbmdlLm9wcG9uZW50LnRlYW19KS5kaXNwbGF5TmFtZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoYWxsZW5nZS50aW1lTGltaXQgIT09IDApIHtcbiAgICAgICAgICAgICAgdmFyIHRpbWVUb0V4cGlyZSA9IG1vbWVudCgpLmRpZmYobW9tZW50KGNoYWxsZW5nZS5jcmVhdGVkKS5hZGQoY2hhbGxlbmdlLnRpbWVMaW1pdCwgJ2QnKSkgKiAtMTtcbiAgICAgICAgICAgICAgY2hhbGxlbmdlLmV4cGlyZXMgPSBtb21lbnQuZHVyYXRpb24odGltZVRvRXhwaXJlKS5hc0hvdXJzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUNoYWxsZW5nZShjaGFsbGVuZ2VJZCwgJGluZGV4KSB7XG4gICAgICBzd2FsKHtcbiAgICAgICAgdGl0bGU6ICdEZWxldGUgQ2hhbGxlbmdlIFJlc3VsdD8nLFxuICAgICAgICB0ZXh0OiAnSXRcXCdsbCBiZSBsaWtlIGl0IG5ldmVyIGhhcHBlbmVkJyxcbiAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdEZWxldGUnLFxuICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAnTmV2ZXJtaW5kJyxcbiAgICAgICAgY2xvc2VPbkNvbmZpcm06IHRydWUsXG4gICAgICAgIGNsb3NlT25DYW5jZWw6IHRydWVcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZGVsZXRlQ2hhbGxlbmdlKHZtLmNvbXBldGl0aW9uLl9pZCwgY2hhbGxlbmdlSWQpLnRoZW4gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2bS5jaGFsbGVuZ2VzLnNwbGljZSgkaW5kZXgsIDEpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgnd3BtQ29tcGxldGVkQ2hhbGxlbmVnZXMnLCB3cG1Db21wbGV0ZWRDaGFsbGVuZWdlcyk7XG5cbiAgZnVuY3Rpb24gd3BtQ29tcGxldGVkQ2hhbGxlbmVnZXMoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBzY29wZToge1xuICAgICAgICBjb21wZXRpdGlvbjogJz0nLFxuICAgICAgICBhbGxvd0RlbGV0ZTogJz0nLFxuICAgICAgICBudW1iZXJPZkNoYWxsZW5nZXM6ICdAJyxcbiAgICAgICAgY2hhbGxlbmdlc1BlclBhZ2U6ICdAJ1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NoYWxsZW5nZXMvY29tcG9uZW50cy9jb21wbGV0ZWQtY2hhbGxlbmdlcy5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYygkc2NvcGUsICRzdGF0ZSwgY2hhbGxlbmdlc1NlcnZpY2UsIG5nVGFibGVQYXJhbXMpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmNoYWxsZW5nZXMgPSBudWxsO1xuICAgIHZtLmRlbGV0ZUNoYWxsZW5nZSA9IGRlbGV0ZUNoYWxsZW5nZTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICRzY29wZS4kd2F0Y2goJ3ZtLmNvbXBldGl0aW9uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh2bS5jb21wZXRpdGlvbikge1xuICAgICAgICAgIGdldENvbXBsZXRlZENoYWxsZW5nZXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcGxldGVkQ2hhbGxlbmdlcygpIHtcbiAgICAgIC8vIEdldCBjb21wbGV0ZWQgY2hhbGxlbmdlcyBpbiB0aGlzIGNvbXBldGl0aW9uXG4gICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRDb21wbGV0ZWRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbi5faWQsIHZtLm51bWJlck9mQ2hhbGxlbmdlcykudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlcykge1xuICAgICAgICB2bS5jaGFsbGVuZ2VzID0gY2hhbGxlbmdlcy5kYXRhO1xuICAgICAgICBpZiAoY2hhbGxlbmdlcy5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgXG4gICAgICAgICAgLy9EYXRhIFRhYmxlIGluZm9cbiAgICAgICAgICB2bS50YWJsZURhdGEgPSBuZXcgbmdUYWJsZVBhcmFtcyh7XG4gICAgICAgICAgICBwYWdlOiAxLCAvLyBzaG93IGZpcnN0IHBhZ2VcbiAgICAgICAgICAgIGNvdW50OiB2bS5jaGFsbGVuZ2VzUGVyUGFnZSB8fCA1IC8vIGNvdW50IHBlciBwYWdlXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgY291bnRzOiBbXSwgLy8gaGlkZXMgcGFnZSBzaXplc1xuICAgICAgICAgICAgdG90YWw6IHZtLmNoYWxsZW5nZXMubGVuZ3RoLCAvLyBsZW5ndGggb2YgZGF0YVxuICAgICAgICAgICAgZ2V0RGF0YTogZnVuY3Rpb24gKCRkZWZlciwgcGFyYW1zKSB7XG4gICAgICAgICAgICAgICRkZWZlci5yZXNvbHZlKHZtLmNoYWxsZW5nZXMuc2xpY2UoKHBhcmFtcy5wYWdlKCkgLSAxKSAqIHBhcmFtcy5jb3VudCgpLCBwYXJhbXMucGFnZSgpICogcGFyYW1zLmNvdW50KCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIF8uZm9yRWFjaCh2bS5jaGFsbGVuZ2VzLCBmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2UubG9zZXIgPSBjaGFsbGVuZ2Uud2lubmVyID09PSAnY2hhbGxlbmdlcicgPyAnb3Bwb25lbnQnIDogJ2NoYWxsZW5nZXInO1xuICAgICAgICAgICAgaWYgKGNoYWxsZW5nZS50eXBlID09PSAndmVyc3VzJykge1xuICAgICAgICAgICAgICAvLyBJZiBtb3JlIHRoYW4gMSBwbGF5ZXIgcGVyIHRlYW0gdGhhbiB1c2UgVGVhbSBuYW1lXG4gICAgICAgICAgICAgIGlmICh2bS5jb21wZXRpdGlvbi5wbGF5ZXJzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICBjaGFsbGVuZ2UuY2hhbGxlbmdlci5kaXNwbGF5TmFtZSA9ICdUZWFtICcgKyBjaGFsbGVuZ2UuY2hhbGxlbmdlci50ZWFtO1xuICAgICAgICAgICAgICAgIGNoYWxsZW5nZS5vcHBvbmVudC5kaXNwbGF5TmFtZSA9ICdUZWFtICcgKyBjaGFsbGVuZ2Uub3Bwb25lbnQudGVhbTtcbiAgICAgICAgICAgICAgLy8gSWYgb25seSAxIHBsYXllciBwZXIgdGVhbSB0aGFuIGp1c3QgdXNlIHRoZSBwbGF5ZXJzIG5hbWVzXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlLmNoYWxsZW5nZXIuZGlzcGxheU5hbWUgPSBfLmZpbmQodm0uY29tcGV0aXRpb24ucGxheWVycywgeyAncG9zaXRpb24nOiAgY2hhbGxlbmdlLmNoYWxsZW5nZXIudGVhbX0pLmRpc3BsYXlOYW1lO1xuICAgICAgICAgICAgICAgIGNoYWxsZW5nZS5vcHBvbmVudC5kaXNwbGF5TmFtZSA9IF8uZmluZCh2bS5jb21wZXRpdGlvbi5wbGF5ZXJzLCB7ICdwb3NpdGlvbic6ICBjaGFsbGVuZ2Uub3Bwb25lbnQudGVhbX0pLmRpc3BsYXlOYW1lO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGFsbGVuZ2Uud2hlbkNvbXBsZXRlZCA9IG1vbWVudChjaGFsbGVuZ2UuY29tcGxldGVkKS5jYWxlbmRhcihudWxsLCB7XG4gICAgICAgICAgICAgIHNhbWVEYXk6ICdbVG9kYXldJyxcbiAgICAgICAgICAgICAgbmV4dERheTogJ1tUb21vcnJvd10nLFxuICAgICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQnLFxuICAgICAgICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheV0nLFxuICAgICAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkJyxcbiAgICAgICAgICAgICAgc2FtZUVsc2U6ICdNTU0gREQsIFlZWVknXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVsZXRlQ2hhbGxlbmdlKGNoYWxsZW5nZUlkLCAkaW5kZXgpIHtcbiAgICAgIHN3YWwoe1xuICAgICAgICB0aXRsZTogJ0RlbGV0ZSBDaGFsbGVuZ2UgUmVzdWx0PycsXG4gICAgICAgIHRleHQ6ICdZb3VcXCdsbCBzdGlsbCBuZWVkIHRvIHJlb3JkZXIgdGhlIHBsYXllcnMgb24geW91ciBvd24nLFxuICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ0RlbGV0ZScsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICdOZXZlcm1pbmQnLFxuICAgICAgICBjbG9zZU9uQ29uZmlybTogdHJ1ZSxcbiAgICAgICAgY2xvc2VPbkNhbmNlbDogdHJ1ZVxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjaGFsbGVuZ2VzU2VydmljZS5kZWxldGVDaGFsbGVuZ2Uodm0uY29tcGV0aXRpb24uX2lkLCBjaGFsbGVuZ2VJZCkudGhlbiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZtLmNoYWxsZW5nZXMuc3BsaWNlKCRpbmRleCwgMSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd3cG1QbGF5ZXJPdmVyYWxsUmVzdWx0cycsIHdwbVBsYXllck92ZXJhbGxSZXN1bHRzKTtcblxuICBmdW5jdGlvbiB3cG1QbGF5ZXJPdmVyYWxsUmVzdWx0cygpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIHBsYXllcjogJz0nXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVVcmw6ICcvY2hhbGxlbmdlcy9jb21wb25lbnRzL3BsYXllci1vdmVyYWxsLXJlc3VsdHMuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoJHNjb3BlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5tYXhMZXZlbHMgPSA3O1xuICAgIHZtLndpbnMgPSB7XG4gICAgICB0b3RhbDogMCxcbiAgICAgIGFzQ2hhbGxlbmdlcjogMCxcbiAgICAgIGFzT3Bwb25lbnQ6IDAsXG4gICAgICBieUZvcmZlaXQ6IDBcbiAgICB9O1xuICAgIHZtLmxvc2VzID0ge1xuICAgICAgdG90YWw6IDAsXG4gICAgICBhc0NoYWxsZW5nZXI6IDAsXG4gICAgICBhc09wcG9uZW50OiAwLFxuICAgICAgYnlGb3JmZWl0OiAwXG4gICAgfTtcbiAgICB2bS5zdHJlYWsgPSB7XG4gICAgICB0eXBlOiBudWxsLFxuICAgICAgdmFsdWU6IDBcbiAgICB9O1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgJHNjb3BlLiR3YXRjaCgndm0ucGxheWVyLnJlc3VsdHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS5wbGF5ZXIpIHtcbiAgICAgICAgICBhc3NpZ25wbGF5ZXJzVG9MZXZlbHModm0ucGxheWVyKTtcbiAgICAgICAgICBjYWxjdWxhdGVTdHJlYWsodm0ucGxheWVyKTtcbiAgICAgICAgICBjYWxjdWF0ZVdpbkFuZExvc2VzKHZtLnBsYXllcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzc2lnbnBsYXllcnNUb0xldmVscyhwbGF5ZXIpIHtcbiAgICAgIC8vIERldGVybWluZSBhbGwgdGhlIGJyZWFrIHBvaW50cyB0byBmaWd1cmUgb3V0IGxldmVsc1xuICAgICAgdmFyIGJyZWFrUG9pbnRzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLm1heExldmVsczsgaSsrKSB7XG4gICAgICAgIGJyZWFrUG9pbnRzLnB1c2goKCgoaSAqIChpICsgMSkpIC8gMikpICsgMSk7XG4gICAgICB9XG5cbiAgICAgIC8vIERlZmF1bHQgYWxsIHBsYXllcnMgdG8gdGhlIGxvd2VzdCBsZXZlbFxuICAgICAgcGxheWVyLmxldmVsID0gYnJlYWtQb2ludHMubGVuZ3RoO1xuICAgICAgLy8gTm93IGNoZWNrIHRvIHNlZSBpZiB0aGUgcGxheWVyIGlzIGF0IGEgaGlnaGVyIGxldmVsXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJyZWFrUG9pbnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChwbGF5ZXIucG9zaXRpb24gPCBicmVha1BvaW50c1tqICsgMV0pIHtcbiAgICAgICAgICBwbGF5ZXIubGV2ZWwgPSBicmVha1BvaW50cy5pbmRleE9mKGJyZWFrUG9pbnRzW2pdKSArIDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVTdHJlYWsocGxheWVyKSB7XG4gICAgICAvLyBGaWd1cmUgb3V0IHRoZSBwbGF5ZXIncyBjdXJyZW50IHN0cmVha1xuICAgICAgdmFyIHN0cmVhayA9IDA7XG4gICAgICB2YXIgY29udGludWVTdHJlYWsgPSB0cnVlO1xuICAgICAgdmFyIHN0cmVha1R5cGU7XG4gICAgICBfLmZvckVhY2gocGxheWVyLnJlc3VsdHMsIGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgaWYgKGNvbnRpbnVlU3RyZWFrKSB7XG4gICAgICAgICAgLy8gV2lubmluZyBTdHJlYWtcbiAgICAgICAgICBpZiAoKGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJyAmJiBjaGFsbGVuZ2UuY2hhbGxlbmdlci5faWQgPT09IHBsYXllci5faWQpIHx8XG4gICAgICAgICAgICAoY2hhbGxlbmdlLndpbm5lciA9PT0gJ29wcG9uZW50JyAmJiBjaGFsbGVuZ2Uub3Bwb25lbnQuX2lkID09PSBwbGF5ZXIuX2lkKSkge1xuICAgICAgICAgICAgLy8gSWYgdGhleSBhcmUgbm90IGFscmVhZHkgb24gYSBsb3Npbmcgc3RyZWFrIGFuZCAxIHRvIHRoZWlyIHdpbm5pbmcgc3RyZWFrXG4gICAgICAgICAgICBpZiAoc3RyZWFrVHlwZSAhPT0gJ2xvc2luZycpIHtcbiAgICAgICAgICAgICAgc3RyZWFrICs9IDE7XG4gICAgICAgICAgICAgIHN0cmVha1R5cGUgPSAnd2lubmluZyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb250aW51ZVN0cmVhayA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIC8vIExvc2luZyBTdHJlYWtcbiAgICAgICAgICB9IGVsc2UgaWYgKChjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnICYmIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLl9pZCA9PT0gcGxheWVyLl9pZCkgfHxcbiAgICAgICAgICAgIChjaGFsbGVuZ2Uud2lubmVyID09PSAnY2hhbGxlbmdlcicgJiYgY2hhbGxlbmdlLm9wcG9uZW50Ll9pZCA9PT0gcGxheWVyLl9pZCkpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXkgYXJlIG5vdCBhbHJlYWR5IG9uIGEgd2lubmluZyBzdHJlYWsgYW5kIDEgdG8gdGhlaXIgbG9zaW5nIHN0cmVha1xuICAgICAgICAgICAgaWYgKHN0cmVha1R5cGUgIT09ICd3aW5uaW5nJykge1xuICAgICAgICAgICAgICBzdHJlYWsgKz0gMTtcbiAgICAgICAgICAgICAgc3RyZWFrVHlwZSA9ICdsb3NpbmcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29udGludWVTdHJlYWsgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdm0uc3RyZWFrID0ge1xuICAgICAgICAgIHR5cGU6IHN0cmVha1R5cGUsXG4gICAgICAgICAgdmFsdWU6IHN0cmVha1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsY3VhdGVXaW5BbmRMb3NlcyhwbGF5ZXIpIHtcbiAgICAgIC8vIEZpZ3VyZSBvdXQgd2lucyBhbmQgbG9zZXNcbiAgICAgIHZtLndpbnMuYXNPcHBvbmVudCA9IF8uc2l6ZShfLmZpbHRlcihwbGF5ZXIucmVzdWx0cywgZnVuY3Rpb24oY2hhbGxlbmdlKSB7IFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGNoYWxsZW5nZS5vcHBvbmVudC5faWQgPT09IHBsYXllci5faWQgJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ29wcG9uZW50J1xuICAgICAgICApO1xuICAgICAgfSkpO1xuXG4gICAgICB2bS53aW5zLmFzQ2hhbGxlbmdlciA9IF8uc2l6ZShfLmZpbHRlcihwbGF5ZXIucmVzdWx0cywgZnVuY3Rpb24oY2hhbGxlbmdlKSB7IFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLl9pZCA9PT0gcGxheWVyLl9pZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnY2hhbGxlbmdlcidcbiAgICAgICAgKTtcbiAgICAgIH0pKTtcblxuICAgICAgdm0ud2lucy50b3RhbCA9IHZtLndpbnMuYXNDaGFsbGVuZ2VyICsgdm0ud2lucy5hc09wcG9uZW50O1xuXG4gICAgICB2bS53aW5zLmJ5Rm9yZmVpdCA9IF8uc2l6ZShfLmZpbHRlcihwbGF5ZXIucmVzdWx0cywgZnVuY3Rpb24oY2hhbGxlbmdlKSB7IFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGNoYWxsZW5nZS5mb3JmZWl0ICYmICgoY2hhbGxlbmdlLmNoYWxsZW5nZXIuX2lkID09PSBwbGF5ZXIuX2lkICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJykgfHxcbiAgICAgICAgICAoY2hhbGxlbmdlLm9wcG9uZW50Ll9pZCA9PT0gcGxheWVyLl9pZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnKSlcbiAgICAgICAgKTtcbiAgICAgIH0pKTtcblxuICAgICAgdm0ubG9zZXMuYXNPcHBvbmVudCA9IF8uc2l6ZShfLmZpbHRlcihwbGF5ZXIucmVzdWx0cywgZnVuY3Rpb24oY2hhbGxlbmdlKSB7IFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGNoYWxsZW5nZS5vcHBvbmVudC5faWQgPT09IHBsYXllci5faWQgJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInXG4gICAgICAgICk7XG4gICAgICB9KSk7XG5cbiAgICAgIHZtLmxvc2VzLmFzQ2hhbGxlbmdlciA9IF8uc2l6ZShfLmZpbHRlcihwbGF5ZXIucmVzdWx0cywgZnVuY3Rpb24oY2hhbGxlbmdlKSB7IFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLl9pZCA9PT0gcGxheWVyLl9pZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnXG4gICAgICAgICk7XG4gICAgICB9KSk7XG5cbiAgICAgIHZtLmxvc2VzLnRvdGFsID0gdm0ubG9zZXMuYXNDaGFsbGVuZ2VyICsgdm0ubG9zZXMuYXNPcHBvbmVudDtcblxuICAgICAgdm0ubG9zZXMuYnlGb3JmZWl0ID0gXy5zaXplKF8uZmlsdGVyKHBsYXllci5yZXN1bHRzLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgY2hhbGxlbmdlLmZvcmZlaXQgJiYgKChjaGFsbGVuZ2UuY2hhbGxlbmdlci5faWQgPT09IHBsYXllci5faWQgJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ29wcG9uZW50JykgfHxcbiAgICAgICAgICAoY2hhbGxlbmdlLm9wcG9uZW50Ll9pZCA9PT0gcGxheWVyLl9pZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnY2hhbGxlbmdlcicpKVxuICAgICAgICApO1xuICAgICAgfSkpO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgnd3BtVGVhbU92ZXJhbGxSZXN1bHRzJywgd3BtVGVhbU92ZXJhbGxSZXN1bHRzKTtcblxuICBmdW5jdGlvbiB3cG1UZWFtT3ZlcmFsbFJlc3VsdHMoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBzY29wZToge1xuICAgICAgICBjb21wZXRpdGlvbjogJz0nLFxuICAgICAgICB0ZWFtOiAnPScsXG4gICAgICAgIGNoYWxsZW5nZXM6ICc9J1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NoYWxsZW5nZXMvY29tcG9uZW50cy90ZWFtLW92ZXJhbGwtcmVzdWx0cy5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYygkc2NvcGUpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLndpbnMgPSB7XG4gICAgICB0b3RhbDogMCxcbiAgICAgIGFzQ2hhbGxlbmdlcjogMCxcbiAgICAgIGFzT3Bwb25lbnQ6IDAsXG4gICAgICBieUZvcmZlaXQ6IDBcbiAgICB9O1xuICAgIHZtLmxvc2VzID0ge1xuICAgICAgdG90YWw6IDAsXG4gICAgICBhc0NoYWxsZW5nZXI6IDAsXG4gICAgICBhc09wcG9uZW50OiAwLFxuICAgICAgYnlGb3JmZWl0OiAwXG4gICAgfTtcbiAgICB2bS5zdHJlYWsgPSB7XG4gICAgICB0eXBlOiBudWxsLFxuICAgICAgdmFsdWU6IDBcbiAgICB9O1xuICAgIHZtLnNpbmdsZVBsYXllclRlYW1zID0gZmFsc2U7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAkc2NvcGUuJHdhdGNoKCd2bS5jaGFsbGVuZ2VzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodm0uY2hhbGxlbmdlcyAmJiB2bS5jaGFsbGVuZ2VzLmxlbmd0aCA+IDAgJiYgdm0uY29tcGV0aXRpb24pIHtcbiAgICAgICAgICBjYWxjdWxhdGVTdHJlYWsodm0udGVhbSwgdm0uY2hhbGxlbmdlcyk7XG4gICAgICAgICAgY2FsY3VhdGVXaW5BbmRMb3Nlcyh2bS50ZWFtLCB2bS5jaGFsbGVuZ2VzKTtcblxuICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG9ubHkgMSBwbGF5ZXIgcGVyIHRlYW0gdGhhbiB1c2UgcGxheWVyJ3MgbmFtZVxuICAgICAgICAgIGlmICh2bS5jb21wZXRpdGlvbi5wbGF5ZXJzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgdm0uc2luZ2xlUGxheWVyVGVhbXMgPSB0cnVlO1xuICAgICAgICAgICAgdm0uZGlzcGxheU5hbWUgPSBfLmZpbmQodm0uY29tcGV0aXRpb24ucGxheWVycywgeyAncG9zaXRpb24nOiAgdm0udGVhbX0pLmRpc3BsYXlOYW1lO1xuICAgICAgICAgICAgdm0ucGxheWVyTmFtZSA9ICBfLmZpbmQodm0uY29tcGV0aXRpb24ucGxheWVycywgeyAncG9zaXRpb24nOiAgdm0udGVhbX0pLmZpcnN0TmFtZSArICcgJyArICBfLmZpbmQodm0uY29tcGV0aXRpb24ucGxheWVycywgeyAncG9zaXRpb24nOiAgdm0udGVhbX0pLmxhc3ROYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlU3RyZWFrKHRlYW0sIGNoYWxsZW5nZXMpIHtcbiAgICAgIC8vIEZpZ3VyZSBvdXQgdGhlIHRlYW0ncyBjdXJyZW50IHN0cmVha1xuICAgICAgdmFyIHN0cmVhayA9IDA7XG4gICAgICB2YXIgY29udGludWVTdHJlYWsgPSB0cnVlO1xuICAgICAgdmFyIHN0cmVha1R5cGU7XG4gICAgICBfLmZvckVhY2goY2hhbGxlbmdlcywgZnVuY3Rpb24gKGNoYWxsZW5nZSkge1xuICAgICAgICBpZiAoY29udGludWVTdHJlYWspIHtcbiAgICAgICAgICAvLyBXaW5uaW5nIFN0cmVha1xuICAgICAgICAgIGlmICgoY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInICYmIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLnRlYW0gPT09IHRlYW0pIHx8XG4gICAgICAgICAgICAoY2hhbGxlbmdlLndpbm5lciA9PT0gJ29wcG9uZW50JyAmJiBjaGFsbGVuZ2Uub3Bwb25lbnQudGVhbSA9PT0gdGVhbSkpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXkgYXJlIG5vdCBhbHJlYWR5IG9uIGEgbG9zaW5nIHN0cmVhayBhbmQgMSB0byB0aGVpciB3aW5uaW5nIHN0cmVha1xuICAgICAgICAgICAgaWYgKHN0cmVha1R5cGUgIT09ICdsb3NpbmcnKSB7XG4gICAgICAgICAgICAgIHN0cmVhayArPSAxO1xuICAgICAgICAgICAgICBzdHJlYWtUeXBlID0gJ3dpbm5pbmcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29udGludWVTdHJlYWsgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvLyBMb3NpbmcgU3RyZWFrXG4gICAgICAgICAgfSBlbHNlIGlmICgoY2hhbGxlbmdlLndpbm5lciA9PT0gJ29wcG9uZW50JyAmJiBjaGFsbGVuZ2UuY2hhbGxlbmdlci50ZWFtID09PSB0ZWFtKSB8fFxuICAgICAgICAgICAgKGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJyAmJiBjaGFsbGVuZ2Uub3Bwb25lbnQudGVhbSA9PT0gdGVhbSkpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXkgYXJlIG5vdCBhbHJlYWR5IG9uIGEgd2lubmluZyBzdHJlYWsgYW5kIDEgdG8gdGhlaXIgbG9zaW5nIHN0cmVha1xuICAgICAgICAgICAgaWYgKHN0cmVha1R5cGUgIT09ICd3aW5uaW5nJykge1xuICAgICAgICAgICAgICBzdHJlYWsgKz0gMTtcbiAgICAgICAgICAgICAgc3RyZWFrVHlwZSA9ICdsb3NpbmcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29udGludWVTdHJlYWsgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdm0uc3RyZWFrID0ge1xuICAgICAgICAgIHR5cGU6IHN0cmVha1R5cGUsXG4gICAgICAgICAgdmFsdWU6IHN0cmVha1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsY3VhdGVXaW5BbmRMb3Nlcyh0ZWFtICwgY2hhbGxlbmdlcykge1xuICAgICAgLy8gRmlndXJlIG91dCB3aW5zIGFuZCBsb3Nlc1xuICAgICAgdm0ud2lucy5hc09wcG9uZW50ID0gXy5zaXplKF8uZmlsdGVyKGNoYWxsZW5nZXMsIGZ1bmN0aW9uKGNoYWxsZW5nZSkgeyBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBjaGFsbGVuZ2Uub3Bwb25lbnQudGVhbSA9PT0gdGVhbSAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnXG4gICAgICAgICk7XG4gICAgICB9KSk7XG5cbiAgICAgIHZtLndpbnMuYXNDaGFsbGVuZ2VyID0gXy5zaXplKF8uZmlsdGVyKGNoYWxsZW5nZXMsIGZ1bmN0aW9uKGNoYWxsZW5nZSkgeyBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBjaGFsbGVuZ2UuY2hhbGxlbmdlci50ZWFtID09PSB0ZWFtICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJ1xuICAgICAgICApO1xuICAgICAgfSkpO1xuXG4gICAgICB2bS53aW5zLnRvdGFsID0gdm0ud2lucy5hc0NoYWxsZW5nZXIgKyB2bS53aW5zLmFzT3Bwb25lbnQ7XG5cbiAgICAgIHZtLndpbnMuYnlGb3JmZWl0ID0gXy5zaXplKF8uZmlsdGVyKGNoYWxsZW5nZXMsIGZ1bmN0aW9uKGNoYWxsZW5nZSkgeyBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBjaGFsbGVuZ2UuZm9yZmVpdCAmJiAoKGNoYWxsZW5nZS5jaGFsbGVuZ2VyLnRlYW0gPT09IHRlYW0gJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInKSB8fFxuICAgICAgICAgIChjaGFsbGVuZ2Uub3Bwb25lbnQudGVhbSA9PT0gdGVhbSAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnKSlcbiAgICAgICAgKTtcbiAgICAgIH0pKTtcblxuICAgICAgdm0ubG9zZXMuYXNPcHBvbmVudCA9IF8uc2l6ZShfLmZpbHRlcihjaGFsbGVuZ2VzLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgY2hhbGxlbmdlLm9wcG9uZW50LnRlYW0gPT09IHRlYW0gJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInXG4gICAgICAgICk7XG4gICAgICB9KSk7XG5cbiAgICAgIHZtLmxvc2VzLmFzQ2hhbGxlbmdlciA9IF8uc2l6ZShfLmZpbHRlcihjaGFsbGVuZ2VzLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgY2hhbGxlbmdlLmNoYWxsZW5nZXIudGVhbSA9PT0gdGVhbSAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnXG4gICAgICAgICk7XG4gICAgICB9KSk7XG5cbiAgICAgIHZtLmxvc2VzLnRvdGFsID0gdm0ubG9zZXMuYXNDaGFsbGVuZ2VyICsgdm0ubG9zZXMuYXNPcHBvbmVudDtcblxuICAgICAgdm0ubG9zZXMuYnlGb3JmZWl0ID0gXy5zaXplKF8uZmlsdGVyKGNoYWxsZW5nZXMsIGZ1bmN0aW9uKGNoYWxsZW5nZSkgeyBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBjaGFsbGVuZ2UuZm9yZmVpdCAmJiAoKGNoYWxsZW5nZS5jaGFsbGVuZ2VyLnRlYW0gPT09IHRlYW0gJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ29wcG9uZW50JykgfHxcbiAgICAgICAgICAoY2hhbGxlbmdlLm9wcG9uZW50LnRlYW0gPT09IHRlYW0gJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInKSlcbiAgICAgICAgKTtcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZmFjdG9yeSgnY2hhbGxlbmdlc1NlcnZpY2UnLCBjaGFsbGVuZ2VzU2VydmljZSk7XG5cbiAgZnVuY3Rpb24gY2hhbGxlbmdlc1NlcnZpY2UoJGh0dHApIHtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGNyZWF0ZVB5cmFtaWRDaGFsbGVuZ2U6IGNyZWF0ZVB5cmFtaWRDaGFsbGVuZ2UsXG4gICAgICBjcmVhdGVWZXJzdXNDaGFsbGVuZ2U6IGNyZWF0ZVZlcnN1c0NoYWxsZW5nZSxcbiAgICAgIGNhbmNlbFB5cmFtaWRDaGFsbGVuZ2U6IGNhbmNlbFB5cmFtaWRDaGFsbGVuZ2UsXG4gICAgICBjb21wbGV0ZVB5cmFtaWRDaGFsbGVuZ2U6IGNvbXBsZXRlUHlyYW1pZENoYWxsZW5nZSxcbiAgICAgIGNvbXBsZXRlVmVyc3VzQ2hhbGxlbmdlOiBjb21wbGV0ZVZlcnN1c0NoYWxsZW5nZSxcbiAgICAgIGdldENoYWxsZW5nZXNCeUNvbXBldGl0aW9uOiBnZXRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbixcbiAgICAgIGdldEFjdGl2ZUNoYWxsZW5nZXNCeUNvbXBldGl0aW9uOiBnZXRBY3RpdmVDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbixcbiAgICAgIGdldEFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllcjogZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyLFxuICAgICAgZ2V0Q29tcGxldGVkQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb246IGdldENvbXBsZXRlZENoYWxsZW5nZXNCeUNvbXBldGl0aW9uLFxuICAgICAgZGVsZXRlQWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyOiBkZWxldGVBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXIsXG4gICAgICBkZWxldGVDaGFsbGVuZ2U6IGRlbGV0ZUNoYWxsZW5nZSxcbiAgICAgIGdldFBsYXllclJlc3VsdHNCeUNvbXBldGl0aW9uOiBnZXRQbGF5ZXJSZXN1bHRzQnlDb21wZXRpdGlvblxuICAgIH07XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVB5cmFtaWRDaGFsbGVuZ2UoY2hhbGxlbmdlKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jaGFsbGVuZ2VzL3B5cmFtaWQvY3JlYXRlJywge1xuICAgICAgICBjaGFsbGVuZ2U6IGNoYWxsZW5nZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuY2VsUHlyYW1pZENoYWxsZW5nZShjaGFsbGVuZ2UpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvY2hhbGxlbmdlcy9weXJhbWlkL2NhbmNlbCcsIHtcbiAgICAgICAgY2hhbGxlbmdlOiBjaGFsbGVuZ2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVZlcnN1c0NoYWxsZW5nZShjaGFsbGVuZ2UpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2NoYWxsZW5nZXMvdmVyc3VzL2NyZWF0ZScsIHtcbiAgICAgICAgY2hhbGxlbmdlOiBjaGFsbGVuZ2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlUHlyYW1pZENoYWxsZW5nZShjaGFsbGVuZ2UpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2NoYWxsZW5nZXMvcHlyYW1pZC9jb21wbGV0ZScsICB7XG4gICAgICAgIGNoYWxsZW5nZTogY2hhbGxlbmdlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZVZlcnN1c0NoYWxsZW5nZShjaGFsbGVuZ2UpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2NoYWxsZW5nZXMvdmVyc3VzL2NvbXBsZXRlJywgIHtcbiAgICAgICAgY2hhbGxlbmdlOiBjaGFsbGVuZ2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENoYWxsZW5nZXNCeUNvbXBldGl0aW9uKGNvbXBldGl0aW9uSWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY2hhbGxlbmdlcy9jb21wZXRpdGlvbicsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QWN0aXZlQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24oY29tcGV0aXRpb25JZCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jaGFsbGVuZ2VzL2FjdGl2ZS9jb21wZXRpdGlvbicsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyKGNvbXBldGl0aW9uSWQsIHBsYXllcklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2NoYWxsZW5nZXMvYWN0aXZlL2NvbXBldGl0aW9uL3BsYXllcicsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgICAgcGxheWVySWQ6IHBsYXllcklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvbXBsZXRlZENoYWxsZW5nZXNCeUNvbXBldGl0aW9uKGNvbXBldGl0aW9uSWQsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2NoYWxsZW5nZXMvY29tcGxldGVkL2NvbXBldGl0aW9uJywgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgICBsaW1pdDogbGltaXRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVsZXRlQWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyKGNvbXBldGl0aW9uSWQsIHBsYXllcklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZGVsZXRlKCcvYXBpL2NoYWxsZW5nZXMvYWN0aXZlL2NvbXBldGl0aW9uL3BsYXllci9kZWxldGUnLCAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkLFxuICAgICAgICAgIHBsYXllcklkOiBwbGF5ZXJJZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWxldGVDaGFsbGVuZ2UoY29tcGV0aXRpb25JZCwgY2hhbGxlbmdlSWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5kZWxldGUoJy9hcGkvY2hhbGxlbmdlcy9kZWxldGUnLCAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkLFxuICAgICAgICAgIGNoYWxsZW5nZUlkOiBjaGFsbGVuZ2VJZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQbGF5ZXJSZXN1bHRzQnlDb21wZXRpdGlvbihjb21wZXRpdGlvbklkLCBwbGF5ZXJJZCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jaGFsbGVuZ2VzL3Jlc3VsdHMvY29tcGV0aXRpb24vcGxheWVyJywgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgICBwbGF5ZXJJZDogcGxheWVySWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd3cG1Gb290ZXInLCB3cG1Gb290ZXIpO1xuXG4gIGZ1bmN0aW9uIHdwbUZvb3RlcigpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NvbW1vbi9jb21wb25lbnRzL2Zvb3Rlci5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYyhpZGVudGl0eVNlcnZpY2UsIGF1dGhTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5pbmRlbnRpdHkgPSBpZGVudGl0eVNlcnZpY2U7XG4gICAgdm0ubG9nb3V0ID0gbG9nb3V0O1xuXG4gICAgZnVuY3Rpb24gbG9nb3V0KCkge1xuICAgICAgYXV0aFNlcnZpY2UubG9nb3V0KCk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd3cG1IZWFkZXInLCB3cG1IZWFkZXIpO1xuXG4gIGZ1bmN0aW9uIHdwbUhlYWRlcigpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAnaGVhZGVyQ3RybCcsXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgdGVtcGxhdGVVcmw6ICcvY29tbW9uL2NvbXBvbmVudHMvaGVhZGVyLmh0bWwnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKCRzY29wZSwgc2lkZWJhclNlcnZpY2UsIGlkZW50aXR5U2VydmljZSwgYXV0aFNlcnZpY2UsIGFsZXJ0c1NlcnZpY2UpIHtcbiAgICB2YXIgaGVhZGVyQ3RybCA9IHRoaXM7XG4gICAgaGVhZGVyQ3RybC5pbmRlbnRpdHkgPSBpZGVudGl0eVNlcnZpY2U7XG4gICAgaGVhZGVyQ3RybC5sb2dvdXQgPSBsb2dvdXQ7XG4gICAgaGVhZGVyQ3RybC5zaWRlYmFyU3RhdHVzID0gc2lkZWJhclNlcnZpY2UuZ2V0U2lkZWJhclN0YXR1cygpO1xuICAgIGhlYWRlckN0cmwudG9nZ2xlU2lkZWJhciA9IHRvZ2dsZVNpZGViYXI7XG4gICAgaGVhZGVyQ3RybC5jbGVhckFsZXJ0ID0gY2xlYXJBbGVydDtcbiAgICBoZWFkZXJDdHJsLmNsZWFyQWxsQWxlcnRzID0gY2xlYXJBbGxBbGVydHM7XG4gICAgaGVhZGVyQ3RybC5hbGVydHMgPSBbXTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGdldEFjdGl2ZUFsZXJ0cygpO1xuICAgICAgJHNjb3BlLiR3YXRjaCgnaGVhZGVyQ3RybC5pbmRlbnRpdHkuY3VycmVudFVzZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgICBnZXRBY3RpdmVBbGVydHMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QWN0aXZlQWxlcnRzKCkge1xuICAgICAgaGVhZGVyQ3RybC5hbGVydHMgPSBbXTtcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgYWxlcnRzU2VydmljZS5nZXRBY3RpdmVBbGVydHNCeVBsYXllcihpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuX2lkKS50aGVuKGZ1bmN0aW9uIChhbGVydHMpIHtcbiAgICAgICAgICBoZWFkZXJDdHJsLmFsZXJ0cyA9IGFsZXJ0cy5kYXRhO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckFsZXJ0KGNsZWFyQWxlcnQsIGluZGV4KSB7XG4gICAgICBhbGVydHNTZXJ2aWNlLmNsZWFyQWxlcnQoY2xlYXJBbGVydCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGhlYWRlckN0cmwuYWxlcnRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckFsbEFsZXJ0cygpIHtcbiAgICAgIGFsZXJ0c1NlcnZpY2UuY2xlYXJBbGxBbGVydHNCeVBsYXllcihpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuX2lkKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaGVhZGVyQ3RybC5hbGVydHMgPSBbXTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvZ2dsZVNpZGViYXIoKSB7XG4gICAgICBzaWRlYmFyU2VydmljZS5zZXRTaWRlYmFyU3RhdHVzKCFoZWFkZXJDdHJsLnNpZGViYXJTdGF0dXMubGVmdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9nb3V0KCkge1xuICAgICAgYXV0aFNlcnZpY2UubG9nb3V0KCk7XG4gICAgfVxuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOnVwZGF0ZV9hbGVydHMnLCBmdW5jdGlvbiAoZSwgYWxlcnRzKSB7XG4gICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpICYmIF8uc29tZShhbGVydHMsIFsndXNlcklkJywgaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZF0pKSB7XG4gICAgICAgIGdldEFjdGl2ZUFsZXJ0cygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd3cG1TaWRlYmFyJywgd3BtU2lkZWJhcik7XG5cbiAgZnVuY3Rpb24gd3BtU2lkZWJhcigpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAnc2lkZWJhckN0cmwnLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NvbW1vbi9jb21wb25lbnRzL3NpZGViYXIuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoaWRlbnRpdHlTZXJ2aWNlLCBhdXRoU2VydmljZSwgc2lkZWJhclNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmluZGVudGl0eSA9IGlkZW50aXR5U2VydmljZTtcbiAgICB2bS5sb2dvdXQgPSBsb2dvdXQ7XG4gICAgdm0uc2lkZWJhclN0YXR1cyA9IHNpZGViYXJTZXJ2aWNlLmdldFNpZGViYXJTdGF0dXMoKTtcblxuICAgIGZ1bmN0aW9uIGxvZ291dCgpIHtcbiAgICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5maWx0ZXIoJ29yZGVyT2JqZWN0QnknLCBvcmRlck9iamVjdEJ5KTtcblxuICBmdW5jdGlvbiBvcmRlck9iamVjdEJ5KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQsIGF0dHJpYnV0ZSkge1xuICAgICAgaWYgKCFhbmd1bGFyLmlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuXG4gICAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICAgIGZvciAodmFyIG9iamVjdEtleSBpbiBpbnB1dCkge1xuICAgICAgICBhcnJheS5wdXNoKGlucHV0W29iamVjdEtleV0pO1xuICAgICAgfVxuXG4gICAgICBhcnJheS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIGEgPSBwYXJzZUludChhW2F0dHJpYnV0ZV0pO1xuICAgICAgICBiID0gcGFyc2VJbnQoYlthdHRyaWJ1dGVdKTtcbiAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5mYWN0b3J5KCdhbGVydHNTZXJ2aWNlJywgYWxlcnRzU2VydmljZSk7XG5cbiAgZnVuY3Rpb24gYWxlcnRzU2VydmljZSgkaHR0cCkge1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgZ2V0QWN0aXZlQWxlcnRzQnlQbGF5ZXI6IGdldEFjdGl2ZUFsZXJ0c0J5UGxheWVyLFxuICAgICAgY2xlYXJBbGVydDogY2xlYXJBbGVydCxcbiAgICAgIGNsZWFyQWxsQWxlcnRzQnlQbGF5ZXI6IGNsZWFyQWxsQWxlcnRzQnlQbGF5ZXJcbiAgICB9O1xuXG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHVuY2xlYXJlZCBhbGVydHMgZm9yIGEgdXNlciBmcm9tIHRoZSBkYXRhYmFzZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVzZXJJZCBpZCBmb3IgdGhlIHVzZXJcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gYWxlcnRzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWN0aXZlQWxlcnRzQnlQbGF5ZXIodXNlcklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2FsZXJ0cy8nLCB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIHVzZXJJZDogdXNlcklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1hcmtzIGEgYWxlcnRzIGFzIGNsZWFyZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBhbGVydElkIGlkIGZvciB0aGUgYWxlcnRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFN0YXR1c1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsZWFyQWxlcnQoYWxlcnRJZCkge1xuICAgICAgcmV0dXJuICRodHRwLnB1dCgnL2FwaS9hbGVydC9jbGVhcicsIHtcbiAgICAgICAgYWxlcnRJZDogYWxlcnRJZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWFya3MgYWxsIHVudmlld2VkIGFsZXJ0cyBhcyB2aWV3ZWQgZm9yIGEgdXNlclxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVzZXJJZCBpZCBmb3IgdGhlIHVzZXJcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFN0YXR1c1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsZWFyQWxsQWxlcnRzQnlQbGF5ZXIodXNlcklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAucHV0KCcvYXBpL2FsZXJ0cy9jbGVhcicsIHtcbiAgICAgICAgdXNlcklkOiB1c2VySWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5mYWN0b3J5KCdpZGVudGl0eVNlcnZpY2UnLCBpZGVudGl0eVNlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIGlkZW50aXR5U2VydmljZSgkd2luZG93KSB7XG4gICAgdmFyIGN1cnJlbnRVc2VyO1xuICAgIGlmICgkd2luZG93LmJvb3RzdHJhcHBlZFVzZXJPYmplY3QgIT09IG51bGwpIHtcbiAgICAgIGN1cnJlbnRVc2VyID0gJHdpbmRvdy5ib290c3RyYXBwZWRVc2VyT2JqZWN0O1xuICAgIH1cbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGN1cnJlbnRVc2VyOiBjdXJyZW50VXNlcixcbiAgICAgIGlzQXV0aGVudGljYXRlZDogaXNBdXRoZW50aWNhdGVkLFxuICAgICAgaXNBdXRob3JpemVkOiBpc0F1dGhvcml6ZWRcbiAgICB9O1xuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gaXNBdXRoZW50aWNhdGVkKCkge1xuICAgICAgcmV0dXJuICEhdGhpcy5jdXJyZW50VXNlcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0F1dGhvcml6ZWQocm9sZSkge1xuICAgICAgcmV0dXJuICEhdGhpcy5jdXJyZW50VXNlciAmJiB0aGlzLmN1cnJlbnRVc2VyLnJvbGVzLmluZGV4T2Yocm9sZSkgPiAtMTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZmFjdG9yeSgnbm90aWZ5U2VydmljZScsIG5vdGlmeVNlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIG5vdGlmeVNlcnZpY2UoKSB7XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBpbmZvOiBpbmZvLFxuICAgICAgc3VjY2Vzczogc3VjY2VzcyxcbiAgICAgIHdhcm5pbmc6IHdhcm5pbmcsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBpbnZlcnNlOiBpbnZlcnNlXG4gICAgfTtcblxuICAgICQubm90aWZ5RGVmYXVsdHMoe1xuICAgICAgbmV3ZXN0X29uX3RvcDogdHJ1ZSxcbiAgICAgIG9mZnNldDoge1xuICAgICAgICB4OiAyMCxcbiAgICAgICAgeTogODVcbiAgICAgIH0sXG4gICAgICBkZWxheTogNTAwMCxcbiAgICB9KTtcblxuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gaW5mbyhtZXNzYWdlLCB1cmwsIHRhcmdldCkge1xuICAgICAgJC5ub3RpZnkoe1xuICAgICAgICAvLyBvcHRpb25zXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgfSwge1xuICAgICAgICAvLyBzZXR0aW5nc1xuICAgICAgICB0eXBlOiAnaW5mbydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN1Y2Nlc3MobWVzc2FnZSwgdXJsLCB0YXJnZXQpIHtcbiAgICAgICQubm90aWZ5KHtcbiAgICAgICAgLy8gb3B0aW9uc1xuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0sIHtcbiAgICAgICAgLy8gc2V0dGluZ3NcbiAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UsIHVybCwgdGFyZ2V0KSB7XG4gICAgICAkLm5vdGlmeSh7XG4gICAgICAgIC8vIG9wdGlvbnNcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgICB9LCB7XG4gICAgICAgIC8vIHNldHRpbmdzXG4gICAgICAgIHR5cGU6ICd3YXJuaW5nJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJyb3IobWVzc2FnZSwgdXJsLCB0YXJnZXQpIHtcbiAgICAgICQubm90aWZ5KHtcbiAgICAgICAgLy8gb3B0aW9uc1xuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0sIHtcbiAgICAgICAgLy8gc2V0dGluZ3NcbiAgICAgICAgdHlwZTogJ2RhbmdlcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmVyc2UobWVzc2FnZSwgdXJsLCB0YXJnZXQpIHtcbiAgICAgICQubm90aWZ5KHtcbiAgICAgICAgLy8gb3B0aW9uc1xuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0sIHtcbiAgICAgICAgLy8gc2V0dGluZ3NcbiAgICAgICAgdHlwZTogJ2ludmVyc2UnXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZmFjdG9yeSgnc2Nyb2xsYmFyU2VydmljZScsIHNjcm9sbGJhclNlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIHNjcm9sbGJhclNlcnZpY2UoKSB7XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBtYWxpaHVTY3JvbGw6IG1hbGlodVNjcm9sbFxuICAgIH07XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIG1hbGlodVNjcm9sbChzZWxlY3RvciwgdGhlbWUsIHNjcm9sbGF4aXMsIG1vdXNld2hlZWxheGlzKSB7XG4gICAgICAkKHNlbGVjdG9yKS5tQ3VzdG9tU2Nyb2xsYmFyKHtcbiAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICBzY3JvbGxJbmVydGlhOiAxMDAsXG4gICAgICAgIGF4aXM6IHNjcm9sbGF4aXMsXG4gICAgICAgIG1vdXNlV2hlZWw6IHtcbiAgICAgICAgICBlbmFibGU6IHRydWUsXG4gICAgICAgICAgYXhpczogbW91c2V3aGVlbGF4aXMsXG4gICAgICAgICAgcHJldmVudERlZmF1bHQ6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmZhY3RvcnkoJ3NpZGViYXJTZXJ2aWNlJywgc2lkZWJhclNlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIHNpZGViYXJTZXJ2aWNlKCkge1xuICAgIHZhciBzaWRlYmFyU3RhdHVzID0ge1xuICAgICAgbGVmdDogZmFsc2UsXG4gICAgICByaWdodDogZmFsc2VcbiAgICB9O1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgZ2V0U2lkZWJhclN0YXR1czogZ2V0U2lkZWJhclN0YXR1cyxcbiAgICAgIHNldFNpZGViYXJTdGF0dXM6IHNldFNpZGViYXJTdGF0dXNcbiAgICB9O1xuXG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICBmdW5jdGlvbiBnZXRTaWRlYmFyU3RhdHVzKCkge1xuICAgICAgcmV0dXJuIHNpZGViYXJTdGF0dXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0U2lkZWJhclN0YXR1cyhzdGF0dXMpIHtcbiAgICAgIHNpZGViYXJTdGF0dXMubGVmdCA9IHN0YXR1cztcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuZmFjdG9yeSgnd2Vic29ja2V0U2VydmljZScsIHdlYnNvY2tldFNlcnZpY2UpLnJ1bihmdW5jdGlvbiAod2Vic29ja2V0U2VydmljZSkge1xuICAgIHdlYnNvY2tldFNlcnZpY2UuY29ubmVjdCgpO1xuICB9KTtcblxuICBmdW5jdGlvbiB3ZWJzb2NrZXRTZXJ2aWNlKCRyb290U2NvcGUsICR3aW5kb3csICR0aW1lb3V0KSB7XG4gICAgdmFyIGNvbm5lY3Rpb247XG4gICAgdmFyIHJldHJ5U2Vjb25kcyA9IFszLCAxMCwgMTAwLCAxMDAwXTtcbiAgICB2YXIgcmV0cnkgPSAwO1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgY29ubmVjdDogY29ubmVjdCxcbiAgICAgIHNlbmQ6IHNlbmRcbiAgICB9O1xuXG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICBmdW5jdGlvbiB3ZWJzb2NrZXRIb3N0KCkge1xuICAgICAgaWYgKCR3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonKSB7XG4gICAgICAgIHJldHVybiAnd3NzOi8vJyArICR3aW5kb3cubG9jYXRpb24uaG9zdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAnd3M6Ly8nICsgJHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gICAgICBjb25uZWN0aW9uID0gbmV3IFdlYlNvY2tldCh3ZWJzb2NrZXRIb3N0KCkpO1xuXG4gICAgICBjb25uZWN0aW9uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHJ5ID0gMDtcbiAgICAgICAgdmFyIHBheWxvYWQgPSBKU09OLnBhcnNlKGUuZGF0YSk7XG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnd3M6JyArIHBheWxvYWQudG9waWMsIHBheWxvYWQuZGF0YSk7XG4gICAgICB9O1xuXG4gICAgICBjb25uZWN0aW9uLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChyZXRyeSA8IHJldHJ5U2Vjb25kcy5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnV2ViU29ja2V0IGNsb3NlZC4gUmVjb25uZWN0aW5nLi4uJyk7XG4gICAgICAgICAgJHRpbWVvdXQoY29ubmVjdCwgcmV0cnlTZWNvbmRzW3JldHJ5XSoxMDAwKTtcbiAgICAgICAgICByZXRyeSArPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdHaXZpbmcgdXAgb24gV2ViU29ja2V0Jyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VuZCh0b3BpYywgZGF0YSkge1xuICAgICAgdmFyIGpzb24gPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHRvcGljOiB0b3BpYyxcbiAgICAgICAgZGF0YTogZGF0YVxuICAgICAgfSk7XG4gICAgICBjb25uZWN0aW9uLnNlbmQoanNvbik7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0hvbWVDdHJsJywgSG9tZUN0cmwpO1xuXG4gIGZ1bmN0aW9uIEhvbWVDdHJsKGNvbXBldGl0aW9uc1NlcnZpY2UsIGlkZW50aXR5U2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0ucHVibGljQ29tcGV0aXRpb25zID0gW107XG4gICAgdm0ucHJpdmF0ZUNvbXBldGl0aW9ucyA9IFtdO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgY29tcGV0aXRpb25zU2VydmljZS5nZXRQdWJsaWNDb21wZXRpdGlvbnMoKS50aGVuKGZ1bmN0aW9uIChjb21wZXRpdGlvbnMpIHtcbiAgICAgICAgdm0ucHVibGljQ29tcGV0aXRpb25zID0gY29tcGV0aXRpb25zLmRhdGE7XG4gICAgICB9KTtcbiAgICAgIC8vIEdldCBwcml2YXRlIGNvbXBldGl0aW9ucyBmb3Igc3VwZXItYWRtaW5zXG4gICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aG9yaXplZCgnc3VwZXItYWRtaW4nKSkge1xuICAgICAgICBjb21wZXRpdGlvbnNTZXJ2aWNlLmdldFByaXZhdGVDb21wZXRpdGlvbnMoKS50aGVuKGZ1bmN0aW9uIChjb21wZXRpdGlvbnMpIHtcbiAgICAgICAgICB2bS5wcml2YXRlQ29tcGV0aXRpb25zID0gY29tcGV0aXRpb25zLmRhdGE7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgnd3BtQ29tcGV0aXRpb25Db21wYWN0Jywgd3BtQ29tcGV0aXRpb25Db21wYWN0KTtcblxuICBmdW5jdGlvbiB3cG1Db21wZXRpdGlvbkNvbXBhY3QoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBzY29wZToge1xuICAgICAgICBjb21wZXRpdGlvbjogJz0nLFxuXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVVcmw6ICcvY29tcGV0aXRpb25zL2NvbXBvbmVudHMvY29tcGV0aXRpb24tY29tcGFjdC5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYygpIHtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHt9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ3dwbVBlbmRpbmdQbGF5ZXJzJywgd3BtUGVuZGluZ1BsYXllcnMpO1xuXG4gIGZ1bmN0aW9uIHdwbVBlbmRpbmdQbGF5ZXJzKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogY3RybEZ1bmMsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgY29tcGV0aXRpb246ICc9J1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NvbXBldGl0aW9ucy9jb21wb25lbnRzL3BlbmRpbmctcGxheWVycy5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYyhjb21wZXRpdGlvbnNTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5wZW5kaW5nUGxheWVycyA9IFtdO1xuICAgIHZtLmFwcHJvdmVQZW5kaW5nUGxheWVyID0gYXBwcm92ZVBlbmRpbmdQbGF5ZXI7XG4gICAgdm0uZGVueVBlbmRpbmdQbGF5ZXIgPSBkZW55UGVuZGluZ1BsYXllcjtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHt9XG5cbiAgICBmdW5jdGlvbiBhcHByb3ZlUGVuZGluZ1BsYXllcihwbGF5ZXIpIHtcbiAgICAgIHBsYXllci5wb3NpdGlvbiA9IHZtLmNvbXBldGl0aW9uLnBsYXllcnMubGVuZ3RoICsgMTtcbiAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2UuYXBwcm92ZVBlbmRpbmdQbGF5ZXIodm0uY29tcGV0aXRpb24uX2lkLCBwbGF5ZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbnlQZW5kaW5nUGxheWVyKHBsYXllcikge1xuICAgICAgY29tcGV0aXRpb25zU2VydmljZS5kZW55UGVuZGluZ1BsYXllcih2bS5jb21wZXRpdGlvbi5faWQsIHBsYXllcik7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgnd3BtUHlyYW1pZCcsIHdwbVB5cmFtaWQpO1xuXG4gIGZ1bmN0aW9uIHdwbVB5cmFtaWQoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jb21wZXRpdGlvbnMvY29tcG9uZW50cy9weXJhbWlkLmh0bWwnLFxuICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGNvbXBldGl0aW9uOiAnPSdcbiAgICAgIH0sXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYygkc2NvcGUsICRzdGF0ZSwgY29tcGV0aXRpb25zU2VydmljZSwgJGZpbHRlciwgbm90aWZ5U2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlLCBjaGFsbGVuZ2VzU2VydmljZSkge1xuICAgIHZhciBtYXhMZXZlbHMgPSA3O1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uY29tcGV0aXRpb25JZCA9IG51bGw7XG4gICAgdm0uYnJlYWtQb2ludHMgPSBbXTtcbiAgICB2bS5sZXZlbHMgPSBbXTtcbiAgICB2bS5udW1iZXJPZkJsb2NrcyA9IDA7XG4gICAgdm0uY3VycmVudFVzZXJJc09uQ29tcGV0aXRpb24gPSBmYWxzZTtcbiAgICB2bS5jdXJyZW50VXNlcklzUGVuZGluZyA9IGZhbHNlO1xuICAgIHZtLmN1cnJlbnRVc2VySXNBZG1pbiA9IGZhbHNlO1xuICAgIHZtLmhhc0FjdGl2ZUNoYWxsZW5nZSA9IGZhbHNlO1xuICAgIHZtLmFjdGl2ZUNoYWxsZW5nZU9wcG9uZW50ID0gbnVsbDtcbiAgICB2bS5hdmFpbGFibGVDaGFsbGVuZ2VzID0gZmFsc2U7XG4gICAgdm0uY3JlYXRlQ2hhbGxlbmdlID0gY3JlYXRlQ2hhbGxlbmdlO1xuICAgIHZtLmNhbmNlbENoYWxsZW5nZSA9IGNhbmNlbENoYWxsZW5nZTtcbiAgICB2bS5jb21wbGV0ZUNoYWxsZW5nZSA9IGNvbXBsZXRlQ2hhbGxlbmdlO1xuICAgIHZtLmZvcmZlaXRDaGFsbGVuZ2UgPSBmb3JmZWl0Q2hhbGxlbmdlO1xuICAgIHZtLmN1cnJlbnRVc2VyUGxheWVyID0ge307XG4gICAgdm0uY29tcGV0aXRpb25NZW51VG9nZ2xlID0gZmFsc2U7XG4gICAgdm0uYWRkQ3VycmVudFVzZXJUb0NvbXBldGl0aW9uID0gYWRkQ3VycmVudFVzZXJUb0NvbXBldGl0aW9uO1xuICAgIHZtLmNvbmZpcm1SZW1vdmVDdXJyZW50VXNlckZyb21Db21wZXRpdGlvbiA9IGNvbmZpcm1SZW1vdmVDdXJyZW50VXNlckZyb21Db21wZXRpdGlvbjtcbiAgICB2bS5wbGF5ZXJDbGljayA9IHBsYXllckNsaWNrO1xuICAgIHZtLm51bWJlck9mUmVhbFBsYXllcnMgPSAwO1xuICAgIHZtLm1heFBsYXllcnMgPSAwO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBtYXhpbXVtIG51bWJlciBvZiBwbGF5ZXJzIGJhc2VkIG9uIHRoZSBtYXhpbXVtIG51bWJlciBvZiBsZXZlbHNcbiAgICAgIGZvciAodmFyIGkgPSBtYXhMZXZlbHM7IGkgPiAwOyAtLWkpIHtcbiAgICAgICAgdm0ubWF4UGxheWVycyArPSBpO1xuICAgICAgfVxuXG4gICAgICAkc2NvcGUuJHdhdGNoKCd2bS5jb21wZXRpdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHZtLmNvbXBldGl0aW9uKSB7XG4gICAgICAgICAgdm0uY29tcGV0aXRpb25JZCA9IHZtLmNvbXBldGl0aW9uLl9pZDtcbiAgICAgICAgICBvcmRlclBsYXllcnMoKTtcbiAgICAgICAgICBnZXRQbGF5ZXJzU3RhdHVzKCk7XG4gICAgICAgICAgYXNzaWduTGV2ZWxzVG9QbGF5ZXJzKCk7XG4gICAgICAgICAgY2FsY3VsYXRlQ29tcGV0aXRpb25CbG9ja3MoKTtcbiAgICAgICAgICBmaWxsSW5FbXB0eUJsb2NrcygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcmRlciB0aGUgcGxheWVycyBieSB0aGUgcG9zaXRpb24gcHJvcGVydHkgb2YgdGhlIHBsYXllcnMgYXJyYXkgaW4gdGhlIGNvbXBldGl0aW9uIG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9yZGVyUGxheWVycygpIHtcbiAgICAgIHZtLmNvbXBldGl0aW9uLnBsYXllcnMgPSAkZmlsdGVyKCdvcmRlckJ5Jykodm0uY29tcGV0aXRpb24ucGxheWVycywgJ3Bvc2l0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlndXJlIG91dCBpZiBlYWNoIHBsYXllciBpcyBhbHJlYWR5IGNoYWxsZW5nZWQgYW5kIHNldCBzb21lIHN0dWZmXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UGxheWVyc1N0YXR1cygpIHtcbiAgICAgIC8vIENoZWNrIGFsbCB0aGUgYWN0aXZlIGNoYWxsZW5nZXMgZm9yIHRoaXMgY29tcGV0aXRpb24gYW5kIHNldHMgdGhlIHN0YXR1cyBvZiB0aGUgcGxheWVyc1xuICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZ2V0QWN0aXZlQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24odm0uY29tcGV0aXRpb25JZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlcykge1xuICAgICAgICBfLmZvckVhY2goY2hhbGxlbmdlcy5kYXRhLCBmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG5cbiAgICAgICAgICB2YXIgY2hhbGxlbmdlciA9IF8uZmluZCh2bS5jb21wZXRpdGlvbi5wbGF5ZXJzLCB7ICdfaWQnOiBjaGFsbGVuZ2UuY2hhbGxlbmdlci5faWQgfSk7XG4gICAgICAgICAgY2hhbGxlbmdlci5jbGFzcyA9ICd1bmF2YWlsYWJsZSc7XG4gICAgICAgICAgY2hhbGxlbmdlci5hdmFpbGFibGUgPSBmYWxzZTtcbiAgICAgICAgICBjaGFsbGVuZ2VyLmNoYWxsZW5nZSA9IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnY2hhbGxlbmdlcicsXG4gICAgICAgICAgICBvcHBvbmVudDogXy5maW5kKHZtLmNvbXBldGl0aW9uLnBsYXllcnMsIHsgJ19pZCc6IGNoYWxsZW5nZS5vcHBvbmVudC5faWQgfSkuZGlzcGxheU5hbWVcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdmFyIG9wcG9uZW50ID0gXy5maW5kKHZtLmNvbXBldGl0aW9uLnBsYXllcnMsIHsgJ19pZCc6IGNoYWxsZW5nZS5vcHBvbmVudC5faWQgfSk7XG4gICAgICAgICAgb3Bwb25lbnQuY2xhc3MgPSAndW5hdmFpbGFibGUnO1xuICAgICAgICAgIG9wcG9uZW50LmF2YWlsYWJsZSA9IGZhbHNlO1xuICAgICAgICAgIG9wcG9uZW50LmNoYWxsZW5nZSA9IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnb3Bwb25lbnQnXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIFRyYWNrIHdoZW4gdGhlIGNoYWxsZW5nZSB3aWxsIGV4cGlyZVxuICAgICAgICAgIGlmIChjaGFsbGVuZ2UudGltZUxpbWl0ICE9PSAwKSB7XG4gICAgICAgICAgICB2YXIgdGltZVRvRXhwaXJlID0gbW9tZW50KCkuZGlmZihtb21lbnQoY2hhbGxlbmdlLmNyZWF0ZWQpLmFkZChjaGFsbGVuZ2UudGltZUxpbWl0LCAnZCcpKSAqIC0xO1xuICAgICAgICAgICAgdmFyIGhvdXJzVG9FeHBpcmUgPSBtb21lbnQuZHVyYXRpb24odGltZVRvRXhwaXJlKS5hc0hvdXJzKCk7XG4gICAgICAgICAgICAvLyBJZiB0aGUgY2hhbGxlbmdlIGhhcyBub3QgeWV0IGV4cGlyZWQgZGlzcGxheSBhIGNvdW50ZG93biBvbiB0aGUgb3Bwb25lbnRcbiAgICAgICAgICAgIGlmICh0aW1lVG9FeHBpcmUgPiAwKSB7XG4gICAgICAgICAgICAgIG9wcG9uZW50LmNoYWxsZW5nZS5leHBpcmVzID0gaG91cnNUb0V4cGlyZTtcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIGNoYWxsZW5nZSBleHBpcmVkIHdoaWxlIG5vIG9uZSB3YXMgdmlld2luZyB0aGlzIGNvbXBldGl0aW9uIGNvbXBsZXRlIHRoZSBjaGFsbGVuZ2UgYnkgZm9yZmVpdFxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aW1lVG9FeHBpcmUgPD0gMCkge1xuICAgICAgICAgICAgICBjb21wbGV0ZUNoYWxsZW5nZShudWxsLCB0cnVlLCBvcHBvbmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2bS5jdXJyZW50VXNlcklzQWRtaW4gPSBmYWxzZTtcbiAgICAgICAgdm0uY3VycmVudFVzZXJJc1BlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgY3VycmVudCB1c2VyIGlzIGFuIGFkbWluIG9mIHRoaXMgY29tcGV0aXRpb25cbiAgICAgICAgICB2bS5jdXJyZW50VXNlcklzQWRtaW4gPSBfLnNvbWUodm0uY29tcGV0aXRpb24uYWRtaW5zLCBbJ19pZCcsIGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWRdKTtcbiAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIGN1cnJlbnQgdXNlciBoYXMgYSBwZW5kaW5nIHJlcXVlc3QgdG8gam9pblxuICAgICAgICAgIHZtLmN1cnJlbnRVc2VySXNQZW5kaW5nID0gXy5zb21lKHZtLmNvbXBldGl0aW9uLnBlbmRpbmdQbGF5ZXJzLCBbJ19pZCcsIGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWRdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCBzdHVmZiBmb3IgdGhlIGN1cnJlbnQgdXNlclxuICAgICAgICB2bS5jdXJyZW50VXNlcklzT25Db21wZXRpdGlvbiA9IGZhbHNlO1xuICAgICAgICB2bS5oYXNBY3RpdmVDaGFsbGVuZ2UgPSBmYWxzZTtcbiAgICAgICAgXy5mb3JFYWNoKHZtLmNvbXBldGl0aW9uLnBsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgICAvLyBGaW5kIHRoZSBjdXJyZW50IHVzZXIgaWYgdGhleSBhcmUgb24gdGhpcyBjb21wZXRpdGlvbiBhbmQgc2V0IHNvbWUgcHJvcGVydGllc1xuICAgICAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkgJiYgcGxheWVyLl9pZCA9PT0gaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZCkge1xuICAgICAgICAgICAgdm0uY3VycmVudFVzZXJJc09uQ29tcGV0aXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgcGxheWVyLmNsYXNzID0gcGxheWVyLmNsYXNzID8gcGxheWVyLmNsYXNzICsgJyBjdXJyZW50LXVzZXInOiAnY3VycmVudC11c2VyJztcbiAgICAgICAgICAgIHZtLmN1cnJlbnRVc2VyUGxheWVyID0gcGxheWVyO1xuXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgY3VycmVudCB1c2VyIGhhcyBhbiBhY3RpdmUgY2hhbGxlbmdlXG4gICAgICAgICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXIodm0uY29tcGV0aXRpb25JZCwgcGxheWVyLl9pZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG4gICAgICAgICAgICAgIGlmIChjaGFsbGVuZ2UuZGF0YSkge1xuICAgICAgICAgICAgICAgIHZtLmhhc0FjdGl2ZUNoYWxsZW5nZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdm0uYWN0aXZlQ2hhbGxlbmdlT3Bwb25lbnQgPSBjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2VyLl9pZCA9PT0gcGxheWVyLl9pZCA/IGNoYWxsZW5nZS5kYXRhLm9wcG9uZW50IDogY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlcjtcbiAgICAgICAgICAgICAgICAvLyBBZGQgYSBjbGFzcyB0byB0aGUgY3VycmVudCB1c2VyJ3Mgb3Bwb25lbnQnXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRPcHBvbmVudCA9IF8uZmluZCh2bS5jb21wZXRpdGlvbi5wbGF5ZXJzLCB7J19pZCc6IHZtLmFjdGl2ZUNoYWxsZW5nZU9wcG9uZW50Ll9pZH0pO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRPcHBvbmVudC5jbGFzcyA9IGN1cnJlbnRPcHBvbmVudC5jbGFzcyA/IGN1cnJlbnRPcHBvbmVudC5jbGFzcyArICcgY3VycmVudC1vcHBvbmVudCc6ICdjdXJyZW50LW9wcG9uZW50JztcbiAgICAgICAgICAgICAgLy8gTm93IHRoYXQgd2Uga25vdyBhYm91dCBhbGwgdGhlIGFjdGl2ZSBjaGFsbGVuZ2VzIGZpbmQgdGhlIGF2YWlsYWJsZSBjaGFsbGVuZ2VzIGZvciB0aGUgY3VycmVudCB1c2VyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmluZEF2YWlsYWJsZUNoYWxsZW5nZXMoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpZ3VyZSBvdXQgd2hlcmUgdG8gc3RhcnQgZWFjaCBuZXcgcm93IG9uIHRoZSBjb21wZXRpdGlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJyZWFrUG9pbnRzKCkge1xuICAgICAgdm0uYnJlYWtQb2ludHMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF4TGV2ZWxzOyBpKyspIHtcbiAgICAgICAgdm0uYnJlYWtQb2ludHMucHVzaCgoKChpICogKGkgKyAxKSkgLyAyKSkgKyAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBHaXZlIGVhY2ggcGxheWVyIGEgbGV2ZWwgcHJvcGVydHkgYmFzZWQgb24gdGhlIGJyZWFrIHBvaW50c1xuICAgIC8vIFRoaXMgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSB3aG8gb3RoZXIgcGxheWVycyBjYW4gY2hhbGxlbmdlXG4gICAgZnVuY3Rpb24gYXNzaWduTGV2ZWxzVG9QbGF5ZXJzKCkge1xuICAgICAgdmFyIGxldmVsID0gMDtcbiAgICAgIHZtLmxldmVscyA9IFtdO1xuICAgICAgY3JlYXRlQnJlYWtQb2ludHMoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uY29tcGV0aXRpb24ucGxheWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodm0uYnJlYWtQb2ludHMuaW5kZXhPZihpICsgMSkgPiAtMSkge1xuICAgICAgICAgIGxldmVsICs9IDE7XG4gICAgICAgICAgLy8gU2V0IHRoZSBudW1iZXIgb2YgdG90YWwgbGV2ZWxzXG4gICAgICAgICAgdm0ubGV2ZWxzLnB1c2gobGV2ZWwpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEdpdmUgZWFjaCBwbGF5ZXIgYSBsZXZlbFxuICAgICAgICB2bS5jb21wZXRpdGlvbi5wbGF5ZXJzW2ldLmxldmVsID0gbGV2ZWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSG93IG1hbnkgdG90YWwgYmxvY2tzIGluIHRoaXMgY29tcGV0aXRpb25cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVDb21wZXRpdGlvbkJsb2NrcygpIHtcbiAgICAgIHZtLm51bWJlck9mQmxvY2tzID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSBfLmxhc3Qodm0ubGV2ZWxzKTsgaSA+IDA7IGktLSkge1xuICAgICAgICB2bS5udW1iZXJPZkJsb2NrcyArPSBpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbGwgb3V0IHRoZSByZW1haW5pbmcgYmxvY2tzIG9mIHRoZSBjb21wZXRpdGlvbiB3aXRoIGVtcHR5IGJsb2Nrc1xuICAgIGZ1bmN0aW9uIGZpbGxJbkVtcHR5QmxvY2tzKCkge1xuICAgICAgdm0ubnVtYmVyT2ZSZWFsUGxheWVycyA9IHZtLmNvbXBldGl0aW9uLnBsYXllcnMubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IHZtLmNvbXBldGl0aW9uLnBsYXllcnMubGVuZ3RoOyBpIDwgdm0ubnVtYmVyT2ZCbG9ja3M7IGkrKykge1xuICAgICAgICB2bS5jb21wZXRpdGlvbi5wbGF5ZXJzLnB1c2goe1xuICAgICAgICAgIGZpcnN0TmFtZTogJ0VtcHR5JyxcbiAgICAgICAgICBsYXN0TmFtZTogJ1Nwb3QnLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiAnRW1wdHkgU3BvdCcsXG4gICAgICAgICAgcG9zaXRpb246IDk5LFxuICAgICAgICAgIGNsYXNzOiAnZW1wdHknXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gV2UgaGF2ZSB0byBnaXZlIGxldmVscyB0byB0aGUgbmV3IGVtcHR5IHNwb3RzXG4gICAgICBhc3NpZ25MZXZlbHNUb1BsYXllcnMoKTtcbiAgICB9XG5cbiAgICAvLyBGaW5kIGFsbCB0aGUgcGxheWVycyB0aGF0IGFyZSBhdmFpbGFibGUgdG8gYmUgY2hhbGxlbmdlZCBieSB0aGlzIHVzZXJcbiAgICBmdW5jdGlvbiBmaW5kQXZhaWxhYmxlQ2hhbGxlbmdlcygpIHtcbiAgICAgIHZtLmF2YWlsYWJsZUNoYWxsZW5nZXMgPSBmYWxzZTtcbiAgICAgIGlmICh2bS5jdXJyZW50VXNlcklzT25Db21wZXRpdGlvbiAmJiAhdm0uaGFzQWN0aXZlQ2hhbGxlbmdlKSB7XG4gICAgICAgIHZhciBsZXZlbEFib3ZlID0gdm0uY3VycmVudFVzZXJQbGF5ZXIubGV2ZWwgPiAxID8gdm0uY3VycmVudFVzZXJQbGF5ZXIubGV2ZWwgLSAxIDogbnVsbDtcbiAgICAgICAgXy5mb3JFYWNoKHZtLmNvbXBldGl0aW9uLnBsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgICB2YXIgd2FpdGluZ0ZvclBsYXllciA9IG51bGw7XG4gICAgICAgICAgaWYgKHBsYXllci5sZXZlbCA9PT0gbGV2ZWxBYm92ZSAmJiBwbGF5ZXIucG9zaXRpb24gIT09IDk5ICYmIHBsYXllci5jbGFzcyAhPT0gJ3VuYXZhaWxhYmxlJyAmJiBwbGF5ZXIuYXZhaWxhYmxlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgaXMgYSB3YWl0aW5nIHBlcmlvZCBmb3IgdGhpcyBwbGF5ZXJcbiAgICAgICAgICAgIHdhaXRpbmdGb3JQbGF5ZXIgPSBfLmZpbmQodm0uY3VycmVudFVzZXJQbGF5ZXIud2FpdGluZ1BlcmlvZHMsIHsgJ3BsYXllcic6IHBsYXllci5faWQgfSk7XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIHdhaXRpbiBwZXJpb2QgZm9yIHRoaXMgdXNlciBkb24ndCBtYWtlIHRoZW0gYXZhaWxhYmxlXG4gICAgICAgICAgICBpZiAod2FpdGluZ0ZvclBsYXllciAmJiBtb21lbnQoKS5pc0JlZm9yZSh3YWl0aW5nRm9yUGxheWVyLmV4cGlyZXMpKSB7XG4gICAgICAgICAgICAgIHBsYXllci5jbGFzcyA9ICd3YWl0aW5nJztcbiAgICAgICAgICAgICAgcGxheWVyLndhaXRVbnRpbCA9IG1vbWVudCh3YWl0aW5nRm9yUGxheWVyLmV4cGlyZXMpLmZvcm1hdCgnTU1NIERvICBMVCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdm0uYXZhaWxhYmxlQ2hhbGxlbmdlcyA9IHRydWU7XG4gICAgICAgICAgICAgIHBsYXllci5hdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICBwbGF5ZXIuY2xhc3MgPSAnYXZhaWxhYmxlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjaGFsbGVuZ2UgYmV0d2VlbiB0aGUgY3VycmVudCB1c2VyIGFuZCB0aGUgcGxheWVyIHNlbGVjdGVkXG4gICAgICogXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBwbGF5ZXIsIHRoZSBjaGFsbGVuZ2VkIHBsYXllclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoYWxsZW5nZShwbGF5ZXIpIHtcbiAgICAgIGlmICghcGxheWVyLmF2YWlsYWJsZSkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdTb3JyeSwgdGhhdCBpcyBub3QgYSB2YWxpZCBjaGFsbGVuZ2UuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bS5oYXNBY3RpdmVDaGFsbGVuZ2UgPSB0cnVlO1xuICAgICAgICB2YXIgY2hhbGxlbmdlID0ge1xuICAgICAgICAgIHR5cGU6IHZtLmNvbXBldGl0aW9uLnR5cGUsXG4gICAgICAgICAgY29tcGV0aXRpb25OYW1lOiB2bS5jb21wZXRpdGlvbi5uYW1lLFxuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IHZtLmNvbXBldGl0aW9uSWQsXG4gICAgICAgICAgY29tcGxldGU6IGZhbHNlLFxuICAgICAgICAgIGZvcmZlaXQ6IGZhbHNlLFxuICAgICAgICAgIHRpbWVMaW1pdDogdm0uY29tcGV0aXRpb24uZm9yZmVpdERheXMsXG4gICAgICAgICAgY2hhbGxlbmdlcjoge1xuICAgICAgICAgICAgX2lkOiB2bS5jdXJyZW50VXNlclBsYXllci5faWQsXG4gICAgICAgICAgICBlbWFpbDogdm0uY3VycmVudFVzZXJQbGF5ZXIuZW1haWwsXG4gICAgICAgICAgICBmaXJzdE5hbWU6IHZtLmN1cnJlbnRVc2VyUGxheWVyLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiB2bS5jdXJyZW50VXNlclBsYXllci5sYXN0TmFtZSxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiB2bS5jdXJyZW50VXNlclBsYXllci5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB2bS5jdXJyZW50VXNlclBsYXllci5wb3NpdGlvblxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3Bwb25lbnQ6IHtcbiAgICAgICAgICAgIF9pZDogcGxheWVyLl9pZCxcbiAgICAgICAgICAgIGVtYWlsOiBwbGF5ZXIuZW1haWwsXG4gICAgICAgICAgICBmaXJzdE5hbWU6IHBsYXllci5maXJzdE5hbWUsXG4gICAgICAgICAgICBsYXN0TmFtZTogcGxheWVyLmxhc3ROYW1lLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IHBsYXllci5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiBwbGF5ZXIucG9zaXRpb25cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIENyZWF0ZSB0aGUgY2hhbGxlbmdlXG4gICAgICAgIC8vIFdlYnNvY2tldCBldmVudCB3aWxsIHJlZnJlc2ggdGhlIGNvbXBldGl0aW9uXG4gICAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmNyZWF0ZVB5cmFtaWRDaGFsbGVuZ2UoY2hhbGxlbmdlKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2bS5jb21wZXRpdGlvbk1lbnVUb2dnbGUgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWxsb3dzIHRoZSBjaGFsbGVuZ2VyIHRvIGNhbmNlbCBhIGNoYWxsZW5nZVxuICAgIC8vIEluZm9ybXMgdGhlIG9wcG9uZW50IHRvIGFzayB0aGUgY2hhbGxlbmdlciB0byBjYW5jZWwgdGhlIG9wcG9uZW50XG4gICAgZnVuY3Rpb24gY2FuY2VsQ2hhbGxlbmdlKCkge1xuICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyKHZtLmNvbXBldGl0aW9uSWQsIHZtLmN1cnJlbnRVc2VyUGxheWVyLl9pZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG4gICAgICAgIGlmIChjaGFsbGVuZ2UuZGF0YSkge1xuICAgICAgICAgIC8vIEFsbG93IHRoZSBjaGFsbGVuZ2VyIHRvIGNhbmNlbCB0aGUgY2hhbGxlbmdlXG4gICAgICAgICAgaWYgKGNoYWxsZW5nZS5kYXRhLmNoYWxsZW5nZXIuX2lkID09PSB2bS5jdXJyZW50VXNlclBsYXllci5faWQpIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmNhbmNlbFB5cmFtaWRDaGFsbGVuZ2UoY2hhbGxlbmdlLmRhdGEpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2bS5oYXNBY3RpdmVDaGFsbGVuZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGxldGUgYSBjaGFsbGVuZ2UgYnkgYSB1c2VyIGludGVyYWN0aW9uIG9yIGEgZm9yZmVpdFxuICAgICAqIFxuICAgICAqIEBwYXJhbSAge2Jvb2xlYW59IHdpbm5lcklzQ3VycmVudFVzZXJcbiAgICAgKiBAcGFyYW0gIHtib29sZWFufSBmb3JmZWl0XG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBmb3JmZWl0TG9zZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wbGV0ZUNoYWxsZW5nZSh3aW5uZXJJc0N1cnJlbnRVc2VyLCBmb3JmZWl0LCBmb3JmZWl0TG9zZXIpIHtcbiAgICAgIHZhciBwbGF5ZXIgPSBmb3JmZWl0TG9zZXIgfHwgdm0uY3VycmVudFVzZXJQbGF5ZXI7XG4gICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXIodm0uY29tcGV0aXRpb25JZCwgcGxheWVyLl9pZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG4gICAgICAgIHZtLmhhc0FjdGl2ZUNoYWxsZW5nZSA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBzd2FwUG9zaXRpb25zID0gZmFsc2U7XG5cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBmb3JmZWl0XG4gICAgICAgIGlmIChmb3JmZWl0KSB7XG4gICAgICAgICAgY2hhbGxlbmdlLmRhdGEuZm9yZmVpdCA9IHRydWU7XG4gICAgICAgICAgaWYgKGZvcmZlaXRMb3Nlci5jaGFsbGVuZ2UucG9zaXRpb24gPT09ICdvcHBvbmVudCcpIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5kYXRhLndpbm5lciA9ICdjaGFsbGVuZ2VyJztcbiAgICAgICAgICAgIHN3YXBQb3NpdGlvbnMgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS53aW5uZXIgPSAnb3Bwb25lbnQnO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBGaWd1cmUgb3V0IHdobyB0aGUgd2lubmVyIHdhcyB0byBzdG9yZSBpbiB0aGUgY2hhbGxlbmdlIHJlY29yZFxuICAgICAgICB9IGVsc2UgaWYgKHdpbm5lcklzQ3VycmVudFVzZXIpIHtcbiAgICAgICAgICBpZiAoY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlci5faWQgPT09IHZtLmN1cnJlbnRVc2VyUGxheWVyLl9pZCkge1xuICAgICAgICAgICAgY2hhbGxlbmdlLmRhdGEud2lubmVyID0gJ2NoYWxsZW5nZXInO1xuICAgICAgICAgICAgc3dhcFBvc2l0aW9ucyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5kYXRhLndpbm5lciA9ICdvcHBvbmVudCc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2VyLl9pZCA9PT0gdm0uY3VycmVudFVzZXJQbGF5ZXIuX2lkKSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS53aW5uZXIgPSAnb3Bwb25lbnQnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS53aW5uZXIgPSAnY2hhbGxlbmdlcic7XG4gICAgICAgICAgICBzd2FwUG9zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9zZXIsIHdpbm5lciA9IG51bGw7XG4gICAgICAgIGlmIChjaGFsbGVuZ2UuZGF0YS53aW5uZXIgPT09ICdvcHBvbmVudCcpIHtcbiAgICAgICAgICB3aW5uZXIgPSBjaGFsbGVuZ2UuZGF0YS5vcHBvbmVudDtcbiAgICAgICAgICBsb3NlciA9IGNoYWxsZW5nZS5kYXRhLmNoYWxsZW5nZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2lubmVyID0gY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlcjtcbiAgICAgICAgICBsb3NlciA9IGNoYWxsZW5nZS5kYXRhLm9wcG9uZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2UuY3JlYXRlV2FpdGluZ1BlcmlvZCh2bS5jb21wZXRpdGlvbklkLCBsb3Nlci5faWQsIHdpbm5lci5faWQsIHZtLmNvbXBldGl0aW9uLndhaXRpbmdQZXJpb2REYXlzKTtcblxuICAgICAgICAvLyBTd2FwIHBvc2l0aW9ucyBhbmQgdGhlbiBjb21wbGV0ZSB0aGUgY2hhbGxlbmdlIG9yIGp1c3QgY29tcGxldGUgdGhlIGNoYWxsZW5nZVxuICAgICAgICAvLyBXZWJzb2NrZXQgZXZlbnQgd2lsbCByZWZyZXNoIHRoZSBjb21wZXRpdGlvblxuICAgICAgICBpZiAoc3dhcFBvc2l0aW9ucykge1xuICAgICAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2Uuc3dhcFBvc2l0aW9ucyh2bS5jb21wZXRpdGlvbklkLCBjaGFsbGVuZ2UuZGF0YS5vcHBvbmVudCwgY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlcikudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2VzU2VydmljZS5jb21wbGV0ZVB5cmFtaWRDaGFsbGVuZ2UoY2hhbGxlbmdlLmRhdGEpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAocmVtb3ZpbmdDdXJyZW50VXNlcikge1xuICAgICAgICAgICAgICAgIHJlbW92ZUN1cnJlbnRVc2VyRnJvbUNvbXBldGl0aW9uKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmNvbXBsZXRlUHlyYW1pZENoYWxsZW5nZShjaGFsbGVuZ2UuZGF0YSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAocmVtb3ZpbmdDdXJyZW50VXNlcikge1xuICAgICAgICAgICAgICByZW1vdmVDdXJyZW50VXNlckZyb21Db21wZXRpdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZtLmNvbXBldGl0aW9uTWVudVRvZ2dsZSA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbHMgdGhlIGNvbXBsZXRlIGNoYWxsbmdlIGZ1bmN0aW9uIHdpdGggdGhlIGZvcmZlaXRpbmcgcGxheWVyXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBwbGF5ZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JmZWl0Q2hhbGxlbmdlKHBsYXllcikge1xuICAgICAgY29tcGxldGVDaGFsbGVuZ2UobnVsbCwgdHJ1ZSwgcGxheWVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSBjdXJyZW50IHVzZXIgdGhlIGNvbXBldGl0aW9uIFxuICAgICAqIGlmIHRoZXkncmUgbm90IGFscmVhZHkgb24gaXQgYW5kIHRoZXJlJ3Mgc3BhY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRDdXJyZW50VXNlclRvQ29tcGV0aXRpb24oKSB7XG4gICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgIGlmICh2bS5udW1iZXJPZlJlYWxQbGF5ZXJzIDwgdm0ubWF4UGxheWVycykge1xuICAgICAgICAgIHZhciBwbGF5ZXIgPSB7XG4gICAgICAgICAgICBfaWQ6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWQsXG4gICAgICAgICAgICBmaXJzdE5hbWU6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5maXJzdE5hbWUsXG4gICAgICAgICAgICBsYXN0TmFtZTogaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLmxhc3ROYW1lLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIudXNlcm5hbWUsXG4gICAgICAgICAgICBwb3NpdGlvbjogdm0ubnVtYmVyT2ZSZWFsUGxheWVycyArIDFcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmICghdm0uY29tcGV0aXRpb24ucmVzdHJpY3RKb2lucykge1xuICAgICAgICAgICAgc3dhbCh7XG4gICAgICAgICAgICAgIHRpdGxlOiAnSm9pbiBDb21wZXRpdGlvbj8nLFxuICAgICAgICAgICAgICB0ZXh0OiAnWW91XFwnbGwgYmUgYWRkZWQgdG8gdGhlIGJvdHRvbScsXG4gICAgICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJyxcbiAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdKb2luJyxcbiAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ05ldmVybWluZCcsXG4gICAgICAgICAgICAgIGNsb3NlT25Db25maXJtOiBmYWxzZSxcbiAgICAgICAgICAgICAgY2xvc2VPbkNhbmNlbDogdHJ1ZVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBjb21wZXRpdGlvbnNTZXJ2aWNlLmFkZFBsYXllclRvQ29tcGV0aXRpb24odm0uY29tcGV0aXRpb25JZCwgcGxheWVyKTtcbiAgICAgICAgICAgICAgc3dhbCgnV2VsY29tZSBBYm9hcmQhJywgJ05vdyBzdGFydCBmaWdodGluZyB5b3VyIHdheSB0byB0aGUgdG9wJywgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgIH0pOyAgXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3YWwoe1xuICAgICAgICAgICAgICB0aXRsZTogJ1NlbmQgSm9pbiBSZXF1ZXN0PycsXG4gICAgICAgICAgICAgIHRleHQ6ICdUaGlzIGlzIGEgY2xvc2VkIGNvbXBldGl0aW9uIHNvIGFuIGFkbWluIG11c3QgYXBwcm92ZSB5b3VyIHJlcXVlc3QnLFxuICAgICAgICAgICAgICB0eXBlOiAnd2FybmluZycsXG4gICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXG4gICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnU2VuZCBSZXF1ZXN0JyxcbiAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ05ldmVybWluZCcsXG4gICAgICAgICAgICAgIGNsb3NlT25Db25maXJtOiBmYWxzZSxcbiAgICAgICAgICAgICAgY2xvc2VPbkNhbmNlbDogdHJ1ZVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBjb21wZXRpdGlvbnNTZXJ2aWNlLmFkZFBsYXllclRvQ29tcGV0aXRpb25SZXF1ZXN0KHZtLmNvbXBldGl0aW9uLCBwbGF5ZXIpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZtLmN1cnJlbnRVc2VySXNQZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHN3YWwoJ1JlcXVlc3QgU2VudCcsICdZb3Ugd2lsbCByZWNlaXZlIGFuIGVtYWlsIG9uY2UgYW4gYWRtaW4gcHJvY2Vzc2VzIHRoZSByZXF1ZXN0LicsICdzdWNjZXNzJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm90aWZ5U2VydmljZS53YXJuaW5nKCdTb3JyeSwgdGhpcyBjb21wZXRpdGlvbiBpcyBmdWxsJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2Uud2FybmluZygnUGxlYXNlIGxvZ2luIHRvIGpvaW4gYSBjb21wZXRpdGlvbicpO1xuICAgICAgICAkc3RhdGUucHJldmlvdXMgPSAnY29tcGV0aXRpb25zLnZpZXcnO1xuICAgICAgICAkc3RhdGUucHJldlBhcmFtcyA9IHsnY29tcGV0aXRpb25JZCc6IHZtLmNvbXBldGl0aW9uSWR9O1xuICAgICAgICAkc3RhdGUuZ28oJ2xvZ2luJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzcGxheSBjb25maXJtYXRpb24gbW9kYWwgZm9yIGxlYXZpbmcgdGhlIGNvbXBldGl0aW9uIFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZpcm1SZW1vdmVDdXJyZW50VXNlckZyb21Db21wZXRpdGlvbigpIHtcbiAgICAgIHN3YWwoe1xuICAgICAgICB0aXRsZTogJ0xlYXZlIENvbXBldGl0aW9uPycsXG4gICAgICAgIHRleHQ6ICdZb3Ugd2lsbCBsb3NlIHlvdXIgc3BvdCBhbmQgZm9yZmVpdCBhbnkgYWN0aXZlIGNoYWxsZW5nZXMuJyxcbiAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdZZXMsIGxlYXZlJyxcbiAgICAgICAgY29uZmlybUJ1dHRvbkNsYXNzOiAnYnRuLWRhbmdlcicsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICdObywgc3RheScsXG4gICAgICAgIGNsb3NlT25Db25maXJtOiBmYWxzZSxcbiAgICAgICAgY2xvc2VPbkNhbmNlbDogdHJ1ZVxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVDdXJyZW50VXNlckZyb21Db21wZXRpdGlvbigpO1xuICAgICAgICBzd2FsKCdPSywgeW91XFwnciBvdXQhJywgJ1lvdVxcJ3ZlIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBjb21wZXRpdGlvbi4nLCAnc3VjY2VzcycpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVXNlIHRoaXMgdG8gZW5mb3JjZSBvcmRlciBvZiBvcGVyYXRpb25zIHdoZW4gdGhlIHBsYXllciB0byBiZSByZW1vdmVkIGhhZCBhbiBhY3RpdmUgY2hhbGxlbmdlXG4gICAgdmFyIHJlbW92aW5nQ3VycmVudFVzZXIgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIGN1cnJlbnQgdXNlciBmcm9tIHRoZSBjb21wZXRpdGlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZUN1cnJlbnRVc2VyRnJvbUNvbXBldGl0aW9uKCkge1xuICAgICAgLy8gTWFrZSBzdXJlIHRoZSB1c2VyIGlzIGxvZ2dlZCBpbiBhbmQgaXMgb24gdGhpcyBjb21wZXRpdGlvblxuICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSAmJiB2bS5jdXJyZW50VXNlcklzT25Db21wZXRpdGlvbikge1xuICAgICAgICByZW1vdmluZ0N1cnJlbnRVc2VyID0gdHJ1ZTtcbiAgICAgICAgLy8gRm9yZmVpdCBpZiB0aGV5IGhhdmUgYW4gYWN0aXZlIGNoYWxsZW5nZVxuICAgICAgICBpZiAodm0uaGFzQWN0aXZlQ2hhbGxlbmdlKSB7XG4gICAgICAgICAgY29tcGxldGVDaGFsbGVuZ2UobnVsbCwgdHJ1ZSwgdm0uY3VycmVudFVzZXJQbGF5ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNpbmNlIHdlIGFyZSByZW1vdmluZyB0aGVtIC4uLlxuICAgICAgICAgIHZtLmN1cnJlbnRVc2VySXNPbkNvbXBldGl0aW9uID0gZmFsc2U7XG4gICAgICAgICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gZmFsc2U7XG5cbiAgICAgICAgICAvLyBHZXQgYW4gdXBkYXRlZCBjb3B5IG9mIHRoZSBjb21wZXRpdGlvbiBpbmNhc2UgYSBmb3JmZWl0IGhhcHBlbmVkXG4gICAgICAgICAgY29tcGV0aXRpb25zU2VydmljZS5nZXRDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgICAvLyBTdG9yZSB0aGUgdXBkYXRlZCBjb3B5IGxvY2FsbHkgc28gYXMgbm90IHRvIGRpc3RydXB0IHRoZSBjb21wZXRpdGlvblxuICAgICAgICAgICAgLy8gdW50aWwgdGhlIHBsYXllciBoYXMgYmVlbiByZW1vdmVkXG4gICAgICAgICAgICB2YXIgY29tcGV0aXRpb24gPSBwLmRhdGE7XG5cbiAgICAgICAgICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhlIHNwb3QgdGhleSB3ZXJlIGluIG9uIHRoZSBjb21wZXRpdGlvblxuICAgICAgICAgICAgdmFyIG9wZW5Qb3NpdGlvbiA9IHZtLmN1cnJlbnRVc2VyUGxheWVyLnBvc2l0aW9uO1xuXG4gICAgICAgICAgICAvLyBNb3ZlIGFsbCB0aGUgcGxheWVycyB1cCAxIHBvc2l0aW9uIHRoYXQgd2VyZSBiZWhpbmQgdGhlIHJlbW92ZWQgcGxheWVyXG4gICAgICAgICAgICBfLmZvckVhY2goY29tcGV0aXRpb24ucGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICAgICAgICBpZiAocGxheWVyLnBvc2l0aW9uID49IG9wZW5Qb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHBsYXllci5wb3NpdGlvbiAtPSAxO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gUmVtb3ZlZCB0aGUgcGxheWVyIGZyb20gdGhlIGNvbXBldGl0aW9uXG4gICAgICAgICAgICB2YXIgcmVtb3ZlZFBsYXllciA9IF8ucmVtb3ZlKGNvbXBldGl0aW9uLnBsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBsYXllci5faWQgPT09IHZtLmN1cnJlbnRVc2VyUGxheWVyLl9pZDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBNYWtlIGEgbmV3IGFycmF5IG9mIGFsbCB0aGUgcGxheWVycyBzdGlsbCBvbiB0aGUgY29tcGV0aXRpb25cbiAgICAgICAgICAgIC8vIG9ubHkgdXNlIHRoZSBwcm9wZXJ0aWVzIHdlIHdhbnQgdG8gc3RvcmUgaW4gdGhlIGNvbXBldGl0aW9uIGRvY3VtZW50XG4gICAgICAgICAgICB2YXIgdXBkYXRlZFBsYXllcnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0ubnVtYmVyT2ZSZWFsUGxheWVycyAtIDE7ICsraSkge1xuICAgICAgICAgICAgICB2YXIgdXBkYXRlZFBsYXllciA9IHtcbiAgICAgICAgICAgICAgICBfaWQ6IGNvbXBldGl0aW9uLnBsYXllcnNbaV0uX2lkLFxuICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogY29tcGV0aXRpb24ucGxheWVyc1tpXS5maXJzdE5hbWUsXG4gICAgICAgICAgICAgICAgbGFzdE5hbWU6IGNvbXBldGl0aW9uLnBsYXllcnNbaV0ubGFzdE5hbWUsXG4gICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IGNvbXBldGl0aW9uLnBsYXllcnNbaV0uZGlzcGxheU5hbWUsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGNvbXBldGl0aW9uLnBsYXllcnNbaV0ucG9zaXRpb25cbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICB1cGRhdGVkUGxheWVycy5wdXNoKHVwZGF0ZWRQbGF5ZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDYWxsIHNlcnZpY2UgdG8gcmVtb3ZlIHRoZSBwbGF5ZXJcbiAgICAgICAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2UucmVtb3ZlZFBsYXllckZyb21Db21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkLCByZW1vdmVkUGxheWVyWzBdLCB1cGRhdGVkUGxheWVycykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJlbW92aW5nQ3VycmVudFVzZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlndXJlIG91dCB3aGF0IHRoZSBhcHByb3ByaWF0ZSBhY3Rpb24gaXMgYmFzZWQgb24gdGhlIHBsYXllciBjbGlja2luZyBhbmQgdGhlIHBsYXllciBiZWluZyBjbGlja2VkXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGxheWVyQ2xpY2socGxheWVyKSB7XG4gICAgICAvLyBjbGlja2VkIG9uIGVtcHR5IHNwb3RcbiAgICAgIGlmIChwbGF5ZXIucG9zaXRpb24gPT09IDk5ICYmICF2bS5jdXJyZW50VXNlcklzT25Db21wZXRpdGlvbikge1xuICAgICAgICBhZGRDdXJyZW50VXNlclRvQ29tcGV0aXRpb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYXllci5zaG93Q2hhbGxlbmdlTW9kYWwgPSAhcGxheWVyLnNob3dDaGFsbGVuZ2VNb2RhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWZyZXNoIHRoZSBjb21wZXRpdGlvbiBiZWNhc3VlIG9mIGFuIHVwZGF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZnJlc2hDb21wZXRpdGlvbigpIHtcbiAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2UuZ2V0Q29tcGV0aXRpb24odm0uY29tcGV0aXRpb25JZCkudGhlbihmdW5jdGlvbiAoY29tcGV0aXRpb24pIHtcbiAgICAgICAgdm0uY29tcGV0aXRpb24gPSBjb21wZXRpdGlvbi5kYXRhO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNvbXBldGl0aW9uX3VwZGF0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNoYWxsZW5nZURldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oY2hhbGxlbmdlRGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgIHJlZnJlc2hDb21wZXRpdGlvbigpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd3cG1VcGRhdGVBZG1pbnMnLCB3cG1VcGRhdGVBZG1pbnMpO1xuXG4gIGZ1bmN0aW9uIHdwbVVwZGF0ZUFkbWlucygpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGNvbXBldGl0aW9uOiAnPSdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jb21wZXRpdGlvbnMvY29tcG9uZW50cy91cGRhdGUtYWRtaW5zLmh0bWwnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKCRzY29wZSwgJGZpbHRlciwgY29tcGV0aXRpb25zU2VydmljZSwgY2hhbGxlbmdlc1NlcnZpY2UsIHVzZXJTZXJ2aWNlLCBpZGVudGl0eVNlcnZpY2UpIHtcbiAgICB2YXIgcmVtb3ZlZEFkbWlucyA9IFtdO1xuICAgIHZhciBvcmlnaW5hbEF2YWlsYWJsZUFkbWlucyA9IFtdO1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uYXZhaWxhYmxlQWRtaW5zID0gW107XG4gICAgdm0uYWRkZWRBZG1pbnMgPSBbXTtcbiAgICB2bS51c2VySXNQcmltYXJ5QWRtaW4gPSBmYWxzZTtcbiAgICB2bS51cGRhdGVDb21wZXRpdGlvbiA9IHVwZGF0ZUNvbXBldGl0aW9uO1xuICAgIHZtLmNhbmNlbFVwZGF0ZSA9IGNhbmNlbFVwZGF0ZTtcbiAgICB2bS5yZW1vdmVBZG1pbiA9IHJlbW92ZUFkbWluO1xuICAgIHZtLmFkZEFkbWluID0gYWRkQWRtaW47XG4gICAgdm0uZGlzYWJsZVN1Ym1pdCA9IHRydWU7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAkc2NvcGUuJHdhdGNoKCd2bS5jb21wZXRpdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHZtLmNvbXBldGl0aW9uKSB7XG4gICAgICAgICAgdm0uYWRkZWRBZG1pbnMgPSBfLmNsb25lRGVlcCh2bS5jb21wZXRpdGlvbi5hZG1pbnMpO1xuICAgICAgICAgIHZtLmRpc2FibGVTdWJtaXQgPSB0cnVlO1xuICAgICAgICAgIHZtLnVzZXJJc1ByaW1hcnlBZG1pbiA9IF8uZmluZCh2bS5jb21wZXRpdGlvbi5hZG1pbnMsIHsncHJpbWFyeSc6IHRydWV9KS5faWQgPT09IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWQgPyB0cnVlOiBmYWxzZTtcbiAgICAgICAgICBnZXRBdmFpbGFibGVBZG1pbnMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QXZhaWxhYmxlQWRtaW5zKCkge1xuICAgICAgdm0uYXZhaWxhYmxlQWRtaW5zID0gW107XG4gICAgICByZW1vdmVkQWRtaW5zID0gW107XG4gICAgICB1c2VyU2VydmljZS5nZXRBbGxVc2VycygpLnRoZW4oZnVuY3Rpb24gKHVzZXJzKSB7XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgY3VycmVudCBhZG1pbnMgZnJvbSB0aGUgbGlzdCBvZiBhdmFpbGFibGUgYWRtaW5zXG4gICAgICAgIF8uZm9yRWFjaCh2bS5jb21wZXRpdGlvbi5hZG1pbnMsIGZ1bmN0aW9uIChjb21wZXRpdGlvbkFkbWluKSB7XG4gICAgICAgICAgXy5yZW1vdmUodXNlcnMuZGF0YSwgZnVuY3Rpb24gKGF2YWlsYWJsZUFkbWluKXtcbiAgICAgICAgICAgIHJldHVybiBjb21wZXRpdGlvbkFkbWluLl9pZCA9PT0gYXZhaWxhYmxlQWRtaW4uX2lkO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gT25seSB1c2UgY2VydGFpbiBwcm9wZXJ0aWVzIG9mIHRoZSB1c2VyIGZvciB0aGUgYWRtaW4gcmVjb3JkXG4gICAgICAgIF8uZm9yRWFjaCh1c2Vycy5kYXRhLCBmdW5jdGlvbiAoYXZhaWxhYmxlQWRtaW4pIHtcbiAgICAgICAgICB2bS5hdmFpbGFibGVBZG1pbnMucHVzaCh7XG4gICAgICAgICAgICBmaXJzdE5hbWU6IGF2YWlsYWJsZUFkbWluLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBhdmFpbGFibGVBZG1pbi5sYXN0TmFtZSxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBhdmFpbGFibGVBZG1pbi5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiBhdmFpbGFibGVBZG1pbi51c2VybmFtZSxcbiAgICAgICAgICAgIF9pZDogYXZhaWxhYmxlQWRtaW4uX2lkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZtLmF2YWlsYWJsZUFkbWlucyA9ICRmaWx0ZXIoJ29yZGVyQnknKSh2bS5hdmFpbGFibGVBZG1pbnMsICdmaXJzdE5hbWUnKTtcbiAgICAgICAgb3JpZ2luYWxBdmFpbGFibGVBZG1pbnMgPSBfLmNsb25lRGVlcCh2bS5hdmFpbGFibGVBZG1pbnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSB0aGUgdXBkYXRlcyB0aGF0IHdlcmUgcmVxdXN0ZWRcbiAgICBmdW5jdGlvbiB1cGRhdGVDb21wZXRpdGlvbigpIHtcbiAgICAgIHZtLmNvbXBldGl0aW9uLmFkbWlucyA9IHZtLmFkZGVkQWRtaW5zO1xuICAgICAgY29tcGV0aXRpb25zU2VydmljZS51cGRhdGVDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbikudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZtLmRpc2FibGVTdWJtaXQgPSB0cnVlO1xuICAgICAgfSk7ICAgXG4gICAgfVxuXG4gICAgLy8gQ2FuY2VsIHRoZSB1cGRhdGUgYW5kIHB1dCBldmVyeXRoaW5nIGJhY2sgdG8gdGhlIG9yZ2luYWxcbiAgICBmdW5jdGlvbiBjYW5jZWxVcGRhdGUoKSB7XG4gICAgICByZW1vdmVkQWRtaW5zID0gW107XG4gICAgICB2bS5hZGRlZEFkbWlucyA9IF8uY2xvbmVEZWVwKHZtLmNvbXBldGl0aW9uLmFkbWlucyk7XG4gICAgICB2bS5hdmFpbGFibGVBZG1pbnMgPSBfLmNsb25lRGVlcChvcmlnaW5hbEF2YWlsYWJsZUFkbWlucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbiBhZG1pbiBmcm9tIHRoZSBjb21wZXRpdGlvblxuICAgICAqIFF1ZXVlIHVwIHRoZSBhZG1pbnMgdG8gYmUgcmVtb3ZlZCBhbmQgcmVtb3ZlIHRoZW0gZnJvbSB0aGUgZGlzcGxheVxuICAgICAqIEBwYXJhbSAge29iamVjdH0gYWRtaW5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVBZG1pbihhZG1pbikge1xuICAgICAgcmVtb3ZlZEFkbWlucy5wdXNoKGFkbWluKTtcbiAgICAgIHZtLmF2YWlsYWJsZUFkbWlucy5wdXNoKF8ucmVtb3ZlKHZtLmFkZGVkQWRtaW5zLCB7X2lkOiBhZG1pbi5faWR9KVswXSk7XG4gICAgICB2bS5kaXNhYmxlU3VibWl0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBhZG1pbiB0byB0aGUgY29tcGV0aXRpb25cbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IGFkbWluXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkQWRtaW4oYWRtaW4pIHtcbiAgICAgIHZtLmFkZGVkQWRtaW5zLnB1c2goXy5yZW1vdmUodm0uYXZhaWxhYmxlQWRtaW5zLCB7X2lkOiBhZG1pbi5faWR9KVswXSk7XG4gICAgICB2bS5kaXNhYmxlU3VibWl0ID0gZmFsc2U7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd3cG1VcGRhdGVQbGF5ZXJzJywgd3BtVXBkYXRlUGxheWVycyk7XG5cbiAgZnVuY3Rpb24gd3BtVXBkYXRlUGxheWVycygpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGNvbXBldGl0aW9uOiAnPSdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jb21wZXRpdGlvbnMvY29tcG9uZW50cy91cGRhdGUtcGxheWVycy5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYygkc2NvcGUsICRmaWx0ZXIsIGNvbXBldGl0aW9uc1NlcnZpY2UsIGNoYWxsZW5nZXNTZXJ2aWNlLCB1c2VyU2VydmljZSwgbm90aWZ5U2VydmljZSkge1xuICAgIHZhciByZW1vdmVkUGxheWVycyA9IFtdO1xuICAgIHZhciBvcmlnaW5hbEF2YWlsYWJsZVBsYXllcnMgPSBbXTtcbiAgICB2YXIgbWF4TGV2ZWxzID0gNztcbiAgICB2YXIgbWF4UGxheWVycyA9IG51bGw7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5hdmFpbGFibGVQbGF5ZXJzID0gW107XG4gICAgdm0uYWRkZWRQbGF5ZXJzID0gW107XG4gICAgdm0udXBkYXRlQ29tcGV0aXRpb24gPSB1cGRhdGVDb21wZXRpdGlvbjtcbiAgICB2bS5jYW5jZWxVcGRhdGUgPSBjYW5jZWxVcGRhdGU7XG4gICAgdm0ucmVvcmRlclBsYXllcnMgPSByZW9yZGVyUGxheWVycztcbiAgICB2bS5yZW1vdmVQbGF5ZXIgPSByZW1vdmVQbGF5ZXI7XG4gICAgdm0uYWRkUGxheWVyID0gYWRkUGxheWVyO1xuICAgIHZtLmRpc2FibGVTdWJtaXQgPSB0cnVlO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBtYXhpbXVtIG51bWJlciBvZiBwbGF5ZXJzIGJhc2VkIG9uIHRoZSBtYXhpbXVtIG51bWJlciBvZiBsZXZlbHNcbiAgICAgIGZvciAodmFyIGkgPSBtYXhMZXZlbHM7IGkgPiAwOyAtLWkpIHtcbiAgICAgICAgbWF4UGxheWVycyArPSBpO1xuICAgICAgfVxuICAgICAgJHNjb3BlLiR3YXRjaCgndm0uY29tcGV0aXRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS5jb21wZXRpdGlvbikge1xuICAgICAgICAgIHZtLmFkZGVkUGxheWVycyA9IF8uY2xvbmVEZWVwKHZtLmNvbXBldGl0aW9uLnBsYXllcnMpO1xuICAgICAgICAgIHZtLmRpc2FibGVTdWJtaXQgPSB0cnVlO1xuICAgICAgICAgIGdldEF2YWlsYWJsZVBsYXllcnMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QXZhaWxhYmxlUGxheWVycygpIHtcbiAgICAgIHZtLmF2YWlsYWJsZVBsYXllcnMgPSBbXTtcbiAgICAgIHJlbW92ZWRQbGF5ZXJzID0gW107XG4gICAgICB1c2VyU2VydmljZS5nZXRBbGxVc2VycygpLnRoZW4oZnVuY3Rpb24gKHVzZXJzKSB7XG4gICAgICAgIF8uZm9yRWFjaCh2bS5jb21wZXRpdGlvbi5wbGF5ZXJzLCBmdW5jdGlvbiAoY29tcGV0aXRpb25QbGF5ZXIpIHtcbiAgICAgICAgICBfLnJlbW92ZSh1c2Vycy5kYXRhLCBmdW5jdGlvbiAoYXZhaWxhYmxlUGxheWVyKXtcbiAgICAgICAgICAgIHJldHVybiBjb21wZXRpdGlvblBsYXllci5faWQgPT09IGF2YWlsYWJsZVBsYXllci5faWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBPbmx5IHVzZSBjZXJ0YWluIHByb3BlcnRpZXMgb2YgdGhlIHVzZXIgZm9yIHRoZSBwbGF5ZXIgcmVjb3JkXG4gICAgICAgIF8uZm9yRWFjaCh1c2Vycy5kYXRhLCBmdW5jdGlvbiAoYXZhaWxhYmxlUGxheWVyKSB7XG4gICAgICAgICAgdm0uYXZhaWxhYmxlUGxheWVycy5wdXNoKHtcbiAgICAgICAgICAgIGZpcnN0TmFtZTogYXZhaWxhYmxlUGxheWVyLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBhdmFpbGFibGVQbGF5ZXIubGFzdE5hbWUsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogYXZhaWxhYmxlUGxheWVyLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgZW1haWw6IGF2YWlsYWJsZVBsYXllci51c2VybmFtZSxcbiAgICAgICAgICAgIF9pZDogYXZhaWxhYmxlUGxheWVyLl9pZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHZtLmF2YWlsYWJsZVBsYXllcnMgPSAkZmlsdGVyKCdvcmRlckJ5Jykodm0uYXZhaWxhYmxlUGxheWVycywgJ2ZpcnN0TmFtZScpO1xuICAgICAgICBvcmlnaW5hbEF2YWlsYWJsZVBsYXllcnMgPSBfLmNsb25lRGVlcCh2bS5hdmFpbGFibGVQbGF5ZXJzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFBlcmZvcm0gdGhlIHVwZGF0ZXMgdGhhdCB3ZXJlIHJlcXVzdGVkXG4gICAgZnVuY3Rpb24gdXBkYXRlQ29tcGV0aXRpb24oKSB7XG4gICAgICBpZiAodm0uY29tcGV0aXRpb24udHlwZSA9PT0gJ3ZlcnN1cycgJiYgdm0uYWRkZWRQbGF5ZXJzLmxlbmd0aCAlIDIgPiAwKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ0EgVmVyc3VzIGNvbXBldGl0aW9uIG11c3QgaGF2ZSBhbiBldmVuIG51bWJlciBvZiBwbGF5ZXJzJyk7XG4gICAgICB9IGVsc2UgaWYgKHZtLmFkZGVkUGxheWVycy5sZW5ndGggPiBtYXhQbGF5ZXJzKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ0EgY29tcGV0aXRpb24gY2FuIGhhdmUgYSBtYXhpbXVtIG9mICcgKyBtYXhQbGF5ZXJzICsgJyBwbGF5ZXJzJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfLmZvckVhY2gocmVtb3ZlZFBsYXllcnMsIGZ1bmN0aW9uKHBsYXllcikge1xuICAgICAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmRlbGV0ZUFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllcih2bS5jb21wZXRpdGlvbi5faWQsIHBsYXllci5faWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdm0uY29tcGV0aXRpb24ucGxheWVycyA9IHZtLmFkZGVkUGxheWVycztcbiAgICAgICAgY29tcGV0aXRpb25zU2VydmljZS51cGRhdGVDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbikudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdm0uZGlzYWJsZVN1Ym1pdCA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENhbmNlbCB0aGUgdXBkYXRlIGFuZCBwdXQgZXZlcnl0aGluZyBiYWNrIHRvIHRoZSBvcmdpbmFsXG4gICAgZnVuY3Rpb24gY2FuY2VsVXBkYXRlKCkge1xuICAgICAgcmVtb3ZlZFBsYXllcnMgPSBbXTtcbiAgICAgIHZtLmFkZGVkUGxheWVycyA9IF8uY2xvbmVEZWVwKHZtLmNvbXBldGl0aW9uLnBsYXllcnMpO1xuICAgICAgdm0uYXZhaWxhYmxlUGxheWVycyA9IF8uY2xvbmVEZWVwKG9yaWdpbmFsQXZhaWxhYmxlUGxheWVycyk7XG4gICAgfVxuXG4gICAgLy8gUmVvcmRlciB0aGUgcGxheWVycyBiYXNlZCBvbiB0aGUgZHJhZy1kcm9wXG4gICAgZnVuY3Rpb24gcmVvcmRlclBsYXllcnMoKSB7XG4gICAgICBpZiAodm0uY29tcGV0aXRpb24udHlwZSA9PT0gJ3ZlcnN1cycpIHtcbiAgICAgICAgcmVvcmRlclZlcnN1c1BsYXllcnMoKTtcbiAgICAgIH0gZWxzZSBpZiAodm0uY29tcGV0aXRpb24udHlwZSA9PT0gJ3B5cmFtaWQnKSB7XG4gICAgICAgIHJlb3JkZXJQeXJhbWlkUGxheWVycygpO1xuICAgICAgfVxuICAgICAgdm0uZGlzYWJsZVN1Ym1pdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlb3JkZXIgdGhlIHBsYXllcnMgYmFzZWQgb24gdGhlIGRyYWctZHJvcFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXJQeXJhbWlkUGxheWVycygpIHtcbiAgICAgIHZhciBpID0gMTtcbiAgICAgIF8uZm9yRWFjaCh2bS5hZGRlZFBsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgcGxheWVyLnBvc2l0aW9uID0gaTtcbiAgICAgICAgKytpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVvcmRlclZlcnN1c1BsYXllcnMoKSB7XG4gICAgICAvLyBTZXQgYWxsIHBsYXllcnMgdG8gdGVhbSAyXG4gICAgICBfLmZvckVhY2godm0uYWRkZWRQbGF5ZXJzLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgIHBsYXllci5wb3NpdGlvbiA9IDI7XG4gICAgICB9KTtcbiAgICAgIC8vIFNldCB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgcGxheWVycyB0byB0ZWFtIDFcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgKHZtLmFkZGVkUGxheWVycy5sZW5ndGggLyAyKTsgaSsrKSB7XG4gICAgICAgIHZtLmFkZGVkUGxheWVyc1tpXS5wb3NpdGlvbiA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHBsYXllciBmcm9tIHRoZSBjb21wZXRpdGlvblxuICAgICAqIFF1ZXVlIHVwIHRoZSBwbGF5ZXJzIHRvIGJlIHJlbW92ZWQgYW5kIHJlbW92ZSB0aGVtIGZyb20gdGhlIGRpc3BsYXlcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IHBsYXllclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZVBsYXllcihwbGF5ZXIpIHtcbiAgICAgIHJlbW92ZWRQbGF5ZXJzLnB1c2gocGxheWVyKTtcbiAgICAgIHZtLmF2YWlsYWJsZVBsYXllcnMucHVzaChfLnJlbW92ZSh2bS5hZGRlZFBsYXllcnMsIHtfaWQ6IHBsYXllci5faWR9KVswXSk7XG4gICAgICByZW9yZGVyUGxheWVycygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBwbGF5ZXIgdG8gdGhlIG5ldyBjb21wZXRpdGlvblxuICAgICAqIEBwYXJhbSAge29iamVjdH0gcGxheWVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkUGxheWVyKHBsYXllcikge1xuICAgICAgdm0uYWRkZWRQbGF5ZXJzLnB1c2goXy5yZW1vdmUodm0uYXZhaWxhYmxlUGxheWVycywge19pZDogcGxheWVyLl9pZH0pWzBdKTtcbiAgICAgIHJlb3JkZXJQbGF5ZXJzKCk7XG4gICAgICB2bS5kaXNhYmxlU3VibWl0ID0gZmFsc2U7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgnd3BtVmVyc3VzJywgd3BtVmVyc3VzKTtcblxuICBmdW5jdGlvbiB3cG1WZXJzdXMoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jb21wZXRpdGlvbnMvY29tcG9uZW50cy92ZXJzdXMuaHRtbCcsXG4gICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgY29tcGV0aXRpb246ICc9J1xuICAgICAgfSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKCRzY29wZSwgY29tcGV0aXRpb25zU2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlLCBjaGFsbGVuZ2VzU2VydmljZSwgbm90aWZ5U2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uY29tcGV0aXRpb25JZCA9IG51bGw7XG4gICAgdm0uY3VycmVudFVzZXJJc0FkbWluID0gZmFsc2U7XG4gICAgdm0uY3VycmVudFVzZXJJc1BlbmRpbmcgPSBmYWxzZTtcbiAgICB2bS5jdXJyZW50VXNlcklzT25Db21wZXRpdGlvbiA9IGZhbHNlO1xuICAgIHZtLmFjdGl2ZUNoYWxsZW5nZSA9IG51bGw7XG4gICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gZmFsc2U7XG4gICAgdm0uY3VycmVudFVzZXJQbGF5ZXIgPSBudWxsO1xuICAgIHZtLmNyZWF0ZUNoYWxsZW5nZSA9IGNyZWF0ZUNoYWxsZW5nZTtcbiAgICB2bS5jb21wbGV0ZUNoYWxsZW5nZSA9IGNvbXBsZXRlQ2hhbGxlbmdlO1xuICAgIHZtLmNoYWxsZW5nZUV4cGlyZVRpbWUgPSBudWxsO1xuICAgIHZtLnNob3dDb250cm9scyA9IGZhbHNlO1xuICAgIHZtLnNob3dDaGFsbGVuZ2VNb2RhbCA9IGZhbHNlO1xuICAgIHZtLnRvZ2dsZUNvbnRyb2xzID0gdG9nZ2xlQ29udHJvbHM7XG4gICAgdm0uc2luZ2xlUGxheWVyVGVhbXMgPSBmYWxzZTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICRzY29wZS4kd2F0Y2goJ3ZtLmNvbXBldGl0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodm0uY29tcGV0aXRpb24pIHtcbiAgICAgICAgICB2bS5jb21wZXRpdGlvbklkID0gdm0uY29tcGV0aXRpb24uX2lkO1xuICAgICAgICAgIHZtLnNob3dDb250cm9scyA9IGZhbHNlO1xuICAgICAgICAgIHZtLnNob3dDaGFsbGVuZ2VNb2RhbCA9IGZhbHNlO1xuICAgICAgICAgIGdyb3VwUGxheWVycygpO1xuICAgICAgICAgIGdldEN1cnJlbnRVc2VyU3RhdHVzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdyb3VwIHBsYXllcnMgYnkgdGVhbVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdyb3VwUGxheWVycygpIHtcbiAgICAgIHZtLmNvbXBldGl0aW9uLnRlYW1zID0gW1xuICAgICAgICB7XG4gICAgICAgICAgcGxheWVyczogXy5maWx0ZXIodm0uY29tcGV0aXRpb24ucGxheWVycywgWydwb3NpdGlvbicsIDFdKSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBsYXllcnM6IF8uZmlsdGVyKHZtLmNvbXBldGl0aW9uLnBsYXllcnMsIFsncG9zaXRpb24nLCAyXSksXG4gICAgICAgIH1cbiAgICAgIF07XG5cbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbi5wbGF5ZXJzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICB2bS5zaW5nbGVQbGF5ZXJUZWFtcyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlndXJlIG91dCBpZiBlYWNoIHBsYXllciBpcyBhbHJlYWR5IGNoYWxsZW5nZWQgYW5kIHNldCBzb21lIHN0dWZmXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0Q3VycmVudFVzZXJTdGF0dXMoKSB7XG4gICAgICBcbiAgICAgIHZtLmN1cnJlbnRVc2VySXNBZG1pbiA9IGZhbHNlO1xuICAgICAgdm0uY3VycmVudFVzZXJJc1BlbmRpbmcgPSBmYWxzZTtcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBjdXJyZW50IHVzZXIgaXMgYW4gYWRtaW4gb2YgdGhpcyBjb21wZXRpdGlvblxuICAgICAgICB2bS5jdXJyZW50VXNlcklzQWRtaW4gPSBfLnNvbWUodm0uY29tcGV0aXRpb24uYWRtaW5zLCBbJ19pZCcsIGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWRdKTtcbiAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIGEgcGVuZGluZyByZXF1ZXN0IHRvIGpvaW5cbiAgICAgICAgdm0uY3VycmVudFVzZXJJc1BlbmRpbmcgPSBfLnNvbWUodm0uY29tcGV0aXRpb24ucGVuZGluZ1BsYXllcnMsIFsnX2lkJywgaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZF0pO1xuICAgICAgfVxuXG4gICAgICB2bS5jdXJyZW50VXNlcklzT25Db21wZXRpdGlvbiA9IGZhbHNlO1xuICAgICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gZmFsc2U7XG4gICAgICBfLmZvckVhY2godm0uY29tcGV0aXRpb24ucGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICAvLyBGaW5kIHRoZSBjdXJyZW50IHVzZXIgaWYgdGhleSBhcmUgb24gdGhpcyBjb21wZXRpdGlvbiBhbmQgc2V0IHNvbWUgcHJvcGVydGllc1xuICAgICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpICYmIHBsYXllci5faWQgPT09IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWQpIHtcbiAgICAgICAgICB2bS5jdXJyZW50VXNlcklzT25Db21wZXRpdGlvbiA9IHRydWU7XG4gICAgICAgICAgcGxheWVyLmNsYXNzID0gJ2N1cnJlbnQtdXNlcic7XG4gICAgICAgICAgdm0uY3VycmVudFVzZXJQbGF5ZXIgPSBwbGF5ZXI7XG4gICAgICAgICAgdm0uY29tcGV0aXRpb24udGVhbXNbcGxheWVyLnBvc2l0aW9uIC0gMV0uY2xhc3MgPSAnY3VycmVudC11c2VyLXRlYW0nO1xuICAgICAgICAgIHZtLmNvbXBldGl0aW9uLmNsYXNzID0gJ2N1cnJlbnQtdXNlci1vbi1jb21wZXRpdGlvbic7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhbiBhY3RpdmUgY2hhbGxlbmdlIGZvciB0aGlzIGNvbXBldGl0aW9uXG4gICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRBY3RpdmVDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgaWYgKGNoYWxsZW5nZS5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2bS5hY3RpdmVDaGFsbGVuZ2UgPSBjaGFsbGVuZ2UuZGF0YVswXTtcbiAgICAgICAgICB2bS5oYXNBY3RpdmVDaGFsbGVuZ2UgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gVHJhY2sgd2hlbiB0aGUgY2hhbGxlbmdlIHdpbGwgZXhwaXJlXG4gICAgICAgICAgaWYgKHZtLmFjdGl2ZUNoYWxsZW5nZS50aW1lTGltaXQgIT09IDApIHtcbiAgICAgICAgICAgIHZhciB0aW1lVG9FeHBpcmUgPSBtb21lbnQoKS5kaWZmKG1vbWVudCh2bS5hY3RpdmVDaGFsbGVuZ2UuY3JlYXRlZCkuYWRkKHZtLmFjdGl2ZUNoYWxsZW5nZS50aW1lTGltaXQsICdkJykpICogLTE7XG4gICAgICAgICAgICB2YXIgaG91cnNUb0V4cGlyZSA9IG1vbWVudC5kdXJhdGlvbih0aW1lVG9FeHBpcmUpLmFzSG91cnMoKTtcbiAgICAgICAgICAgIC8vIElmIHRoZSBjaGFsbGVuZ2UgaGFzIG5vdCB5ZXQgZXhwaXJlZCBkaXNwbGF5IGEgY291bnRkb3duXG4gICAgICAgICAgICBpZiAodGltZVRvRXhwaXJlID4gMCkge1xuICAgICAgICAgICAgICB2bS5jaGFsbGVuZ2VFeHBpcmVUaW1lID0gaG91cnNUb0V4cGlyZTtcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIGNoYWxsZW5nZSBleHBpcmVkIHdoaWxlIG5vIG9uZSB3YXMgdmlld2luZyB0aGlzIGNvbXBldGl0aW9uIGNvbXBsZXRlIHRoZSBjaGFsbGVuZ2UgYnkgZm9yZmVpdFxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aW1lVG9FeHBpcmUgPD0gMCkge1xuICAgICAgICAgICAgICBjb21wbGV0ZUNoYWxsZW5nZShudWxsLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvZ2dsZUNvbnRyb2xzKCkge1xuICAgICAgaWYgKHZtLmhhc0FjdGl2ZUNoYWxsZW5nZSAmJiB2bS5jdXJyZW50VXNlcklzT25Db21wZXRpdGlvbikge1xuICAgICAgICB2bS5zaG93Q29udHJvbHMgPSAhdm0uc2hvd0NvbnRyb2xzO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoYWxsZW5nZSh0ZWFtKSB7XG4gICAgICB2bS5zaG93Q2hhbGxlbmdlTW9kYWwgPSBmYWxzZTtcbiAgICAgIGlmICh2bS5oYXNBY3RpdmVDaGFsbGVuZ2UpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5lcnJvcignU29ycnksIHlvdSBhcmUgYWxyZWFkeSBpbiBhbiBhY3RpdmUgY2hhbGxlbmdlLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gdHJ1ZTtcbiAgICAgICAgLy8gQ2xvc2UgdGhlIGNoYWxsZW5nZSBtb2RhbFxuICAgICAgICB2YXIgY2hhbGxlbmdlID0ge1xuICAgICAgICAgIHR5cGU6IHZtLmNvbXBldGl0aW9uLnR5cGUsXG4gICAgICAgICAgY29tcGV0aXRpb25OYW1lOiB2bS5jb21wZXRpdGlvbi5uYW1lLFxuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IHZtLmNvbXBldGl0aW9uSWQsXG4gICAgICAgICAgY29tcGxldGU6IGZhbHNlLFxuICAgICAgICAgIGZvcmZlaXQ6IGZhbHNlLFxuICAgICAgICAgIHRpbWVMaW1pdDogdm0uY29tcGV0aXRpb24uZm9yZmVpdERheXMsXG4gICAgICAgICAgY2hhbGxlbmdlcjoge1xuICAgICAgICAgICAgdGVhbTogdm0uY3VycmVudFVzZXJQbGF5ZXIucG9zaXRpb24sXG4gICAgICAgICAgICBfaWQ6IHZtLmN1cnJlbnRVc2VyUGxheWVyLl9pZFxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3Bwb25lbnQ6IHtcbiAgICAgICAgICAgIHRlYW06IHRlYW1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIENyZWF0ZSB0aGUgY2hhbGxlbmdlXG4gICAgICAgIC8vIFdlYnNvY2tldCBldmVudCB3aWxsIHJlZnJlc2ggdGhlIGNvbXBldGl0aW9uXG4gICAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmNyZWF0ZVZlcnN1c0NoYWxsZW5nZShjaGFsbGVuZ2UpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIENsb3NlIHRoZSBjb21wZXRpdGlvbiBzaWRlYmFyXG4gICAgICAgICAgdm0uY29tcGV0aXRpb25NZW51VG9nZ2xlID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBsZXRlIGEgY2hhbGxlbmdlIGJ5IGEgdXNlciBpbnRlcmFjdGlvbiBvciBhIGZvcmZlaXRcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHdpbm5pbmdUZWFtXG4gICAgICogQHBhcmFtICB7Ym9vbGVhbn0gZm9yZmVpdFxuICAgICAqIEBwYXJhbSAge29iamVjdH0gZm9yZmVpdExvc2VyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGxldGVDaGFsbGVuZ2Uod2lubmluZ1RlYW0sIGZvcmZlaXQpIHtcbiAgICAgIHZtLmhhc0FjdGl2ZUNoYWxsZW5nZSA9IGZhbHNlO1xuICAgICAgdmFyIGNoYWxsZW5nZSA9IHZtLmFjdGl2ZUNoYWxsZW5nZTtcbiAgICAgIC8vIElmIHRoZXJlIGlzIGEgZm9yZmVpdFxuICAgICAgaWYgKGZvcmZlaXQpIHtcbiAgICAgICAgY2hhbGxlbmdlLmZvcmZlaXQgPSB0cnVlO1xuICAgICAgICBjaGFsbGVuZ2Uud2lubmVyID0gJ2NoYWxsZW5nZXInO1xuICAgICAgLy8gRmlndXJlIG91dCB3aG8gdGhlIHdpbm5lciB3YXMgdG8gc3RvcmUgaW4gdGhlIGNoYWxsZW5nZSByZWNvcmRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh2bS5hY3RpdmVDaGFsbGVuZ2UuY2hhbGxlbmdlci50ZWFtID09PSB3aW5uaW5nVGVhbSkge1xuICAgICAgICAgIGNoYWxsZW5nZS53aW5uZXIgPSAnY2hhbGxlbmdlcic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbGxlbmdlLndpbm5lciA9ICdvcHBvbmVudCc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuY29tcGxldGVWZXJzdXNDaGFsbGVuZ2UoY2hhbGxlbmdlKTtcbiAgICAgIHZtLmNvbXBldGl0aW9uTWVudVRvZ2dsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZnJlc2ggdGhlIGNvbXBldGl0aW9uIGJlY2FzdWUgb2YgYW4gdXBkYXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVmcmVzaENvbXBldGl0aW9uKCkge1xuICAgICAgY29tcGV0aXRpb25zU2VydmljZS5nZXRDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChjb21wZXRpdGlvbikge1xuICAgICAgICB2bS5jb21wZXRpdGlvbiA9IGNvbXBldGl0aW9uLmRhdGE7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6Y29tcGV0aXRpb25fdXBkYXRlZCcsIGZ1bmN0aW9uIChfLCBjaGFsbGVuZ2VEZXRhaWxzKSB7XG4gICAgICBpZiAodm0uY29tcGV0aXRpb25JZCA9PT0gY2hhbGxlbmdlRGV0YWlscy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuaW5mbyhjaGFsbGVuZ2VEZXRhaWxzLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgcmVmcmVzaENvbXBldGl0aW9uKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuZmFjdG9yeSgnY29tcGV0aXRpb25zU2VydmljZScsIGNvbXBldGl0aW9uc1NlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIGNvbXBldGl0aW9uc1NlcnZpY2UoJGh0dHApIHtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGdldENvbXBldGl0aW9uOiBnZXRDb21wZXRpdGlvbixcbiAgICAgIGdldENvbXBldGl0aW9uc0ZvclVzZXI6IGdldENvbXBldGl0aW9uc0ZvclVzZXIsXG4gICAgICBnZXRQdWJsaWNDb21wZXRpdGlvbnM6IGdldFB1YmxpY0NvbXBldGl0aW9ucyxcbiAgICAgIGdldFByaXZhdGVDb21wZXRpdGlvbnM6IGdldFByaXZhdGVDb21wZXRpdGlvbnMsXG4gICAgICBjcmVhdGVDb21wZXRpdGlvbjogY3JlYXRlQ29tcGV0aXRpb24sXG4gICAgICB1cGRhdGVDb21wZXRpdGlvbjogdXBkYXRlQ29tcGV0aXRpb24sXG4gICAgICBkZWxldGVDb21wZXRpdGlvbjogZGVsZXRlQ29tcGV0aXRpb24sXG4gICAgICBjcmVhdGVXYWl0aW5nUGVyaW9kOiBjcmVhdGVXYWl0aW5nUGVyaW9kLFxuICAgICAgc3dhcFBvc2l0aW9uczogc3dhcFBvc2l0aW9ucyxcbiAgICAgIGFkZFBsYXllclRvQ29tcGV0aXRpb246IGFkZFBsYXllclRvQ29tcGV0aXRpb24sXG4gICAgICBhZGRQbGF5ZXJUb0NvbXBldGl0aW9uUmVxdWVzdDogYWRkUGxheWVyVG9Db21wZXRpdGlvblJlcXVlc3QsXG4gICAgICByZW1vdmVkUGxheWVyRnJvbUNvbXBldGl0aW9uOiByZW1vdmVkUGxheWVyRnJvbUNvbXBldGl0aW9uLFxuICAgICAgYXBwcm92ZVBlbmRpbmdQbGF5ZXI6IGFwcHJvdmVQZW5kaW5nUGxheWVyLFxuICAgICAgZGVueVBlbmRpbmdQbGF5ZXI6IGRlbnlQZW5kaW5nUGxheWVyXG4gICAgfTtcblxuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGNvbXBldGl0aW9uIGZyb20gdGhlIGRhdGFiYXNlIChvciBtZW1vcnkpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29tcGV0aXRpb24gaWQgZm9yIHRoZSByZXF1ZXN0ZWQgY29tcGV0aXRpb25cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGNvbXBldGl0aW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0Q29tcGV0aXRpb24oY29tcGV0aXRpb25JZCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jb21wZXRpdGlvbicsIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBjb21wZXRpdGlvbnMgZnJvbSB0aGUgZGF0YWJhc2UgdGhhdCBhIHBhcnRpY3VsYXIgdXNlciBpcyBpbmNsdWRlZCBpblxuICAgICAqXG4gICAgICogQHBhcmFtIHt1c2VySWR9IHRoZSB1c2VyIGlkIGZvciB0aGUgcmVxdWVzdGVkIHVzZXJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGNvbXBldGl0aW9uc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldENvbXBldGl0aW9uc0ZvclVzZXIodXNlcklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2NvbXBldGl0aW9ucy91c2VyJywge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICB1c2VySWQ6IHVzZXJJZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBhY3RpdmUgcHVibGljIGNvbXBldGl0aW9ucyBmcm9tIHRoZSBkYXRhYmFzZVxuICAgICAqXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBjb21wZXRpdGlvbnNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRQdWJsaWNDb21wZXRpdGlvbnMoKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2NvbXBldGl0aW9ucy9wdWJsaWMnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBwcml2YXRlIGNvbXBldGl0aW9ucyBmcm9tIHRoZSBkYXRhYmFzZVxuICAgICAqXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBjb21wZXRpdGlvbnNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRQcml2YXRlQ29tcGV0aXRpb25zKCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jb21wZXRpdGlvbnMvcHJpdmF0ZScpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBldGl0aW9uKGNvbXBldGl0aW9uKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jb21wZXRpdGlvbnMvY3JlYXRlJywge1xuICAgICAgICBjb21wZXRpdGlvbjogY29tcGV0aXRpb25cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbXBldGl0aW9uKGNvbXBldGl0aW9uKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jb21wZXRpdGlvbnMvdXBkYXRlJywge1xuICAgICAgICBjb21wZXRpdGlvbjogY29tcGV0aXRpb25cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUNvbXBldGl0aW9uKGNvbXBldGl0aW9uSWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5kZWxldGUoJy9hcGkvY29tcGV0aXRpb25zL2RlbGV0ZScsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlV2FpdGluZ1BlcmlvZChjb21wZXRpdGlvbklkLCBsb3NlcklkLCB3aW5uZXJJZCwgd2FpdGluZ1BlcmlvZCkge1xuICAgICAgcmV0dXJuICRodHRwLnB1dCgnL2FwaS9jb21wZXRpdGlvbnMvY3JlYXRlV2FpdGluZ1BlcmlvZCcsICB7XG4gICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgIGxvc2VySWQ6IGxvc2VySWQsXG4gICAgICAgIHdpbm5lcklkOiB3aW5uZXJJZCxcbiAgICAgICAgd2FpdGluZ1BlcmlvZDogd2FpdGluZ1BlcmlvZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3dhcFBvc2l0aW9ucyhjb21wZXRpdGlvbklkLCBjaGFsbGVuZ2VyLCBvcHBvbmVudCkge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY29tcGV0aXRpb25zL3N3YXBQb3NpdGlvbnMnLCB7XG4gICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgIGNoYWxsZW5nZXI6IGNoYWxsZW5nZXIsXG4gICAgICAgIG9wcG9uZW50OiBvcHBvbmVudFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkUGxheWVyVG9Db21wZXRpdGlvbihjb21wZXRpdGlvbklkLCBwbGF5ZXIpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2NvbXBldGl0aW9ucy9hZGRQbGF5ZXInLCB7XG4gICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgIHBsYXllcjogcGxheWVyXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRQbGF5ZXJUb0NvbXBldGl0aW9uUmVxdWVzdChjb21wZXRpdGlvbiwgcGxheWVyKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jb21wZXRpdGlvbnMvYWRkUGxheWVyUmVxdWVzdCcsIHtcbiAgICAgICAgY29tcGV0aXRpb246IGNvbXBldGl0aW9uLFxuICAgICAgICBwbGF5ZXI6IHBsYXllclxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlZFBsYXllckZyb21Db21wZXRpdGlvbihjb21wZXRpdGlvbklkLCByZW1vdmVkUGxheWVyLCBwbGF5ZXJzKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jb21wZXRpdGlvbnMvcmVtb3ZlUGxheWVyJywge1xuICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkLFxuICAgICAgICByZW1vdmVkUGxheWVyOiByZW1vdmVkUGxheWVyLFxuICAgICAgICBwbGF5ZXJzOiBwbGF5ZXJzXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHByb3ZlUGVuZGluZ1BsYXllcihjb21wZXRpdGlvbklkLCBwbGF5ZXIpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2NvbXBldGl0aW9ucy9hcHByb3ZlUGxheWVyJywge1xuICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkLFxuICAgICAgICBwbGF5ZXI6IHBsYXllclxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVueVBlbmRpbmdQbGF5ZXIoY29tcGV0aXRpb25JZCwgcGxheWVyKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jb21wZXRpdGlvbnMvZGVueVBsYXllcicsIHtcbiAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgcGxheWVyOiBwbGF5ZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdDb21wZXRpdGlvbkFkbWluQ3RybCcsIENvbXBldGl0aW9uQWRtaW5DdHJsKTtcblxuICBmdW5jdGlvbiBDb21wZXRpdGlvbkFkbWluQ3RybCgkc2NvcGUsICRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkZmlsdGVyLCBjb21wZXRpdGlvbnNTZXJ2aWNlLCBpZGVudGl0eVNlcnZpY2UsIG5vdGlmeVNlcnZpY2UsIGNoYWxsZW5nZXNTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5jb21wZXRpdGlvbklkID0gbnVsbDtcbiAgICB2bS51cGRhdGVDb21wZXRpdGlvblJlc3RyaWN0Sm9pbnMgPSB1cGRhdGVDb21wZXRpdGlvblJlc3RyaWN0Sm9pbnM7XG4gICAgdm0udXBkYXRlQ29tcGV0aXRpb25Qcml2YXRlID0gdXBkYXRlQ29tcGV0aXRpb25Qcml2YXRlO1xuICAgIHZtLmRlbGV0ZUNvbXBldGl0aW9uID0gZGVsZXRlQ29tcGV0aXRpb247XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBpZiAoJHN0YXRlUGFyYW1zLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgdm0uY29tcGV0aXRpb25JZCA9ICRzdGF0ZVBhcmFtcy5jb21wZXRpdGlvbklkO1xuICAgICAgICByZWZyZXNoQ29tcGV0aXRpb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRzdGF0ZS5nbygnY29tcGV0aXRpb25zLm15Q29tcGV0aXRpb25zJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVmcmVzaENvbXBldGl0aW9uKCkge1xuICAgICAgY29tcGV0aXRpb25zU2VydmljZS5nZXRDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChjb21wZXRpdGlvbikge1xuICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhpcyB1c2VyIGlzIGFuIGFkbWluIG9mIHRoaXMgY29tcGV0aXRpb25cbiAgICAgICAgaWYgKGNvbXBldGl0aW9uLmRhdGEgJiYgXy5zb21lKGNvbXBldGl0aW9uLmRhdGEuYWRtaW5zLCBbJ19pZCcsIGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWRdKSkge1xuICAgICAgICAgIHZtLmlzQWRtaW4gPSB0cnVlO1xuICAgICAgICAgIC8vIERpc3BsYXkgdGhlIHBsYXllcnMgaW4gdGhlIHByb3BlciBvcmRlclxuICAgICAgICAgIGNvbXBldGl0aW9uLmRhdGEucGxheWVycyA9ICRmaWx0ZXIoJ29yZGVyQnknKShjb21wZXRpdGlvbi5kYXRhLnBsYXllcnMsICdwb3NpdGlvbicpO1xuICAgICAgICAgIHZtLmNvbXBldGl0aW9uID0gY29tcGV0aXRpb24uZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkc3RhdGUuZ28oJ2NvbXBldGl0aW9ucy5teUNvbXBldGl0aW9ucycpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmdldENvbXBsZXRlZENoYWxsZW5nZXNCeUNvbXBldGl0aW9uKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKGNoYWxsZW5nZXMpIHtcbiAgICAgICAgdm0uY2hhbGxlbmdlcyA9IGNoYWxsZW5nZXMuZGF0YTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFBlcmZvcm0gdGhlIHVwZGF0ZXMgdGhhdCB3ZXJlIHJlcXVzdGVkXG4gICAgZnVuY3Rpb24gdXBkYXRlQ29tcGV0aXRpb25SZXN0cmljdEpvaW5zKCkge1xuICAgICAgY29tcGV0aXRpb25zU2VydmljZS5nZXRDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChjb21wZXRpdGlvbikge1xuICAgICAgICB2YXIgdXBkYXRlZENvbXBldGl0aW9uID0gY29tcGV0aXRpb24uZGF0YTtcbiAgICAgICAgdXBkYXRlZENvbXBldGl0aW9uLnJlc3RyaWN0Sm9pbnMgPSB2bS5jb21wZXRpdGlvbi5yZXN0cmljdEpvaW5zO1xuICAgICAgICBjb21wZXRpdGlvbnNTZXJ2aWNlLnVwZGF0ZUNvbXBldGl0aW9uKHVwZGF0ZWRDb21wZXRpdGlvbik7XG4gICAgICB9KTsgICAgICBcbiAgICB9XG5cbiAgICAvLyBQZXJmb3JtIHRoZSB1cGRhdGVzIHRoYXQgd2VyZSByZXF1c3RlZFxuICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbXBldGl0aW9uUHJpdmF0ZSgpIHtcbiAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2UuZ2V0Q29tcGV0aXRpb24odm0uY29tcGV0aXRpb25JZCkudGhlbihmdW5jdGlvbiAoY29tcGV0aXRpb24pIHtcbiAgICAgICAgdmFyIHVwZGF0ZWRDb21wZXRpdGlvbiA9IGNvbXBldGl0aW9uLmRhdGE7XG4gICAgICAgIHVwZGF0ZWRDb21wZXRpdGlvbi5wcml2YXRlID0gdm0uY29tcGV0aXRpb24ucHJpdmF0ZTtcbiAgICAgICAgY29tcGV0aXRpb25zU2VydmljZS51cGRhdGVDb21wZXRpdGlvbih1cGRhdGVkQ29tcGV0aXRpb24pO1xuICAgICAgfSk7ICAgICAgXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVsZXRlQ29tcGV0aXRpb24oKSB7XG4gICAgICBzd2FsKHtcbiAgICAgICAgdGl0bGU6ICdEZWxldGUgQ29tcGV0aXRpb24/JyxcbiAgICAgICAgdGV4dDogJ1RoaXMgY2FuIG5vdCBiZSB1bmRvbmUnLFxuICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ0RlbGV0ZScsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICdOZXZlcm1pbmQnLFxuICAgICAgICBjbG9zZU9uQ29uZmlybTogdHJ1ZSxcbiAgICAgICAgY2xvc2VPbkNhbmNlbDogdHJ1ZVxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb21wZXRpdGlvbnNTZXJ2aWNlLmRlbGV0ZUNvbXBldGl0aW9uKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRzdGF0ZS5nbygnY29tcGV0aXRpb25zLm15Q29tcGV0aXRpb25zJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNvbXBldGl0aW9uX3VwZGF0ZWQnLCBmdW5jdGlvbiAoXywgY29tcGV0aXRpb25EZXRhaWxzKSB7XG4gICAgICBpZiAodm0uY29tcGV0aXRpb25JZCA9PT0gY29tcGV0aXRpb25EZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5pbmZvKGNvbXBldGl0aW9uRGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgIHJlZnJlc2hDb21wZXRpdGlvbigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNvbXBldGl0aW9uX2RlbGV0ZWQnLCBmdW5jdGlvbiAoXywgY29tcGV0aXRpb25EZXRhaWxzKSB7XG4gICAgICBpZiAodm0uY29tcGV0aXRpb25JZCA9PT0gY29tcGV0aXRpb25EZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5pbmZvKGNvbXBldGl0aW9uRGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgICRzdGF0ZS5nbygnY29tcGV0aXRpb25zLm15Q29tcGV0aXRpb25zJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignQ29tcGV0aXRpb25TdGF0c0N0cmwnLCBDb21wZXRpdGlvblN0YXRzQ3RybCk7XG5cbiAgZnVuY3Rpb24gQ29tcGV0aXRpb25TdGF0c0N0cmwoJHNjb3BlLCAkc3RhdGVQYXJhbXMsICRzdGF0ZSwgY29tcGV0aXRpb25zU2VydmljZSwgbm90aWZ5U2VydmljZSwgY2hhbGxlbmdlc1NlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmNvbXBldGl0aW9uSWQgPSBudWxsO1xuICAgIHZtLmNvbXBldGl0aW9uID0ge307XG4gICAgdm0ucGxheWVyc1Jlc3VsdHMgPSBbXTtcbiAgICB2bS5jaGFsbGVuZ2VzID0gW107XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBpZiAoJHN0YXRlUGFyYW1zLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgdm0uY29tcGV0aXRpb25JZCA9ICRzdGF0ZVBhcmFtcy5jb21wZXRpdGlvbklkO1xuICAgICAgICByZWZyZXNoQ29tcGV0aXRpb24oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWZyZXNoQ29tcGV0aXRpb24oKSB7XG4gICAgICBjb21wZXRpdGlvbnNTZXJ2aWNlLmdldENvbXBldGl0aW9uKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKGNvbXBldGl0aW9uKSB7XG4gICAgICAgIGlmIChjb21wZXRpdGlvbi5kYXRhKSB7XG4gICAgICAgICAgdm0uY29tcGV0aXRpb24gPSBjb21wZXRpdGlvbi5kYXRhO1xuICAgICAgICAgIGlmICh2bS5jb21wZXRpdGlvbi50eXBlID09PSAncHlyYW1pZCcpIHtcbiAgICAgICAgICAgIF8uZm9yRWFjaCh2bS5jb21wZXRpdGlvbi5wbGF5ZXJzLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgICAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmdldFBsYXllclJlc3VsdHNCeUNvbXBldGl0aW9uKHZtLmNvbXBldGl0aW9uSWQsIHBsYXllci5faWQpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXIucmVzdWx0cyA9IHJlc3VsdHMuZGF0YTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHZtLmNvbXBldGl0aW9uLnR5cGUgPT09ICd2ZXJzdXMnKSB7XG4gICAgICAgICAgICB2bS50ZWFtcyA9IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG51bWJlcjogMVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbnVtYmVyOiAyXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRzdGF0ZS5nbygnY29tcGV0aXRpb25zLm15Q29tcGV0aXRpb25zJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gVXNlZCBmb3IgdGhlIGNvbXBsZXRlZCBjaGFsbGVuZ2VzIGRpcmVjdGl2ZVxuICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZ2V0Q29tcGxldGVkQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24odm0uY29tcGV0aXRpb25JZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlcykge1xuICAgICAgICB2bS5jaGFsbGVuZ2VzID0gY2hhbGxlbmdlcy5kYXRhO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNvbXBldGl0aW9uX3VwZGF0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNoYWxsZW5nZURldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oY2hhbGxlbmdlRGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgIHJlZnJlc2hDb21wZXRpdGlvbigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNvbXBldGl0aW9uX2RlbGV0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNoYWxsZW5nZURldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oY2hhbGxlbmdlRGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgICRzdGF0ZS5nbygnY29tcGV0aXRpb25zLm15Q29tcGV0aXRpb25zJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignQ29tcGV0aXRpb25DdHJsJywgQ29tcGV0aXRpb25DdHJsKTtcblxuICBmdW5jdGlvbiBDb21wZXRpdGlvbkN0cmwoJHNjb3BlLCAkc3RhdGUsICRzdGF0ZVBhcmFtcywgY29tcGV0aXRpb25zU2VydmljZSwgY2hhbGxlbmdlc1NlcnZpY2UsIG5vdGlmeVNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmNvbXBldGl0aW9uSWQgPSBudWxsO1xuICAgIHZtLmNvbXBldGl0aW9uID0gbnVsbDtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGlmICgkc3RhdGVQYXJhbXMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICB2bS5jb21wZXRpdGlvbklkID0gJHN0YXRlUGFyYW1zLmNvbXBldGl0aW9uSWQ7XG5cbiAgICAgICAgcmVmcmVzaENvbXBldGl0aW9uKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVmcmVzaENvbXBldGl0aW9uKCkge1xuICAgICAgY29tcGV0aXRpb25zU2VydmljZS5nZXRDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChjb21wZXRpdGlvbikge1xuICAgICAgICBpZiAoY29tcGV0aXRpb24uZGF0YSkge1xuICAgICAgICAgIHZtLmNvbXBldGl0aW9uID0gY29tcGV0aXRpb24uZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkc3RhdGUuZ28oJ2NvbXBldGl0aW9ucy5teUNvbXBldGl0aW9ucycpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6Y29tcGV0aXRpb25fZGVsZXRlZCcsIGZ1bmN0aW9uIChfLCBjb21wZXRpdGlvbkRldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBjb21wZXRpdGlvbkRldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oY29tcGV0aXRpb25EZXRhaWxzLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgJHN0YXRlLmdvKCdjb21wZXRpdGlvbnMubXlDb21wZXRpdGlvbnMnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdDb21wZXRpdGlvbnNDdHJsJywgQ29tcGV0aXRpb25zQ3RybCk7XG5cbiAgZnVuY3Rpb24gQ29tcGV0aXRpb25zQ3RybChjb21wZXRpdGlvbnNTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5jb21wZXRpdGlvbnMgPSBbXTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2UuZ2V0UHVibGljQ29tcGV0aXRpb25zKCkudGhlbihmdW5jdGlvbiAoY29tcGV0aXRpb25zKSB7XG4gICAgICAgIHZtLmNvbXBldGl0aW9ucyA9IGNvbXBldGl0aW9ucy5kYXRhO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIi8qKlxuICogQ3JlYXRlcyBhIGNvbXBldGl0aW9uXG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0NyZWF0ZUNvbXBldGl0aW9uQ3RybCcsIENyZWF0ZUNvbXBldGl0aW9uQ3RybCk7XG5cbiAgZnVuY3Rpb24gQ3JlYXRlQ29tcGV0aXRpb25DdHJsKCRzdGF0ZSwgJGZpbHRlciwgdXNlclNlcnZpY2UsIGNvbXBldGl0aW9uc1NlcnZpY2UsIGlkZW50aXR5U2VydmljZSwgbm90aWZ5U2VydmljZSkge1xuICAgIHZhciBicmVha1BvaW50cyA9IFtdO1xuICAgIHZhciBtYXhMZXZlbHMgPSA3O1xuICAgIHZhciBtYXhQbGF5ZXJzID0gbnVsbDtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLm5ld0NvbXBldGl0aW9uID0ge1xuICAgICAgcGxheWVyczogW10sXG4gICAgICByZXN0cmljdEpvaW5zOiBmYWxzZSxcbiAgICAgIHByaXZhdGU6IGZhbHNlXG4gICAgfTtcbiAgICB2bS5hdmFpbGFibGVQbGF5ZXJzID0gW107XG4gICAgdm0uYWRkZWRQbGF5ZXJzID0gW107XG4gICAgdm0uY3JlYXRlQ29tcGV0aXRpb24gPSBjcmVhdGVDb21wZXRpdGlvbjtcbiAgICB2bS5hZGRQbGF5ZXIgPSBhZGRQbGF5ZXI7XG4gICAgdm0ucmVtb3ZlUGxheWVyID0gcmVtb3ZlUGxheWVyO1xuICAgIHZtLnJlb3JkZXJQbGF5ZXJzID0gcmVvcmRlclBsYXllcnM7XG4gICAgdm0ubmV3Q29tcGV0aXRpb24uZm9yZmVpdERheXMgPSAxO1xuICAgIHZtLm5ld0NvbXBldGl0aW9uLndhaXRpbmdQZXJpb2REYXlzID0gMTtcbiAgICB2bS5jb21wZXRpdGlvblR5cGVzID0gWydweXJhbWlkJywgJ3ZlcnN1cyddO1xuXG4gICAgYWN0aXZhdGUoKTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBSdW5zIG9uIGNvbnRyb2xsZXIgaW5zdGFudGlhdGlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgdXNlclNlcnZpY2UuZ2V0QWxsVXNlcnMoKS50aGVuKGZ1bmN0aW9uICh1c2Vycykge1xuICAgICAgICB2bS5hdmFpbGFibGVQbGF5ZXJzID0gJGZpbHRlcignb3JkZXJCeScpKHVzZXJzLmRhdGEsICdmaXJzdE5hbWUnKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBEZXRlcm1pbmUgdGhlIG1heGltdW0gbnVtYmVyIG9mIHBsYXllcnMgYmFzZWQgb24gdGhlIG1heGltdW0gbnVtYmVyIG9mIGxldmVsc1xuICAgICAgZm9yICh2YXIgaSA9IG1heExldmVsczsgaSA+IDA7IC0taSkge1xuICAgICAgICBtYXhQbGF5ZXJzICs9IGk7XG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZSBicmVhayBwb2ludHMgYXJyYXlcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtYXhMZXZlbHM7IGkrKykge1xuICAgICAgICBicmVha1BvaW50cy5wdXNoKCgoKGkgKiAoaSArIDEpKSAvIDIpKSArIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBwbGF5ZXIgdG8gdGhlIG5ldyBjb21wZXRpdGlvblxuICAgICAqIENoZWNrcyB0byBtYWtlIHN1cmUgeW91IGFyZSBub3QgYWRkaW5nIHRvbyBtYW55IHBsYXllcnNcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IHBsYXllclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZFBsYXllcihwbGF5ZXIpIHtcbiAgICAgIHZtLmFkZGVkUGxheWVycy5wdXNoKF8ucmVtb3ZlKHZtLmF2YWlsYWJsZVBsYXllcnMsIHtfaWQ6IHBsYXllci5faWR9KVswXSk7XG4gICAgICByZW9yZGVyUGxheWVycygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBwcmV2aXVvc2x5IGFkZGVkIHBsYXllciBmcm9tIHRoZSBjb21wZXRpdGlvblxuICAgICAqIEBwYXJhbSAge29iamVjdH0gcGxheWVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlUGxheWVyKHBsYXllcikge1xuICAgICAgdm0uYXZhaWxhYmxlUGxheWVycy5wdXNoKF8ucmVtb3ZlKHZtLmFkZGVkUGxheWVycywge19pZDogcGxheWVyLl9pZH0pWzBdKTtcbiAgICAgIHJlb3JkZXJQbGF5ZXJzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWFrZSBjaGFuZ2VzIGJhc2VkIG9uIHRoZSBjb21wZXRpdGlvbiB0eXBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlclBsYXllcnMoKSB7XG4gICAgICBpZiAodm0ubmV3Q29tcGV0aXRpb24udHlwZSA9PT0gJ3ZlcnN1cycpIHtcbiAgICAgICAgcmVvcmRlclZlcnN1c1BsYXllcnMoKTtcbiAgICAgIH0gZWxzZSBpZiAodm0ubmV3Q29tcGV0aXRpb24udHlwZSA9PT0gJ3B5cmFtaWQnKSB7XG4gICAgICAgIHJlb3JkZXJQeXJhbWlkUGxheWVycygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlb3JkZXIgdGhlIHBsYXllcnMgYmFzZWQgb24gdGhlIGRyYWctZHJvcFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXJQeXJhbWlkUGxheWVycygpIHtcbiAgICAgIHZhciBpID0gMTtcbiAgICAgIF8uZm9yRWFjaCh2bS5hZGRlZFBsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgcGxheWVyLnBvc2l0aW9uID0gaTtcbiAgICAgICAgKytpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVvcmRlclZlcnN1c1BsYXllcnMoKSB7XG4gICAgICAvLyBTZXQgYWxsIHBsYXllcnMgdG8gdGVhbSAyXG4gICAgICBfLmZvckVhY2godm0uYWRkZWRQbGF5ZXJzLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgIHBsYXllci5wb3NpdGlvbiA9IDI7XG4gICAgICB9KTtcbiAgICAgIC8vIFNldCB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgcGxheWVycyB0byB0ZWFtIDFcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgKHZtLmFkZGVkUGxheWVycy5sZW5ndGggLyAyKTsgaSsrKSB7XG4gICAgICAgIHZtLmFkZGVkUGxheWVyc1tpXS5wb3NpdGlvbiA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSBjb21wZXRpdGlvblxuICAgICAqIEBwYXJhbSAge29iamVjdH0gY29tcGV0aXRpb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDb21wZXRpdGlvbihjb21wZXRpdGlvbikge1xuICAgICAgaWYgKGNvbXBldGl0aW9uLnR5cGUgPT09ICd2ZXJzdXMnICYmIHZtLmFkZGVkUGxheWVycy5sZW5ndGggJSAyID4gMCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdBIFZlcnN1cyBjb21wZXRpdGlvbiBtdXN0IGhhdmUgYW4gZXZlbiBudW1iZXIgb2YgcGxheWVycycpO1xuICAgICAgfSBlbHNlIGlmICh2bS5hZGRlZFBsYXllcnMubGVuZ3RoID4gbWF4UGxheWVycykge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdBIGNvbXBldGl0aW9uIGNhbiBoYXZlIGEgbWF4aW11bSBvZiAnICsgbWF4UGxheWVycyArICcgcGxheWVycycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHZtLmFkZGVkUGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICAgIHZhciBhZGRQbGF5ZXIgPSB7XG4gICAgICAgICAgICBfaWQ6IHBsYXllci5faWQsXG4gICAgICAgICAgICBlbWFpbDogcGxheWVyLnVzZXJuYW1lLFxuICAgICAgICAgICAgZmlyc3ROYW1lOiBwbGF5ZXIuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IHBsYXllci5sYXN0TmFtZSxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBwbGF5ZXIuZGlzcGxheU5hbWUsXG4gICAgICAgICAgICBwb3NpdGlvbjogcGxheWVyLnBvc2l0aW9uXG4gICAgICAgICAgfTtcbiAgICAgICAgICBjb21wZXRpdGlvbi5wbGF5ZXJzLnB1c2goYWRkUGxheWVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbXBldGl0aW9uLmFkbWlucyA9IFt7XG4gICAgICAgICAgX2lkOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuX2lkLFxuICAgICAgICAgIGVtYWlsOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIudXNlcm5hbWUsXG4gICAgICAgICAgZmlyc3ROYW1lOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuZmlyc3ROYW1lLFxuICAgICAgICAgIGxhc3ROYW1lOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIubGFzdE5hbWUsXG4gICAgICAgICAgZGlzcGxheU5hbWU6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5kaXNwbGF5TmFtZSxcbiAgICAgICAgICBwcmltYXJ5OiB0cnVlXG4gICAgICAgIH1dO1xuXG4gICAgICAgIC8vIEZpZ3VyZSBvdXQgdGhlIG51bWJlciBvZiBsZXZlbHMgYmFzZWQgb24gdGhlIG51bWJlciBvZiBwbGF5ZXJzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnJlYWtQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoY29tcGV0aXRpb24ucGxheWVycy5sZW5ndGggPCBicmVha1BvaW50c1tpXSkge1xuICAgICAgICAgICAgY29tcGV0aXRpb24ubGV2ZWxzID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2UuY3JlYXRlQ29tcGV0aXRpb24oY29tcGV0aXRpb24pLnRoZW4oZnVuY3Rpb24gKG5ld0NvbXBldGl0aW9uKSB7XG4gICAgICAgICAgJHN0YXRlLmdvKCdjb21wZXRpdGlvbnMudmlldycsIHtcbiAgICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IG5ld0NvbXBldGl0aW9uLmRhdGEuX2lkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdNeUNvbXBldGl0aW9uc0N0cmwnLCBNeUNvbXBldGl0aW9uc0N0cmwpO1xuXG4gIGZ1bmN0aW9uIE15Q29tcGV0aXRpb25zQ3RybCgkc2NvcGUsIGNvbXBldGl0aW9uc1NlcnZpY2UsIGNoYWxsZW5nZXNTZXJ2aWNlLCBpZGVudGl0eVNlcnZpY2UsIG5vdGlmeVNlcnZpY2UpIHtcbiAgICB2YXIgbXlDb21wZXRpdGlvbnMgPSBbXTtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmFjdGl2ZUNoYWxsZW5nZSA9IG51bGw7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBnZXRDb21wZXRpdGlvbnNGb3JVc2VyKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcGV0aXRpb25zRm9yVXNlcigpIHtcbiAgICAgIG15Q29tcGV0aXRpb25zID0gW107XG4gICAgICB2bS5hY3RpdmVDaGFsbGVuZ2UgPSBudWxsO1xuICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICBjb21wZXRpdGlvbnNTZXJ2aWNlLmdldENvbXBldGl0aW9uc0ZvclVzZXIoaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZCkudGhlbihmdW5jdGlvbiAoY29tcGV0aXRpb25zKSB7XG4gICAgICAgICAgdm0uY29tcGV0aXRpb25zID0gY29tcGV0aXRpb25zLmRhdGE7XG4gICAgICAgICAgXy5mb3JFYWNoKHZtLmNvbXBldGl0aW9ucywgZnVuY3Rpb24oY29tcGV0aXRpb24pIHtcbiAgICAgICAgICAgIG15Q29tcGV0aXRpb25zLnB1c2goY29tcGV0aXRpb24uX2lkKTtcbiAgICAgICAgICAgIGlmIChjb21wZXRpdGlvbi50eXBlID09PSAncHlyYW1pZCcpIHtcbiAgICAgICAgICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyKGNvbXBldGl0aW9uLl9pZCwgaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoYWxsZW5nZS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICBjb21wZXRpdGlvbi5hY3RpdmVDaGFsbGVuZ2UgPSBjaGFsbGVuZ2UuZGF0YTtcbiAgICAgICAgICAgICAgICAgIGlmIChjb21wZXRpdGlvbi5hY3RpdmVDaGFsbGVuZ2UudGltZUxpbWl0ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBldGl0aW9uLmFjdGl2ZUNoYWxsZW5nZS5leHBpcmVzID0gKG1vbWVudCgpLmRpZmYobW9tZW50KGNvbXBldGl0aW9uLmFjdGl2ZUNoYWxsZW5nZS5jcmVhdGVkKS5hZGQoY29tcGV0aXRpb24uYWN0aXZlQ2hhbGxlbmdlLnRpbWVMaW1pdCwgJ2QnKSwncycpKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbXBldGl0aW9uLnR5cGUgPT09ICd2ZXJzdXMnKSB7XG4gICAgICAgICAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmdldEFjdGl2ZUNoYWxsZW5nZXNCeUNvbXBldGl0aW9uKGNvbXBldGl0aW9uLl9pZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoYWxsZW5nZS5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgIGNvbXBldGl0aW9uLmFjdGl2ZUNoYWxsZW5nZSA9IGNoYWxsZW5nZS5kYXRhWzBdO1xuICAgICAgICAgICAgICAgICAgaWYgKGNvbXBldGl0aW9uLmFjdGl2ZUNoYWxsZW5nZS50aW1lTGltaXQgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGV0aXRpb24uYWN0aXZlQ2hhbGxlbmdlLmV4cGlyZXMgPSAobW9tZW50KCkuZGlmZihtb21lbnQoY29tcGV0aXRpb24uYWN0aXZlQ2hhbGxlbmdlLmNyZWF0ZWQpLmFkZChjb21wZXRpdGlvbi5hY3RpdmVDaGFsbGVuZ2UudGltZUxpbWl0LCAnZCcpLCdzJykpICogLTE7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNvbXBldGl0aW9uX3VwZGF0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKG15Q29tcGV0aXRpb25zLmluZGV4T2YoY2hhbGxlbmdlRGV0YWlscy5jb21wZXRpdGlvbklkKSA+PSAwKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuaW5mbyhjaGFsbGVuZ2VEZXRhaWxzLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgZ2V0Q29tcGV0aXRpb25zRm9yVXNlcigpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ1VzZXJDdHJsJywgVXNlckN0cmwpO1xuXG4gIGZ1bmN0aW9uIFVzZXJDdHJsKGlkZW50aXR5U2VydmljZSwgdXNlclNlcnZpY2UsIG5vdGlmeVNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnVzZXIgPSAge1xuICAgICAgX2lkOiAgaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZCxcbiAgICAgIGZpcnN0TmFtZTogaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLmZpcnN0TmFtZSxcbiAgICAgIGxhc3ROYW1lOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIubGFzdE5hbWUsXG4gICAgICBkaXNwbGF5TmFtZTogaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLmRpc3BsYXlOYW1lXG4gICAgfTtcbiAgICB2bS51cGRhdGVVc2VyID0gdXBkYXRlVXNlcjtcbiAgICB2bS51c2VyRm9ybSA9IHt9O1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgaWYgKCFpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgdm0udXNlci5kaXNwbGF5TmFtZSA9IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5maXJzdE5hbWUgKyAnICcgKyBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIubGFzdE5hbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlVXNlciAodXNlcikge1xuICAgICAgLy8gUHJldmVudCBtdWx0aXBsZSBwZW9wbGUgZnJvbSBoYXZpbmcgdGhlIHNhbWUgZGlzcGxheSBuYW1lXG4gICAgICB2YXIgZGlzcGxheU5hbWVzID0gW107XG4gICAgICB1c2VyU2VydmljZS5nZXRBbGxVc2VycygpLnRoZW4oZnVuY3Rpb24gKHVzZXJzKSB7XG4gICAgICAgIF8uZm9yRWFjaCh1c2Vycy5kYXRhLCBmdW5jdGlvbiAodXNlcikge1xuICAgICAgICAgIGRpc3BsYXlOYW1lcy5wdXNoKHVzZXIuZGlzcGxheU5hbWUudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh1c2VyLnBhc3N3b3JkICE9PSB1c2VyLmNvbmZpcm1QYXNzd29yZCkge1xuICAgICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ1Bhc3N3b3JkcyBkb25cXCd0IG1hdGNoIScpO1xuICAgICAgICB9IGVsc2UgaWYgKHVzZXIuZmlyc3ROYW1lLmxlbmd0aCA8IDEgfHwgdXNlci5sYXN0TmFtZS5sZW5ndGggPCAxIHx8IHVzZXIuZGlzcGxheU5hbWUubGVuZ3RoIDwgMSkge1xuICAgICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ0RvblxcJ3QgbGVhdmUgbmFtZXMgYmxhbmshICBIb3cgd2lsbCBwZW9wbGUga25vdyB3aG8geW91IGFyZT8nKTtcbiAgICAgICAgfSBlbHNlIGlmIChfLmluZGV4T2YoZGlzcGxheU5hbWVzLCB1c2VyLmRpc3BsYXlOYW1lLnRvTG93ZXJDYXNlKCkpID4gLTEpIHtcbiAgICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdTb3JyeSwgc29tZW9uZSBlbHNlIGlzIGFscmVhZHkgdXNpbmcgdGhhdCBkaXNwbGF5IG5hbWUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiBhbnkgb2YgdGhlIG5hbWVzIHdlcmUgdXBkYXRlZCB3ZSdsbCBuZWVkIHRvIHVwZGF0ZSB0aGVtIGluIHRoZSBvdGhlciBjb2xsZWN0aW9ucydcbiAgICAgICAgICB2YXIgdXNlclVwZGF0ZXMgPSB7XG4gICAgICAgICAgICBfaWQ6IHVzZXIuX2lkXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAoKHVzZXIuZmlyc3ROYW1lICE9PSBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuZmlyc3ROYW1lICYmIHVzZXIuZmlyc3ROYW1lLmxlbmd0aCA+IDApIHx8ICh1c2VyLmxhc3ROYW1lICE9PSBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIubGFzdE5hbWUgJiYgdXNlci5sYXN0TmFtZS5sZW5ndGggPiAwKSB8fCAodXNlci5kaXNwbGF5TmFtZSAhPT0gaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLmRpc3BsYXlOYW1lICYmIHVzZXIuZGlzcGxheU5hbWUubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAgIHVzZXJVcGRhdGVzLmZpcnN0TmFtZSA9IHVzZXIuZmlyc3ROYW1lO1xuICAgICAgICAgICAgdXNlclVwZGF0ZXMubGFzdE5hbWUgPSB1c2VyLmxhc3ROYW1lO1xuICAgICAgICAgICAgdXNlclVwZGF0ZXMuZGlzcGxheU5hbWUgPSB1c2VyLmRpc3BsYXlOYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodXNlci5wYXNzd29yZCAmJiB1c2VyLnBhc3N3b3JkLmxlbnRnaCA+IDApIHtcbiAgICAgICAgICAgIHVzZXJVcGRhdGVzLnBhc3N3b3JkID0gdXNlci5wYXNzd29yZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdXNlclNlcnZpY2UudXBkYXRlVXNlcih1c2VyVXBkYXRlcykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBub3RpZnlTZXJ2aWNlLnN1Y2Nlc3MoJ1lvdXIgaW5mb3JtYXRpb24gaGFzIGJlZW4gdXBkYXRlZCcpO1xuICAgICAgICAgICAgdm0udXNlckZvcm0uJHNldFByaXN0aW5lKCk7XG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGN1cnJlbnQgdXNlciB3aXRoIHRoZSB1cGRhdGVkIGRhdGFcbiAgICAgICAgICAgIHZhciBjdXJyZW50VXNlckNsb25lID0gYW5ndWxhci5jb3B5KGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlcik7XG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZChjdXJyZW50VXNlckNsb25lLCB1c2VyVXBkYXRlcyk7XG4gICAgICAgICAgICBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIgPSBjdXJyZW50VXNlckNsb25lO1xuICAgICAgICAgICAgdm0udXNlci5jb25maXJtUGFzc3dvcmQgPSB2bS51c2VyLnBhc3N3b3JkID0gJyc7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2NPdmVyZmxvdycsIGNPdmVyZmxvdyk7XG5cbiAgZnVuY3Rpb24gY092ZXJmbG93KHNjcm9sbGJhclNlcnZpY2UpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdDJyxcbiAgICAgIGxpbms6IGxpbmtGdW5jLFxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICB2YXIgc2Nyb2xsYXhpcyA9IGF0dHJzLnNjcm9sbGF4aXMgfHwgJ3knO1xuICAgICAgdmFyIHRoZW1lID0gYXR0cnMudGhlbWUgfHwgJ21pbmltYWwtZGFyayc7XG4gICAgICB2YXIgbW91c2V3aGVlbGF4aXMgPSBhdHRycy5tb3VzZXdoZWVsYXhpcyB8fCAneSc7XG4gICAgICBpZiAoISQoJ2h0bWwnKS5oYXNDbGFzcygnaXNtb2JpbGUnKSkge1xuICAgICAgICBzY3JvbGxiYXJTZXJ2aWNlLm1hbGlodVNjcm9sbChlbGVtZW50LCB0aGVtZSwgc2Nyb2xsYXhpcywgbW91c2V3aGVlbGF4aXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ3RvZ2dsZVN1Ym1lbnUnLCB0b2dnbGVTdWJtZW51KTtcblxuICBmdW5jdGlvbiB0b2dnbGVTdWJtZW51KCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgbGluazogbGlua0Z1bmMsXG4gICAgfTtcblxuICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwpIHtcbiAgICAgIGVsLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwubmV4dCgpLnNsaWRlVG9nZ2xlKDIwMCk7XG4gICAgICAgIGVsLnBhcmVudCgpLnRvZ2dsZUNsYXNzKCd0b2dnbGVkJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd3YXZlc0VmZmVjdCcsIHdhdmVzRWZmZWN0KTtcblxuICBmdW5jdGlvbiB3YXZlc0VmZmVjdCgpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdDJyxcbiAgICAgIGxpbms6IGxpbmtGdW5jLFxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50Lmhhc0NsYXNzKCdidG4taWNvbicpIHx8IGVsZW1lbnQuaGFzQ2xhc3MoJ2J0bi1mbG9hdCcpKSB7XG4gICAgICAgIFdhdmVzLmF0dGFjaChlbGVtZW50LCBbJ3dhdmVzLWNpcmNsZSddKTtcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5oYXNDbGFzcygnYnRuLWxpZ2h0JykpIHtcbiAgICAgICAgV2F2ZXMuYXR0YWNoKGVsZW1lbnQsIFsnd2F2ZXMtbGlnaHQnXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBXYXZlcy5hdHRhY2goZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIFdhdmVzLmluaXQoKTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdmZ0xpbmUnLCBmZ0xpbmUpO1xuXG4gIGZ1bmN0aW9uIGZnTGluZSgpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdDJyxcbiAgICAgIGxpbms6IGxpbmtGdW5jLFxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQuY2hpbGRyZW4oKS5maXJzdCgpO1xuICAgICAgdmFyIGlzRmxvYXRMYWJlbCA9IGVsZW1lbnQucGFyZW50KCkuaGFzQ2xhc3MoJ2ZnLWZsb2F0Jyk7XG4gICAgICBpbnB1dC5mb2N1cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2ZnLXRvZ2dsZWQnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpbnB1dC5ibHVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc0Zsb2F0TGFiZWwgfHwgKGlzRmxvYXRMYWJlbCAmJiBpbnB1dC52YWwoKS5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZmctdG9nZ2xlZCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
