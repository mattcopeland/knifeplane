angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","luegg.directives"]),function(){"use strict ";function e(e,t){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache",t.options({appendToBody:!0})}e.$inject=["$httpProvider","$uibTooltipProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e){var t=this;t.$state=e,t.lockSidebar=!1}e.$inject=["$state"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,i,a){var o={superAdmin:n,admin:t,user:r};a.html5Mode(!0),i.otherwise("/"),i.when("/pyramids/","/pyramids"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("pyramids",{url:"/pyramids",views:{content:{controller:"PyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramids.html"}}}).state("pyramids.myPyramids",{url:"/my-pyramids",views:{"content@":{controller:"MyPyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/my-pyramids.html"}},resolve:{auth:o.user}}).state("pyramids.view",{url:"/view/:competitionId",views:{"content@":{controller:"PyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramid.html"}}}).state("pyramids.stats",{url:"/stats/:competitionId",views:{"content@":{controller:"StatsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/stats.html"}}}).state("pyramids.create",{url:"/create",views:{"content@":{controller:"CreatePyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/create-pyramid.html"}},resolve:{auth:o.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}})}function t(e){return e.authorizeCurrentUserForRoute("admin")}function n(e){return e.authorizeCurrentUserForRoute("super-admin")}function r(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),t.$inject=["authService"],n.$inject=["authService"],r.$inject=["authService"]}(),function(){"use strict";function e(e,t,n){e.$on("$stateChangeError",function(e,n,r,i,a,o){"not authorized"===o&&(t.go("login"),t.previous=n)}),e.$on("$stateChangeStart",function(){n.setSidebarStatus(!1)})}e.$inject=["$rootScope","$state","sidebarService"],angular.module("app").run(e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@"},templateUrl:"/challenges/components/active-challenges.html"};return e}function t(e,t){function n(){r()}function r(){i.challenges=[],t.getActiveChallengesByCompetition(i.competitionId).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){0!==e.timeLimit&&(e.expires=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1)}))})}var i=this;i.challenges=[],n(),e.$on("ws:challenge_created",function(e,t){i.competitionId===t.competitionId&&r()}),e.$on("ws:challenge_completed",function(e,t){i.competitionId===t.competitionId&&r()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpActiveChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@",limit:"@"},templateUrl:"/challenges/components/completed-challenges.html"};return e}function t(e,t){function n(){r()}function r(){i.challenges=[],t.getCompletedChallengesByCompetition(i.competitionId,i.limit).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){e.loser="challenger"===e.winner?"opponent":"challenger",e.whenCompleted=moment(e.completed).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd",sameElse:"DD/MM/YYYY"})}))})}var i=this;i.challenges=[],n(),e.$on("ws:challenge_completed",function(e,t){i.competitionId===t.competitionId&&r()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpCompletedChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@",player:"=",levels:"@"},templateUrl:"/challenges/components/player-overall-results.html"};return e}function t(e,t,n){function r(){i(a.competitionId,a.player._id)}function i(e,n){t.getPlayerResultsByCompetition(e,n).then(function(e){for(var t=[],r=0;r<a.levels;r++)t.push(r*(r+1)/2+1);a.player.level=t.length;for(var i=0;i<t.length;i++)if(a.player.position<t[i+1]){a.player.level=t.indexOf(t[i])+1;break}var o,l=0,s=!0;_.forEach(e.data,function(e){s&&("challenger"===e.winner&&e.challenger._id===n||"opponent"===e.winner&&e.opponent._id===n?"losing"!==o?(l+=1,o="winning"):s=!1:("opponent"===e.winner&&e.challenger._id===n||"challenger"===e.winner&&e.opponent._id===n)&&("winning"!==o?(l+=1,o="losing"):s=!1)),a.streak={type:o,value:l}}),a.wins.asOpponent=_.size(_.filter(e.data,function(e){return e.opponent._id===n&&"opponent"===e.winner})),a.wins.asChallenger=_.size(_.filter(e.data,function(e){return e.challenger._id===n&&"challenger"===e.winner})),a.wins.total=a.wins.asChallenger+a.wins.asOpponent,a.wins.byForfeit=_.size(_.filter(e.data,function(e){return e.forfeit&&(e.challenger._id===n&&"challenger"===e.winner||e.opponent._id===n&&"opponent"===e.winner)})),a.loses.asOpponent=_.size(_.filter(e.data,function(e){return e.opponent._id===n&&"challenger"===e.winner})),a.loses.asChallenger=_.size(_.filter(e.data,function(e){return e.challenger._id===n&&"opponent"===e.winner})),a.loses.total=a.loses.asChallenger+a.loses.asOpponent,a.loses.byForfeit=_.size(_.filter(e.data,function(e){return e.forfeit&&(e.challenger._id===n&&"opponent"===e.winner||e.opponent._id===n&&"challenger"===e.winner)}))})}var a=this;a.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},a.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},a.streak={type:null,value:0},r(),e.$on("ws:challenge_completed",function(e,t){a.competitionId===t.competitionId&&(a.player._id===t.challengerId?(n.info(t.description),i(t.competitionId,t.challengerId)):a.player._id===t.opponentId&&i(t.competitionId,t.opponentId))})}t.$inject=["$scope","challengesService","notifyService"],angular.module("app").directive("kpPlayerOverallResults",e)}(),function(){"use strict";function e(e){function t(t){return e.post("/api/challenges/create",{challenge:t})}function n(t){return e.post("/api/challenges/complete",{challenge:t})}function r(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function i(t){return e.get("/api/challenges/active/competition",{params:{competitionId:t}})}function a(t,n){return e.get("/api/challenges/active/competition/player",{params:{competitionId:t,playerId:n}})}function o(t,n){return e.get("/api/challenges/completed/competition",{params:{competitionId:t,limit:n}})}function l(t,n){return e.get("/api/challenges/results/competition/player",{params:{competitionId:t,playerId:n}})}var s={createChallenge:t,completeChallenge:n,getChallengesByCompetition:r,getActiveChallengesByCompetition:i,getActiveChallengeByCompetitionByPlayer:a,getCompletedChallengesByCompetition:o,getPlayerResultsByCompetition:l};return s}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/pyramids/components/pyramid.html",replace:!0,scope:{competitionId:"@"},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,n,r,i,a,o){function l(){n.getPyramid(b.competitionId).then(function(e){b.pyramid=e.data,b.levels=[];for(var t=1;t<=e.data.levels;++t)b.levels.push(t);s(),c(),d(),p(),m()})}function s(){b.pyramid.players=r("orderBy")(b.pyramid.players,"position")}function c(){_.forEach(b.pyramid.players,function(e){a.isAuthenticated()&&e._id===a.currentUser._id&&(b.currentUserIsOnPyramid=!0,e.class="current-user",b.currentUserPlayer=e,o.getActiveChallengeByCompetitionByPlayer(b.competitionId,e._id).then(function(e){e.data&&(b.hasActiveChallenge=!0)}))}),o.getActiveChallengesByCompetition(b.competitionId).then(function(e){_.forEach(e.data,function(e){var t=_.find(b.pyramid.players,{_id:e.challenger._id});t.class="unavailable",t.challenge={position:"challenger"};var n=_.find(b.pyramid.players,{_id:e.opponent._id});if(n.class="unavailable",n.challenge={position:"opponent"},0!==e.timeLimit){var r=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1;r>0?n.challenge.expires=r:r<=0&&h(null,!0,n)}}),f()})}function u(){b.breakPoints=[];for(var e=0;e<b.pyramid.levels;e++)b.breakPoints.push(e*(e+1)/2+1)}function d(){b.numberOfBlocks=0;for(var e=b.pyramid.levels;e>0;e--)b.numberOfBlocks+=e}function p(){b.numberOfRealPlayers=b.pyramid.players.length;for(var e=b.pyramid.players.length;e<b.numberOfBlocks;e++)b.pyramid.players.push({firstName:"Empty",lastName:"Spot",position:99,class:"empty"})}function m(){var e=0;u();for(var t=0;t<b.pyramid.players.length;t++)b.breakPoints.indexOf(t+1)>-1&&(e+=1),b.pyramid.players[t].level=e}function f(){var e=b.currentUserPlayer.level>1?b.currentUserPlayer.level-1:null;_.forEach(b.pyramid.players,function(t){t.level===e&&99!==t.position&&"unavailable"!==t.class&&(b.availableChallenges=!0,t.available=!0)})}function y(e){if(e.available){b.hasActiveChallenge=!0;var t={competitionName:b.pyramid.name,competitionId:b.competitionId,complete:!1,forfeit:!1,timeLimit:b.pyramid.forfeitDays,challenger:{_id:b.currentUserPlayer._id,email:b.currentUserPlayer.email,firstName:b.currentUserPlayer.firstName,lastName:b.currentUserPlayer.lastName,nickname:b.currentUserPlayer.nickname,position:b.currentUserPlayer.position},opponent:{_id:e._id,email:e.email,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname,position:e.position}};o.createChallenge(t).then(function(){b.pyramidMenuToggle=!1})}else i.error("Sorry, that is not a valid challenge.")}function h(e,t,r){var i=r||b.currentUserPlayer;o.getActiveChallengeByCompetitionByPlayer(b.competitionId,i._id).then(function(i){b.hasActiveChallenge=!1;var a=!1;t?(i.data.forfeit=!0,"opponent"===r.challenge.position?(i.data.winner="challenger",a=!0):i.data.winner="opponent"):e?i.data.challenger._id===b.currentUserPlayer._id?(i.data.winner="challenger",a=!0):i.data.winner="opponent":i.data.challenger._id===b.currentUserPlayer._id?i.data.winner="opponent":(i.data.winner="challenger",a=!0),a?n.swapPositions(b.competitionId,i.data.opponent,i.data.challenger).then(function(){o.completeChallenge(i.data).then(function(){$&&w()})}):o.completeChallenge(i.data).then(function(){$&&w()}),b.pyramidMenuToggle=!1})}function g(e){h(null,!0,e)}function v(){if(a.isAuthenticated())if(b.numberOfRealPlayers<b.numberOfBlocks){var e={_id:a.currentUser._id,firstName:a.currentUser.firstName,lastName:a.currentUser.lastName,position:b.numberOfRealPlayers+1};n.addPlayerToPyramid(b.competitionId,e)}else i.warning("Sorry, this pyramid is full");else t.go("login")}function P(){swal({title:"Leave Pyramid?",text:"You will lose your spot and forfeit any active challenges.",type:"error",showCancelButton:!0,confirmButtonText:"Yes, leave",confirmButtonClass:"btn-danger",cancelButtonText:"No, stay",closeOnConfirm:!1,closeOnCancel:!0},function(){w(),swal("OK, you'r out!","You've been removed from the pyramid.","success")})}function w(){a.isAuthenticated()&&b.currentUserIsOnPyramid&&($=!0,b.hasActiveChallenge?h(null,!0,b.currentUserPlayer):(b.currentUserIsOnPyramid=!1,b.hasActiveChallenge=!1,n.getPyramid(b.competitionId).then(function(e){var t=e.data,r=b.currentUserPlayer.position;_.forEach(t.players,function(e){e.position>=r&&(e.position-=1)});for(var i=_.remove(t.players,function(e){return e._id===b.currentUserPlayer._id}),a=[],o=0;o<b.numberOfRealPlayers-1;++o){var l={_id:t.players[o]._id,firstName:t.players[o].firstName,lastName:t.players[o].lastName,position:t.players[o].position};a.push(l)}n.removedPlayerFromPyramid(b.competitionId,i[0],a).then(function(){$=!1})})))}function C(){n.getPyramid(b.competitionId).then(function(e){b.pyramid=e.data,s(),c(),p(),m()})}var b=this;b.pyramid={},b.breakPoints=[],b.numberOfBlocks=0,b.currentUserIsOnPyramid=!1,b.hasActiveChallenge=!1,b.availableChallenges=!1,b.createChallenge=y,b.completeChallenge=h,b.challengeExpired=g,b.currentUserPlayer={},b.pyramidMenuToggle=!1,b.addCurrentUserToPyramid=v,b.confirmRemoveCurrentUserFromPyramid=P,b.numberOfRealPlayers=0,l();var $=!1;e.$on("ws:challenge_created",function(e,t){b.competitionId===t.competitionId&&(i.info(t.description),C())}),e.$on("ws:challenge_completed",function(e,t){b.competitionId===t.competitionId&&(i.info(t.description),$||C())}),e.$on("ws:player_added",function(e,t){b.competitionId===t.competitionId&&(i.info(t.description),C())}),e.$on("ws:player_removed",function(e,t){b.competitionId===t.competitionId&&(i.info(t.description),C())})}t.$inject=["$scope","$state","pyramidsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("kpPyramid",e)}(),function(){"use strict";function e(e,t,n){function r(){}function i(r,i){t.authenticateUser(r,i).then(function(t){t?e.previous?e.go(e.previous):e.go("home"):n.error("Username / password combinaiton incorrect")})}var a=this;a.login=i,r()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,t,n,r){function i(){}function a(e){e.password!==e.confirmPassword?r.error("Passwords don't match!"):n.createUser(e).then(function(){t.go("home")})}var o=this;o.register=a,i()}e.$inject=["$scope","$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/pyramid",{params:{competitionId:t}})}function n(t){return e.get("/api/pyramids/user",{params:{userId:t}})}function r(){return e.get("/api/pyramids")}function i(t){return e.post("/api/pyramids/create",{pyramid:t})}function a(t,n,r){return e.post("/api/pyramids/swapPositions",{competitionId:t,challenger:n,opponent:r})}function o(t,n){return e.post("/api/pyramids/addPlayer",{competitionId:t,player:n})}function l(t,n,r){return e.post("/api/pyramids/removePlayer",{competitionId:t,removedPlayer:n,players:r})}var s={getPyramid:t,getPyramidsForUser:n,getPyramids:r,createPyramid:i,swapPositions:a,addPlayerToPyramid:o,removedPlayerFromPyramid:l};return s}e.$inject=["$http"],angular.module("app").factory("pyramidsService",e)}(),function(){"use strict";function e(e,t,n,r,i){function a(){n.getAllUsers().then(function(e){u.availablePlayers=e.data})}function o(e){u.addedPlayers.length<u.allowedPlayers?(u.addedPlayerAdded=!0,u.addedPlayers.push(_.remove(u.availablePlayers,{_id:e._id})[0])):i.error("All spots have been filled.<br />If you want to add more people please increase the levels.")}function l(e){u.addedPlayerAdded=!1,u.availablePlayers.push(_.remove(u.addedPlayers,{_id:e._id})[0])}function s(e){u.allowedPlayers=0;for(var t=e;t>0;t--)u.allowedPlayers+=t;if(u.addedPlayers.length>u.allowedPlayers){var n=u.addedPlayers.splice(u.allowedPlayers);u.availablePlayers=u.availablePlayers.concat(n),i.warning("Players were removed becasue there are not enough spots on the pyramid.")}}function c(e){angular.forEach(u.addedPlayers,function(e){d+=1;var t={position:d,_id:e._id,email:e.username,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname};u.newPyramid.players.push(t)}),r.createPyramid(e).then(function(e){t.go("pyramids.view",{competitionId:e.data._id})})}var u=this;u.newPyramid={players:[]},u.availablePlayers=[],u.addedPlayers=[],u.createPyramid=c,u.addPlayer=o,u.removePlayer=l,u.allowedPlayers=10,u.newPyramid.levels=4,u.newPyramid.forfeitDays=1,a(),e.$watch("vm.newPyramid.levels",function(e,t){e!==t&&s(e)});var d=0}e.$inject=["$scope","$state","userService","pyramidsService","notifyService"],angular.module("app").controller("CreatePyramidCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){t.getPyramidsForUser(n.currentUser._id).then(function(e){i.pyramids=e.data})}var i=this;i.pyramids=null,r()}e.$inject=["$state","pyramidsService","identityService"],angular.module("app").controller("MyPyramidsCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){t.competitionId&&(i.competitionId=t.competitionId,n.getPyramid(i.competitionId).then(function(t){t.data?i.pyramid=t.data:e.go("pyramids.myPyramids")}))}var i=this;i.competitionId=null,i.pyramid=null,r()}e.$inject=["$state","$stateParams","pyramidsService"],angular.module("app").controller("PyramidCtrl",e)}(),function(){"use strict";function e(){function e(){}var t=this;t.pyramids=null,e()}angular.module("app").controller("PyramidsCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){e.competitionId&&(i.competitionId=e.competitionId,n.getPyramid(i.competitionId).then(function(e){e.data?i.pyramid=e.data:t.go("pyramids.myPyramids")}))}var i=this;i.competitionId=null,i.pyramid=null,r()}e.$inject=["$stateParams","$state","pyramidsService"],angular.module("app").controller("StatsCtrl",e)}(),function(){"use strict";function e(e,t,n,r,i){function a(e,r){var a=n.defer();return t.post("/login",{username:e,password:r}).then(function(e){e.data.success?(i.currentUser=e.data.user,a.resolve(!0)):a.resolve(!1)}),a.promise}function o(e){var r=n.defer();return t.post("/api/users",{userData:e}).then(function(t){t.data?(a(e.username,e.password),r.resolve(!0)):r.resolve(!1)}),r.promise}function l(){var r=n.defer();return t.post("/logout",{logout:!0}).then(function(){i.currentUser=void 0,r.resolve(),e.go("home")}),r.promise}function s(e){return!!i.isAuthorized(e)||n.reject("not authorized")}function c(){return!!i.isAuthenticated()||n.reject("not authorized")}var u={authenticateUser:a,createUser:o,logout:l,authorizeCurrentUserForRoute:s,authenticatedUserForRoute:c};return u}e.$inject=["$state","$http","$q","userService","identityService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e,t){function n(){return e.get("/api/users").then(function(e){return e})}var r={getAllUsers:n};return r}e.$inject=["$http","identityService"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(){return function(e,t){if(!angular.isObject(e))return e;var n=[];for(var r in e)n.push(e[r]);return n.sort(function(e,n){return e=parseInt(e[t]),n=parseInt(n[t]),e-n}),n}}angular.module("app").filter("orderObjectBy",e)}(),function(){"use strict";function e(e){function t(){return!!this.currentUser}function n(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var r;null!==e.bootstrappedUserObject&&(r=e.bootstrappedUserObject);var i={currentUser:r,isAuthenticated:t,isAuthorized:n};return i}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,t,n){$.notify({message:e,url:t,target:n},{type:"info"})}function t(e,t,n){$.notify({message:e,url:t,target:n},{type:"success"})}function n(e,t,n){$.notify({message:e,url:t,target:n},{type:"warning"})}function r(e,t,n){$.notify({message:e,url:t,target:n},{type:"danger"})}function i(e,t,n){$.notify({message:e,url:t,target:n},{type:"inverse"})}var a={info:e,success:t,warning:n,error:r,inverse:i};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85}}),a}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(e,t,n,r){$(e).mCustomScrollbar({theme:t,scrollInertia:100,axis:n,mouseWheel:{enable:!0,axis:r,preventDefault:!0}})}var t={malihuScroll:e};return t}angular.module("app").factory("scrollbarService",e)}(),function(){"use strict";function e(){function e(){return n}function t(e){n.left=e}var n={left:!1,right:!1},r={getSidebarStatus:e,setSidebarStatus:t};return r}angular.module("app").factory("sidebarService",e)}(),angular.module("app").service("websocketService",["$rootScope","$window",function(e,t){function n(){return"https:"===t.location.protocol?"wss://"+t.location.host:"ws://"+t.location.host}var r;this.connect=function(){r=new WebSocket(n()),r.onmessage=function(t){var n=JSON.parse(t.data);e.$broadcast("ws:"+n.topic,n.data)}},this.send=function(e,t){var n=JSON.stringify({topic:e,data:t});r.send(n)}}]).run(["websocketService",function(e){e.connect()}]),function(){"use strict";function e(e){function t(){e.getPyramids().then(function(e){n.pyramids=e.data})}var n=this;n.pyramids=[],t()}e.$inject=["pyramidsService"],angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/footer.html"};return e}function t(e,t){function n(){t.logout()}var r=this;r.indentity=e,r.logout=n}t.$inject=["identityService","authService"],angular.module("app").directive("kpFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"headerCtrl",restrict:"A",templateUrl:"/common/components/header.html"};return e}function t(e,t,n){function r(){a.sidebarStatus.left=!a.sidebarStatus.left,e.setSidebarStatus(a.sidebarStatus.left)}function i(){n.logout()}var a=this;a.indentity=t,a.logout=i,a.sidebarStatus=e.getSidebarStatus(),a.toggleSidebar=r}t.$inject=["sidebarService","identityService","authService"],angular.module("app").directive("kpHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"/common/components/sidebar.html"};return e}function t(e,t,n){function r(){t.logout()}var i=this;i.indentity=e,i.logout=r,i.sidebarStatus=n.getSidebarStatus()}t.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("kpSidebar",e)}(),function(){"use strict";function e(e){function t(t,n,r){var i=r.scrollaxis||"y",a=r.theme||"minimal-dark",o=r.mousewheelaxis||"y";$("html").hasClass("ismobile")||e.malihuScroll(n,a,i,o)}var n={restrict:"C",link:t};return n}e.$inject=["scrollbarService"],angular.module("app").directive("cOverflow",e)}(),function(){"use strict";function e(){function e(e,t){t.click(function(){t.next().slideToggle(200),t.parent().toggleClass("toggled")})}var t={restrict:"A",link:e};return t}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,t){t.hasClass("btn-icon")||t.hasClass("btn-float")?Waves.attach(t,["waves-circle"]):t.hasClass("btn-light")?Waves.attach(t,["waves-light"]):Waves.attach(t),Waves.init()}var t={restrict:"C",link:e};return t}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,t){var n=t.children().first(),r=t.parent().hasClass("fg-float");n.focus(function(){t.addClass("fg-toggled")}),n.blur(function(){(!r||r&&0===n.val().length)&&t.removeClass("fg-toggled")})}var t={restrict:"C",link:e};return t}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAuY29uZmlnLmpzIiwiYXBwLmNvbnRyb2xsZXIuanMiLCJhcHAucm91dGVzLmpzIiwiYXBwLnJ1bi5qcyIsImNoYWxsZW5nZXMvY29tcG9uZW50cy9hY3RpdmUtY2hhbGxlbmdlcy5kaXJlY3RpdmUuanMiLCJjaGFsbGVuZ2VzL2NvbXBvbmVudHMvY29tcGxldGVkLWNoYWxsZW5nZXMuZGlyZWN0aXZlLmpzIiwiY2hhbGxlbmdlcy9jb21wb25lbnRzL3BsYXllci1vdmVyYWxsLXJlc3VsdHMuZGlyZWN0aXZlLmpzIiwiY2hhbGxlbmdlcy9zZXJ2aWNlcy9jaGFsbGVuZ2VzLnNlcnZpY2UuanMiLCJweXJhbWlkcy9jb21wb25lbnRzL3B5cmFtaWQuZGlyZWN0aXZlLmpzIiwiYXV0aGVudGljYXRpb24vdmlld3MvbG9naW4uY29udHJvbGxlci5qcyIsImF1dGhlbnRpY2F0aW9uL3ZpZXdzL3JlZ2lzdGVyLmNvbnRyb2xsZXIuanMiLCJweXJhbWlkcy9zZXJ2aWNlcy9weXJhbWlkcy5zZXJ2aWNlLmpzIiwicHlyYW1pZHMvdmlld3MvY3JlYXRlLXB5cmFtaWQuY29udHJvbGxlci5qcyIsInB5cmFtaWRzL3ZpZXdzL215LXB5cmFtaWRzLmNvbnRyb2xsZXIuanMiLCJweXJhbWlkcy92aWV3cy9weXJhbWlkLmNvbnRyb2xsZXIuanMiLCJweXJhbWlkcy92aWV3cy9weXJhbWlkcy5jb250cm9sbGVyLmpzIiwicHlyYW1pZHMvdmlld3Mvc3RhdHMuY29udHJvbGxlci5qcyIsImF1dGhlbnRpY2F0aW9uL3NlcnZpY2VzL2F1dGguc2VydmljZS5qcyIsImF1dGhlbnRpY2F0aW9uL3NlcnZpY2VzL3VzZXIuc2VydmljZS5qcyIsImNvbW1vbi9maWx0ZXJzL29yZGVyLW9iamVjdC1ieS5maWx0ZXIuanMiLCJjb21tb24vc2VydmljZXMvaW5kZW50aXR5LnNlcnZpY2UuanMiLCJjb21tb24vc2VydmljZXMvbm90aWZ5LnNlcnZpY2UuanMiLCJjb21tb24vc2VydmljZXMvc2Nyb2xsYmFyLnNlcnZpY2UuanMiLCJjb21tb24vc2VydmljZXMvc2lkZWJhci5zZXJ2aWNlLmpzIiwiY29tbW9uL3NlcnZpY2VzL3dlYnNvY2tldC5zZXJ2aWNlLmpzIiwiY29tbW9uL3ZpZXdzL2hvbWUuY29udHJvbGxlci5qcyIsImNvbW1vbi9jb21wb25lbnRzL2Zvb3Rlci5kaXJlY3RpdmUuanMiLCJjb21tb24vY29tcG9uZW50cy9oZWFkZXIuZGlyZWN0aXZlLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvc2lkZWJhci5kaXJlY3RpdmUuanMiLCJjb21tb24vY29tcG9uZW50cy91aS9zY3JvbGxiYXIuZGlyZWN0aXZlLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvdWkvdG9nZ2xlLXN1Ym1lbnUuZGlyZWN0aXZlLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvdWkvd2F2ZXMuZGlyZWN0aXZlLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvdWkvZm9ybXMvZmctbGluZS5kaXJlY3RpdmUuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZ3VyYXRpb24iLCIkaHR0cFByb3ZpZGVyIiwiJHVpYlRvb2x0aXBQcm92aWRlciIsImRlZmF1bHRzIiwiaGVhZGVycyIsImdldCIsIm9wdGlvbnMiLCJhcHBlbmRUb0JvZHkiLCJjb25maWciLCJBcHBDdHJsIiwiJHN0YXRlIiwiYXBwQ3RybCIsInRoaXMiLCJsb2NrU2lkZWJhciIsImNvbnRyb2xsZXIiLCJjb25maWd1cmVSb3V0ZXMiLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwicm91dGVSb2xlQ2hlY2tzIiwic3VwZXJBZG1pbiIsInJlcXVpcmVTdXBlckFkbWluIiwiYWRtaW4iLCJyZXF1aXJlQWRtaW4iLCJ1c2VyIiwicmVxdWlyZUF1dGgiLCJodG1sNU1vZGUiLCJvdGhlcndpc2UiLCJ3aGVuIiwic3RhdGUiLCJ1cmwiLCJ2aWV3cyIsImNvbnRlbnQiLCJjb250cm9sbGVyQXMiLCJ0ZW1wbGF0ZVVybCIsImNvbnRlbnRAIiwicmVzb2x2ZSIsImF1dGgiLCJhdXRoU2VydmljZSIsImF1dGhvcml6ZUN1cnJlbnRVc2VyRm9yUm91dGUiLCJhdXRoZW50aWNhdGVkVXNlckZvclJvdXRlIiwiJGluamVjdCIsImFwcFJ1biIsIiRyb290U2NvcGUiLCJzaWRlYmFyU2VydmljZSIsIiRvbiIsImV2ZW50IiwidG9TdGF0ZSIsInRvUGFyYW1zIiwiZnJvbVN0YXRlIiwiZnJvbVBhcmFtcyIsImVycm9yIiwiZ28iLCJwcmV2aW91cyIsInNldFNpZGViYXJTdGF0dXMiLCJydW4iLCJrcEFjdGl2ZUNoYWxsZW5lZ2VzIiwiZGlyZWN0aXZlIiwiYmluZFRvQ29udHJvbGxlciIsImN0cmxGdW5jIiwicmVzdHJpY3QiLCJzY29wZSIsImNvbXBldGl0aW9uSWQiLCIkc2NvcGUiLCJjaGFsbGVuZ2VzU2VydmljZSIsImFjdGl2YXRlIiwiZ2V0QWN0aXZlQ2hhbGxlbmdlcyIsInZtIiwiY2hhbGxlbmdlcyIsImdldEFjdGl2ZUNoYWxsZW5nZXNCeUNvbXBldGl0aW9uIiwidGhlbiIsImRhdGEiLCJsZW5ndGgiLCJfIiwiZm9yRWFjaCIsImNoYWxsZW5nZSIsInRpbWVMaW1pdCIsImV4cGlyZXMiLCJtb21lbnQiLCJkaWZmIiwiY3JlYXRlZCIsImFkZCIsImNoYWxsZW5nZURldGFpbHMiLCJrcENvbXBsZXRlZENoYWxsZW5lZ2VzIiwibGltaXQiLCJnZXRDb21wbGV0ZWRDaGFsbGVuZ2VzIiwiZ2V0Q29tcGxldGVkQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24iLCJsb3NlciIsIndpbm5lciIsIndoZW5Db21wbGV0ZWQiLCJjb21wbGV0ZWQiLCJjYWxlbmRhciIsInNhbWVEYXkiLCJuZXh0RGF5IiwibmV4dFdlZWsiLCJsYXN0RGF5IiwibGFzdFdlZWsiLCJzYW1lRWxzZSIsImtwUGxheWVyT3ZlcmFsbFJlc3VsdHMiLCJwbGF5ZXIiLCJsZXZlbHMiLCJub3RpZnlTZXJ2aWNlIiwiZ2V0UGxheWVyT3ZlcmFsbFJlc3VsdHMiLCJfaWQiLCJwbGF5ZXJJZCIsImdldFBsYXllclJlc3VsdHNCeUNvbXBldGl0aW9uIiwicmVzdWx0cyIsImJyZWFrUG9pbnRzIiwiaSIsInB1c2giLCJsZXZlbCIsImoiLCJwb3NpdGlvbiIsImluZGV4T2YiLCJzdHJlYWtUeXBlIiwic3RyZWFrIiwiY29udGludWVTdHJlYWsiLCJjaGFsbGVuZ2VyIiwib3Bwb25lbnQiLCJ0eXBlIiwidmFsdWUiLCJ3aW5zIiwiYXNPcHBvbmVudCIsInNpemUiLCJmaWx0ZXIiLCJhc0NoYWxsZW5nZXIiLCJ0b3RhbCIsImJ5Rm9yZmVpdCIsImZvcmZlaXQiLCJsb3NlcyIsImNoYWxsZW5nZXJJZCIsImluZm8iLCJkZXNjcmlwdGlvbiIsIm9wcG9uZW50SWQiLCIkaHR0cCIsImNyZWF0ZUNoYWxsZW5nZSIsInBvc3QiLCJjb21wbGV0ZUNoYWxsZW5nZSIsImdldENoYWxsZW5nZXNCeUNvbXBldGl0aW9uIiwicGFyYW1zIiwiZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyIiwic2VydmljZSIsImZhY3RvcnkiLCJrcFB5cmFtaWQiLCJyZXBsYWNlIiwicHlyYW1pZHNTZXJ2aWNlIiwiJGZpbHRlciIsImlkZW50aXR5U2VydmljZSIsImdldFB5cmFtaWQiLCJweXJhbWlkIiwib3JkZXJQbGF5ZXJzIiwiZ2V0UGxheWVyc1N0YXR1cyIsImNhbGN1bGF0ZVB5cmFtaWRCbG9ja3MiLCJmaWxsSW5FbXB0eUJsb2NrcyIsImFzc2lnbkxldmVsc1RvUGxheWVycyIsInBsYXllcnMiLCJpc0F1dGhlbnRpY2F0ZWQiLCJjdXJyZW50VXNlciIsImN1cnJlbnRVc2VySXNPblB5cmFtaWQiLCJjbGFzcyIsImN1cnJlbnRVc2VyUGxheWVyIiwiaGFzQWN0aXZlQ2hhbGxlbmdlIiwiZmluZCIsInRpbWVUb0V4cGlyZSIsImZpbmRBdmFpbGFibGVDaGFsbGVuZ2VzIiwiY3JlYXRlQnJlYWtQb2ludHMiLCJudW1iZXJPZkJsb2NrcyIsIm51bWJlck9mUmVhbFBsYXllcnMiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsImxldmVsQWJvdmUiLCJhdmFpbGFibGVDaGFsbGVuZ2VzIiwiYXZhaWxhYmxlIiwiY29tcGV0aXRpb25OYW1lIiwibmFtZSIsImNvbXBsZXRlIiwiZm9yZmVpdERheXMiLCJlbWFpbCIsIm5pY2tuYW1lIiwicHlyYW1pZE1lbnVUb2dnbGUiLCJ3aW5uZXJJc0N1cnJlbnRVc2VyIiwiZm9yZmVpdExvc2VyIiwic3dhcFBvc2l0aW9ucyIsInJlbW92aW5nQ3VycmVudFVzZXIiLCJyZW1vdmVDdXJyZW50VXNlckZyb21QeXJhbWlkIiwiY2hhbGxlbmdlRXhwaXJlZCIsImFkZEN1cnJlbnRVc2VyVG9QeXJhbWlkIiwiYWRkUGxheWVyVG9QeXJhbWlkIiwid2FybmluZyIsImNvbmZpcm1SZW1vdmVDdXJyZW50VXNlckZyb21QeXJhbWlkIiwic3dhbCIsInRpdGxlIiwidGV4dCIsInNob3dDYW5jZWxCdXR0b24iLCJjb25maXJtQnV0dG9uVGV4dCIsImNvbmZpcm1CdXR0b25DbGFzcyIsImNhbmNlbEJ1dHRvblRleHQiLCJjbG9zZU9uQ29uZmlybSIsImNsb3NlT25DYW5jZWwiLCJwIiwib3BlblBvc2l0aW9uIiwicmVtb3ZlZFBsYXllciIsInJlbW92ZSIsInVwZGF0ZWRQbGF5ZXJzIiwidXBkYXRlZFBsYXllciIsInJlbW92ZWRQbGF5ZXJGcm9tUHlyYW1pZCIsInJlZnJlc2hQeXJhbWlkIiwiZGV0YWlscyIsIkxvZ2luQ3RybCIsImxvZ2luIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImF1dGhlbnRpY2F0ZVVzZXIiLCJyZXNwb25zZSIsIlJlZ2lzdGVyQ3RybCIsInJlZ2lzdGVyIiwibmV3VXNlciIsImNvbmZpcm1QYXNzd29yZCIsImNyZWF0ZVVzZXIiLCJnZXRQeXJhbWlkc0ZvclVzZXIiLCJ1c2VySWQiLCJnZXRQeXJhbWlkcyIsImNyZWF0ZVB5cmFtaWQiLCJDcmVhdGVQeXJhbWlkQ3RybCIsInVzZXJTZXJ2aWNlIiwiZ2V0QWxsVXNlcnMiLCJ1c2VycyIsImF2YWlsYWJsZVBsYXllcnMiLCJhZGRQbGF5ZXIiLCJhZGRlZFBsYXllcnMiLCJhbGxvd2VkUGxheWVycyIsImFkZGVkUGxheWVyQWRkZWQiLCJyZW1vdmVQbGF5ZXIiLCJ1cGRhdGVBbGxvd2VkUGxheWVycyIsInJlbW92ZWRQbGF5ZXJzIiwic3BsaWNlIiwiY29uY2F0IiwibmV3UHlyYW1pZCIsIiR3YXRjaCIsIm5ld1ZhbCIsIm9sZFZhbCIsIk15UHlyYW1pZHNDdHJsIiwicHlyYW1pZHMiLCJQeXJhbWlkQ3RybCIsIiRzdGF0ZVBhcmFtcyIsIlB5cmFtaWRzQ3RybCIsIlN0YXRzQ3RybCIsIiRxIiwiZGZkIiwiZGVmZXIiLCJzdWNjZXNzIiwicHJvbWlzZSIsInVzZXJEYXRhIiwibG9nb3V0IiwidW5kZWZpbmVkIiwicm9sZSIsImlzQXV0aG9yaXplZCIsInJlamVjdCIsIm9yZGVyT2JqZWN0QnkiLCJpbnB1dCIsImF0dHJpYnV0ZSIsImlzT2JqZWN0IiwiYXJyYXkiLCJvYmplY3RLZXkiLCJzb3J0IiwiYSIsImIiLCJwYXJzZUludCIsIiR3aW5kb3ciLCJyb2xlcyIsImJvb3RzdHJhcHBlZFVzZXJPYmplY3QiLCJtZXNzYWdlIiwidGFyZ2V0IiwiJCIsIm5vdGlmeSIsImludmVyc2UiLCJub3RpZnlEZWZhdWx0cyIsIm5ld2VzdF9vbl90b3AiLCJvZmZzZXQiLCJ4IiwieSIsInNjcm9sbGJhclNlcnZpY2UiLCJtYWxpaHVTY3JvbGwiLCJzZWxlY3RvciIsInRoZW1lIiwic2Nyb2xsYXhpcyIsIm1vdXNld2hlZWxheGlzIiwibUN1c3RvbVNjcm9sbGJhciIsInNjcm9sbEluZXJ0aWEiLCJheGlzIiwibW91c2VXaGVlbCIsImVuYWJsZSIsInByZXZlbnREZWZhdWx0IiwiZ2V0U2lkZWJhclN0YXR1cyIsInNpZGViYXJTdGF0dXMiLCJzdGF0dXMiLCJsZWZ0IiwicmlnaHQiLCJ3ZWJzb2NrZXRIb3N0IiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3QiLCJjb25uZWN0aW9uIiwiY29ubmVjdCIsIldlYlNvY2tldCIsIm9ubWVzc2FnZSIsImUiLCJwYXlsb2FkIiwiSlNPTiIsInBhcnNlIiwiJGJyb2FkY2FzdCIsInRvcGljIiwic2VuZCIsImpzb24iLCJzdHJpbmdpZnkiLCJ3ZWJzb2NrZXRTZXJ2aWNlIiwiSG9tZUN0cmwiLCJrcEZvb3RlciIsImluZGVudGl0eSIsImtwSGVhZGVyIiwidG9nZ2xlU2lkZWJhciIsImtwU2lkZWJhciIsImNPdmVyZmxvdyIsImxpbmtGdW5jIiwiZWxlbWVudCIsImF0dHJzIiwiaGFzQ2xhc3MiLCJsaW5rIiwidG9nZ2xlU3VibWVudSIsImVsIiwiY2xpY2siLCJuZXh0Iiwic2xpZGVUb2dnbGUiLCJwYXJlbnQiLCJ0b2dnbGVDbGFzcyIsIndhdmVzRWZmZWN0IiwiV2F2ZXMiLCJhdHRhY2giLCJpbml0IiwiZmdMaW5lIiwiY2hpbGRyZW4iLCJmaXJzdCIsImlzRmxvYXRMYWJlbCIsImZvY3VzIiwiYWRkQ2xhc3MiLCJibHVyIiwidmFsIiwicmVtb3ZlQ2xhc3MiXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFBQyxPQUFBLE9BQ0EsWUFDQSxlQUNBLFlBQ0Esc0JBQ0EsYUFDQSx3QkFDQSxRQUNBLHFCQ1JBLHdCQUlBLFNBQUFDLEdBQUFDLEVBQUFDLEdBRUFELEVBQUFFLFNBQUFDLFFBQUFDLE1BQ0FKLEVBQUFFLFNBQUFDLFFBQUFDLFFBR0FKLEVBQUFFLFNBQUFDLFFBQUFDLElBQUEscUJBQUEsZ0NBRUFKLEVBQUFFLFNBQUFDLFFBQUFDLElBQUEsaUJBQUEsV0FDQUosRUFBQUUsU0FBQUMsUUFBQUMsSUFBQSxPQUFBLFdBRUFILEVBQUFJLFNBQUFDLGNBQUEsc0RBYkFULFFBQUFDLE9BQUEsT0FBQVMsT0FBQVIsTUNGQSx1QkFJQSxTQUFBUyxHQUFBQyxHQUNBLEdBQUFDLEdBQUFDLElBRUFELEdBQUFELE9BQUFBLEVBR0FDLEVBQUFFLGFBQUEsdUJBUkFmLFFBQUFDLE9BQUEsT0FBQWUsV0FBQSxVQUFBTCxNQ0ZBLHVCQUlBLFNBQUFNLEdBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsR0FBQUMsSUFDQUMsV0FBQUMsRUFDQUMsTUFBQUMsRUFDQUMsS0FBQUMsRUFHQVAsR0FBQVEsV0FBQSxHQUdBVCxFQUFBVSxVQUFBLEtBRUFWLEVBQUFXLEtBQUEsYUFBQSxhQUVBWixFQUNBYSxNQUFBLFFBQ0FDLElBQUEsSUFDQUMsT0FDQUMsU0FDQWxCLFdBQUEsV0FDQW1CLGFBQUEsS0FDQUMsWUFBQSw2QkFHQUwsTUFBQSxZQUNBQyxJQUFBLFlBQ0FDLE9BQ0FDLFNBQ0FsQixXQUFBLGVBQ0FtQixhQUFBLEtBQ0FDLFlBQUEsbUNBR0FMLE1BQUEsdUJBQ0FDLElBQUEsZUFDQUMsT0FDQUksWUFDQXJCLFdBQUEsaUJBQ0FtQixhQUFBLEtBQ0FDLFlBQUEsb0NBR0FFLFNBQ0FDLEtBQUFsQixFQUFBSyxRQUVBSyxNQUFBLGlCQUNBQyxJQUFBLHVCQUNBQyxPQUNBSSxZQUNBckIsV0FBQSxjQUNBbUIsYUFBQSxLQUNBQyxZQUFBLGtDQUdBTCxNQUFBLGtCQUNBQyxJQUFBLHdCQUNBQyxPQUNBSSxZQUNBckIsV0FBQSxZQUNBbUIsYUFBQSxLQUNBQyxZQUFBLGdDQUdBTCxNQUFBLG1CQUNBQyxJQUFBLFVBQ0FDLE9BQ0FJLFlBQ0FyQixXQUFBLG9CQUNBbUIsYUFBQSxLQUNBQyxZQUFBLHVDQUdBRSxTQUNBQyxLQUFBbEIsRUFBQUssUUFFQUssTUFBQSxTQUNBQyxJQUFBLFNBQ0FDLE9BQ0FDLFNBQ0FsQixXQUFBLFlBQ0FtQixhQUFBLEtBQ0FDLFlBQUEsc0NBR0FMLE1BQUEsWUFDQUMsSUFBQSxZQUNBQyxPQUNBQyxTQUNBbEIsV0FBQSxlQUNBbUIsYUFBQSxLQUNBQyxZQUFBLHlDQVFBLFFBQUFYLEdBQUFlLEdBQ0EsTUFBQUEsR0FBQUMsNkJBQUEsU0FLQSxRQUFBbEIsR0FBQWlCLEdBQ0EsTUFBQUEsR0FBQUMsNkJBQUEsZUFLQSxRQUFBZCxHQUFBYSxHQUNBLE1BQUFBLEdBQUFFLGtHQWpIQTFDLFFBQUFDLE9BQUEsT0FBQVMsT0FBQU8sR0FrR0FRLEVBQUFrQixTQUFBLGVBTUFwQixFQUFBb0IsU0FBQSxlQU1BaEIsRUFBQWdCLFNBQUEsa0JDaEhBLHVCQUlBLFNBQUFDLEdBQUFDLEVBQUFqQyxFQUFBa0MsR0FDQUQsRUFBQUUsSUFBQSxvQkFBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLG1CQUFBQSxJQUNBekMsRUFBQTBDLEdBQUEsU0FDQTFDLEVBQUEyQyxTQUFBTixLQUlBSixFQUFBRSxJQUFBLG9CQUFBLFdBQ0FELEVBQUFVLGtCQUFBLHdEQVhBeEQsUUFBQUMsT0FBQSxPQUFBd0QsSUFBQWIsTUNGQSxXQUNBLFlBTUEsU0FBQWMsS0FDQSxHQUFBQyxJQUNBQyxrQkFBQSxFQUNBNUMsV0FBQTZDLEVBQ0ExQixhQUFBLEtBQ0EyQixTQUFBLElBQ0FDLE9BQ0FDLGNBQUEsS0FFQTVCLFlBQUEsZ0RBRUEsT0FBQXVCLEdBSUEsUUFBQUUsR0FBQUksRUFBQUMsR0FNQSxRQUFBQyxLQUNBQyxJQUdBLFFBQUFBLEtBQ0FDLEVBQUFDLGNBQ0FKLEVBQUFLLGlDQUFBRixFQUFBTCxlQUFBUSxLQUFBLFNBQUFGLEdBQ0FBLEVBQUFHLEtBQUFDLE9BQUEsSUFDQUwsRUFBQUMsV0FBQUEsRUFBQUcsS0FDQUUsRUFBQUMsUUFBQVAsRUFBQUMsV0FBQSxTQUFBTyxHQUNBLElBQUFBLEVBQUFDLFlBQ0FELEVBQUFFLFFBQUFDLFNBQUFDLEtBQUFELE9BQUFILEVBQUFLLFNBQUFDLElBQUFOLEVBQUFDLFVBQUEsS0FBQSxNQUFBLFFBaEJBLEdBQUFULEdBQUF2RCxJQUNBdUQsR0FBQUMsY0FFQUgsSUFxQkFGLEVBQUFsQixJQUFBLHVCQUFBLFNBQUE0QixFQUFBUyxHQUNBZixFQUFBTCxnQkFBQW9CLEVBQUFwQixlQUNBSSxNQUtBSCxFQUFBbEIsSUFBQSx5QkFBQSxTQUFBNEIsRUFBQVMsR0FDQWYsRUFBQUwsZ0JBQUFvQixFQUFBcEIsZUFDQUksK0NBckRBcEUsUUFDQUMsT0FBQSxPQUNBMEQsVUFBQSxzQkFBQUQsTUNMQSxXQUNBLFlBTUEsU0FBQTJCLEtBQ0EsR0FBQTFCLElBQ0FDLGtCQUFBLEVBQ0E1QyxXQUFBNkMsRUFDQTFCLGFBQUEsS0FDQTJCLFNBQUEsSUFDQUMsT0FDQUMsY0FBQSxJQUNBc0IsTUFBQSxLQUVBbEQsWUFBQSxtREFFQSxPQUFBdUIsR0FJQSxRQUFBRSxHQUFBSSxFQUFBQyxHQU1BLFFBQUFDLEtBQ0FvQixJQUdBLFFBQUFBLEtBQ0FsQixFQUFBQyxjQUNBSixFQUFBc0Isb0NBQUFuQixFQUFBTCxjQUFBSyxFQUFBaUIsT0FBQWQsS0FBQSxTQUFBRixHQUNBQSxFQUFBRyxLQUFBQyxPQUFBLElBQ0FMLEVBQUFDLFdBQUFBLEVBQUFHLEtBQ0FFLEVBQUFDLFFBQUFQLEVBQUFDLFdBQUEsU0FBQU8sR0FDQUEsRUFBQVksTUFBQSxlQUFBWixFQUFBYSxPQUFBLFdBQUEsYUFDQWIsRUFBQWMsY0FBQVgsT0FBQUgsRUFBQWUsV0FBQUMsU0FBQSxNQUNBQyxRQUFBLFVBQ0FDLFFBQUEsYUFDQUMsU0FBQSxPQUNBQyxRQUFBLGNBQ0FDLFNBQUEsY0FDQUMsU0FBQSxvQkF0QkEsR0FBQTlCLEdBQUF2RCxJQUNBdUQsR0FBQUMsY0FFQUgsSUEyQkFGLEVBQUFsQixJQUFBLHlCQUFBLFNBQUE0QixFQUFBUyxHQUNBZixFQUFBTCxnQkFBQW9CLEVBQUFwQixlQUNBdUIsK0NBckRBdkYsUUFDQUMsT0FBQSxPQUNBMEQsVUFBQSx5QkFBQTBCLE1DTEEsV0FDQSxZQU1BLFNBQUFlLEtBQ0EsR0FBQXpDLElBQ0FDLGtCQUFBLEVBQ0E1QyxXQUFBNkMsRUFDQTFCLGFBQUEsS0FDQTJCLFNBQUEsSUFDQUMsT0FDQUMsY0FBQSxJQUNBcUMsT0FBQSxJQUNBQyxPQUFBLEtBRUFsRSxZQUFBLHFEQUVBLE9BQUF1QixHQUlBLFFBQUFFLEdBQUFJLEVBQUFDLEVBQUFxQyxHQXFCQSxRQUFBcEMsS0FDQXFDLEVBQUFuQyxFQUFBTCxjQUFBSyxFQUFBZ0MsT0FBQUksS0FHQSxRQUFBRCxHQUFBeEMsRUFBQTBDLEdBQ0F4QyxFQUFBeUMsOEJBQUEzQyxFQUFBMEMsR0FBQWxDLEtBQUEsU0FBQW9DLEdBSUEsSUFBQSxHQURBQyxNQUNBQyxFQUFBLEVBQUFBLEVBQUF6QyxFQUFBaUMsT0FBQVEsSUFDQUQsRUFBQUUsS0FBQUQsR0FBQUEsRUFBQSxHQUFBLEVBQUEsRUFJQXpDLEdBQUFnQyxPQUFBVyxNQUFBSCxFQUFBbkMsTUFFQSxLQUFBLEdBQUF1QyxHQUFBLEVBQUFBLEVBQUFKLEVBQUFuQyxPQUFBdUMsSUFDQSxHQUFBNUMsRUFBQWdDLE9BQUFhLFNBQUFMLEVBQUFJLEVBQUEsR0FBQSxDQUNBNUMsRUFBQWdDLE9BQUFXLE1BQUFILEVBQUFNLFFBQUFOLEVBQUFJLElBQUEsQ0FDQSxPQUtBLEdBRUFHLEdBRkFDLEVBQUEsRUFDQUMsR0FBQSxDQUVBM0MsR0FBQUMsUUFBQWdDLEVBQUFuQyxLQUFBLFNBQUFJLEdBQ0F5QyxJQUVBLGVBQUF6QyxFQUFBYSxRQUFBYixFQUFBMEMsV0FBQWQsTUFBQUMsR0FDQSxhQUFBN0IsRUFBQWEsUUFBQWIsRUFBQTJDLFNBQUFmLE1BQUFDLEVBRUEsV0FBQVUsR0FDQUMsR0FBQSxFQUNBRCxFQUFBLFdBRUFFLEdBQUEsR0FHQSxhQUFBekMsRUFBQWEsUUFBQWIsRUFBQTBDLFdBQUFkLE1BQUFDLEdBQ0EsZUFBQTdCLEVBQUFhLFFBQUFiLEVBQUEyQyxTQUFBZixNQUFBQyxLQUVBLFlBQUFVLEdBQ0FDLEdBQUEsRUFDQUQsRUFBQSxVQUVBRSxHQUFBLElBSUFqRCxFQUFBZ0QsUUFDQUksS0FBQUwsRUFDQU0sTUFBQUwsS0FLQWhELEVBQUFzRCxLQUFBQyxXQUFBakQsRUFBQWtELEtBQUFsRCxFQUFBbUQsT0FBQWxCLEVBQUFuQyxLQUFBLFNBQUFJLEdBQ0EsTUFDQUEsR0FBQTJDLFNBQUFmLE1BQUFDLEdBQUEsYUFBQTdCLEVBQUFhLFVBSUFyQixFQUFBc0QsS0FBQUksYUFBQXBELEVBQUFrRCxLQUFBbEQsRUFBQW1ELE9BQUFsQixFQUFBbkMsS0FBQSxTQUFBSSxHQUNBLE1BQ0FBLEdBQUEwQyxXQUFBZCxNQUFBQyxHQUFBLGVBQUE3QixFQUFBYSxVQUlBckIsRUFBQXNELEtBQUFLLE1BQUEzRCxFQUFBc0QsS0FBQUksYUFBQTFELEVBQUFzRCxLQUFBQyxXQUVBdkQsRUFBQXNELEtBQUFNLFVBQUF0RCxFQUFBa0QsS0FBQWxELEVBQUFtRCxPQUFBbEIsRUFBQW5DLEtBQUEsU0FBQUksR0FDQSxNQUNBQSxHQUFBcUQsVUFBQXJELEVBQUEwQyxXQUFBZCxNQUFBQyxHQUFBLGVBQUE3QixFQUFBYSxRQUNBYixFQUFBMkMsU0FBQWYsTUFBQUMsR0FBQSxhQUFBN0IsRUFBQWEsV0FJQXJCLEVBQUE4RCxNQUFBUCxXQUFBakQsRUFBQWtELEtBQUFsRCxFQUFBbUQsT0FBQWxCLEVBQUFuQyxLQUFBLFNBQUFJLEdBQ0EsTUFDQUEsR0FBQTJDLFNBQUFmLE1BQUFDLEdBQUEsZUFBQTdCLEVBQUFhLFVBSUFyQixFQUFBOEQsTUFBQUosYUFBQXBELEVBQUFrRCxLQUFBbEQsRUFBQW1ELE9BQUFsQixFQUFBbkMsS0FBQSxTQUFBSSxHQUNBLE1BQ0FBLEdBQUEwQyxXQUFBZCxNQUFBQyxHQUFBLGFBQUE3QixFQUFBYSxVQUlBckIsRUFBQThELE1BQUFILE1BQUEzRCxFQUFBOEQsTUFBQUosYUFBQTFELEVBQUE4RCxNQUFBUCxXQUVBdkQsRUFBQThELE1BQUFGLFVBQUF0RCxFQUFBa0QsS0FBQWxELEVBQUFtRCxPQUFBbEIsRUFBQW5DLEtBQUEsU0FBQUksR0FDQSxNQUNBQSxHQUFBcUQsVUFBQXJELEVBQUEwQyxXQUFBZCxNQUFBQyxHQUFBLGFBQUE3QixFQUFBYSxRQUNBYixFQUFBMkMsU0FBQWYsTUFBQUMsR0FBQSxlQUFBN0IsRUFBQWEsYUFwSEEsR0FBQXJCLEdBQUF2RCxJQUNBdUQsR0FBQXNELE1BQ0FLLE1BQUEsRUFDQUQsYUFBQSxFQUNBSCxXQUFBLEVBQ0FLLFVBQUEsR0FFQTVELEVBQUE4RCxPQUNBSCxNQUFBLEVBQ0FELGFBQUEsRUFDQUgsV0FBQSxFQUNBSyxVQUFBLEdBRUE1RCxFQUFBZ0QsUUFDQUksS0FBQSxLQUNBQyxNQUFBLEdBR0F2RCxJQXlHQUYsRUFBQWxCLElBQUEseUJBQUEsU0FBQTRCLEVBQUFTLEdBQ0FmLEVBQUFMLGdCQUFBb0IsRUFBQXBCLGdCQUNBSyxFQUFBZ0MsT0FBQUksTUFBQXJCLEVBQUFnRCxjQUNBN0IsRUFBQThCLEtBQUFqRCxFQUFBa0QsYUFDQTlCLEVBQUFwQixFQUFBcEIsY0FBQW9CLEVBQUFnRCxlQUNBL0QsRUFBQWdDLE9BQUFJLE1BQUFyQixFQUFBbUQsWUFDQS9CLEVBQUFwQixFQUFBcEIsY0FBQW9CLEVBQUFtRCx3RUF2SkF2SSxRQUNBQyxPQUFBLE9BQ0EwRCxVQUFBLHlCQUFBeUMsTUNMQSx1QkFNQSxTQUFBbEMsR0FBQXNFLEdBYUEsUUFBQUMsR0FBQTVELEdBQ0EsTUFBQTJELEdBQUFFLEtBQUEsMEJBQ0E3RCxVQUFBQSxJQUlBLFFBQUE4RCxHQUFBOUQsR0FDQSxNQUFBMkQsR0FBQUUsS0FBQSw0QkFDQTdELFVBQUFBLElBSUEsUUFBQStELEdBQUE1RSxHQUNBLE1BQUF3RSxHQUFBakksSUFBQSwrQkFDQXNJLFFBQ0E3RSxjQUFBQSxLQUtBLFFBQUFPLEdBQUFQLEdBQ0EsTUFBQXdFLEdBQUFqSSxJQUFBLHNDQUNBc0ksUUFDQTdFLGNBQUFBLEtBS0EsUUFBQThFLEdBQUE5RSxFQUFBMEMsR0FDQSxNQUFBOEIsR0FBQWpJLElBQUEsNkNBQ0FzSSxRQUNBN0UsY0FBQUEsRUFDQTBDLFNBQUFBLEtBS0EsUUFBQWxCLEdBQUF4QixFQUFBc0IsR0FDQSxNQUFBa0QsR0FBQWpJLElBQUEseUNBQ0FzSSxRQUNBN0UsY0FBQUEsRUFDQXNCLE1BQUFBLEtBS0EsUUFBQXFCLEdBQUEzQyxFQUFBMEMsR0FDQSxNQUFBOEIsR0FBQWpJLElBQUEsOENBQ0FzSSxRQUNBN0UsY0FBQUEsRUFDQTBDLFNBQUFBLEtBOURBLEdBQUFxQyxJQUNBTixnQkFBQUEsRUFDQUUsa0JBQUFBLEVBQ0FDLDJCQUFBQSxFQUNBckUsaUNBQUFBLEVBQ0F1RSx3Q0FBQUEsRUFDQXRELG9DQUFBQSxFQUNBbUIsOEJBQUFBLEVBR0EsT0FBQW9DLHVCQWZBL0ksUUFDQUMsT0FBQSxPQUNBK0ksUUFBQSxvQkFBQTlFLE1DSkEsdUJBTUEsU0FBQStFLEtBQ0EsR0FBQXRGLElBQ0FHLFNBQUEsSUFDQTFCLFlBQUEsb0NBQ0E4RyxTQUFBLEVBQ0FuRixPQUNBQyxjQUFBLEtBRUFoRCxXQUFBNkMsRUFDQTFCLGFBQUEsS0FDQXlCLGtCQUFBLEVBR0EsT0FBQUQsR0FJQSxRQUFBRSxHQUFBSSxFQUFBckQsRUFBQXVJLEVBQUFDLEVBQUE3QyxFQUFBOEMsRUFBQW5GLEdBbUJBLFFBQUFDLEtBQ0FnRixFQUFBRyxXQUFBakYsRUFBQUwsZUFBQVEsS0FBQSxTQUFBK0UsR0FDQWxGLEVBQUFrRixRQUFBQSxFQUFBOUUsS0FHQUosRUFBQWlDLFNBQ0EsS0FBQSxHQUFBUSxHQUFBLEVBQUFBLEdBQUF5QyxFQUFBOUUsS0FBQTZCLFNBQUFRLEVBQ0F6QyxFQUFBaUMsT0FBQVMsS0FBQUQsRUFHQTBDLEtBQ0FDLElBQ0FDLElBQ0FDLElBQ0FDLE1BT0EsUUFBQUosS0FDQW5GLEVBQUFrRixRQUFBTSxRQUFBVCxFQUFBLFdBQUEvRSxFQUFBa0YsUUFBQU0sUUFBQSxZQU1BLFFBQUFKLEtBQ0E5RSxFQUFBQyxRQUFBUCxFQUFBa0YsUUFBQU0sUUFBQSxTQUFBeEQsR0FHQWdELEVBQUFTLG1CQUFBekQsRUFBQUksTUFBQTRDLEVBQUFVLFlBQUF0RCxNQUNBcEMsRUFBQTJGLHdCQUFBLEVBQ0EzRCxFQUFBNEQsTUFBQSxlQUNBNUYsRUFBQTZGLGtCQUFBN0QsRUFFQW5DLEVBQUE0RSx3Q0FBQXpFLEVBQUFMLGNBQUFxQyxFQUFBSSxLQUFBakMsS0FBQSxTQUFBSyxHQUNBQSxFQUFBSixPQUNBSixFQUFBOEYsb0JBQUEsUUFNQWpHLEVBQUFLLGlDQUFBRixFQUFBTCxlQUFBUSxLQUFBLFNBQUFGLEdBQ0FLLEVBQUFDLFFBQUFOLEVBQUFHLEtBQUEsU0FBQUksR0FFQSxHQUFBMEMsR0FBQTVDLEVBQUF5RixLQUFBL0YsRUFBQWtGLFFBQUFNLFNBQUFwRCxJQUFBNUIsRUFBQTBDLFdBQUFkLEtBQ0FjLEdBQUEwQyxNQUFBLGNBQ0ExQyxFQUFBMUMsV0FDQXFDLFNBQUEsYUFHQSxJQUFBTSxHQUFBN0MsRUFBQXlGLEtBQUEvRixFQUFBa0YsUUFBQU0sU0FBQXBELElBQUE1QixFQUFBMkMsU0FBQWYsS0FPQSxJQU5BZSxFQUFBeUMsTUFBQSxjQUNBekMsRUFBQTNDLFdBQ0FxQyxTQUFBLFlBSUEsSUFBQXJDLEVBQUFDLFVBQUEsQ0FDQSxHQUFBdUYsR0FBQXJGLFNBQUFDLEtBQUFELE9BQUFILEVBQUFLLFNBQUFDLElBQUFOLEVBQUFDLFVBQUEsS0FBQSxNQUFBLENBRUF1RixHQUFBLEVBQ0E3QyxFQUFBM0MsVUFBQUUsUUFBQXNGLEVBRUFBLEdBQUEsR0FDQTFCLEVBQUEsTUFBQSxFQUFBbkIsTUFNQThDLE1BT0EsUUFBQUMsS0FDQWxHLEVBQUF3QyxjQUNBLEtBQUEsR0FBQUMsR0FBQSxFQUFBQSxFQUFBekMsRUFBQWtGLFFBQUFqRCxPQUFBUSxJQUNBekMsRUFBQXdDLFlBQUFFLEtBQUFELEdBQUFBLEVBQUEsR0FBQSxFQUFBLEdBS0EsUUFBQTRDLEtBQ0FyRixFQUFBbUcsZUFBQSxDQUNBLEtBQUEsR0FBQTFELEdBQUF6QyxFQUFBa0YsUUFBQWpELE9BQUFRLEVBQUEsRUFBQUEsSUFDQXpDLEVBQUFtRyxnQkFBQTFELEVBS0EsUUFBQTZDLEtBQ0F0RixFQUFBb0csb0JBQUFwRyxFQUFBa0YsUUFBQU0sUUFBQW5GLE1BQ0EsS0FBQSxHQUFBb0MsR0FBQXpDLEVBQUFrRixRQUFBTSxRQUFBbkYsT0FBQW9DLEVBQUF6QyxFQUFBbUcsZUFBQTFELElBQ0F6QyxFQUFBa0YsUUFBQU0sUUFBQTlDLE1BQ0EyRCxVQUFBLFFBQ0FDLFNBQUEsT0FDQXpELFNBQUEsR0FDQStDLE1BQUEsVUFPQSxRQUFBTCxLQUNBLEdBQUE1QyxHQUFBLENBQ0F1RCxJQUNBLEtBQUEsR0FBQXpELEdBQUEsRUFBQUEsRUFBQXpDLEVBQUFrRixRQUFBTSxRQUFBbkYsT0FBQW9DLElBQ0F6QyxFQUFBd0MsWUFBQU0sUUFBQUwsRUFBQSxJQUFBLElBQ0FFLEdBQUEsR0FFQTNDLEVBQUFrRixRQUFBTSxRQUFBL0MsR0FBQUUsTUFBQUEsRUFLQSxRQUFBc0QsS0FDQSxHQUFBTSxHQUFBdkcsRUFBQTZGLGtCQUFBbEQsTUFBQSxFQUFBM0MsRUFBQTZGLGtCQUFBbEQsTUFBQSxFQUFBLElBQ0FyQyxHQUFBQyxRQUFBUCxFQUFBa0YsUUFBQU0sUUFBQSxTQUFBeEQsR0FDQUEsRUFBQVcsUUFBQTRELEdBQUEsS0FBQXZFLEVBQUFhLFVBQUEsZ0JBQUFiLEVBQUE0RCxRQUNBNUYsRUFBQXdHLHFCQUFBLEVBQ0F4RSxFQUFBeUUsV0FBQSxLQUtBLFFBQUFyQyxHQUFBcEMsR0FDQSxHQUFBQSxFQUFBeUUsVUFFQSxDQUNBekcsRUFBQThGLG9CQUFBLENBQ0EsSUFBQXRGLElBQ0FrRyxnQkFBQTFHLEVBQUFrRixRQUFBeUIsS0FDQWhILGNBQUFLLEVBQUFMLGNBQ0FpSCxVQUFBLEVBQ0EvQyxTQUFBLEVBQ0FwRCxVQUFBVCxFQUFBa0YsUUFBQTJCLFlBQ0EzRCxZQUNBZCxJQUFBcEMsRUFBQTZGLGtCQUFBekQsSUFDQTBFLE1BQUE5RyxFQUFBNkYsa0JBQUFpQixNQUNBVCxVQUFBckcsRUFBQTZGLGtCQUFBUSxVQUNBQyxTQUFBdEcsRUFBQTZGLGtCQUFBUyxTQUNBUyxTQUFBL0csRUFBQTZGLGtCQUFBa0IsU0FDQWxFLFNBQUE3QyxFQUFBNkYsa0JBQUFoRCxVQUVBTSxVQUNBZixJQUFBSixFQUFBSSxJQUNBMEUsTUFBQTlFLEVBQUE4RSxNQUNBVCxVQUFBckUsRUFBQXFFLFVBQ0FDLFNBQUF0RSxFQUFBc0UsU0FDQVMsU0FBQS9FLEVBQUErRSxTQUNBbEUsU0FBQWIsRUFBQWEsVUFLQWhELEdBQUF1RSxnQkFBQTVELEdBQUFMLEtBQUEsV0FDQUgsRUFBQWdILG1CQUFBLFFBN0JBOUUsR0FBQWxELE1BQUEseUNBd0NBLFFBQUFzRixHQUFBMkMsRUFBQXBELEVBQUFxRCxHQUNBLEdBQUFsRixHQUFBa0YsR0FBQWxILEVBQUE2RixpQkFDQWhHLEdBQUE0RSx3Q0FBQXpFLEVBQUFMLGNBQUFxQyxFQUFBSSxLQUFBakMsS0FBQSxTQUFBSyxHQUNBUixFQUFBOEYsb0JBQUEsQ0FFQSxJQUFBcUIsSUFBQSxDQUdBdEQsSUFDQXJELEVBQUFKLEtBQUF5RCxTQUFBLEVBQ0EsYUFBQXFELEVBQUExRyxVQUFBcUMsVUFDQXJDLEVBQUFKLEtBQUFpQixPQUFBLGFBQ0E4RixHQUFBLEdBRUEzRyxFQUFBSixLQUFBaUIsT0FBQSxZQUdBNEYsRUFDQXpHLEVBQUFKLEtBQUE4QyxXQUFBZCxNQUFBcEMsRUFBQTZGLGtCQUFBekQsS0FDQTVCLEVBQUFKLEtBQUFpQixPQUFBLGFBQ0E4RixHQUFBLEdBRUEzRyxFQUFBSixLQUFBaUIsT0FBQSxXQUdBYixFQUFBSixLQUFBOEMsV0FBQWQsTUFBQXBDLEVBQUE2RixrQkFBQXpELElBQ0E1QixFQUFBSixLQUFBaUIsT0FBQSxZQUVBYixFQUFBSixLQUFBaUIsT0FBQSxhQUNBOEYsR0FBQSxHQU1BQSxFQUNBckMsRUFBQXFDLGNBQUFuSCxFQUFBTCxjQUFBYSxFQUFBSixLQUFBK0MsU0FBQTNDLEVBQUFKLEtBQUE4QyxZQUFBL0MsS0FBQSxXQUNBTixFQUFBeUUsa0JBQUE5RCxFQUFBSixNQUFBRCxLQUFBLFdBQ0FpSCxHQUNBQyxRQUtBeEgsRUFBQXlFLGtCQUFBOUQsRUFBQUosTUFBQUQsS0FBQSxXQUNBaUgsR0FDQUMsTUFLQXJILEVBQUFnSCxtQkFBQSxJQU9BLFFBQUFNLEdBQUF0RixHQUNBc0MsRUFBQSxNQUFBLEVBQUF0QyxHQU1BLFFBQUF1RixLQUNBLEdBQUF2QyxFQUFBUyxrQkFDQSxHQUFBekYsRUFBQW9HLG9CQUFBcEcsRUFBQW1HLGVBQUEsQ0FDQSxHQUFBbkUsSUFDQUksSUFBQTRDLEVBQUFVLFlBQUF0RCxJQUNBaUUsVUFBQXJCLEVBQUFVLFlBQUFXLFVBQ0FDLFNBQUF0QixFQUFBVSxZQUFBWSxTQUNBekQsU0FBQTdDLEVBQUFvRyxvQkFBQSxFQUVBdEIsR0FBQTBDLG1CQUFBeEgsRUFBQUwsY0FBQXFDLE9BRUFFLEdBQUF1RixRQUFBLG1DQUdBbEwsR0FBQTBDLEdBQUEsU0FJQSxRQUFBeUksS0FDQUMsTUFDQUMsTUFBQSxpQkFDQUMsS0FBQSw2REFDQXpFLEtBQUEsUUFDQTBFLGtCQUFBLEVBQ0FDLGtCQUFBLGFBQ0FDLG1CQUFBLGFBQ0FDLGlCQUFBLFdBQ0FDLGdCQUFBLEVBQ0FDLGVBQUEsR0FDQSxXQUNBZCxJQUNBTSxLQUFBLGlCQUFBLHdDQUFBLGFBT0EsUUFBQU4sS0FFQXJDLEVBQUFTLG1CQUFBekYsRUFBQTJGLHlCQUNBeUIsR0FBQSxFQUVBcEgsRUFBQThGLG1CQUNBeEIsRUFBQSxNQUFBLEVBQUF0RSxFQUFBNkYsb0JBR0E3RixFQUFBMkYsd0JBQUEsRUFDQTNGLEVBQUE4RixvQkFBQSxFQUdBaEIsRUFBQUcsV0FBQWpGLEVBQUFMLGVBQUFRLEtBQUEsU0FBQWlJLEdBR0EsR0FBQWxELEdBQUFrRCxFQUFBaEksS0FHQWlJLEVBQUFySSxFQUFBNkYsa0JBQUFoRCxRQUdBdkMsR0FBQUMsUUFBQTJFLEVBQUFNLFFBQUEsU0FBQXhELEdBQ0FBLEVBQUFhLFVBQUF3RixJQUNBckcsRUFBQWEsVUFBQSxJQVlBLEtBQUEsR0FQQXlGLEdBQUFoSSxFQUFBaUksT0FBQXJELEVBQUFNLFFBQUEsU0FBQXhELEdBQ0EsTUFBQUEsR0FBQUksTUFBQXBDLEVBQUE2RixrQkFBQXpELE1BS0FvRyxLQUNBL0YsRUFBQSxFQUFBQSxFQUFBekMsRUFBQW9HLG9CQUFBLElBQUEzRCxFQUFBLENBQ0EsR0FBQWdHLElBQ0FyRyxJQUFBOEMsRUFBQU0sUUFBQS9DLEdBQUFMLElBQ0FpRSxVQUFBbkIsRUFBQU0sUUFBQS9DLEdBQUE0RCxVQUNBQyxTQUFBcEIsRUFBQU0sUUFBQS9DLEdBQUE2RCxTQUNBekQsU0FBQXFDLEVBQUFNLFFBQUEvQyxHQUFBSSxTQUdBMkYsR0FBQTlGLEtBQUErRixHQUlBM0QsRUFBQTRELHlCQUFBMUksRUFBQUwsY0FBQTJJLEVBQUEsR0FBQUUsR0FBQXJJLEtBQUEsV0FDQWlILEdBQUEsUUFVQSxRQUFBdUIsS0FDQTdELEVBQUFHLFdBQUFqRixFQUFBTCxlQUFBUSxLQUFBLFNBQUErRSxHQUNBbEYsRUFBQWtGLFFBQUFBLEVBQUE5RSxLQUNBK0UsSUFDQUMsSUFDQUUsSUFDQUMsTUF6V0EsR0FBQXZGLEdBQUF2RCxJQUNBdUQsR0FBQWtGLFdBQ0FsRixFQUFBd0MsZUFDQXhDLEVBQUFtRyxlQUFBLEVBQ0FuRyxFQUFBMkYsd0JBQUEsRUFDQTNGLEVBQUE4RixvQkFBQSxFQUNBOUYsRUFBQXdHLHFCQUFBLEVBQ0F4RyxFQUFBb0UsZ0JBQUFBLEVBQ0FwRSxFQUFBc0Usa0JBQUFBLEVBQ0F0RSxFQUFBc0gsaUJBQUFBLEVBQ0F0SCxFQUFBNkYscUJBQ0E3RixFQUFBZ0gsbUJBQUEsRUFDQWhILEVBQUF1SCx3QkFBQUEsRUFDQXZILEVBQUEwSCxvQ0FBQUEsRUFDQTFILEVBQUFvRyxvQkFBQSxFQUVBdEcsR0FzUkEsSUFBQXNILElBQUEsQ0F3RUF4SCxHQUFBbEIsSUFBQSx1QkFBQSxTQUFBNEIsRUFBQVMsR0FDQWYsRUFBQUwsZ0JBQUFvQixFQUFBcEIsZ0JBQ0F1QyxFQUFBOEIsS0FBQWpELEVBQUFrRCxhQUNBMEUsT0FLQS9JLEVBQUFsQixJQUFBLHlCQUFBLFNBQUE0QixFQUFBUyxHQUNBZixFQUFBTCxnQkFBQW9CLEVBQUFwQixnQkFDQXVDLEVBQUE4QixLQUFBakQsRUFBQWtELGFBQ0FtRCxHQUNBdUIsT0FNQS9JLEVBQUFsQixJQUFBLGtCQUFBLFNBQUE0QixFQUFBc0ksR0FDQTVJLEVBQUFMLGdCQUFBaUosRUFBQWpKLGdCQUNBdUMsRUFBQThCLEtBQUE0RSxFQUFBM0UsYUFDQTBFLE9BS0EvSSxFQUFBbEIsSUFBQSxvQkFBQSxTQUFBNEIsRUFBQXNJLEdBQ0E1SSxFQUFBTCxnQkFBQWlKLEVBQUFqSixnQkFDQXVDLEVBQUE4QixLQUFBNEUsRUFBQTNFLGFBQ0EwRSx1SEFqYUFoTixRQUNBQyxPQUFBLE9BQ0EwRCxVQUFBLFlBQUFzRixNQ0pBLHVCQUlBLFNBQUFpRSxHQUFBdE0sRUFBQTRCLEVBQUErRCxHQU1BLFFBQUFwQyxNQUdBLFFBQUFnSixHQUFBQyxFQUFBQyxHQUNBN0ssRUFBQThLLGlCQUFBRixFQUFBQyxHQUFBN0ksS0FBQSxTQUFBK0ksR0FDQUEsRUFHQTNNLEVBQUEyQyxTQUNBM0MsRUFBQTBDLEdBQUExQyxFQUFBMkMsVUFFQTNDLEVBQUEwQyxHQUFBLFFBTEFpRCxFQUFBbEQsTUFBQSwrQ0FYQSxHQUFBZ0IsR0FBQXZELElBQ0F1RCxHQUFBOEksTUFBQUEsRUFFQWhKLHVEQU5BbkUsUUFBQUMsT0FBQSxPQUFBZSxXQUFBLFlBQUFrTSxNQ0ZBLHVCQUlBLFNBQUFNLEdBQUF2SixFQUFBckQsRUFBQTRCLEVBQUErRCxHQU1BLFFBQUFwQyxNQUVBLFFBQUFzSixHQUFBQyxHQUNBQSxFQUFBTCxXQUFBSyxFQUFBQyxnQkFDQXBILEVBQUFsRCxNQUFBLDBCQUVBYixFQUFBb0wsV0FBQUYsR0FBQWxKLEtBQUEsV0FDQTVELEVBQUEwQyxHQUFBLFVBWkEsR0FBQWUsR0FBQXZELElBQ0F1RCxHQUFBb0osU0FBQUEsRUFFQXRKLGdFQU5BbkUsUUFBQUMsT0FBQSxPQUFBZSxXQUFBLGVBQUF3TSxNQ0ZBLHVCQUlBLFNBQUFyRSxHQUFBWCxHQW1CQSxRQUFBYyxHQUFBdEYsR0FDQSxNQUFBd0UsR0FBQWpJLElBQUEsZ0JBQ0FzSSxRQUNBN0UsY0FBQUEsS0FXQSxRQUFBNkosR0FBQUMsR0FDQSxNQUFBdEYsR0FBQWpJLElBQUEsc0JBQ0FzSSxRQUNBaUYsT0FBQUEsS0FVQSxRQUFBQyxLQUNBLE1BQUF2RixHQUFBakksSUFBQSxpQkFHQSxRQUFBeU4sR0FBQXpFLEdBQ0EsTUFBQWYsR0FBQUUsS0FBQSx3QkFDQWEsUUFBQUEsSUFJQSxRQUFBaUMsR0FBQXhILEVBQUF1RCxFQUFBQyxHQUNBLE1BQUFnQixHQUFBRSxLQUFBLCtCQUNBMUUsY0FBQUEsRUFDQXVELFdBQUFBLEVBQ0FDLFNBQUFBLElBSUEsUUFBQXFFLEdBQUE3SCxFQUFBcUMsR0FDQSxNQUFBbUMsR0FBQUUsS0FBQSwyQkFDQTFFLGNBQUFBLEVBQ0FxQyxPQUFBQSxJQUlBLFFBQUEwRyxHQUFBL0ksRUFBQTJJLEVBQUE5QyxHQUNBLE1BQUFyQixHQUFBRSxLQUFBLDhCQUNBMUUsY0FBQUEsRUFDQTJJLGNBQUFBLEVBQ0E5QyxRQUFBQSxJQTFFQSxHQUFBZCxJQUNBTyxXQUFBQSxFQUNBdUUsbUJBQUFBLEVBQ0FFLFlBQUFBLEVBQ0FDLGNBQUFBLEVBQ0F4QyxjQUFBQSxFQUNBSyxtQkFBQUEsRUFDQWtCLHlCQUFBQSxFQUdBLE9BQUFoRSx1QkFiQS9JLFFBQUFDLE9BQUEsT0FBQStJLFFBQUEsa0JBQUFHLE1DQ0EsdUJBSUEsU0FBQThFLEdBQUFoSyxFQUFBckQsRUFBQXNOLEVBQUEvRSxFQUFBNUMsR0FtQkEsUUFBQXBDLEtBQ0ErSixFQUFBQyxjQUFBM0osS0FBQSxTQUFBNEosR0FDQS9KLEVBQUFnSyxpQkFBQUQsRUFBQTNKLE9BU0EsUUFBQTZKLEdBQUFqSSxHQUNBaEMsRUFBQWtLLGFBQUE3SixPQUFBTCxFQUFBbUssZ0JBQ0FuSyxFQUFBb0ssa0JBQUEsRUFDQXBLLEVBQUFrSyxhQUFBeEgsS0FBQXBDLEVBQUFpSSxPQUFBdkksRUFBQWdLLGtCQUFBNUgsSUFBQUosRUFBQUksTUFBQSxLQUVBRixFQUFBbEQsTUFBQSwrRkFRQSxRQUFBcUwsR0FBQXJJLEdBQ0FoQyxFQUFBb0ssa0JBQUEsRUFDQXBLLEVBQUFnSyxpQkFBQXRILEtBQUFwQyxFQUFBaUksT0FBQXZJLEVBQUFrSyxjQUFBOUgsSUFBQUosRUFBQUksTUFBQSxJQVNBLFFBQUFrSSxHQUFBckksR0FDQWpDLEVBQUFtSyxlQUFBLENBQ0EsS0FBQSxHQUFBMUgsR0FBQVIsRUFBQVEsRUFBQSxFQUFBQSxJQUNBekMsRUFBQW1LLGdCQUFBMUgsQ0FFQSxJQUFBekMsRUFBQWtLLGFBQUE3SixPQUFBTCxFQUFBbUssZUFBQSxDQUNBLEdBQUFJLEdBQUF2SyxFQUFBa0ssYUFBQU0sT0FBQXhLLEVBQUFtSyxlQUNBbkssR0FBQWdLLGlCQUFBaEssRUFBQWdLLGlCQUFBUyxPQUFBRixHQUNBckksRUFBQXVGLFFBQUEsNEVBa0JBLFFBQUFrQyxHQUFBekUsR0FDQXZKLFFBQUE0RSxRQUFBUCxFQUFBa0ssYUFBQSxTQUFBbEksR0FDQWEsR0FBQSxDQUNBLElBQUFvSCxJQUNBcEgsU0FBQUEsRUFDQVQsSUFBQUosRUFBQUksSUFDQTBFLE1BQUE5RSxFQUFBK0csU0FDQTFDLFVBQUFyRSxFQUFBcUUsVUFDQUMsU0FBQXRFLEVBQUFzRSxTQUNBUyxTQUFBL0UsRUFBQStFLFNBRUEvRyxHQUFBMEssV0FBQWxGLFFBQUE5QyxLQUFBdUgsS0FFQW5GLEVBQUE2RSxjQUFBekUsR0FBQS9FLEtBQUEsU0FBQXVLLEdBQ0FuTyxFQUFBMEMsR0FBQSxpQkFDQVUsY0FBQStLLEVBQUF0SyxLQUFBZ0MsUUE5RkEsR0FBQXBDLEdBQUF2RCxJQUNBdUQsR0FBQTBLLFlBQ0FsRixZQUVBeEYsRUFBQWdLLG9CQUNBaEssRUFBQWtLLGdCQUNBbEssRUFBQTJKLGNBQUFBLEVBQ0EzSixFQUFBaUssVUFBQUEsRUFDQWpLLEVBQUFxSyxhQUFBQSxFQUNBckssRUFBQW1LLGVBQUEsR0FDQW5LLEVBQUEwSyxXQUFBekksT0FBQSxFQUNBakMsRUFBQTBLLFdBQUE3RCxZQUFBLEVBRUEvRyxJQXFEQUYsRUFBQStLLE9BQUEsdUJBQUEsU0FBQUMsRUFBQUMsR0FDQUQsSUFBQUMsR0FDQVAsRUFBQU0sSUFLQSxJQUFBL0gsR0FBQSxnRkE1RUFsSCxRQUFBQyxPQUFBLE9BQUFlLFdBQUEsb0JBQUFpTixNQ0xBLHVCQUlBLFNBQUFrQixHQUFBdk8sRUFBQXVJLEVBQUFFLEdBTUEsUUFBQWxGLEtBQ0FnRixFQUFBMEUsbUJBQUF4RSxFQUFBVSxZQUFBdEQsS0FBQWpDLEtBQUEsU0FBQTRLLEdBQ0EvSyxFQUFBK0ssU0FBQUEsRUFBQTNLLE9BUEEsR0FBQUosR0FBQXZELElBQ0F1RCxHQUFBK0ssU0FBQSxLQUVBakwsNkRBTkFuRSxRQUFBQyxPQUFBLE9BQUFlLFdBQUEsaUJBQUFtTyxNQ0ZBLHVCQUlBLFNBQUFFLEdBQUF6TyxFQUFBME8sRUFBQW5HLEdBT0EsUUFBQWhGLEtBQ0FtTCxFQUFBdEwsZ0JBQ0FLLEVBQUFMLGNBQUFzTCxFQUFBdEwsY0FFQW1GLEVBQUFHLFdBQUFqRixFQUFBTCxlQUFBUSxLQUFBLFNBQUErRSxHQUNBQSxFQUFBOUUsS0FDQUosRUFBQWtGLFFBQUFBLEVBQUE5RSxLQUVBN0QsRUFBQTBDLEdBQUEsMEJBZEEsR0FBQWUsR0FBQXZELElBQ0F1RCxHQUFBTCxjQUFBLEtBQ0FLLEVBQUFrRixRQUFBLEtBRUFwRiwwREFQQW5FLFFBQUFDLE9BQUEsT0FBQWUsV0FBQSxjQUFBcU8sTUNGQSxXQUNBLFlBR0EsU0FBQUUsS0FNQSxRQUFBcEwsTUFMQSxHQUFBRSxHQUFBdkQsSUFDQXVELEdBQUErSyxTQUFBLEtBRUFqTCxJQU5BbkUsUUFBQUMsT0FBQSxPQUFBZSxXQUFBLGVBQUF1TyxNQ0ZBLHVCQUlBLFNBQUFDLEdBQUFGLEVBQUExTyxFQUFBdUksR0FPQSxRQUFBaEYsS0FDQW1MLEVBQUF0TCxnQkFDQUssRUFBQUwsY0FBQXNMLEVBQUF0TCxjQUNBbUYsRUFBQUcsV0FBQWpGLEVBQUFMLGVBQUFRLEtBQUEsU0FBQStFLEdBQ0FBLEVBQUE5RSxLQUNBSixFQUFBa0YsUUFBQUEsRUFBQTlFLEtBRUE3RCxFQUFBMEMsR0FBQSwwQkFiQSxHQUFBZSxHQUFBdkQsSUFDQXVELEdBQUFMLGNBQUEsS0FDQUssRUFBQWtGLFFBQUEsS0FFQXBGLDBEQVBBbkUsUUFBQUMsT0FBQSxPQUFBZSxXQUFBLFlBQUF3TyxNQ0ZBLHVCQUlBLFNBQUFoTixHQUFBNUIsRUFBQTRILEVBQUFpSCxFQUFBdkIsRUFBQTdFLEdBVUEsUUFBQWlFLEdBQUFGLEVBQUFDLEdBQ0EsR0FBQXFDLEdBQUFELEVBQUFFLE9BWUEsT0FYQW5ILEdBQUFFLEtBQUEsVUFDQTBFLFNBQUFBLEVBQ0FDLFNBQUFBLElBQ0E3SSxLQUFBLFNBQUErSSxHQUNBQSxFQUFBOUksS0FBQW1MLFNBQ0F2RyxFQUFBVSxZQUFBd0QsRUFBQTlJLEtBQUEvQyxLQUNBZ08sRUFBQXBOLFNBQUEsSUFFQW9OLEVBQUFwTixTQUFBLEtBR0FvTixFQUFBRyxRQUdBLFFBQUFqQyxHQUFBa0MsR0FDQSxHQUFBSixHQUFBRCxFQUFBRSxPQVdBLE9BVkFuSCxHQUFBRSxLQUFBLGNBQ0FvSCxTQUFBQSxJQUNBdEwsS0FBQSxTQUFBK0ksR0FDQUEsRUFBQTlJLE1BQ0E2SSxFQUFBd0MsRUFBQTFDLFNBQUEwQyxFQUFBekMsVUFDQXFDLEVBQUFwTixTQUFBLElBRUFvTixFQUFBcE4sU0FBQSxLQUdBb04sRUFBQUcsUUFHQSxRQUFBRSxLQUNBLEdBQUFMLEdBQUFELEVBQUFFLE9BUUEsT0FQQW5ILEdBQUFFLEtBQUEsV0FDQXFILFFBQUEsSUFDQXZMLEtBQUEsV0FDQTZFLEVBQUFVLFlBQUFpRyxPQUNBTixFQUFBcE4sVUFDQTFCLEVBQUEwQyxHQUFBLFVBRUFvTSxFQUFBRyxRQUdBLFFBQUFwTixHQUFBd04sR0FDQSxRQUFBNUcsRUFBQTZHLGFBQUFELElBR0FSLEVBQUFVLE9BQUEsa0JBSUEsUUFBQXpOLEtBQ0EsUUFBQTJHLEVBQUFTLG1CQUdBMkYsRUFBQVUsT0FBQSxrQkFoRUEsR0FBQXBILElBQ0F1RSxpQkFBQUEsRUFDQU0sV0FBQUEsRUFDQW1DLE9BQUFBLEVBQ0F0Tiw2QkFBQUEsRUFDQUMsMEJBQUFBLEVBRUEsT0FBQXFHLHFFQVZBL0ksUUFBQUMsT0FBQSxPQUFBK0ksUUFBQSxjQUFBeEcsTUNGQSx1QkFJQSxTQUFBMEwsR0FBQTFGLEVBQUFhLEdBTUEsUUFBQThFLEtBQ0EsTUFBQTNGLEdBQUFqSSxJQUFBLGNBQUFpRSxLQUFBLFNBQUE0SixHQUNBLE1BQUFBLEtBUEEsR0FBQXJGLElBQ0FvRixZQUFBQSxFQUVBLE9BQUFwRix5Q0FOQS9JLFFBQUFDLE9BQUEsT0FBQStJLFFBQUEsY0FBQWtGLE1DRkEsV0FDQSxZQUdBLFNBQUFrQyxLQUNBLE1BQUEsVUFBQUMsRUFBQUMsR0FDQSxJQUFBdFEsUUFBQXVRLFNBQUFGLEdBQUEsTUFBQUEsRUFFQSxJQUFBRyxLQUNBLEtBQUEsR0FBQUMsS0FBQUosR0FDQUcsRUFBQXpKLEtBQUFzSixFQUFBSSxHQVFBLE9BTEFELEdBQUFFLEtBQUEsU0FBQUMsRUFBQUMsR0FHQSxNQUZBRCxHQUFBRSxTQUFBRixFQUFBTCxJQUNBTSxFQUFBQyxTQUFBRCxFQUFBTixJQUNBSyxFQUFBQyxJQUVBSixHQWhCQXhRLFFBQUFDLE9BQUEsT0FBQTZILE9BQUEsZ0JBQUFzSSxNQ0ZBLHVCQUlBLFNBQUEvRyxHQUFBeUgsR0FZQSxRQUFBaEgsS0FDQSxRQUFBaEosS0FBQWlKLFlBR0EsUUFBQW1HLEdBQUFELEdBQ0EsUUFBQW5QLEtBQUFpSixhQUFBakosS0FBQWlKLFlBQUFnSCxNQUFBNUosUUFBQThJLElBQUEsRUFoQkEsR0FBQWxHLEVBQ0EsUUFBQStHLEVBQUFFLHlCQUNBakgsRUFBQStHLEVBQUFFLHVCQUVBLElBQUFqSSxJQUNBZ0IsWUFBQUEsRUFDQUQsZ0JBQUFBLEVBQ0FvRyxhQUFBQSxFQUVBLE9BQUFuSCx5QkFaQS9JLFFBQUFDLE9BQUEsT0FBQStJLFFBQUEsa0JBQUFLLE1DRkEsV0FDQSxZQUtBLFNBQUE5QyxLQW1CQSxRQUFBOEIsR0FBQTRJLEVBQUFqUCxFQUFBa1AsR0FDQUMsRUFBQUMsUUFFQUgsUUFBQUEsRUFDQWpQLElBQUFBLEVBQ0FrUCxPQUFBQSxJQUdBekosS0FBQSxTQUlBLFFBQUFtSSxHQUFBcUIsRUFBQWpQLEVBQUFrUCxHQUNBQyxFQUFBQyxRQUVBSCxRQUFBQSxFQUNBalAsSUFBQUEsRUFDQWtQLE9BQUFBLElBR0F6SixLQUFBLFlBSUEsUUFBQXFFLEdBQUFtRixFQUFBalAsRUFBQWtQLEdBQ0FDLEVBQUFDLFFBRUFILFFBQUFBLEVBQ0FqUCxJQUFBQSxFQUNBa1AsT0FBQUEsSUFHQXpKLEtBQUEsWUFJQSxRQUFBcEUsR0FBQTROLEVBQUFqUCxFQUFBa1AsR0FDQUMsRUFBQUMsUUFFQUgsUUFBQUEsRUFDQWpQLElBQUFBLEVBQ0FrUCxPQUFBQSxJQUdBekosS0FBQSxXQUlBLFFBQUE0SixHQUFBSixFQUFBalAsRUFBQWtQLEdBQ0FDLEVBQUFDLFFBRUFILFFBQUFBLEVBQ0FqUCxJQUFBQSxFQUNBa1AsT0FBQUEsSUFHQXpKLEtBQUEsWUExRUEsR0FBQXNCLElBQ0FWLEtBQUFBLEVBQ0F1SCxRQUFBQSxFQUNBOUQsUUFBQUEsRUFDQXpJLE1BQUFBLEVBQ0FnTyxRQUFBQSxFQVdBLE9BUkFGLEdBQUFHLGdCQUNBQyxlQUFBLEVBQ0FDLFFBQ0FDLEVBQUEsR0FDQUMsRUFBQSxNQUlBM0ksRUFyQkEvSSxRQUNBQyxPQUFBLE9BQ0ErSSxRQUFBLGdCQUFBekMsTUNKQSxXQUNBLFlBS0EsU0FBQW9MLEtBT0EsUUFBQUMsR0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQWIsRUFBQVUsR0FBQUksa0JBQ0FILE1BQUFBLEVBQ0FJLGNBQUEsSUFDQUMsS0FBQUosRUFDQUssWUFDQUMsUUFBQSxFQUNBRixLQUFBSCxFQUNBTSxnQkFBQSxLQWRBLEdBQUF2SixJQUNBNkksYUFBQUEsRUFHQSxPQUFBN0ksR0FUQS9JLFFBQ0FDLE9BQUEsT0FDQStJLFFBQUEsbUJBQUEySSxNQ0pBLFdBQ0EsWUFLQSxTQUFBN08sS0FZQSxRQUFBeVAsS0FDQSxNQUFBQyxHQUdBLFFBQUFoUCxHQUFBaVAsR0FDQUQsRUFBQUUsS0FBQUQsRUFoQkEsR0FBQUQsSUFDQUUsTUFBQSxFQUNBQyxPQUFBLEdBRUE1SixHQUNBd0osaUJBQUFBLEVBQ0EvTyxpQkFBQUEsRUFHQSxPQUFBdUYsR0FkQS9JLFFBQ0FDLE9BQUEsT0FDQStJLFFBQUEsaUJBQUFsRyxNQ0pBOUMsUUFBQUMsT0FBQSxPQUNBOEksUUFBQSxvQkFBQSxhQUFBLFVBQUEsU0FBQWxHLEVBQUFpTyxHQUNBLFFBQUE4QixLQUNBLE1BQUEsV0FBQTlCLEVBQUErQixTQUFBQyxTQUNBLFNBQUFoQyxFQUFBK0IsU0FBQUUsS0FFQSxRQUFBakMsRUFBQStCLFNBQUFFLEtBSUEsR0FBQUMsRUFDQWxTLE1BQUFtUyxRQUFBLFdBQ0FELEVBQUEsR0FBQUUsV0FBQU4sS0FFQUksRUFBQUcsVUFBQSxTQUFBQyxHQUNBLEdBQUFDLEdBQUFDLEtBQUFDLE1BQUFILEVBQUEzTyxLQUNBNUIsR0FBQTJRLFdBQUEsTUFBQUgsRUFBQUksTUFBQUosRUFBQTVPLFFBSUEzRCxLQUFBNFMsS0FBQSxTQUFBRCxFQUFBaFAsR0FDQSxHQUFBa1AsR0FBQUwsS0FBQU0sV0FDQUgsTUFBQUEsRUFDQWhQLEtBQUFBLEdBRUF1TyxHQUFBVSxLQUFBQyxPQUVBbFEsS0FBQSxtQkFBQSxTQUFBb1EsR0FDQUEsRUFBQVosYUM1QkEsdUJBSUEsU0FBQWEsR0FBQTNLLEdBTUEsUUFBQWhGLEtBQ0FnRixFQUFBNEUsY0FBQXZKLEtBQUEsU0FBQTRLLEdBQ0EvSyxFQUFBK0ssU0FBQUEsRUFBQTNLLE9BUEEsR0FBQUosR0FBQXZELElBQ0F1RCxHQUFBK0ssWUFFQWpMLGtDQU5BbkUsUUFBQUMsT0FBQSxPQUFBZSxXQUFBLFdBQUE4UyxNQ0ZBLFdBQ0EsWUFNQSxTQUFBQyxLQUNBLEdBQUFwUSxJQUNBQyxrQkFBQSxFQUNBNUMsV0FBQTZDLEVBQ0ExQixhQUFBLEtBQ0EyQixTQUFBLElBQ0ExQixZQUFBLGlDQUVBLE9BQUF1QixHQUlBLFFBQUFFLEdBQUF3RixFQUFBN0csR0FLQSxRQUFBdU4sS0FDQXZOLEVBQUF1TixTQUxBLEdBQUExTCxHQUFBdkQsSUFDQXVELEdBQUEyUCxVQUFBM0ssRUFDQWhGLEVBQUEwTCxPQUFBQSw4Q0FuQkEvUCxRQUNBQyxPQUFBLE9BQ0EwRCxVQUFBLFdBQUFvUSxNQ0xBLFdBQ0EsWUFNQSxTQUFBRSxLQUNBLEdBQUF0USxJQUNBQyxrQkFBQSxFQUNBNUMsV0FBQTZDLEVBQ0ExQixhQUFBLGFBQ0EyQixTQUFBLElBQ0ExQixZQUFBLGlDQUVBLE9BQUF1QixHQUlBLFFBQUFFLEdBQUFmLEVBQUF1RyxFQUFBN0csR0FPQSxRQUFBMFIsS0FDQTdQLEVBQUFtTyxjQUFBRSxNQUFBck8sRUFBQW1PLGNBQUFFLEtBQ0E1UCxFQUFBVSxpQkFBQWEsRUFBQW1PLGNBQUFFLE1BR0EsUUFBQTNDLEtBQ0F2TixFQUFBdU4sU0FaQSxHQUFBMUwsR0FBQXZELElBQ0F1RCxHQUFBMlAsVUFBQTNLLEVBQ0FoRixFQUFBMEwsT0FBQUEsRUFDQTFMLEVBQUFtTyxjQUFBMVAsRUFBQXlQLG1CQUNBbE8sRUFBQTZQLGNBQUFBLCtEQXJCQWxVLFFBQ0FDLE9BQUEsT0FDQTBELFVBQUEsV0FBQXNRLE1DTEEsV0FDQSxZQU1BLFNBQUFFLEtBQ0EsR0FBQXhRLElBQ0FDLGtCQUFBLEVBQ0E1QyxXQUFBNkMsRUFDQTFCLGFBQUEsY0FDQTJCLFNBQUEsSUFDQTFCLFlBQUEsa0NBRUEsT0FBQXVCLEdBSUEsUUFBQUUsR0FBQXdGLEVBQUE3RyxFQUFBTSxHQU1BLFFBQUFpTixLQUNBdk4sRUFBQXVOLFNBTkEsR0FBQTFMLEdBQUF2RCxJQUNBdUQsR0FBQTJQLFVBQUEzSyxFQUNBaEYsRUFBQTBMLE9BQUFBLEVBQ0ExTCxFQUFBbU8sY0FBQTFQLEVBQUF5UCxnRkFwQkF2UyxRQUNBQyxPQUFBLE9BQ0EwRCxVQUFBLFlBQUF3USxNQ0xBLHVCQU1BLFNBQUFDLEdBQUF6QyxHQVFBLFFBQUEwQyxHQUFBdFEsRUFBQXVRLEVBQUFDLEdBQ0EsR0FBQXhDLEdBQUF3QyxFQUFBeEMsWUFBQSxJQUNBRCxFQUFBeUMsRUFBQXpDLE9BQUEsZUFDQUUsRUFBQXVDLEVBQUF2QyxnQkFBQSxHQUNBYixHQUFBLFFBQUFxRCxTQUFBLGFBQ0E3QyxFQUFBQyxhQUFBMEMsRUFBQXhDLEVBQUFDLEVBQUFDLEdBWkEsR0FBQXJPLElBQ0FHLFNBQUEsSUFDQTJRLEtBQUFKLEVBR0EsT0FBQTFRLGtDQVZBM0QsUUFDQUMsT0FBQSxPQUNBMEQsVUFBQSxZQUFBeVEsTUNKQSxXQUNBLFlBS0EsU0FBQU0sS0FRQSxRQUFBTCxHQUFBdFEsRUFBQTRRLEdBQ0FBLEVBQUFDLE1BQUEsV0FDQUQsRUFBQUUsT0FBQUMsWUFBQSxLQUNBSCxFQUFBSSxTQUFBQyxZQUFBLGFBVkEsR0FBQXJSLElBQ0FHLFNBQUEsSUFDQTJRLEtBQUFKLEVBR0EsT0FBQTFRLEdBVkEzRCxRQUNBQyxPQUFBLE9BQ0EwRCxVQUFBLGdCQUFBK1EsTUNKQSxXQUNBLFlBS0EsU0FBQU8sS0FRQSxRQUFBWixHQUFBdFEsRUFBQXVRLEdBQ0FBLEVBQUFFLFNBQUEsYUFBQUYsRUFBQUUsU0FBQSxhQUNBVSxNQUFBQyxPQUFBYixHQUFBLGlCQUNBQSxFQUFBRSxTQUFBLGFBQ0FVLE1BQUFDLE9BQUFiLEdBQUEsZ0JBRUFZLE1BQUFDLE9BQUFiLEdBR0FZLE1BQUFFLE9BaEJBLEdBQUF6UixJQUNBRyxTQUFBLElBQ0EyUSxLQUFBSixFQUdBLE9BQUExUSxHQVZBM0QsUUFDQUMsT0FBQSxPQUNBMEQsVUFBQSxjQUFBc1IsTUNKQSxXQUNBLFlBS0EsU0FBQUksS0FRQSxRQUFBaEIsR0FBQXRRLEVBQUF1USxHQUNBLEdBQUFqRSxHQUFBaUUsRUFBQWdCLFdBQUFDLFFBQ0FDLEVBQUFsQixFQUFBUyxTQUFBUCxTQUFBLFdBQ0FuRSxHQUFBb0YsTUFBQSxXQUNBbkIsRUFBQW9CLFNBQUEsZ0JBR0FyRixFQUFBc0YsS0FBQSxhQUNBSCxHQUFBQSxHQUFBLElBQUFuRixFQUFBdUYsTUFBQWxSLFNBQ0E0UCxFQUFBdUIsWUFBQSxnQkFoQkEsR0FBQWxTLElBQ0FHLFNBQUEsSUFDQTJRLEtBQUFKLEVBR0EsT0FBQTFRLEdBVkEzRCxRQUNBQyxPQUFBLE9BQ0EwRCxVQUFBLFNBQUEwUiIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnYXBwJywgW1xuICAndWkucm91dGVyJyxcbiAgJ3VpLmJvb3RzdHJhcCcsXG4gICduZ0FuaW1hdGUnLFxuICAnYW5ndWxhci1sb2FkaW5nLWJhcicsXG4gICdub3Vpc2xpZGVyJyxcbiAgJ2xvY2FseXRpY3MuZGlyZWN0aXZlcycsXG4gICd0aW1lcicsXG4gICdsdWVnZy5kaXJlY3RpdmVzJ1xuXSk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QgJztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbmZpZyhjb25maWd1cmF0aW9uKTtcblxuICBmdW5jdGlvbiBjb25maWd1cmF0aW9uKCRodHRwUHJvdmlkZXIsICR1aWJUb29sdGlwUHJvdmlkZXIpIHtcbiAgICAvL2luaXRpYWxpemUgZ2V0IGlmIG5vdCB0aGVyZVxuICAgIGlmICghJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldCkge1xuICAgICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldCA9IHt9OyAgICBcbiAgICB9ICAgIFxuICAgIC8vZGlzYWJsZSBJRSBhamF4IHJlcXVlc3QgY2FjaGluZ1xuICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXRbJ0lmLU1vZGlmaWVkLVNpbmNlJ10gPSAnRnJpLCAwMSBKYW4gMjAxNiAwNTowMDowMCBHTVQnO1xuICAgIC8vIGV4dHJhXG4gICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldFsnQ2FjaGUtQ29udHJvbCddID0gJ25vLWNhY2hlJztcbiAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0WydQcmFnbWEnXSA9ICduby1jYWNoZSc7XG5cbiAgICAkdWliVG9vbHRpcFByb3ZpZGVyLm9wdGlvbnMoeyBhcHBlbmRUb0JvZHk6IHRydWUgfSk7XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignQXBwQ3RybCcsIEFwcEN0cmwpO1xuXG4gIGZ1bmN0aW9uIEFwcEN0cmwoJHN0YXRlKSB7XG4gICAgdmFyIGFwcEN0cmwgPSB0aGlzO1xuICAgIC8vIFVzZSB0aGlzIGZvciBTaWRlYmFyIG1lbnVcbiAgICBhcHBDdHJsLiRzdGF0ZSA9ICRzdGF0ZTtcblxuICAgIC8vIExvY2sgdGhlIHNpZGViYXIgaW4gdmlld1xuICAgIGFwcEN0cmwubG9ja1NpZGViYXIgPSBmYWxzZTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb25maWcoY29uZmlndXJlUm91dGVzKTtcblxuICBmdW5jdGlvbiBjb25maWd1cmVSb3V0ZXMoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcbiAgICB2YXIgcm91dGVSb2xlQ2hlY2tzID0ge1xuICAgICAgc3VwZXJBZG1pbjogcmVxdWlyZVN1cGVyQWRtaW4sXG4gICAgICBhZG1pbjogcmVxdWlyZUFkbWluLFxuICAgICAgdXNlcjogcmVxdWlyZUF1dGhcbiAgICB9O1xuXG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuXG4gICAgLy8gZm9yIGFueSB1bm1hdGNoZWQgdXJsXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLndoZW4oJy9weXJhbWlkcy8nLCAnL3B5cmFtaWRzJyk7XG5cbiAgICAkc3RhdGVQcm92aWRlclxuICAgICAgLnN0YXRlKCdob21lJywge1xuICAgICAgICB1cmw6ICcvJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdIb21lQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbW1vbi92aWV3cy9ob21lLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncHlyYW1pZHMnLCB7XG4gICAgICAgIHVybDogJy9weXJhbWlkcycsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnQnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUHlyYW1pZHNDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHlyYW1pZHMvdmlld3MvcHlyYW1pZHMuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdweXJhbWlkcy5teVB5cmFtaWRzJywge1xuICAgICAgICB1cmw6ICcvbXktcHlyYW1pZHMnLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50QCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNeVB5cmFtaWRzQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3B5cmFtaWRzL3ZpZXdzL215LXB5cmFtaWRzLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgYXV0aDogcm91dGVSb2xlQ2hlY2tzLnVzZXJcbiAgICAgICAgfVxuICAgICAgfSkuc3RhdGUoJ3B5cmFtaWRzLnZpZXcnLCB7XG4gICAgICAgIHVybDogJy92aWV3Lzpjb21wZXRpdGlvbklkJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudEAnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUHlyYW1pZEN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdweXJhbWlkcy92aWV3cy9weXJhbWlkLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncHlyYW1pZHMuc3RhdHMnLCB7XG4gICAgICAgIHVybDogJy9zdGF0cy86Y29tcGV0aXRpb25JZCcsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnRAJzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ1N0YXRzQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3B5cmFtaWRzL3ZpZXdzL3N0YXRzLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncHlyYW1pZHMuY3JlYXRlJywge1xuICAgICAgICB1cmw6ICcvY3JlYXRlJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudEAnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQ3JlYXRlUHlyYW1pZEN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdweXJhbWlkcy92aWV3cy9jcmVhdGUtcHlyYW1pZC5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgIGF1dGg6IHJvdXRlUm9sZUNoZWNrcy51c2VyXG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdsb2dpbicsIHtcbiAgICAgICAgdXJsOiAnL2xvZ2luJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhdXRoZW50aWNhdGlvbi92aWV3cy9sb2dpbi5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkuc3RhdGUoJ3JlZ2lzdGVyJywge1xuICAgICAgICB1cmw6ICcvcmVnaXN0ZXInLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2F1dGhlbnRpY2F0aW9uL3ZpZXdzL3JlZ2lzdGVyLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIHJlcXVpcmVBZG1pbi4kaW5qZWN0ID0gWydhdXRoU2VydmljZSddO1xuXG4gIGZ1bmN0aW9uIHJlcXVpcmVBZG1pbihhdXRoU2VydmljZSkge1xuICAgIHJldHVybiBhdXRoU2VydmljZS5hdXRob3JpemVDdXJyZW50VXNlckZvclJvdXRlKCdhZG1pbicpO1xuICB9XG5cbiAgcmVxdWlyZVN1cGVyQWRtaW4uJGluamVjdCA9IFsnYXV0aFNlcnZpY2UnXTtcblxuICBmdW5jdGlvbiByZXF1aXJlU3VwZXJBZG1pbihhdXRoU2VydmljZSkge1xuICAgIHJldHVybiBhdXRoU2VydmljZS5hdXRob3JpemVDdXJyZW50VXNlckZvclJvdXRlKCdzdXBlci1hZG1pbicpO1xuICB9XG5cbiAgcmVxdWlyZUF1dGguJGluamVjdCA9IFsnYXV0aFNlcnZpY2UnXTtcblxuICBmdW5jdGlvbiByZXF1aXJlQXV0aChhdXRoU2VydmljZSkge1xuICAgIHJldHVybiBhdXRoU2VydmljZS5hdXRoZW50aWNhdGVkVXNlckZvclJvdXRlKCk7XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykucnVuKGFwcFJ1bik7XG5cbiAgZnVuY3Rpb24gYXBwUnVuKCRyb290U2NvcGUsICRzdGF0ZSwgc2lkZWJhclNlcnZpY2UpIHtcbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlRXJyb3InLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMsIGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IgPT09ICdub3QgYXV0aG9yaXplZCcpIHtcbiAgICAgICAgJHN0YXRlLmdvKCdsb2dpbicpO1xuICAgICAgICAkc3RhdGUucHJldmlvdXMgPSB0b1N0YXRlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgc2lkZWJhclNlcnZpY2Uuc2V0U2lkZWJhclN0YXR1cyhmYWxzZSk7XG4gICAgfSk7XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2twQWN0aXZlQ2hhbGxlbmVnZXMnLCBrcEFjdGl2ZUNoYWxsZW5lZ2VzKTtcblxuICBmdW5jdGlvbiBrcEFjdGl2ZUNoYWxsZW5lZ2VzKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogY3RybEZ1bmMsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgY29tcGV0aXRpb25JZDogJ0AnXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVVcmw6ICcvY2hhbGxlbmdlcy9jb21wb25lbnRzL2FjdGl2ZS1jaGFsbGVuZ2VzLmh0bWwnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKCRzY29wZSwgY2hhbGxlbmdlc1NlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmNoYWxsZW5nZXMgPSBbXTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGdldEFjdGl2ZUNoYWxsZW5nZXMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBY3RpdmVDaGFsbGVuZ2VzKCkge1xuICAgICAgdm0uY2hhbGxlbmdlcyA9IFtdO1xuICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZ2V0QWN0aXZlQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24odm0uY29tcGV0aXRpb25JZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlcykge1xuICAgICAgICBpZiAoY2hhbGxlbmdlcy5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2bS5jaGFsbGVuZ2VzID0gY2hhbGxlbmdlcy5kYXRhO1xuICAgICAgICAgIF8uZm9yRWFjaCh2bS5jaGFsbGVuZ2VzLCBmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG4gICAgICAgICAgICBpZiAoY2hhbGxlbmdlLnRpbWVMaW1pdCAhPT0gMCkge1xuICAgICAgICAgICAgICBjaGFsbGVuZ2UuZXhwaXJlcyA9IChtb21lbnQoKS5kaWZmKG1vbWVudChjaGFsbGVuZ2UuY3JlYXRlZCkuYWRkKGNoYWxsZW5nZS50aW1lTGltaXQsICdkJyksJ3MnKSkgKiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNoYWxsZW5nZV9jcmVhdGVkJywgZnVuY3Rpb24gKF8sIGNoYWxsZW5nZURldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgZ2V0QWN0aXZlQ2hhbGxlbmdlcygpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNoYWxsZW5nZV9jb21wbGV0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNoYWxsZW5nZURldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBnZXRBY3RpdmVDaGFsbGVuZ2VzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2twQ29tcGxldGVkQ2hhbGxlbmVnZXMnLCBrcENvbXBsZXRlZENoYWxsZW5lZ2VzKTtcblxuICBmdW5jdGlvbiBrcENvbXBsZXRlZENoYWxsZW5lZ2VzKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogY3RybEZ1bmMsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgY29tcGV0aXRpb25JZDogJ0AnLFxuICAgICAgICBsaW1pdDogJ0AnXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVVcmw6ICcvY2hhbGxlbmdlcy9jb21wb25lbnRzL2NvbXBsZXRlZC1jaGFsbGVuZ2VzLmh0bWwnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKCRzY29wZSwgY2hhbGxlbmdlc1NlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmNoYWxsZW5nZXMgPSBbXTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGdldENvbXBsZXRlZENoYWxsZW5nZXMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDb21wbGV0ZWRDaGFsbGVuZ2VzKCkge1xuICAgICAgdm0uY2hhbGxlbmdlcyA9IFtdO1xuICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZ2V0Q29tcGxldGVkQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24odm0uY29tcGV0aXRpb25JZCwgdm0ubGltaXQpLnRoZW4oZnVuY3Rpb24gKGNoYWxsZW5nZXMpIHtcbiAgICAgICAgaWYgKGNoYWxsZW5nZXMuZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdm0uY2hhbGxlbmdlcyA9IGNoYWxsZW5nZXMuZGF0YTtcbiAgICAgICAgICBfLmZvckVhY2godm0uY2hhbGxlbmdlcywgZnVuY3Rpb24gKGNoYWxsZW5nZSkge1xuICAgICAgICAgICAgY2hhbGxlbmdlLmxvc2VyID0gY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInID8gJ29wcG9uZW50JyA6ICdjaGFsbGVuZ2VyJztcbiAgICAgICAgICAgIGNoYWxsZW5nZS53aGVuQ29tcGxldGVkID0gbW9tZW50KGNoYWxsZW5nZS5jb21wbGV0ZWQpLmNhbGVuZGFyKG51bGwsIHtcbiAgICAgICAgICAgICAgc2FtZURheTogJ1tUb2RheV0nLFxuICAgICAgICAgICAgICBuZXh0RGF5OiAnW1RvbW9ycm93XScsXG4gICAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCcsXG4gICAgICAgICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5XScsXG4gICAgICAgICAgICAgIGxhc3RXZWVrOiAnW0xhc3RdIGRkZGQnLFxuICAgICAgICAgICAgICBzYW1lRWxzZTogJ0REL01NL1lZWVknXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNoYWxsZW5nZV9jb21wbGV0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNoYWxsZW5nZURldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBnZXRDb21wbGV0ZWRDaGFsbGVuZ2VzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2twUGxheWVyT3ZlcmFsbFJlc3VsdHMnLCBrcFBsYXllck92ZXJhbGxSZXN1bHRzKTtcblxuICBmdW5jdGlvbiBrcFBsYXllck92ZXJhbGxSZXN1bHRzKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogY3RybEZ1bmMsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgY29tcGV0aXRpb25JZDogJ0AnLFxuICAgICAgICBwbGF5ZXI6ICc9JyxcbiAgICAgICAgbGV2ZWxzOiAnQCdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jaGFsbGVuZ2VzL2NvbXBvbmVudHMvcGxheWVyLW92ZXJhbGwtcmVzdWx0cy5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYygkc2NvcGUsIGNoYWxsZW5nZXNTZXJ2aWNlLCBub3RpZnlTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS53aW5zID0ge1xuICAgICAgdG90YWw6IDAsXG4gICAgICBhc0NoYWxsZW5nZXI6IDAsXG4gICAgICBhc09wcG9uZW50OiAwLFxuICAgICAgYnlGb3JmZWl0OiAwXG4gICAgfTtcbiAgICB2bS5sb3NlcyA9IHtcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgYXNDaGFsbGVuZ2VyOiAwLFxuICAgICAgYXNPcHBvbmVudDogMCxcbiAgICAgIGJ5Rm9yZmVpdDogMFxuICAgIH07XG4gICAgdm0uc3RyZWFrID0ge1xuICAgICAgdHlwZTogbnVsbCxcbiAgICAgIHZhbHVlOiAwXG4gICAgfTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGdldFBsYXllck92ZXJhbGxSZXN1bHRzKHZtLmNvbXBldGl0aW9uSWQsIHZtLnBsYXllci5faWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBsYXllck92ZXJhbGxSZXN1bHRzKGNvbXBldGl0aW9uSWQsIHBsYXllcklkKSB7XG4gICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRQbGF5ZXJSZXN1bHRzQnlDb21wZXRpdGlvbihjb21wZXRpdGlvbklkLCBwbGF5ZXJJZCkudGhlbihmdW5jdGlvbiAocmVzdWx0cykge1xuXG4gICAgICAgIC8vIERldGVybWluZSBhbGwgdGhlIGJyZWFrIHBvaW50cyB0byBmaWd1cmUgb3V0IGxldmVsc1xuICAgICAgICB2YXIgYnJlYWtQb2ludHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS5sZXZlbHM7IGkrKykge1xuICAgICAgICAgIGJyZWFrUG9pbnRzLnB1c2goKCgoaSAqIChpICsgMSkpIC8gMikpICsgMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZhdWx0IGFsbCBwbGF5ZXJzIHRvIHRoZSBsb3dlc3QgbGV2ZWxcbiAgICAgICAgdm0ucGxheWVyLmxldmVsID0gYnJlYWtQb2ludHMubGVuZ3RoO1xuICAgICAgICAvLyBOb3cgY2hlY2sgdG8gc2VlIGlmIHRoZSBwbGF5ZXIgaXMgYXQgYSBoaWdoZXIgbGV2ZWxcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBicmVha1BvaW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGlmICh2bS5wbGF5ZXIucG9zaXRpb24gPCBicmVha1BvaW50c1tqICsgMV0pIHtcbiAgICAgICAgICAgIHZtLnBsYXllci5sZXZlbCA9IGJyZWFrUG9pbnRzLmluZGV4T2YoYnJlYWtQb2ludHNbal0pICsgMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpZ3VyZSBvdXQgdGhlIHBsYXllcidzIGN1cnJlbnQgc3RyZWFrXG4gICAgICAgIHZhciBzdHJlYWsgPSAwO1xuICAgICAgICB2YXIgY29udGludWVTdHJlYWsgPSB0cnVlO1xuICAgICAgICB2YXIgc3RyZWFrVHlwZTtcbiAgICAgICAgXy5mb3JFYWNoKHJlc3VsdHMuZGF0YSwgZnVuY3Rpb24gKGNoYWxsZW5nZSkge1xuICAgICAgICAgIGlmIChjb250aW51ZVN0cmVhaykge1xuICAgICAgICAgICAgLy8gV2lubmluZyBTdHJlYWtcbiAgICAgICAgICAgIGlmICgoY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInICYmIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLl9pZCA9PT0gcGxheWVySWQpIHx8XG4gICAgICAgICAgICAgIChjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnICYmIGNoYWxsZW5nZS5vcHBvbmVudC5faWQgPT09IHBsYXllcklkKSkge1xuICAgICAgICAgICAgICAvLyBJZiB0aGV5IGFyZSBub3QgYWxyZWFkeSBvbiBhIGxvc2luZyBzdHJlYWsgYW5kIDEgdG8gdGhlaXIgd2lubmluZyBzdHJlYWtcbiAgICAgICAgICAgICAgaWYgKHN0cmVha1R5cGUgIT09ICdsb3NpbmcnKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFrICs9IDE7XG4gICAgICAgICAgICAgICAgc3RyZWFrVHlwZSA9ICd3aW5uaW5nJztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZVN0cmVhayA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBMb3NpbmcgU3RyZWFrXG4gICAgICAgICAgICB9IGVsc2UgaWYgKChjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnICYmIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLl9pZCA9PT0gcGxheWVySWQpIHx8XG4gICAgICAgICAgICAgIChjaGFsbGVuZ2Uud2lubmVyID09PSAnY2hhbGxlbmdlcicgJiYgY2hhbGxlbmdlLm9wcG9uZW50Ll9pZCA9PT0gcGxheWVySWQpKSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoZXkgYXJlIG5vdCBhbHJlYWR5IG9uIGEgd2lubmluZyBzdHJlYWsgYW5kIDEgdG8gdGhlaXIgbG9zaW5nIHN0cmVha1xuICAgICAgICAgICAgICBpZiAoc3RyZWFrVHlwZSAhPT0gJ3dpbm5pbmcnKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFrICs9IDE7XG4gICAgICAgICAgICAgICAgc3RyZWFrVHlwZSA9ICdsb3NpbmcnO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlU3RyZWFrID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdm0uc3RyZWFrID0ge1xuICAgICAgICAgICAgdHlwZTogc3RyZWFrVHlwZSxcbiAgICAgICAgICAgIHZhbHVlOiBzdHJlYWtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBGaWd1cmUgb3V0IHdpbnMgYW5kIGxvc2VzXG4gICAgICAgIHZtLndpbnMuYXNPcHBvbmVudCA9IF8uc2l6ZShfLmZpbHRlcihyZXN1bHRzLmRhdGEsIGZ1bmN0aW9uKGNoYWxsZW5nZSkgeyBcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgY2hhbGxlbmdlLm9wcG9uZW50Ll9pZCA9PT0gcGxheWVySWQgJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ29wcG9uZW50J1xuICAgICAgICAgICk7XG4gICAgICAgIH0pKTtcblxuICAgICAgICB2bS53aW5zLmFzQ2hhbGxlbmdlciA9IF8uc2l6ZShfLmZpbHRlcihyZXN1bHRzLmRhdGEsIGZ1bmN0aW9uKGNoYWxsZW5nZSkgeyBcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgY2hhbGxlbmdlLmNoYWxsZW5nZXIuX2lkID09PSBwbGF5ZXJJZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnY2hhbGxlbmdlcidcbiAgICAgICAgICApO1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgdm0ud2lucy50b3RhbCA9IHZtLndpbnMuYXNDaGFsbGVuZ2VyICsgdm0ud2lucy5hc09wcG9uZW50O1xuXG4gICAgICAgIHZtLndpbnMuYnlGb3JmZWl0ID0gXy5zaXplKF8uZmlsdGVyKHJlc3VsdHMuZGF0YSwgZnVuY3Rpb24oY2hhbGxlbmdlKSB7IFxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBjaGFsbGVuZ2UuZm9yZmVpdCAmJiAoKGNoYWxsZW5nZS5jaGFsbGVuZ2VyLl9pZCA9PT0gcGxheWVySWQgJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInKSB8fFxuICAgICAgICAgICAgKGNoYWxsZW5nZS5vcHBvbmVudC5faWQgPT09IHBsYXllcklkICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdvcHBvbmVudCcpKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pKTtcblxuICAgICAgICB2bS5sb3Nlcy5hc09wcG9uZW50ID0gXy5zaXplKF8uZmlsdGVyKHJlc3VsdHMuZGF0YSwgZnVuY3Rpb24oY2hhbGxlbmdlKSB7IFxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBjaGFsbGVuZ2Uub3Bwb25lbnQuX2lkID09PSBwbGF5ZXJJZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnY2hhbGxlbmdlcidcbiAgICAgICAgICApO1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgdm0ubG9zZXMuYXNDaGFsbGVuZ2VyID0gXy5zaXplKF8uZmlsdGVyKHJlc3VsdHMuZGF0YSwgZnVuY3Rpb24oY2hhbGxlbmdlKSB7IFxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBjaGFsbGVuZ2UuY2hhbGxlbmdlci5faWQgPT09IHBsYXllcklkICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdvcHBvbmVudCdcbiAgICAgICAgICApO1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgdm0ubG9zZXMudG90YWwgPSB2bS5sb3Nlcy5hc0NoYWxsZW5nZXIgKyB2bS5sb3Nlcy5hc09wcG9uZW50O1xuXG4gICAgICAgIHZtLmxvc2VzLmJ5Rm9yZmVpdCA9IF8uc2l6ZShfLmZpbHRlcihyZXN1bHRzLmRhdGEsIGZ1bmN0aW9uKGNoYWxsZW5nZSkgeyBcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgY2hhbGxlbmdlLmZvcmZlaXQgJiYgKChjaGFsbGVuZ2UuY2hhbGxlbmdlci5faWQgPT09IHBsYXllcklkICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdvcHBvbmVudCcpIHx8XG4gICAgICAgICAgICAoY2hhbGxlbmdlLm9wcG9uZW50Ll9pZCA9PT0gcGxheWVySWQgJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInKSlcbiAgICAgICAgICApO1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6Y2hhbGxlbmdlX2NvbXBsZXRlZCcsIGZ1bmN0aW9uIChfLCBjaGFsbGVuZ2VEZXRhaWxzKSB7XG4gICAgICBpZiAodm0uY29tcGV0aXRpb25JZCA9PT0gY2hhbGxlbmdlRGV0YWlscy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIGlmICh2bS5wbGF5ZXIuX2lkID09PSBjaGFsbGVuZ2VEZXRhaWxzLmNoYWxsZW5nZXJJZCkge1xuICAgICAgICAgIG5vdGlmeVNlcnZpY2UuaW5mbyhjaGFsbGVuZ2VEZXRhaWxzLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgICBnZXRQbGF5ZXJPdmVyYWxsUmVzdWx0cyhjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQsIGNoYWxsZW5nZURldGFpbHMuY2hhbGxlbmdlcklkKTtcbiAgICAgICAgfSBlbHNlIGlmICh2bS5wbGF5ZXIuX2lkID09PSBjaGFsbGVuZ2VEZXRhaWxzLm9wcG9uZW50SWQpIHtcbiAgICAgICAgICBnZXRQbGF5ZXJPdmVyYWxsUmVzdWx0cyhjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQsIGNoYWxsZW5nZURldGFpbHMub3Bwb25lbnRJZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5mYWN0b3J5KCdjaGFsbGVuZ2VzU2VydmljZScsIGNoYWxsZW5nZXNTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBjaGFsbGVuZ2VzU2VydmljZSgkaHR0cCkge1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgY3JlYXRlQ2hhbGxlbmdlOiBjcmVhdGVDaGFsbGVuZ2UsXG4gICAgICBjb21wbGV0ZUNoYWxsZW5nZTogY29tcGxldGVDaGFsbGVuZ2UsXG4gICAgICBnZXRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbjogZ2V0Q2hhbGxlbmdlc0J5Q29tcGV0aXRpb24sXG4gICAgICBnZXRBY3RpdmVDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbjogZ2V0QWN0aXZlQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24sXG4gICAgICBnZXRBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXI6IGdldEFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllcixcbiAgICAgIGdldENvbXBsZXRlZENoYWxsZW5nZXNCeUNvbXBldGl0aW9uOiBnZXRDb21wbGV0ZWRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbixcbiAgICAgIGdldFBsYXllclJlc3VsdHNCeUNvbXBldGl0aW9uOiBnZXRQbGF5ZXJSZXN1bHRzQnlDb21wZXRpdGlvblxuICAgIH07XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoYWxsZW5nZShjaGFsbGVuZ2UpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2NoYWxsZW5nZXMvY3JlYXRlJywge1xuICAgICAgICBjaGFsbGVuZ2U6IGNoYWxsZW5nZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGxldGVDaGFsbGVuZ2UoY2hhbGxlbmdlKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jaGFsbGVuZ2VzL2NvbXBsZXRlJywgIHtcbiAgICAgICAgY2hhbGxlbmdlOiBjaGFsbGVuZ2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENoYWxsZW5nZXNCeUNvbXBldGl0aW9uKGNvbXBldGl0aW9uSWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY2hhbGxlbmdlcy9jb21wZXRpdGlvbicsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QWN0aXZlQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24oY29tcGV0aXRpb25JZCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jaGFsbGVuZ2VzL2FjdGl2ZS9jb21wZXRpdGlvbicsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyKGNvbXBldGl0aW9uSWQsIHBsYXllcklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2NoYWxsZW5nZXMvYWN0aXZlL2NvbXBldGl0aW9uL3BsYXllcicsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgICAgcGxheWVySWQ6IHBsYXllcklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvbXBsZXRlZENoYWxsZW5nZXNCeUNvbXBldGl0aW9uKGNvbXBldGl0aW9uSWQsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2NoYWxsZW5nZXMvY29tcGxldGVkL2NvbXBldGl0aW9uJywgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgICBsaW1pdDogbGltaXRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGxheWVyUmVzdWx0c0J5Q29tcGV0aXRpb24oY29tcGV0aXRpb25JZCwgcGxheWVySWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY2hhbGxlbmdlcy9yZXN1bHRzL2NvbXBldGl0aW9uL3BsYXllcicsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgICAgcGxheWVySWQ6IHBsYXllcklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2twUHlyYW1pZCcsIGtwUHlyYW1pZCk7XG5cbiAgZnVuY3Rpb24ga3BQeXJhbWlkKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgdGVtcGxhdGVVcmw6ICcvcHlyYW1pZHMvY29tcG9uZW50cy9weXJhbWlkLmh0bWwnLFxuICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGNvbXBldGl0aW9uSWQ6ICdAJ1xuICAgICAgfSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKCRzY29wZSwgJHN0YXRlLCBweXJhbWlkc1NlcnZpY2UsICRmaWx0ZXIsIG5vdGlmeVNlcnZpY2UsIGlkZW50aXR5U2VydmljZSwgY2hhbGxlbmdlc1NlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnB5cmFtaWQgPSB7fTtcbiAgICB2bS5icmVha1BvaW50cyA9IFtdO1xuICAgIHZtLm51bWJlck9mQmxvY2tzID0gMDtcbiAgICB2bS5jdXJyZW50VXNlcklzT25QeXJhbWlkID0gZmFsc2U7XG4gICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gZmFsc2U7XG4gICAgdm0uYXZhaWxhYmxlQ2hhbGxlbmdlcyA9IGZhbHNlO1xuICAgIHZtLmNyZWF0ZUNoYWxsZW5nZSA9IGNyZWF0ZUNoYWxsZW5nZTtcbiAgICB2bS5jb21wbGV0ZUNoYWxsZW5nZSA9IGNvbXBsZXRlQ2hhbGxlbmdlO1xuICAgIHZtLmNoYWxsZW5nZUV4cGlyZWQgPSBjaGFsbGVuZ2VFeHBpcmVkO1xuICAgIHZtLmN1cnJlbnRVc2VyUGxheWVyID0ge307XG4gICAgdm0ucHlyYW1pZE1lbnVUb2dnbGUgPSBmYWxzZTtcbiAgICB2bS5hZGRDdXJyZW50VXNlclRvUHlyYW1pZCA9IGFkZEN1cnJlbnRVc2VyVG9QeXJhbWlkO1xuICAgIHZtLmNvbmZpcm1SZW1vdmVDdXJyZW50VXNlckZyb21QeXJhbWlkID0gY29uZmlybVJlbW92ZUN1cnJlbnRVc2VyRnJvbVB5cmFtaWQ7XG4gICAgdm0ubnVtYmVyT2ZSZWFsUGxheWVycyA9IDA7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBweXJhbWlkc1NlcnZpY2UuZ2V0UHlyYW1pZCh2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChweXJhbWlkKSB7XG4gICAgICAgIHZtLnB5cmFtaWQgPSBweXJhbWlkLmRhdGE7XG5cbiAgICAgICAgLy8gVGhpcyBkb2Vzbid0IGNoYW5nZSBvbiByZWZyZXNoXG4gICAgICAgIHZtLmxldmVscyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBweXJhbWlkLmRhdGEubGV2ZWxzOyArK2kpIHtcbiAgICAgICAgICB2bS5sZXZlbHMucHVzaChpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9yZGVyUGxheWVycygpO1xuICAgICAgICBnZXRQbGF5ZXJzU3RhdHVzKCk7XG4gICAgICAgIGNhbGN1bGF0ZVB5cmFtaWRCbG9ja3MoKTtcbiAgICAgICAgZmlsbEluRW1wdHlCbG9ja3MoKTtcbiAgICAgICAgYXNzaWduTGV2ZWxzVG9QbGF5ZXJzKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcmRlciB0aGUgcGxheWVycyBieSB0aGUgcG9zaXRpb24gcHJvcGVydHkgb2YgdGhlIHBsYXllcnMgYXJyYXkgaW4gdGhlIHB5cmFtaWQgb2JqZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gb3JkZXJQbGF5ZXJzKCkge1xuICAgICAgdm0ucHlyYW1pZC5wbGF5ZXJzID0gJGZpbHRlcignb3JkZXJCeScpKHZtLnB5cmFtaWQucGxheWVycywgJ3Bvc2l0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlndXJlIG91dCBpZiBlYWNoIHBsYXllciBpcyBhbHJlYWR5IGNoYWxsZW5nZWQgYW5kIHNldCBzb21lIHN0dWZmXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UGxheWVyc1N0YXR1cygpIHtcbiAgICAgIF8uZm9yRWFjaCh2bS5weXJhbWlkLnBsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcblxuICAgICAgICAvLyBGaW5kIHRoZSBjdXJyZW50IHVzZXIgaWYgdGhleSBhcmUgb24gdGhpcyBweXJhbWlkIGFuZCBzZXQgc29tZSBwcm9wZXJ0aWVzXG4gICAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkgJiYgcGxheWVyLl9pZCA9PT0gaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZCkge1xuICAgICAgICAgIHZtLmN1cnJlbnRVc2VySXNPblB5cmFtaWQgPSB0cnVlO1xuICAgICAgICAgIHBsYXllci5jbGFzcyA9ICdjdXJyZW50LXVzZXInO1xuICAgICAgICAgIHZtLmN1cnJlbnRVc2VyUGxheWVyID0gcGxheWVyO1xuXG4gICAgICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyKHZtLmNvbXBldGl0aW9uSWQsIHBsYXllci5faWQpLnRoZW4oZnVuY3Rpb24gKGNoYWxsZW5nZSkge1xuICAgICAgICAgICAgaWYgKGNoYWxsZW5nZS5kYXRhKSB7XG4gICAgICAgICAgICAgIHZtLmhhc0FjdGl2ZUNoYWxsZW5nZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRBY3RpdmVDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChjaGFsbGVuZ2VzKSB7XG4gICAgICAgIF8uZm9yRWFjaChjaGFsbGVuZ2VzLmRhdGEsIGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcblxuICAgICAgICAgIHZhciBjaGFsbGVuZ2VyID0gXy5maW5kKHZtLnB5cmFtaWQucGxheWVycywgeyAnX2lkJzogY2hhbGxlbmdlLmNoYWxsZW5nZXIuX2lkIH0pO1xuICAgICAgICAgIGNoYWxsZW5nZXIuY2xhc3MgPSAndW5hdmFpbGFibGUnO1xuICAgICAgICAgIGNoYWxsZW5nZXIuY2hhbGxlbmdlID0ge1xuICAgICAgICAgICAgcG9zaXRpb246ICdjaGFsbGVuZ2VyJ1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICB2YXIgb3Bwb25lbnQgPSBfLmZpbmQodm0ucHlyYW1pZC5wbGF5ZXJzLCB7ICdfaWQnOiBjaGFsbGVuZ2Uub3Bwb25lbnQuX2lkIH0pO1xuICAgICAgICAgIG9wcG9uZW50LmNsYXNzID0gJ3VuYXZhaWxhYmxlJztcbiAgICAgICAgICBvcHBvbmVudC5jaGFsbGVuZ2UgPSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ29wcG9uZW50J1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICAvLyBUcmFjayB3aGVuIHRoZSBjaGFsbGVuZ2Ugd2lsbCBleHBpcmVcbiAgICAgICAgICBpZiAoY2hhbGxlbmdlLnRpbWVMaW1pdCAhPT0gMCkge1xuICAgICAgICAgICAgdmFyIHRpbWVUb0V4cGlyZSA9IG1vbWVudCgpLmRpZmYobW9tZW50KGNoYWxsZW5nZS5jcmVhdGVkKS5hZGQoY2hhbGxlbmdlLnRpbWVMaW1pdCwgJ2QnKSwgJ3MnKSAqIC0xO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGNoYWxsZW5nZSBoYXMgbm90IHlldCBleHBpcmVkIGRpc3BsYXkgYSBjb3VudGRvd24gb24gdGhlIG9wcG9uZW50XG4gICAgICAgICAgICBpZiAodGltZVRvRXhwaXJlID4gMCkge1xuICAgICAgICAgICAgICBvcHBvbmVudC5jaGFsbGVuZ2UuZXhwaXJlcyA9IHRpbWVUb0V4cGlyZTtcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIGNoYWxsZW5nZSBleHBpcmVkIHdoaWxlIG5vIG9uZSB3YXMgdmlld2luZyB0aGlzIHB5cmFtaWQgY29tcGxldGUgdGhlIGNoYWxsZW5nZSBieSBmb3JmZWl0XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRpbWVUb0V4cGlyZSA8PSAwKSB7XG4gICAgICAgICAgICAgIGNvbXBsZXRlQ2hhbGxlbmdlKG51bGwsIHRydWUsIG9wcG9uZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBOb3cgdGhhdCB3ZSBrbm93IHdoaWNoIHBsYXllcnMgYXJlIGluIGNoYWxsZW5nZXMgYW5kIHdoaWNoIGFyZW4ndFxuICAgICAgICAvLyBmaW5kIHRoZSBhdmFpbGFibGUgY2hhbGxlbmdlcyBmb3IgdGhpcyB1c2VyXG4gICAgICAgIGZpbmRBdmFpbGFibGVDaGFsbGVuZ2VzKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWd1cmUgb3V0IHdoZXJlIHRvIHN0YXJ0IGVhY2ggbmV3IHJvdyBvbiB0aGUgcHlyYW1pZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJyZWFrUG9pbnRzKCkge1xuICAgICAgdm0uYnJlYWtQb2ludHMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0ucHlyYW1pZC5sZXZlbHM7IGkrKykge1xuICAgICAgICB2bS5icmVha1BvaW50cy5wdXNoKCgoKGkgKiAoaSArIDEpKSAvIDIpKSArIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhvdyBtYW55IHRvdGFsIGJsb2NrcyBpbiB0aGlzIHB5cmFtaWRcbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVQeXJhbWlkQmxvY2tzKCkge1xuICAgICAgdm0ubnVtYmVyT2ZCbG9ja3MgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IHZtLnB5cmFtaWQubGV2ZWxzOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIHZtLm51bWJlck9mQmxvY2tzICs9IGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRmlsbCBvdXQgdGhlIHJlbWFpbmluZyBibG9ja3Mgb2YgdGhlIHB5cmFtaWQgd2l0aCBlbXB0eSBibG9ja3NcbiAgICBmdW5jdGlvbiBmaWxsSW5FbXB0eUJsb2NrcygpIHtcbiAgICAgIHZtLm51bWJlck9mUmVhbFBsYXllcnMgPSB2bS5weXJhbWlkLnBsYXllcnMubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IHZtLnB5cmFtaWQucGxheWVycy5sZW5ndGg7IGkgPCB2bS5udW1iZXJPZkJsb2NrczsgaSsrKSB7XG4gICAgICAgIHZtLnB5cmFtaWQucGxheWVycy5wdXNoKHtcbiAgICAgICAgICBmaXJzdE5hbWU6ICdFbXB0eScsXG4gICAgICAgICAgbGFzdE5hbWU6ICdTcG90JyxcbiAgICAgICAgICBwb3NpdGlvbjogOTksXG4gICAgICAgICAgY2xhc3M6ICdlbXB0eSdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gR2l2ZSBlYWNoIHBsYXllciBhIGxldmVsIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBicmVhayBwb2ludHNcbiAgICAvLyBUaGlzIHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgd2hvIG90aGVyIHBsYXllcnMgY2FuIGNoYWxsZW5nZVxuICAgIGZ1bmN0aW9uIGFzc2lnbkxldmVsc1RvUGxheWVycygpIHtcbiAgICAgIHZhciBsZXZlbCA9IDA7XG4gICAgICBjcmVhdGVCcmVha1BvaW50cygpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS5weXJhbWlkLnBsYXllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHZtLmJyZWFrUG9pbnRzLmluZGV4T2YoaSArIDEpID4gLTEpIHtcbiAgICAgICAgICBsZXZlbCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIHZtLnB5cmFtaWQucGxheWVyc1tpXS5sZXZlbCA9IGxldmVsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmQgYWxsIHRoZSBwbGF5ZXJzIHRoYXQgYXJlIGF2YWlsYWJsZSB0byBiZSBjaGFsbGVuZ2VkIGJ5IHRoaXMgdXNlclxuICAgIGZ1bmN0aW9uIGZpbmRBdmFpbGFibGVDaGFsbGVuZ2VzKCkge1xuICAgICAgdmFyIGxldmVsQWJvdmUgPSB2bS5jdXJyZW50VXNlclBsYXllci5sZXZlbCA+IDEgPyB2bS5jdXJyZW50VXNlclBsYXllci5sZXZlbCAtIDEgOiBudWxsO1xuICAgICAgXy5mb3JFYWNoKHZtLnB5cmFtaWQucGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICBpZiAocGxheWVyLmxldmVsID09PSBsZXZlbEFib3ZlICYmIHBsYXllci5wb3NpdGlvbiAhPT0gOTkgJiYgcGxheWVyLmNsYXNzICE9PSAndW5hdmFpbGFibGUnKSB7XG4gICAgICAgICAgdm0uYXZhaWxhYmxlQ2hhbGxlbmdlcyA9IHRydWU7XG4gICAgICAgICAgcGxheWVyLmF2YWlsYWJsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoYWxsZW5nZShwbGF5ZXIpIHtcbiAgICAgIGlmICghcGxheWVyLmF2YWlsYWJsZSkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdTb3JyeSwgdGhhdCBpcyBub3QgYSB2YWxpZCBjaGFsbGVuZ2UuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bS5oYXNBY3RpdmVDaGFsbGVuZ2UgPSB0cnVlO1xuICAgICAgICB2YXIgY2hhbGxlbmdlID0ge1xuICAgICAgICAgIGNvbXBldGl0aW9uTmFtZTogdm0ucHlyYW1pZC5uYW1lLFxuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IHZtLmNvbXBldGl0aW9uSWQsXG4gICAgICAgICAgY29tcGxldGU6IGZhbHNlLFxuICAgICAgICAgIGZvcmZlaXQ6IGZhbHNlLFxuICAgICAgICAgIHRpbWVMaW1pdDogdm0ucHlyYW1pZC5mb3JmZWl0RGF5cyxcbiAgICAgICAgICBjaGFsbGVuZ2VyOiB7XG4gICAgICAgICAgICBfaWQ6IHZtLmN1cnJlbnRVc2VyUGxheWVyLl9pZCxcbiAgICAgICAgICAgIGVtYWlsOiB2bS5jdXJyZW50VXNlclBsYXllci5lbWFpbCxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogdm0uY3VycmVudFVzZXJQbGF5ZXIuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IHZtLmN1cnJlbnRVc2VyUGxheWVyLmxhc3ROYW1lLFxuICAgICAgICAgICAgbmlja25hbWU6IHZtLmN1cnJlbnRVc2VyUGxheWVyLm5pY2tuYW1lLFxuICAgICAgICAgICAgcG9zaXRpb246IHZtLmN1cnJlbnRVc2VyUGxheWVyLnBvc2l0aW9uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHBvbmVudDoge1xuICAgICAgICAgICAgX2lkOiBwbGF5ZXIuX2lkLFxuICAgICAgICAgICAgZW1haWw6IHBsYXllci5lbWFpbCxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogcGxheWVyLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBwbGF5ZXIubGFzdE5hbWUsXG4gICAgICAgICAgICBuaWNrbmFtZTogcGxheWVyLm5pY2tuYW1lLFxuICAgICAgICAgICAgcG9zaXRpb246IHBsYXllci5wb3NpdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBjaGFsbGVuZ2VcbiAgICAgICAgLy8gV2Vic29ja2V0IGV2ZW50IHdpbGwgcmVmcmVzaCB0aGUgcHlyYW1pZFxuICAgICAgICBjaGFsbGVuZ2VzU2VydmljZS5jcmVhdGVDaGFsbGVuZ2UoY2hhbGxlbmdlKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2bS5weXJhbWlkTWVudVRvZ2dsZSA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcGxldGUgYSBjaGFsbGVuZ2UgYnkgYSB1c2VyIGludGVyYWN0aW9uIG9yIGEgZm9yZmVpdFxuICAgICAqIFxuICAgICAqIEBwYXJhbSAge2Jvb2xlYW59IHdpbm5lcklzQ3VycmVudFVzZXJcbiAgICAgKiBAcGFyYW0gIHtib29sZWFufSBmb3JmZWl0XG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBmb3JmZWl0TG9zZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wbGV0ZUNoYWxsZW5nZSh3aW5uZXJJc0N1cnJlbnRVc2VyLCBmb3JmZWl0LCBmb3JmZWl0TG9zZXIpIHtcbiAgICAgIHZhciBwbGF5ZXIgPSBmb3JmZWl0TG9zZXIgfHwgdm0uY3VycmVudFVzZXJQbGF5ZXI7XG4gICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXIodm0uY29tcGV0aXRpb25JZCwgcGxheWVyLl9pZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG4gICAgICAgIHZtLmhhc0FjdGl2ZUNoYWxsZW5nZSA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBzd2FwUG9zaXRpb25zID0gZmFsc2U7XG5cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBmb3JmZWl0XG4gICAgICAgIGlmIChmb3JmZWl0KSB7XG4gICAgICAgICAgY2hhbGxlbmdlLmRhdGEuZm9yZmVpdCA9IHRydWU7XG4gICAgICAgICAgaWYgKGZvcmZlaXRMb3Nlci5jaGFsbGVuZ2UucG9zaXRpb24gPT09ICdvcHBvbmVudCcpIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5kYXRhLndpbm5lciA9ICdjaGFsbGVuZ2VyJztcbiAgICAgICAgICAgIHN3YXBQb3NpdGlvbnMgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS53aW5uZXIgPSAnb3Bwb25lbnQnO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBGaWd1cmUgb3V0IHdobyB0aGUgd2lubmVyIHdhcyB0byBzdG9yZSBpbiB0aGUgY2hhbGxlbmdlIHJlY29yZFxuICAgICAgICB9IGVsc2UgaWYgKHdpbm5lcklzQ3VycmVudFVzZXIpIHtcbiAgICAgICAgICBpZiAoY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlci5faWQgPT09IHZtLmN1cnJlbnRVc2VyUGxheWVyLl9pZCkge1xuICAgICAgICAgICAgY2hhbGxlbmdlLmRhdGEud2lubmVyID0gJ2NoYWxsZW5nZXInO1xuICAgICAgICAgICAgc3dhcFBvc2l0aW9ucyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5kYXRhLndpbm5lciA9ICdvcHBvbmVudCc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2VyLl9pZCA9PT0gdm0uY3VycmVudFVzZXJQbGF5ZXIuX2lkKSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS53aW5uZXIgPSAnb3Bwb25lbnQnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS53aW5uZXIgPSAnY2hhbGxlbmdlcic7XG4gICAgICAgICAgICBzd2FwUG9zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTd2FwIHBvc2l0aW9ucyBhbmQgdGhlbiBjb21wbGV0ZSB0aGUgY2hhbGxlbmdlIG9yIGp1c3QgY29tcGxldGUgdGhlIGNoYWxsZW5nZVxuICAgICAgICAvLyBXZWJzb2NrZXQgZXZlbnQgd2lsbCByZWZyZXNoIHRoZSBweXJhbWlkXG4gICAgICAgIGlmIChzd2FwUG9zaXRpb25zKSB7XG4gICAgICAgICAgcHlyYW1pZHNTZXJ2aWNlLnN3YXBQb3NpdGlvbnModm0uY29tcGV0aXRpb25JZCwgY2hhbGxlbmdlLmRhdGEub3Bwb25lbnQsIGNoYWxsZW5nZS5kYXRhLmNoYWxsZW5nZXIpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuY29tcGxldGVDaGFsbGVuZ2UoY2hhbGxlbmdlLmRhdGEpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAocmVtb3ZpbmdDdXJyZW50VXNlcikge1xuICAgICAgICAgICAgICAgIHJlbW92ZUN1cnJlbnRVc2VyRnJvbVB5cmFtaWQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuY29tcGxldGVDaGFsbGVuZ2UoY2hhbGxlbmdlLmRhdGEpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHJlbW92aW5nQ3VycmVudFVzZXIpIHtcbiAgICAgICAgICAgICAgcmVtb3ZlQ3VycmVudFVzZXJGcm9tUHlyYW1pZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdm0ucHlyYW1pZE1lbnVUb2dnbGUgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxscyB0aGUgY29tcGxldGUgY2hhbGxuZ2UgZnVuY3Rpb24gd2l0aCB0aGUgZm9yZmVpdGluZyBwbGF5ZXJcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IHBsYXllclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWxsZW5nZUV4cGlyZWQocGxheWVyKSB7XG4gICAgICBjb21wbGV0ZUNoYWxsZW5nZShudWxsLCB0cnVlLCBwbGF5ZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSBjdXJyZW50IHVzZXIgdGhlIHB5cmFtaWQgXG4gICAgICogaWYgdGhleSdyZSBub3QgYWxyZWFkeSBvbiBpdCBhbmQgdGhlcmUncyBzcGFjZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZEN1cnJlbnRVc2VyVG9QeXJhbWlkKCkge1xuICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICBpZiAodm0ubnVtYmVyT2ZSZWFsUGxheWVycyA8IHZtLm51bWJlck9mQmxvY2tzKSB7XG4gICAgICAgICAgdmFyIHBsYXllciA9IHtcbiAgICAgICAgICAgIF9pZDogaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZCxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIubGFzdE5hbWUsXG4gICAgICAgICAgICBwb3NpdGlvbjogdm0ubnVtYmVyT2ZSZWFsUGxheWVycyArIDFcbiAgICAgICAgICB9O1xuICAgICAgICAgIHB5cmFtaWRzU2VydmljZS5hZGRQbGF5ZXJUb1B5cmFtaWQodm0uY29tcGV0aXRpb25JZCwgcGxheWVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub3RpZnlTZXJ2aWNlLndhcm5pbmcoJ1NvcnJ5LCB0aGlzIHB5cmFtaWQgaXMgZnVsbCcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkc3RhdGUuZ28oJ2xvZ2luJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlybVJlbW92ZUN1cnJlbnRVc2VyRnJvbVB5cmFtaWQoKSB7XG4gICAgICBzd2FsKHtcbiAgICAgICAgdGl0bGU6ICdMZWF2ZSBQeXJhbWlkPycsXG4gICAgICAgIHRleHQ6ICdZb3Ugd2lsbCBsb3NlIHlvdXIgc3BvdCBhbmQgZm9yZmVpdCBhbnkgYWN0aXZlIGNoYWxsZW5nZXMuJyxcbiAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdZZXMsIGxlYXZlJyxcbiAgICAgICAgY29uZmlybUJ1dHRvbkNsYXNzOiAnYnRuLWRhbmdlcicsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICdObywgc3RheScsXG4gICAgICAgIGNsb3NlT25Db25maXJtOiBmYWxzZSxcbiAgICAgICAgY2xvc2VPbkNhbmNlbDogdHJ1ZVxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVDdXJyZW50VXNlckZyb21QeXJhbWlkKCk7XG4gICAgICAgIHN3YWwoJ09LLCB5b3VcXCdyIG91dCEnLCAnWW91XFwndmUgYmVlbiByZW1vdmVkIGZyb20gdGhlIHB5cmFtaWQuJywgJ3N1Y2Nlc3MnKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFVzZSB0aGlzIHRvIGVuZm9yY2Ugb3JkZXIgb2Ygb3BlcmF0aW9ucyB3aGVuIHRoZSBwbGF5ZXIgdG8gYmUgcmVtb3ZlZCBoYWQgYW4gYWN0aXZlIGNoYWxsZW5nZVxuICAgIHZhciByZW1vdmluZ0N1cnJlbnRVc2VyID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiByZW1vdmVDdXJyZW50VXNlckZyb21QeXJhbWlkKCkge1xuICAgICAgLy8gTWFrZSBzdXJlIHRoZSB1c2VyIGlzIGxvZ2dlZCBpbiBhbmQgaXMgb24gdGhpcyBweXJhbWlkXG4gICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpICYmIHZtLmN1cnJlbnRVc2VySXNPblB5cmFtaWQpIHtcbiAgICAgICAgcmVtb3ZpbmdDdXJyZW50VXNlciA9IHRydWU7XG4gICAgICAgIC8vIEZvcmZlaXQgaWYgdGhleSBoYXZlIGFuIGFjdGl2ZSBjaGFsbGVuZ2VcbiAgICAgICAgaWYgKHZtLmhhc0FjdGl2ZUNoYWxsZW5nZSkge1xuICAgICAgICAgIGNvbXBsZXRlQ2hhbGxlbmdlKG51bGwsIHRydWUsIHZtLmN1cnJlbnRVc2VyUGxheWVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBTaW5jZSB3ZSBhcmUgcmVtb3ZpbmcgdGhlbSAuLi5cbiAgICAgICAgICB2bS5jdXJyZW50VXNlcklzT25QeXJhbWlkID0gZmFsc2U7XG4gICAgICAgICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gZmFsc2U7XG5cbiAgICAgICAgICAvLyBHZXQgYW4gdXBkYXRlZCBjb3B5IG9mIHRoZSBweXJhbWlkIGluY2FzZSBhIGZvcmZlaXQgaGFwcGVuZWRcbiAgICAgICAgICBweXJhbWlkc1NlcnZpY2UuZ2V0UHlyYW1pZCh2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgICAvLyBTdG9yZSB0aGUgdXBkYXRlZCBjb3B5IGxvY2FsbHkgc28gYXMgbm90IHRvIGRpc3RydXB0IHRoZSBweXJhbWlkXG4gICAgICAgICAgICAvLyB1bnRpbCB0aGUgcGxheWVyIGhhcyBiZWVuIHJlbW92ZWRcbiAgICAgICAgICAgIHZhciBweXJhbWlkID0gcC5kYXRhO1xuXG4gICAgICAgICAgICAvLyBLZWVwIHRyYWNrIG9mIHRoZSBzcG90IHRoZXkgd2VyZSBpbiBvbiB0aGUgcHlyYW1pZFxuICAgICAgICAgICAgdmFyIG9wZW5Qb3NpdGlvbiA9IHZtLmN1cnJlbnRVc2VyUGxheWVyLnBvc2l0aW9uO1xuXG4gICAgICAgICAgICAvLyBNb3ZlIGFsbCB0aGUgcGxheWVycyB1cCAxIHBvc2l0aW9uIHRoYXQgd2VyZSBiZWhpbmQgdGhlIHJlbW92ZWQgcGxheWVyXG4gICAgICAgICAgICBfLmZvckVhY2gocHlyYW1pZC5wbGF5ZXJzLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgICAgICAgIGlmIChwbGF5ZXIucG9zaXRpb24gPj0gb3BlblBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLnBvc2l0aW9uIC09IDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmVkIHRoZSBwbGF5ZXIgZnJvbSB0aGUgcHlyYW1pZFxuICAgICAgICAgICAgdmFyIHJlbW92ZWRQbGF5ZXIgPSBfLnJlbW92ZShweXJhbWlkLnBsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBsYXllci5faWQgPT09IHZtLmN1cnJlbnRVc2VyUGxheWVyLl9pZDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBNYWtlIGEgbmV3IGFycmF5IG9mIGFsbCB0aGUgcGxheWVycyBzdGlsbCBvbiB0aGUgcHlyYW1pZFxuICAgICAgICAgICAgLy8gb25seSB1c2UgdGhlIHByb3BlcnRpZXMgd2Ugd2FudCB0byBzdG9yZSBpbiB0aGUgcHlyYW1pZCBkb2N1bWVudFxuICAgICAgICAgICAgdmFyIHVwZGF0ZWRQbGF5ZXJzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLm51bWJlck9mUmVhbFBsYXllcnMgLSAxOyArK2kpIHtcbiAgICAgICAgICAgICAgdmFyIHVwZGF0ZWRQbGF5ZXIgPSB7XG4gICAgICAgICAgICAgICAgX2lkOiBweXJhbWlkLnBsYXllcnNbaV0uX2lkLFxuICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogcHlyYW1pZC5wbGF5ZXJzW2ldLmZpcnN0TmFtZSxcbiAgICAgICAgICAgICAgICBsYXN0TmFtZTogcHlyYW1pZC5wbGF5ZXJzW2ldLmxhc3ROYW1lLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBweXJhbWlkLnBsYXllcnNbaV0ucG9zaXRpb25cbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICB1cGRhdGVkUGxheWVycy5wdXNoKHVwZGF0ZWRQbGF5ZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDYWxsIHNlcnZpY2UgdG8gcmVtb3ZlIHRoZSBwbGF5ZXJcbiAgICAgICAgICAgIHB5cmFtaWRzU2VydmljZS5yZW1vdmVkUGxheWVyRnJvbVB5cmFtaWQodm0uY29tcGV0aXRpb25JZCwgcmVtb3ZlZFBsYXllclswXSwgdXBkYXRlZFBsYXllcnMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZW1vdmluZ0N1cnJlbnRVc2VyID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZnJlc2ggdGhlIHB5cmFtaWQgYmVjYXN1ZSBvZiBhbiB1cGRhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWZyZXNoUHlyYW1pZCgpIHtcbiAgICAgIHB5cmFtaWRzU2VydmljZS5nZXRQeXJhbWlkKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKHB5cmFtaWQpIHtcbiAgICAgICAgdm0ucHlyYW1pZCA9IHB5cmFtaWQuZGF0YTtcbiAgICAgICAgb3JkZXJQbGF5ZXJzKCk7XG4gICAgICAgIGdldFBsYXllcnNTdGF0dXMoKTtcbiAgICAgICAgZmlsbEluRW1wdHlCbG9ja3MoKTtcbiAgICAgICAgYXNzaWduTGV2ZWxzVG9QbGF5ZXJzKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6Y2hhbGxlbmdlX2NyZWF0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNoYWxsZW5nZURldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oY2hhbGxlbmdlRGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgIHJlZnJlc2hQeXJhbWlkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6Y2hhbGxlbmdlX2NvbXBsZXRlZCcsIGZ1bmN0aW9uIChfLCBjaGFsbGVuZ2VEZXRhaWxzKSB7XG4gICAgICBpZiAodm0uY29tcGV0aXRpb25JZCA9PT0gY2hhbGxlbmdlRGV0YWlscy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuaW5mbyhjaGFsbGVuZ2VEZXRhaWxzLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgaWYgKCFyZW1vdmluZ0N1cnJlbnRVc2VyKSB7XG4gICAgICAgICAgcmVmcmVzaFB5cmFtaWQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOnBsYXllcl9hZGRlZCcsIGZ1bmN0aW9uIChfLCBkZXRhaWxzKSB7XG4gICAgICBpZiAodm0uY29tcGV0aXRpb25JZCA9PT0gZGV0YWlscy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuaW5mbyhkZXRhaWxzLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgcmVmcmVzaFB5cmFtaWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czpwbGF5ZXJfcmVtb3ZlZCcsIGZ1bmN0aW9uIChfLCBkZXRhaWxzKSB7XG4gICAgICBpZiAodm0uY29tcGV0aXRpb25JZCA9PT0gZGV0YWlscy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuaW5mbyhkZXRhaWxzLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgcmVmcmVzaFB5cmFtaWQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBMb2dpbkN0cmwpO1xuXG4gIGZ1bmN0aW9uIExvZ2luQ3RybCgkc3RhdGUsIGF1dGhTZXJ2aWNlLCBub3RpZnlTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5sb2dpbiA9IGxvZ2luO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgYXV0aFNlcnZpY2UuYXV0aGVudGljYXRlVXNlcih1c2VybmFtZSwgcGFzc3dvcmQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICghcmVzcG9uc2UpIHtcbiAgICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdVc2VybmFtZSAvIHBhc3N3b3JkIGNvbWJpbmFpdG9uIGluY29ycmVjdCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICgkc3RhdGUucHJldmlvdXMpIHtcbiAgICAgICAgICAgICRzdGF0ZS5nbygkc3RhdGUucHJldmlvdXMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2hvbWUnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBSZWdpc3RlckN0cmwpO1xuXG4gIGZ1bmN0aW9uIFJlZ2lzdGVyQ3RybCgkc2NvcGUsICRzdGF0ZSwgYXV0aFNlcnZpY2UsIG5vdGlmeVNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7fVxuXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXIobmV3VXNlcikge1xuICAgICAgaWYgKG5ld1VzZXIucGFzc3dvcmQgIT09IG5ld1VzZXIuY29uZmlybVBhc3N3b3JkKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ1Bhc3N3b3JkcyBkb25cXCd0IG1hdGNoIScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXV0aFNlcnZpY2UuY3JlYXRlVXNlcihuZXdVc2VyKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkc3RhdGUuZ28oJ2hvbWUnKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmZhY3RvcnkoJ3B5cmFtaWRzU2VydmljZScsIHB5cmFtaWRzU2VydmljZSk7XG5cbiAgZnVuY3Rpb24gcHlyYW1pZHNTZXJ2aWNlKCRodHRwKSB7XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBnZXRQeXJhbWlkOiBnZXRQeXJhbWlkLFxuICAgICAgZ2V0UHlyYW1pZHNGb3JVc2VyOiBnZXRQeXJhbWlkc0ZvclVzZXIsXG4gICAgICBnZXRQeXJhbWlkczogZ2V0UHlyYW1pZHMsXG4gICAgICBjcmVhdGVQeXJhbWlkOiBjcmVhdGVQeXJhbWlkLFxuICAgICAgc3dhcFBvc2l0aW9uczogc3dhcFBvc2l0aW9ucyxcbiAgICAgIGFkZFBsYXllclRvUHlyYW1pZDogYWRkUGxheWVyVG9QeXJhbWlkLFxuICAgICAgcmVtb3ZlZFBsYXllckZyb21QeXJhbWlkOiByZW1vdmVkUGxheWVyRnJvbVB5cmFtaWRcbiAgICB9O1xuXG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcHlyYW1pZCBmcm9tIHRoZSBkYXRhYmFzZSAob3IgbWVtb3J5KVxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHB5cmFtaWQgaWQgZm9yIHRoZSByZXF1ZXN0ZWQgcHlyYW1pZFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gcHlyYW1pZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFB5cmFtaWQoY29tcGV0aXRpb25JZCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9weXJhbWlkJywge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIHB5cmFtaWRzIGZyb20gdGhlIGRhdGFiYXNlIHRoYXQgYSBwYXJ0aWN1bGFyIHVzZXIgaXMgaW5jbHVkZWQgaW5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dXNlcklkfSB0aGUgdXNlciBpZCBmb3IgdGhlIHJlcXVlc3RlZCB1c2VyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBweXJhbWlkc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFB5cmFtaWRzRm9yVXNlcih1c2VySWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcHlyYW1pZHMvdXNlcicsIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgdXNlcklkOiB1c2VySWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYWN0aXZlIHB5cmFtaWRzIGZyb20gdGhlIGRhdGFiYXNlXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHB5cmFtaWRzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UHlyYW1pZHMoKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3B5cmFtaWRzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlUHlyYW1pZChweXJhbWlkKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9weXJhbWlkcy9jcmVhdGUnLCB7XG4gICAgICAgIHB5cmFtaWQ6IHB5cmFtaWRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN3YXBQb3NpdGlvbnMoY29tcGV0aXRpb25JZCwgY2hhbGxlbmdlciwgb3Bwb25lbnQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3B5cmFtaWRzL3N3YXBQb3NpdGlvbnMnLCB7XG4gICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgIGNoYWxsZW5nZXI6IGNoYWxsZW5nZXIsXG4gICAgICAgIG9wcG9uZW50OiBvcHBvbmVudFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkUGxheWVyVG9QeXJhbWlkKGNvbXBldGl0aW9uSWQsIHBsYXllcikge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcHlyYW1pZHMvYWRkUGxheWVyJywge1xuICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkLFxuICAgICAgICBwbGF5ZXI6IHBsYXllclxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlZFBsYXllckZyb21QeXJhbWlkKGNvbXBldGl0aW9uSWQsIHJlbW92ZWRQbGF5ZXIsIHBsYXllcnMpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3B5cmFtaWRzL3JlbW92ZVBsYXllcicsIHtcbiAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgcmVtb3ZlZFBsYXllcjogcmVtb3ZlZFBsYXllcixcbiAgICAgICAgcGxheWVyczogcGxheWVyc1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIi8qKlxuICogQ3JlYXRlcyBhIHB5cmFtaWRcbiAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignQ3JlYXRlUHlyYW1pZEN0cmwnLCBDcmVhdGVQeXJhbWlkQ3RybCk7XG5cbiAgZnVuY3Rpb24gQ3JlYXRlUHlyYW1pZEN0cmwoJHNjb3BlLCAkc3RhdGUsIHVzZXJTZXJ2aWNlLCBweXJhbWlkc1NlcnZpY2UsIG5vdGlmeVNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLm5ld1B5cmFtaWQgPSB7XG4gICAgICBwbGF5ZXJzOiBbXVxuICAgIH07XG4gICAgdm0uYXZhaWxhYmxlUGxheWVycyA9IFtdO1xuICAgIHZtLmFkZGVkUGxheWVycyA9IFtdO1xuICAgIHZtLmNyZWF0ZVB5cmFtaWQgPSBjcmVhdGVQeXJhbWlkO1xuICAgIHZtLmFkZFBsYXllciA9IGFkZFBsYXllcjtcbiAgICB2bS5yZW1vdmVQbGF5ZXIgPSByZW1vdmVQbGF5ZXI7XG4gICAgdm0uYWxsb3dlZFBsYXllcnMgPSAxMDtcbiAgICB2bS5uZXdQeXJhbWlkLmxldmVscyA9IDQ7XG4gICAgdm0ubmV3UHlyYW1pZC5mb3JmZWl0RGF5cyA9IDE7XG5cbiAgICBhY3RpdmF0ZSgpO1xuICAgIFxuICAgIC8qKlxuICAgICAqIFJ1bnMgb24gY29udHJvbGxlciBpbnN0YW50aWF0aW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICB1c2VyU2VydmljZS5nZXRBbGxVc2VycygpLnRoZW4oZnVuY3Rpb24gKHVzZXJzKSB7XG4gICAgICAgIHZtLmF2YWlsYWJsZVBsYXllcnMgPSB1c2Vycy5kYXRhO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIHBsYXllciB0byB0aGUgbmV3IHB5cmFtaWRcbiAgICAgKiBDaGVja3MgdG8gbWFrZSBzdXJlIHlvdSBhcmUgbm90IGFkZGluZyB0b28gbWFueSBwbGF5ZXJzXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBwbGF5ZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRQbGF5ZXIocGxheWVyKSB7XG4gICAgICBpZih2bS5hZGRlZFBsYXllcnMubGVuZ3RoIDwgdm0uYWxsb3dlZFBsYXllcnMpIHtcbiAgICAgICAgdm0uYWRkZWRQbGF5ZXJBZGRlZCA9IHRydWU7XG4gICAgICAgIHZtLmFkZGVkUGxheWVycy5wdXNoKF8ucmVtb3ZlKHZtLmF2YWlsYWJsZVBsYXllcnMsIHtfaWQ6IHBsYXllci5faWR9KVswXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdBbGwgc3BvdHMgaGF2ZSBiZWVuIGZpbGxlZC48YnIgLz5JZiB5b3Ugd2FudCB0byBhZGQgbW9yZSBwZW9wbGUgcGxlYXNlIGluY3JlYXNlIHRoZSBsZXZlbHMuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHByZXZpdW9zbHkgYWRkZWQgcGxheWVyIGZyb20gdGhlIHB5cmFtaWRcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IHBsYXllclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZVBsYXllcihwbGF5ZXIpIHtcbiAgICAgIHZtLmFkZGVkUGxheWVyQWRkZWQgPSBmYWxzZTtcbiAgICAgIHZtLmF2YWlsYWJsZVBsYXllcnMucHVzaChfLnJlbW92ZSh2bS5hZGRlZFBsYXllcnMsIHtfaWQ6IHBsYXllci5faWR9KVswXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgbnVtYmVyIG9mIGFsbG93ZWQgcGxheWVycyBmb3IgdGhlIHB5cmFtaWRcbiAgICAgKiBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIGxldmVscyBjaG9zZW5cbiAgICAgKiBSZW1vdmVzIGV4dHJhIHBsYXllcnMgYW5kIG1ha2VzIHRoZW0gYXZhaWxhYmxlIGFnYWluXG4gICAgICogQHBhcmFtICB7bnVtYmVyfSBsZXZlbHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVBbGxvd2VkUGxheWVycyhsZXZlbHMpIHtcbiAgICAgIHZtLmFsbG93ZWRQbGF5ZXJzID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSBsZXZlbHM7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgdm0uYWxsb3dlZFBsYXllcnMgKz0gaTtcbiAgICAgIH1cbiAgICAgIGlmICh2bS5hZGRlZFBsYXllcnMubGVuZ3RoID4gdm0uYWxsb3dlZFBsYXllcnMpIHtcbiAgICAgICAgdmFyIHJlbW92ZWRQbGF5ZXJzID0gdm0uYWRkZWRQbGF5ZXJzLnNwbGljZSh2bS5hbGxvd2VkUGxheWVycyk7XG4gICAgICAgIHZtLmF2YWlsYWJsZVBsYXllcnMgPSB2bS5hdmFpbGFibGVQbGF5ZXJzLmNvbmNhdChyZW1vdmVkUGxheWVycyk7XG4gICAgICAgIG5vdGlmeVNlcnZpY2Uud2FybmluZygnUGxheWVycyB3ZXJlIHJlbW92ZWQgYmVjYXN1ZSB0aGVyZSBhcmUgbm90IGVub3VnaCBzcG90cyBvbiB0aGUgcHlyYW1pZC4nKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFdhY3RoIGZvciBjaGFuZ2VzIHRvIHRoZSBweXJhbWlkIGxldmVscyBtb2RlbCBhbmQgdXBkYXRlIHRoZSBudW1iZXIgb2YgYWxsb3dlZCBwbGF5ZXJzXG4gICAgJHNjb3BlLiR3YXRjaCgndm0ubmV3UHlyYW1pZC5sZXZlbHMnLCBmdW5jdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgaWYgKG5ld1ZhbCAhPT0gb2xkVmFsKSB7XG4gICAgICAgIHVwZGF0ZUFsbG93ZWRQbGF5ZXJzKG5ld1ZhbCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBVc2VkIHRvIGtlZXAgdHJhY2sgb2YgcG9zaXRpb24gb24gdGhlIHB5cmFtaWQgYmFzZWQgb24gd2hlbiB0aGUgcGxheWVyIHdhcyBhZGRlZFxuICAgIHZhciBwb3NpdGlvbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHB5cmFtaWRcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IHB5cmFtaWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQeXJhbWlkKHB5cmFtaWQpIHtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh2bS5hZGRlZFBsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgcG9zaXRpb24gKz0gMTtcbiAgICAgICAgdmFyIGFkZFBsYXllciA9IHtcbiAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgICAgICAgX2lkOiBwbGF5ZXIuX2lkLFxuICAgICAgICAgIGVtYWlsOiBwbGF5ZXIudXNlcm5hbWUsXG4gICAgICAgICAgZmlyc3ROYW1lOiBwbGF5ZXIuZmlyc3ROYW1lLFxuICAgICAgICAgIGxhc3ROYW1lOiBwbGF5ZXIubGFzdE5hbWUsXG4gICAgICAgICAgbmlja25hbWU6IHBsYXllci5uaWNrbmFtZVxuICAgICAgICB9O1xuICAgICAgICB2bS5uZXdQeXJhbWlkLnBsYXllcnMucHVzaChhZGRQbGF5ZXIpO1xuICAgICAgfSk7XG4gICAgICBweXJhbWlkc1NlcnZpY2UuY3JlYXRlUHlyYW1pZChweXJhbWlkKS50aGVuKGZ1bmN0aW9uIChuZXdQeXJhbWlkKSB7XG4gICAgICAgICRzdGF0ZS5nbygncHlyYW1pZHMudmlldycsIHtcbiAgICAgICAgICBjb21wZXRpdGlvbklkOiBuZXdQeXJhbWlkLmRhdGEuX2lkXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ015UHlyYW1pZHNDdHJsJywgTXlQeXJhbWlkc0N0cmwpO1xuXG4gIGZ1bmN0aW9uIE15UHlyYW1pZHNDdHJsKCRzdGF0ZSwgcHlyYW1pZHNTZXJ2aWNlLCBpZGVudGl0eVNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnB5cmFtaWRzID0gbnVsbDtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIHB5cmFtaWRzU2VydmljZS5nZXRQeXJhbWlkc0ZvclVzZXIoaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZCkudGhlbihmdW5jdGlvbiAocHlyYW1pZHMpIHtcbiAgICAgICAgdm0ucHlyYW1pZHMgPSBweXJhbWlkcy5kYXRhO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ1B5cmFtaWRDdHJsJywgUHlyYW1pZEN0cmwpO1xuXG4gIGZ1bmN0aW9uIFB5cmFtaWRDdHJsKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCBweXJhbWlkc1NlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmNvbXBldGl0aW9uSWQgPSBudWxsO1xuICAgIHZtLnB5cmFtaWQgPSBudWxsO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIHZtLmNvbXBldGl0aW9uSWQgPSAkc3RhdGVQYXJhbXMuY29tcGV0aXRpb25JZDtcblxuICAgICAgICBweXJhbWlkc1NlcnZpY2UuZ2V0UHlyYW1pZCh2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChweXJhbWlkKSB7XG4gICAgICAgICAgaWYgKHB5cmFtaWQuZGF0YSkge1xuICAgICAgICAgICAgdm0ucHlyYW1pZCA9IHB5cmFtaWQuZGF0YTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCdweXJhbWlkcy5teVB5cmFtaWRzJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignUHlyYW1pZHNDdHJsJywgUHlyYW1pZHNDdHJsKTtcblxuICBmdW5jdGlvbiBQeXJhbWlkc0N0cmwoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5weXJhbWlkcyA9IG51bGw7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignU3RhdHNDdHJsJywgU3RhdHNDdHJsKTtcblxuICBmdW5jdGlvbiBTdGF0c0N0cmwoJHN0YXRlUGFyYW1zLCAkc3RhdGUsIHB5cmFtaWRzU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uY29tcGV0aXRpb25JZCA9IG51bGw7XG4gICAgdm0ucHlyYW1pZCA9IG51bGw7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBpZiAoJHN0YXRlUGFyYW1zLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgdm0uY29tcGV0aXRpb25JZCA9ICRzdGF0ZVBhcmFtcy5jb21wZXRpdGlvbklkO1xuICAgICAgICBweXJhbWlkc1NlcnZpY2UuZ2V0UHlyYW1pZCh2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChweXJhbWlkKSB7XG4gICAgICAgICAgaWYgKHB5cmFtaWQuZGF0YSkge1xuICAgICAgICAgICAgdm0ucHlyYW1pZCA9IHB5cmFtaWQuZGF0YTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCdweXJhbWlkcy5teVB5cmFtaWRzJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuZmFjdG9yeSgnYXV0aFNlcnZpY2UnLCBhdXRoU2VydmljZSk7XG5cbiAgZnVuY3Rpb24gYXV0aFNlcnZpY2UoJHN0YXRlLCAkaHR0cCwgJHEsIHVzZXJTZXJ2aWNlLCBpZGVudGl0eVNlcnZpY2UpIHtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGF1dGhlbnRpY2F0ZVVzZXI6IGF1dGhlbnRpY2F0ZVVzZXIsXG4gICAgICBjcmVhdGVVc2VyOiBjcmVhdGVVc2VyLFxuICAgICAgbG9nb3V0OiBsb2dvdXQsXG4gICAgICBhdXRob3JpemVDdXJyZW50VXNlckZvclJvdXRlOiBhdXRob3JpemVDdXJyZW50VXNlckZvclJvdXRlLFxuICAgICAgYXV0aGVudGljYXRlZFVzZXJGb3JSb3V0ZTogYXV0aGVudGljYXRlZFVzZXJGb3JSb3V0ZVxuICAgIH07XG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICBmdW5jdGlvbiBhdXRoZW50aWNhdGVVc2VyKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgdmFyIGRmZCA9ICRxLmRlZmVyKCk7XG4gICAgICAkaHR0cC5wb3N0KCcvbG9naW4nLCB7XG4gICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyID0gcmVzcG9uc2UuZGF0YS51c2VyO1xuICAgICAgICAgIGRmZC5yZXNvbHZlKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRmZC5yZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGZkLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVXNlcih1c2VyRGF0YSkge1xuICAgICAgdmFyIGRmZCA9ICRxLmRlZmVyKCk7XG4gICAgICAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywge1xuICAgICAgICB1c2VyRGF0YTogdXNlckRhdGFcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5kYXRhKSB7XG4gICAgICAgICAgYXV0aGVudGljYXRlVXNlcih1c2VyRGF0YS51c2VybmFtZSwgdXNlckRhdGEucGFzc3dvcmQpO1xuICAgICAgICAgIGRmZC5yZXNvbHZlKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRmZC5yZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGZkLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9nb3V0KCkge1xuICAgICAgdmFyIGRmZCA9ICRxLmRlZmVyKCk7XG4gICAgICAkaHR0cC5wb3N0KCcvbG9nb3V0Jywge1xuICAgICAgICBsb2dvdXQ6IHRydWVcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGRmZC5yZXNvbHZlKCk7XG4gICAgICAgICRzdGF0ZS5nbygnaG9tZScpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGZkLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXV0aG9yaXplQ3VycmVudFVzZXJGb3JSb3V0ZShyb2xlKSB7XG4gICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aG9yaXplZChyb2xlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAkcS5yZWplY3QoJ25vdCBhdXRob3JpemVkJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXV0aGVudGljYXRlZFVzZXJGb3JSb3V0ZSgpIHtcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJHEucmVqZWN0KCdub3QgYXV0aG9yaXplZCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5mYWN0b3J5KCd1c2VyU2VydmljZScsIHVzZXJTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiB1c2VyU2VydmljZSgkaHR0cCwgaWRlbnRpdHlTZXJ2aWNlKSB7XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBnZXRBbGxVc2VyczogZ2V0QWxsVXNlcnNcbiAgICB9O1xuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gZ2V0QWxsVXNlcnMoKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJykudGhlbihmdW5jdGlvbiAodXNlcnMpIHtcbiAgICAgICAgcmV0dXJuIHVzZXJzO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmZpbHRlcignb3JkZXJPYmplY3RCeScsIG9yZGVyT2JqZWN0QnkpO1xuXG4gIGZ1bmN0aW9uIG9yZGVyT2JqZWN0QnkoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCwgYXR0cmlidXRlKSB7XG4gICAgICBpZiAoIWFuZ3VsYXIuaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG5cbiAgICAgIHZhciBhcnJheSA9IFtdO1xuICAgICAgZm9yICh2YXIgb2JqZWN0S2V5IGluIGlucHV0KSB7XG4gICAgICAgIGFycmF5LnB1c2goaW5wdXRbb2JqZWN0S2V5XSk7XG4gICAgICB9XG5cbiAgICAgIGFycmF5LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgYSA9IHBhcnNlSW50KGFbYXR0cmlidXRlXSk7XG4gICAgICAgIGIgPSBwYXJzZUludChiW2F0dHJpYnV0ZV0pO1xuICAgICAgICByZXR1cm4gYSAtIGI7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9O1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmZhY3RvcnkoJ2lkZW50aXR5U2VydmljZScsIGlkZW50aXR5U2VydmljZSk7XG5cbiAgZnVuY3Rpb24gaWRlbnRpdHlTZXJ2aWNlKCR3aW5kb3cpIHtcbiAgICB2YXIgY3VycmVudFVzZXI7XG4gICAgaWYgKCR3aW5kb3cuYm9vdHN0cmFwcGVkVXNlck9iamVjdCAhPT0gbnVsbCkge1xuICAgICAgY3VycmVudFVzZXIgPSAkd2luZG93LmJvb3RzdHJhcHBlZFVzZXJPYmplY3Q7XG4gICAgfVxuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyLFxuICAgICAgaXNBdXRoZW50aWNhdGVkOiBpc0F1dGhlbnRpY2F0ZWQsXG4gICAgICBpc0F1dGhvcml6ZWQ6IGlzQXV0aG9yaXplZFxuICAgIH07XG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICBmdW5jdGlvbiBpc0F1dGhlbnRpY2F0ZWQoKSB7XG4gICAgICByZXR1cm4gISF0aGlzLmN1cnJlbnRVc2VyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQXV0aG9yaXplZChyb2xlKSB7XG4gICAgICByZXR1cm4gISF0aGlzLmN1cnJlbnRVc2VyICYmIHRoaXMuY3VycmVudFVzZXIucm9sZXMuaW5kZXhPZihyb2xlKSA+IC0xO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5mYWN0b3J5KCdub3RpZnlTZXJ2aWNlJywgbm90aWZ5U2VydmljZSk7XG5cbiAgZnVuY3Rpb24gbm90aWZ5U2VydmljZSgpIHtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGluZm86IGluZm8sXG4gICAgICBzdWNjZXNzOiBzdWNjZXNzLFxuICAgICAgd2FybmluZzogd2FybmluZyxcbiAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgIGludmVyc2U6IGludmVyc2VcbiAgICB9O1xuXG4gICAgJC5ub3RpZnlEZWZhdWx0cyh7XG4gICAgICBuZXdlc3Rfb25fdG9wOiB0cnVlLFxuICAgICAgb2Zmc2V0OiB7XG4gICAgICAgIHg6IDIwLFxuICAgICAgICB5OiA4NVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICBmdW5jdGlvbiBpbmZvKG1lc3NhZ2UsIHVybCwgdGFyZ2V0KSB7XG4gICAgICAkLm5vdGlmeSh7XG4gICAgICAgIC8vIG9wdGlvbnNcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgICB9LCB7XG4gICAgICAgIC8vIHNldHRpbmdzXG4gICAgICAgIHR5cGU6ICdpbmZvJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3VjY2VzcyhtZXNzYWdlLCB1cmwsIHRhcmdldCkge1xuICAgICAgJC5ub3RpZnkoe1xuICAgICAgICAvLyBvcHRpb25zXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgfSwge1xuICAgICAgICAvLyBzZXR0aW5nc1xuICAgICAgICB0eXBlOiAnc3VjY2VzcydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSwgdXJsLCB0YXJnZXQpIHtcbiAgICAgICQubm90aWZ5KHtcbiAgICAgICAgLy8gb3B0aW9uc1xuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0sIHtcbiAgICAgICAgLy8gc2V0dGluZ3NcbiAgICAgICAgdHlwZTogJ3dhcm5pbmcnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcnJvcihtZXNzYWdlLCB1cmwsIHRhcmdldCkge1xuICAgICAgJC5ub3RpZnkoe1xuICAgICAgICAvLyBvcHRpb25zXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgfSwge1xuICAgICAgICAvLyBzZXR0aW5nc1xuICAgICAgICB0eXBlOiAnZGFuZ2VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52ZXJzZShtZXNzYWdlLCB1cmwsIHRhcmdldCkge1xuICAgICAgJC5ub3RpZnkoe1xuICAgICAgICAvLyBvcHRpb25zXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgfSwge1xuICAgICAgICAvLyBzZXR0aW5nc1xuICAgICAgICB0eXBlOiAnaW52ZXJzZSdcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5mYWN0b3J5KCdzY3JvbGxiYXJTZXJ2aWNlJywgc2Nyb2xsYmFyU2VydmljZSk7XG5cbiAgZnVuY3Rpb24gc2Nyb2xsYmFyU2VydmljZSgpIHtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIG1hbGlodVNjcm9sbDogbWFsaWh1U2Nyb2xsXG4gICAgfTtcblxuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gbWFsaWh1U2Nyb2xsKHNlbGVjdG9yLCB0aGVtZSwgc2Nyb2xsYXhpcywgbW91c2V3aGVlbGF4aXMpIHtcbiAgICAgICQoc2VsZWN0b3IpLm1DdXN0b21TY3JvbGxiYXIoe1xuICAgICAgICB0aGVtZTogdGhlbWUsXG4gICAgICAgIHNjcm9sbEluZXJ0aWE6IDEwMCxcbiAgICAgICAgYXhpczogc2Nyb2xsYXhpcyxcbiAgICAgICAgbW91c2VXaGVlbDoge1xuICAgICAgICAgIGVuYWJsZTogdHJ1ZSxcbiAgICAgICAgICBheGlzOiBtb3VzZXdoZWVsYXhpcyxcbiAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZmFjdG9yeSgnc2lkZWJhclNlcnZpY2UnLCBzaWRlYmFyU2VydmljZSk7XG5cbiAgZnVuY3Rpb24gc2lkZWJhclNlcnZpY2UoKSB7XG4gICAgdmFyIHNpZGViYXJTdGF0dXMgPSB7XG4gICAgICBsZWZ0OiBmYWxzZSxcbiAgICAgIHJpZ2h0OiBmYWxzZVxuICAgIH07XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBnZXRTaWRlYmFyU3RhdHVzOiBnZXRTaWRlYmFyU3RhdHVzLFxuICAgICAgc2V0U2lkZWJhclN0YXR1czogc2V0U2lkZWJhclN0YXR1c1xuICAgIH07XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGdldFNpZGViYXJTdGF0dXMoKSB7XG4gICAgICByZXR1cm4gc2lkZWJhclN0YXR1cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRTaWRlYmFyU3RhdHVzKHN0YXR1cykge1xuICAgICAgc2lkZWJhclN0YXR1cy5sZWZ0ID0gc3RhdHVzO1xuICAgIH1cbiAgfVxufSkoKTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgLnNlcnZpY2UoJ3dlYnNvY2tldFNlcnZpY2UnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHdpbmRvdykge1xuICAgIGZ1bmN0aW9uIHdlYnNvY2tldEhvc3QoKSB7XG4gICAgICBpZiAoJHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicpIHtcbiAgICAgICAgcmV0dXJuICd3c3M6Ly8nICsgJHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICd3czovLycgKyAkd2luZG93LmxvY2F0aW9uLmhvc3Q7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNvbm5lY3Rpb247XG4gICAgdGhpcy5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgY29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXQod2Vic29ja2V0SG9zdCgpKTtcblxuICAgICAgY29ubmVjdGlvbi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgcGF5bG9hZCA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd3czonICsgcGF5bG9hZC50b3BpYywgcGF5bG9hZC5kYXRhKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHRoaXMuc2VuZCA9IGZ1bmN0aW9uICh0b3BpYywgZGF0YSkge1xuICAgICAgdmFyIGpzb24gPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHRvcGljOiB0b3BpYyxcbiAgICAgICAgZGF0YTogZGF0YVxuICAgICAgfSk7XG4gICAgICBjb25uZWN0aW9uLnNlbmQoanNvbik7XG4gICAgfTtcbiAgfSkucnVuKGZ1bmN0aW9uICh3ZWJzb2NrZXRTZXJ2aWNlKSB7XG4gICAgd2Vic29ja2V0U2VydmljZS5jb25uZWN0KCk7XG4gIH0pOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0hvbWVDdHJsJywgSG9tZUN0cmwpO1xuXG4gIGZ1bmN0aW9uIEhvbWVDdHJsKHB5cmFtaWRzU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0ucHlyYW1pZHMgPSBbXTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIHB5cmFtaWRzU2VydmljZS5nZXRQeXJhbWlkcygpLnRoZW4oZnVuY3Rpb24gKHB5cmFtaWRzKSB7XG4gICAgICAgIHZtLnB5cmFtaWRzID0gcHlyYW1pZHMuZGF0YTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BGb290ZXInLCBrcEZvb3Rlcik7XG5cbiAgZnVuY3Rpb24ga3BGb290ZXIoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jb21tb24vY29tcG9uZW50cy9mb290ZXIuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoaWRlbnRpdHlTZXJ2aWNlLCBhdXRoU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uaW5kZW50aXR5ID0gaWRlbnRpdHlTZXJ2aWNlO1xuICAgIHZtLmxvZ291dCA9IGxvZ291dDtcblxuICAgIGZ1bmN0aW9uIGxvZ291dCgpIHtcbiAgICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BIZWFkZXInLCBrcEhlYWRlcik7XG5cbiAgZnVuY3Rpb24ga3BIZWFkZXIoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ2hlYWRlckN0cmwnLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NvbW1vbi9jb21wb25lbnRzL2hlYWRlci5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYyhzaWRlYmFyU2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlLCBhdXRoU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uaW5kZW50aXR5ID0gaWRlbnRpdHlTZXJ2aWNlO1xuICAgIHZtLmxvZ291dCA9IGxvZ291dDtcbiAgICB2bS5zaWRlYmFyU3RhdHVzID0gc2lkZWJhclNlcnZpY2UuZ2V0U2lkZWJhclN0YXR1cygpO1xuICAgIHZtLnRvZ2dsZVNpZGViYXIgPSB0b2dnbGVTaWRlYmFyO1xuXG4gICAgZnVuY3Rpb24gdG9nZ2xlU2lkZWJhcigpIHtcbiAgICAgIHZtLnNpZGViYXJTdGF0dXMubGVmdCA9ICF2bS5zaWRlYmFyU3RhdHVzLmxlZnQ7XG4gICAgICBzaWRlYmFyU2VydmljZS5zZXRTaWRlYmFyU3RhdHVzKHZtLnNpZGViYXJTdGF0dXMubGVmdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9nb3V0KCkge1xuICAgICAgYXV0aFNlcnZpY2UubG9nb3V0KCk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdrcFNpZGViYXInLCBrcFNpZGViYXIpO1xuXG4gIGZ1bmN0aW9uIGtwU2lkZWJhcigpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAnc2lkZWJhckN0cmwnLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NvbW1vbi9jb21wb25lbnRzL3NpZGViYXIuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoaWRlbnRpdHlTZXJ2aWNlLCBhdXRoU2VydmljZSwgc2lkZWJhclNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmluZGVudGl0eSA9IGlkZW50aXR5U2VydmljZTtcbiAgICB2bS5sb2dvdXQgPSBsb2dvdXQ7XG4gICAgdm0uc2lkZWJhclN0YXR1cyA9IHNpZGViYXJTZXJ2aWNlLmdldFNpZGViYXJTdGF0dXMoKTtcblxuICAgIGZ1bmN0aW9uIGxvZ291dCgpIHtcbiAgICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2NPdmVyZmxvdycsIGNPdmVyZmxvdyk7XG5cbiAgZnVuY3Rpb24gY092ZXJmbG93KHNjcm9sbGJhclNlcnZpY2UpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdDJyxcbiAgICAgIGxpbms6IGxpbmtGdW5jLFxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICB2YXIgc2Nyb2xsYXhpcyA9IGF0dHJzLnNjcm9sbGF4aXMgfHwgJ3knO1xuICAgICAgdmFyIHRoZW1lID0gYXR0cnMudGhlbWUgfHwgJ21pbmltYWwtZGFyayc7XG4gICAgICB2YXIgbW91c2V3aGVlbGF4aXMgPSBhdHRycy5tb3VzZXdoZWVsYXhpcyB8fCAneSc7XG4gICAgICBpZiAoISQoJ2h0bWwnKS5oYXNDbGFzcygnaXNtb2JpbGUnKSkge1xuICAgICAgICBzY3JvbGxiYXJTZXJ2aWNlLm1hbGlodVNjcm9sbChlbGVtZW50LCB0aGVtZSwgc2Nyb2xsYXhpcywgbW91c2V3aGVlbGF4aXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ3RvZ2dsZVN1Ym1lbnUnLCB0b2dnbGVTdWJtZW51KTtcblxuICBmdW5jdGlvbiB0b2dnbGVTdWJtZW51KCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgbGluazogbGlua0Z1bmMsXG4gICAgfTtcblxuICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwpIHtcbiAgICAgIGVsLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwubmV4dCgpLnNsaWRlVG9nZ2xlKDIwMCk7XG4gICAgICAgIGVsLnBhcmVudCgpLnRvZ2dsZUNsYXNzKCd0b2dnbGVkJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd3YXZlc0VmZmVjdCcsIHdhdmVzRWZmZWN0KTtcblxuICBmdW5jdGlvbiB3YXZlc0VmZmVjdCgpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdDJyxcbiAgICAgIGxpbms6IGxpbmtGdW5jLFxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50Lmhhc0NsYXNzKCdidG4taWNvbicpIHx8IGVsZW1lbnQuaGFzQ2xhc3MoJ2J0bi1mbG9hdCcpKSB7XG4gICAgICAgIFdhdmVzLmF0dGFjaChlbGVtZW50LCBbJ3dhdmVzLWNpcmNsZSddKTtcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5oYXNDbGFzcygnYnRuLWxpZ2h0JykpIHtcbiAgICAgICAgV2F2ZXMuYXR0YWNoKGVsZW1lbnQsIFsnd2F2ZXMtbGlnaHQnXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBXYXZlcy5hdHRhY2goZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIFdhdmVzLmluaXQoKTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdmZ0xpbmUnLCBmZ0xpbmUpO1xuXG4gIGZ1bmN0aW9uIGZnTGluZSgpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdDJyxcbiAgICAgIGxpbms6IGxpbmtGdW5jLFxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQuY2hpbGRyZW4oKS5maXJzdCgpO1xuICAgICAgdmFyIGlzRmxvYXRMYWJlbCA9IGVsZW1lbnQucGFyZW50KCkuaGFzQ2xhc3MoJ2ZnLWZsb2F0Jyk7XG4gICAgICBpbnB1dC5mb2N1cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2ZnLXRvZ2dsZWQnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpbnB1dC5ibHVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc0Zsb2F0TGFiZWwgfHwgKGlzRmxvYXRMYWJlbCAmJiBpbnB1dC52YWwoKS5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZmctdG9nZ2xlZCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
