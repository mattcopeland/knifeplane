angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","LocalStorageModule","angular-sortable-view","angular.vertilize"]),function(){"use strict ";function e(e,t,n){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache",t.options({appendToBody:!0}),n.errorOnUnhandledRejections(!1)}e.$inject=["$httpProvider","$uibTooltipProvider","$qProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e,t){function n(e){t.set("sidebarLocked",e)}var r=this;r.$state=e,r.lockSidebar=t.get("sidebarLocked"),r.toggleSidebarLocked=n}e.$inject=["$state","localStorageService"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,i,a){var o={superAdmin:n,admin:t,user:r};a.html5Mode(!0),i.otherwise("/"),i.when("/pyramids/","/pyramids"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("pyramids",{url:"/pyramids",views:{content:{controller:"PyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramids.html"}}}).state("pyramids.myPyramids",{url:"/my-pyramids",views:{"content@":{controller:"MyPyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/my-pyramids.html"}},resolve:{auth:o.user}}).state("pyramids.view",{url:"/view/:competitionId",views:{"content@":{controller:"PyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramid.html"}}}).state("pyramids.stats",{url:"/stats/:competitionId",views:{"content@":{controller:"StatsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/stats.html"}}}).state("pyramids.admin",{url:"/admin/:competitionId",views:{"content@":{controller:"AdminCtrl",controllerAs:"vm",templateUrl:"pyramids/views/admin.html"}},resolve:{auth:o.user}}).state("pyramids.create",{url:"/create",views:{"content@":{controller:"CreatePyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/create-pyramid.html"}},resolve:{auth:o.user}}).state("user",{url:"/user",views:{content:{controller:"UserCtrl",controllerAs:"vm",templateUrl:"users/views/user.html"}},resolve:{auth:o.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}}).state("verify",{url:"/verification",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("verification",{url:"/verification/:userId/:verificationToken",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("password-reset-request",{url:"/password-reset",views:{content:{controller:"PasswordResetCtrl",controllerAs:"vm",templateUrl:"authentication/views/password-reset.html"}}}).state("password-reset",{url:"/password-reset/:userId/:verificationToken",views:{content:{controller:"PasswordResetCtrl",controllerAs:"vm",templateUrl:"authentication/views/password-reset.html"}}})}function t(e){return e.authorizeCurrentUserForRoute("admin")}function n(e){return e.authorizeCurrentUserForRoute("super-admin")}function r(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),t.$inject=["authService"],n.$inject=["authService"],r.$inject=["authService"]}(),function(){"use strict";function e(e,t,n){e.$on("$stateChangeError",function(e,n,r,i,a,o){"not authorized"===o&&(t.go("login"),t.previous=n,t.prevParams=r)}),e.$on("$stateChangeStart",function(){n.setSidebarStatus(!1)})}e.$inject=["$rootScope","$state","sidebarService"],angular.module("app").run(e)}(),function(){"use strict";function e(e,t,n,r,i,a){function o(e,r){var a=n.defer();return t.post("/login",{username:e,password:r}).then(function(e){e.data.success?(i.currentUser=e.data.user,a.resolve(!0)):"unverified"===e.data.message?a.resolve("unverified"):a.resolve(!1)}),a.promise}function s(e){var r=n.defer();return t.post("/api/users",{userData:e}).then(function(e){e.data?r.resolve(!0):r.resolve(!1)},function(e){"Error: Duplicate Username"===e.data.reason&&a.error("Sorry, an account already exists with that email address.")}),r.promise}function l(){var r=n.defer();return t.post("/logout",{logout:!0}).then(function(){i.currentUser=void 0,r.resolve(),e.go("home")}),r.promise}function c(e){return!!i.isAuthorized(e)||n.reject("not authorized")}function d(){return!!i.isAuthenticated()||n.reject("not authorized")}var u={authenticateUser:o,createUser:s,logout:l,authorizeCurrentUserForRoute:c,authenticatedUserForRoute:d};return u}e.$inject=["$state","$http","$q","userService","identityService","notifyService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e){function t(){return e.get("/api/users").then(function(e){return e})}function n(t,n){return e.get("/api/user/verification",{params:{userId:t,verificationToken:n}})}function r(t){return e.get("/api/user/password/link",{params:{username:t}})}function i(t,n,r){return e.put("/api/user/password/reset",{userId:t,verificationToken:n,password:r})}var a={getAllUsers:t,verifyUser:n,generatePasswordResetLink:r,resetPassword:i};return a}e.$inject=["$http"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(e,t,n){function r(){}function i(r,i){t.authenticateUser(r,i).then(function(t){t?"unverified"===t?n.error("You must verify your email before you can login"):e.previous?(e.go(e.previous,e.prevParams),e.previous=null,e.prevParams=null):e.go("pyramids.myPyramids"):n.error("Username / password combinaiton incorrect")})}var a=this;a.login=i,r()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,t,n,r,i,a){function o(){a.isAuthenticated()?e.go("home"):t.userId&&t.verificationToken&&n.verifyUser(t.userId,t.verificationToken).then(function(e){e.data&&(c.verified=!0)})}function s(t){n.generatePasswordResetLink(t).then(function(t){t.data?(r.success("Please check your email for a password reset link"),e.go("home")):r.error("Could not find that email address")})}function l(a){a.password!==a.confirmPassword?r.error("Passwords don't match!"):n.resetPassword(t.userId,t.verificationToken,a.password).then(function(t){t.data&&i.authenticateUser(t.data.username,a.password).then(function(t){e.go("home")})})}var c=this;c.username="",c.verified=!1,c.resetPasswordForm={},c.generatePasswordResetLink=s,c.resetPassword=l,o()}e.$inject=["$state","$stateParams","userService","notifyService","authService","identityService"],angular.module("app").controller("PasswordResetCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){}function i(r){r.password!==r.confirmPassword?n.error("Passwords don't match!"):t.createUser(r).then(function(){e.go("verify")})}var a=this;a.register=i,r()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){t.userId&&t.verificationToken&&(i.verifying=!0,i.verified=null,n.verifyUser(t.userId,t.verificationToken).then(function(e){e.data?i.verified=!0:i.verified=!1}))}var i=this;i.verified=void 0,i.verifying=!1,r()}e.$inject=["$state","$stateParams","userService"],angular.module("app").controller("VerificationCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/challenges/components/active-challenges.html"};return e}function t(e,t){function n(){e.$watch("vm.pyramid",function(){i.pyramid&&r()})}function r(){i.challenges=[],t.getActiveChallengesByCompetition(i.pyramid._id).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){0!==e.timeLimit&&(e.expires=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1)}))})}var i=this;i.challenges=[],n()}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpActiveChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@",allowDelete:"=",challenges:"="},templateUrl:"/challenges/components/completed-challenges.html"};return e}function t(e,t,n){function r(){e.$watch("vm.challenges",function(){o.challenges&&o.challenges.length>0&&i()})}function i(){_.forEach(o.challenges,function(e){e.loser="challenger"===e.winner?"opponent":"challenger",e.whenCompleted=moment(e.completed).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd",sameElse:"DD/MM/YYYY"})})}function a(e,t){n.deleteChallenge(o.competitionId,e).then(function(){o.challenges.splice(t,1)})}var o=this;o.challenges=[],o.deleteChallenge=a,r()}t.$inject=["$scope","$state","challengesService"],angular.module("app").directive("kpCompletedChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{player:"="},templateUrl:"/challenges/components/player-overall-results.html"};return e}function t(e){function t(){e.$watch("vm.player.results",function(){a.player&&(n(a.player),r(a.player),i(a.player))})}function n(e){for(var t=[],n=0;n<a.maxLevels;n++)t.push(n*(n+1)/2+1);e.level=t.length;for(var r=0;r<t.length;r++)if(e.position<t[r+1]){e.level=t.indexOf(t[r])+1;break}}function r(e){var t,n=0,r=!0;_.forEach(e.results,function(i){r&&("challenger"===i.winner&&i.challenger._id===e._id||"opponent"===i.winner&&i.opponent._id===e._id?"losing"!==t?(n+=1,t="winning"):r=!1:("opponent"===i.winner&&i.challenger._id===e._id||"challenger"===i.winner&&i.opponent._id===e._id)&&("winning"!==t?(n+=1,t="losing"):r=!1)),a.streak={type:t,value:n}})}function i(e){a.wins.asOpponent=_.size(_.filter(e.results,function(t){return t.opponent._id===e._id&&"opponent"===t.winner})),a.wins.asChallenger=_.size(_.filter(e.results,function(t){return t.challenger._id===e._id&&"challenger"===t.winner})),a.wins.total=a.wins.asChallenger+a.wins.asOpponent,a.wins.byForfeit=_.size(_.filter(e.results,function(t){return t.forfeit&&(t.challenger._id===e._id&&"challenger"===t.winner||t.opponent._id===e._id&&"opponent"===t.winner)})),a.loses.asOpponent=_.size(_.filter(e.results,function(t){return t.opponent._id===e._id&&"challenger"===t.winner})),a.loses.asChallenger=_.size(_.filter(e.results,function(t){return t.challenger._id===e._id&&"opponent"===t.winner})),a.loses.total=a.loses.asChallenger+a.loses.asOpponent,a.loses.byForfeit=_.size(_.filter(e.results,function(t){return t.forfeit&&(t.challenger._id===e._id&&"opponent"===t.winner||t.opponent._id===e._id&&"challenger"===t.winner)}))}var a=this;a.maxLevels=10,a.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},a.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},a.streak={type:null,value:0},t()}t.$inject=["$scope"],angular.module("app").directive("kpPlayerOverallResults",e)}(),function(){"use strict";function e(e){function t(t){return e.post("/api/challenges/create",{challenge:t})}function n(t){return e.post("/api/challenges/complete",{challenge:t})}function r(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function i(t){return e.get("/api/challenges/active/competition",{params:{competitionId:t}})}function a(t,n){return e.get("/api/challenges/active/competition/player",{params:{competitionId:t,playerId:n}})}function o(t,n){return e.get("/api/challenges/completed/competition",{params:{competitionId:t,limit:n}})}function s(t,n){return e.delete("/api/challenges/active/competition/player/delete",{params:{competitionId:t,playerId:n}})}function l(t,n){return e.delete("/api/challenges/delete",{params:{competitionId:t,challengeId:n}})}function c(t,n){return e.get("/api/challenges/results/competition/player",{params:{competitionId:t,playerId:n}})}var d={createChallenge:t,completeChallenge:n,getChallengesByCompetition:r,getActiveChallengesByCompetition:i,getActiveChallengeByCompetitionByPlayer:a,getCompletedChallengesByCompetition:o,deleteActiveChallengeByCompetitionByPlayer:s,deleteChallenge:l,getPlayerResultsByCompetition:c};return d}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/footer.html"};return e}function t(e,t){function n(){t.logout()}var r=this;r.indentity=e,r.logout=n}t.$inject=["identityService","authService"],angular.module("app").directive("kpFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"headerCtrl",restrict:"A",templateUrl:"/common/components/header.html"};return e}function t(e,t,n,r,i){function a(){o(),e.$watch("headerCtrl.indentity.currentUser",function(){n.isAuthenticated()&&o()})}function o(){u.alerts=[],n.isAuthenticated()&&i.getActiveAlertsByPlayer(n.currentUser._id).then(function(e){u.alerts=e.data})}function s(e,t){i.clearAlert(e).then(function(){u.alerts.splice(t,1)})}function l(){i.clearAllAlertsByPlayer(n.currentUser._id).then(function(){u.alerts=[]})}function c(){t.setSidebarStatus(!u.sidebarStatus.left)}function d(){r.logout()}var u=this;u.indentity=n,u.logout=d,u.sidebarStatus=t.getSidebarStatus(),u.toggleSidebar=c,u.clearAlert=s,u.clearAllAlerts=l,u.alerts=[],a(),e.$on("ws:update_alerts",function(e,t){n.isAuthenticated()&&_.some(t,["userId",n.currentUser._id])&&o()})}t.$inject=["$scope","sidebarService","identityService","authService","alertsService"],angular.module("app").directive("kpHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"/common/components/sidebar.html"};return e}function t(e,t,n){function r(){t.logout()}var i=this;i.indentity=e,i.logout=r,i.sidebarStatus=n.getSidebarStatus()}t.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("kpSidebar",e)}(),function(){"use strict";function e(){return function(e,t){if(!angular.isObject(e))return e;var n=[];for(var r in e)n.push(e[r]);return n.sort(function(e,n){return e=parseInt(e[t]),n=parseInt(n[t]),e-n}),n}}angular.module("app").filter("orderObjectBy",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/alerts/",{params:{userId:t}})}function n(t){return e.put("/api/alert/clear",{alertId:t})}function r(t){return e.put("/api/alerts/clear",{userId:t})}var i={getActiveAlertsByPlayer:t,clearAlert:n,clearAllAlertsByPlayer:r};return i}e.$inject=["$http"],angular.module("app").factory("alertsService",e)}(),function(){"use strict";function e(e){function t(){return!!this.currentUser}function n(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var r;null!==e.bootstrappedUserObject&&(r=e.bootstrappedUserObject);var i={currentUser:r,isAuthenticated:t,isAuthorized:n};return i}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,t,n){$.notify({message:e,url:t,target:n},{type:"info"})}function t(e,t,n){$.notify({message:e,url:t,target:n},{type:"success"})}function n(e,t,n){$.notify({message:e,url:t,target:n},{type:"warning"})}function r(e,t,n){$.notify({message:e,url:t,target:n},{type:"danger"})}function i(e,t,n){$.notify({message:e,url:t,target:n},{type:"inverse"})}var a={info:e,success:t,warning:n,error:r,inverse:i};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85}}),a}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(e,t,n,r){$(e).mCustomScrollbar({theme:t,scrollInertia:100,axis:n,mouseWheel:{enable:!0,axis:r,preventDefault:!0}})}var t={malihuScroll:e};return t}angular.module("app").factory("scrollbarService",e)}(),function(){"use strict";function e(){function e(){return n}function t(e){n.left=e}var n={left:!1,right:!1},r={getSidebarStatus:e,setSidebarStatus:t};return r}angular.module("app").factory("sidebarService",e)}(),function(){"use strict";function e(e,t,n){function r(){return"https:"===t.location.protocol?"wss://"+t.location.host:"ws://"+t.location.host}function i(){o=new WebSocket(r()),o.onmessage=function(t){l=0;var n=JSON.parse(t.data);e.$broadcast("ws:"+n.topic,n.data)},o.onclose=function(){l<s.length?(console.log("WebSocket closed. Reconnecting..."),n(i,1e3*s[l]),l+=1):console.log("Giving up on WebSocket")}}function a(e,t){var n=JSON.stringify({topic:e,data:t});o.send(n)}var o,s=[3,10,100,1e3],l=0,c={connect:i,send:a};return c}e.$inject=["$rootScope","$window","$timeout"],angular.module("app").factory("websocketService",e).run(["websocketService",function(e){e.connect()}])}(),function(){"use strict";function e(e){function t(){e.getPyramids().then(function(e){n.pyramids=e.data})}var n=this;n.pyramids=[],t()}e.$inject=["pyramidsService"],angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/pyramids/components/pending-players.html"};return e}function t(e){function t(){}function n(t){t.position=i.pyramid.players.length+1,e.approvePendingPlayer(i.pyramid._id,t)}function r(t){e.denyPendingPlayer(i.pyramid._id,t)}var i=this;i.pendingPlayers=[],i.approvePendingPlayer=n,i.denyPendingPlayer=r,t()}t.$inject=["pyramidsService"],angular.module("app").directive("kpPendingPlayers",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/pyramids/components/pyramid-compact.html"};return e}function t(){function e(){}e()}angular.module("app").directive("kpPyramidCompact",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/pyramids/components/pyramid.html",replace:!0,scope:{pyramid:"="},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,n,r,i,a,o){function s(){for(var t=S;t>0;--t)$.maxPlayers+=t;e.$watch("vm.pyramid",function(){$.pyramid&&($.competitionId=$.pyramid._id,l(),c(),u(),p(),m())})}function l(){$.pyramid.players=r("orderBy")($.pyramid.players,"position")}function c(){$.currentUserIsAdmin=!1,$.currentUserIsPending=!1,a.isAuthenticated()&&($.currentUserIsAdmin=_.some($.pyramid.admins,["_id",a.currentUser._id]),$.currentUserIsPending=_.some($.pyramid.pendingPlayers,["_id",a.currentUser._id])),$.currentUserIsOnPyramid=!1,$.hasActiveChallenge=!1,_.forEach($.pyramid.players,function(e){a.isAuthenticated()&&e._id===a.currentUser._id&&($.currentUserIsOnPyramid=!0,e.class="current-user",$.currentUserPlayer=e,o.getActiveChallengeByCompetitionByPlayer($.competitionId,e._id).then(function(t){t.data&&($.hasActiveChallenge=!0,$.activeChallengeOpponent=t.data.challenger._id===e._id?t.data.opponent:t.data.challenger)}))}),o.getActiveChallengesByCompetition($.competitionId).then(function(e){_.forEach(e.data,function(e){var t=_.find($.pyramid.players,{_id:e.challenger._id});t.class="unavailable",t.challenge={position:"challenger"};var n=_.find($.pyramid.players,{_id:e.opponent._id});if(n.class="unavailable",n.challenge={position:"opponent"},0!==e.timeLimit){var r=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1;r>0?n.challenge.expires=r:r<=0&&v(null,!0,n)}}),f()})}function d(){$.breakPoints=[];for(var e=0;e<S;e++)$.breakPoints.push(e*(e+1)/2+1)}function u(){var e=0;$.levels=[],d();for(var t=0;t<$.pyramid.players.length;t++)$.breakPoints.indexOf(t+1)>-1&&(e+=1,$.levels.push(e)),$.pyramid.players[t].level=e}function p(){$.numberOfBlocks=0;for(var e=_.last($.levels);e>0;e--)$.numberOfBlocks+=e}function m(){$.numberOfRealPlayers=$.pyramid.players.length;for(var e=$.pyramid.players.length;e<$.numberOfBlocks;e++)$.pyramid.players.push({firstName:"Empty",lastName:"Spot",position:99,class:"empty"});u()}function f(){if($.currentUserIsOnPyramid&&!$.hasActiveChallenge){var e=$.currentUserPlayer.level>1?$.currentUserPlayer.level-1:null;_.forEach($.pyramid.players,function(t){t.level===e&&99!==t.position&&"unavailable"!==t.class&&($.availableChallenges=!0,t.available=!0,t.class="available")})}}function y(e){if(e.available){$.hasActiveChallenge=!0;var t={competitionName:$.pyramid.name,competitionId:$.competitionId,complete:!1,forfeit:!1,timeLimit:$.pyramid.forfeitDays,challenger:{_id:$.currentUserPlayer._id,email:$.currentUserPlayer.email,firstName:$.currentUserPlayer.firstName,lastName:$.currentUserPlayer.lastName,position:$.currentUserPlayer.position},opponent:{_id:e._id,email:e.email,firstName:e.firstName,lastName:e.lastName,position:e.position}};o.createChallenge(t).then(function(){$.pyramidMenuToggle=!1})}else i.error("Sorry, that is not a valid challenge.")}function v(e,t,r){var i=r||$.currentUserPlayer;o.getActiveChallengeByCompetitionByPlayer($.competitionId,i._id).then(function(i){$.hasActiveChallenge=!1;var a=!1;t?(i.data.forfeit=!0,"opponent"===r.challenge.position?(i.data.winner="challenger",a=!0):i.data.winner="opponent"):e?i.data.challenger._id===$.currentUserPlayer._id?(i.data.winner="challenger",a=!0):i.data.winner="opponent":i.data.challenger._id===$.currentUserPlayer._id?i.data.winner="opponent":(i.data.winner="challenger",a=!0),a?n.swapPositions($.competitionId,i.data.opponent,i.data.challenger).then(function(){o.completeChallenge(i.data).then(function(){A&&C()})}):o.completeChallenge(i.data).then(function(){A&&C()}),$.pyramidMenuToggle=!1})}function h(e){v(null,!0,e)}function g(){if(a.isAuthenticated())if($.numberOfRealPlayers<$.maxPlayers){var e={_id:a.currentUser._id,firstName:a.currentUser.firstName,lastName:a.currentUser.lastName,email:a.currentUser.username,position:$.numberOfRealPlayers+1};$.pyramid.restrictJoins?swal({title:"Send Join Request?",text:"This is a closed competition so an admin must approve your request",type:"warning",showCancelButton:!0,confirmButtonText:"Send Request",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToPyramidRequest($.pyramid,e).then(function(){$.currentUserIsPending=!0}),swal("Request Sent","You will receive an email once an admin processes the request.","success")}):swal({title:"Join Competition?",text:"You'll be added to the bottom",type:"warning",showCancelButton:!0,confirmButtonText:"Join",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToPyramid($.competitionId,e),swal("Welcome Aboard!","Now start fighting your way to the top","success")})}else i.warning("Sorry, this pyramid is full");else i.warning("Please login to join a competition"),t.previous="pyramids.view",t.prevParams={competitionId:$.competitionId},t.go("login")}function P(){swal({title:"Leave Pyramid?",text:"You will lose your spot and forfeit any active challenges.",type:"error",showCancelButton:!0,confirmButtonText:"Yes, leave",confirmButtonClass:"btn-danger",cancelButtonText:"No, stay",closeOnConfirm:!1,closeOnCancel:!0},function(){C(),swal("OK, you'r out!","You've been removed from the pyramid.","success")})}function C(){a.isAuthenticated()&&$.currentUserIsOnPyramid&&(A=!0,$.hasActiveChallenge?v(null,!0,$.currentUserPlayer):($.currentUserIsOnPyramid=!1,$.hasActiveChallenge=!1,n.getPyramid($.competitionId).then(function(e){var t=e.data,r=$.currentUserPlayer.position;_.forEach(t.players,function(e){e.position>=r&&(e.position-=1)});for(var i=_.remove(t.players,function(e){return e._id===$.currentUserPlayer._id}),a=[],o=0;o<$.numberOfRealPlayers-1;++o){var s={_id:t.players[o]._id,firstName:t.players[o].firstName,lastName:t.players[o].lastName,position:t.players[o].position};a.push(s)}n.removedPlayerFromPyramid($.competitionId,i[0],a).then(function(){A=!1})})))}function w(e){99!==e.position||$.currentUserIsOnPyramid||g(),e.available===!0&&$.currentUserIsOnPyramid&&!$.hasActiveChallenge&&swal({title:"Challenge Request",text:"Challenge "+e.firstName+" "+e.lastName+"?",type:"warning",showCancelButton:!0,confirmButtonText:"Send Challenge",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){y(e),swal("Challenge Sent",e.firstName+" "+e.lastName+" has been notified of the challenge.","success")})}function b(){n.getPyramid($.competitionId).then(function(e){$.pyramid=e.data})}var S=10,$=this;$.competitionId=null,$.breakPoints=[],$.levels=[],$.numberOfBlocks=0,$.currentUserIsOnPyramid=!1,$.currentUserIsPending=!1,$.currentUserIsAdmin=!1,$.hasActiveChallenge=!1,$.activeChallengeOpponent=null,$.availableChallenges=!1,$.createChallenge=y,$.completeChallenge=v,$.challengeExpired=h,$.currentUserPlayer={},$.pyramidMenuToggle=!1,$.addCurrentUserToPyramid=g,$.confirmRemoveCurrentUserFromPyramid=P,$.playerClick=w,$.numberOfRealPlayers=0,$.maxPlayers=0,s();var A=!1;e.$on("ws:pyramid_updated",function(e,t){$.competitionId===t.competitionId&&(i.info(t.description),b())})}t.$inject=["$scope","$state","pyramidsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("kpPyramid",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/pyramids/components/update-admins.html"};return e}function t(e,t,n,r,i){function a(){e.$watch("vm.pyramid",function(){m.pyramid&&(m.addedAdmins=_.cloneDeep(m.pyramid.admins),m.disableSubmit=!0,m.userIsPrimaryAdmin=_.find(m.pyramid.admins,{primary:!0})._id===i.currentUser._id,o())})}function o(){m.availableAdmins=[],r.getAllUsers().then(function(e){_.forEach(m.pyramid.admins,function(t){_.remove(e.data,function(e){return t._id===e._id})}),_.forEach(e.data,function(e){m.availableAdmins.push({firstName:e.firstName,lastName:e.lastName,email:e.username,_id:e._id})}),p=_.cloneDeep(m.availableAdmins)})}function s(){m.pyramid.admins=m.addedAdmins,t.updatePyramid(m.pyramid).then(function(){m.disableSubmit=!0})}function l(){m.addedAdmins=_.cloneDeep(m.pyramid.admins),m.availableAdmins=_.cloneDeep(p)}function c(e){u.push(e),m.availableAdmins.push(_.remove(m.addedAdmins,{_id:e._id})[0]),m.disableSubmit=!1}function d(e){m.addedAdmins.push(_.remove(m.availableAdmins,{_id:e._id})[0]),m.disableSubmit=!1}var u=[],p=[],m=this;m.availableAdmins=[],m.addedAdmins=[],m.userIsPrimaryAdmin=!1,m.updatePyramid=s,m.cancelUpdate=l,m.removeAdmin=c,m.addAdmin=d,m.disableSubmit=!0,a()}t.$inject=["$scope","pyramidsService","challengesService","userService","identityService"],angular.module("app").directive("kpUpdateAdmins",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/pyramids/components/update-players.html"};return e}function t(e,t,n,r,i){function a(){e.$watch("vm.pyramid",function(){f.pyramid&&(f.addedPlayers=_.cloneDeep(f.pyramid.players),f.disableSubmit=!0,o())})}function o(){f.availablePlayers=[],i.getAllUsers().then(function(e){_.forEach(f.pyramid.players,function(t){_.remove(e.data,function(e){return t._id===e._id})}),_.forEach(e.data,function(e){f.availablePlayers.push({firstName:e.firstName,lastName:e.lastName,email:e.username,_id:e._id})}),m=_.cloneDeep(f.availablePlayers)})}function s(){_.forEach(p,function(e){r.deleteActiveChallengeByCompetitionByPlayer(f.pyramid._id,e._id)}),f.pyramid.players=f.addedPlayers,n.updatePyramid(f.pyramid).then(function(){f.disableSubmit=!0})}function l(){f.addedPlayers=_.cloneDeep(f.pyramid.players),f.availablePlayers=_.cloneDeep(m)}function c(){var e=1;_.forEach(f.addedPlayers,function(t){t.position=e,++e}),f.disableSubmit=!1}function d(e){p.push(e),f.availablePlayers.push(_.remove(f.addedPlayers,{_id:e._id})[0]),c()}function u(e){e.position=f.addedPlayers.length+1,f.addedPlayers.push(_.remove(f.availablePlayers,{_id:e._id})[0]),f.disableSubmit=!1}var p=[],m=[],f=this;f.availablePlayers=[],f.addedPlayers=[],f.updatePyramid=s,f.cancelUpdate=l,f.reorderPlayers=c,f.removePlayer=d,f.addPlayer=u,f.disableSubmit=!0,a()}t.$inject=["$scope","$filter","pyramidsService","challengesService","userService"],angular.module("app").directive("kpUpdatePlayers",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/pyramid",{params:{competitionId:t}})}function n(t){return e.get("/api/pyramids/user",{params:{userId:t}})}function r(){return e.get("/api/pyramids")}function i(t){return e.post("/api/pyramids/create",{pyramid:t})}function a(t){return e.post("/api/pyramids/update",{pyramid:t})}function o(t){return e.delete("/api/pyramids/delete",{params:{competitionId:t}})}function s(t,n,r){return e.post("/api/pyramids/swapPositions",{competitionId:t,challenger:n,opponent:r})}function l(t,n){return e.post("/api/pyramids/addPlayer",{competitionId:t,player:n})}function c(t,n){return e.post("/api/pyramids/addPlayerRequest",{competition:t,player:n})}function d(t,n,r){return e.post("/api/pyramids/removePlayer",{competitionId:t,removedPlayer:n,players:r})}function u(t,n){return e.post("/api/pyramids/approvePlayer",{competitionId:t,player:n})}function p(t,n){return e.post("/api/pyramids/denyPlayer",{competitionId:t,player:n})}var m={getPyramid:t,getPyramidsForUser:n,getPyramids:r,createPyramid:i,updatePyramid:a,deletePyramid:o,swapPositions:s,addPlayerToPyramid:l,addPlayerToPyramidRequest:c,removedPlayerFromPyramid:d,approvePendingPlayer:u,denyPendingPlayer:p};return m}e.$inject=["$http"],angular.module("app").factory("pyramidsService",e)}(),function(){"use strict";function e(e,t,n,r,i,a,o,s){function l(){n.competitionId?(p.competitionId=n.competitionId,c()):t.go("pyramids.myPyramids")}function c(){i.getPyramid(p.competitionId).then(function(e){e.data&&_.some(e.data.admins,["_id",a.currentUser._id])?(p.isAdmin=!0,e.data.players=r("orderBy")(e.data.players,"position"),p.pyramid=e.data):t.go("pyramids.myPyramids")}),s.getCompletedChallengesByCompetition(p.competitionId).then(function(e){p.challenges=e.data})}function d(){i.getPyramid(p.competitionId).then(function(e){var t=e.data;t.restrictJoins=p.pyramid.restrictJoins,i.updatePyramid(t)})}function u(){swal({title:"Delete Competition?",text:"This can not be undone",type:"error",showCancelButton:!0,confirmButtonText:"Delete",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){i.deletePyramid(p.competitionId).then(function(){t.go("pyramids.myPyramids")})})}var p=this;p.competitionId=null,p.updatePyramidRestrictJoins=d,p.deletePyramid=u,l(),e.$on("ws:pyramid_updated",function(e,t){p.competitionId===t.competitionId&&(o.info(t.description),c())}),e.$on("ws:pyramid_deleted",function(e,n){p.competitionId===n.competitionId&&(o.info(n.description),t.go("pyramids.myPyramids"))})}e.$inject=["$scope","$state","$stateParams","$filter","pyramidsService","identityService","notifyService","challengesService"],angular.module("app").controller("AdminCtrl",e)}(),function(){"use strict";function e(e,t,n,r){function i(){t.getAllUsers().then(function(e){u.availablePlayers=e.data});for(var e=0;e<d;e++)c.push(e*(e+1)/2+1)}function a(e){e.position=u.addedPlayers.length+1,u.addedPlayers.push(_.remove(u.availablePlayers,{_id:e._id})[0])}function o(e){u.availablePlayers.push(_.remove(u.addedPlayers,{_id:e._id})[0]),s()}function s(){var e=1;_.forEach(u.addedPlayers,function(t){t.position=e,++e})}function l(t){angular.forEach(u.addedPlayers,function(e){var n={_id:e._id,email:e.username,firstName:e.firstName,lastName:e.lastName,position:e.position};t.players.push(n)}),t.admins=[{_id:r.currentUser._id,email:r.currentUser.username,firstName:r.currentUser.firstName,lastName:r.currentUser.lastName,primary:!0}];for(var i=0;i<c.length;i++)if(t.players.length<c[i]){t.levels=i;break}n.createPyramid(t).then(function(t){e.go("pyramids.view",{competitionId:t.data._id})})}var c=[],d=10,u=this;u.newPyramid={players:[],restrictJoins:!1},u.availablePlayers=[],u.addedPlayers=[],
u.createPyramid=l,u.addPlayer=a,u.removePlayer=o,u.reorderPlayers=s,u.newPyramid.forfeitDays=1,i()}e.$inject=["$state","userService","pyramidsService","identityService"],angular.module("app").controller("CreatePyramidCtrl",e)}(),function(){"use strict";function e(e,t,n,r,i){function a(){o()}function o(){s=[],l.activeChallenge=null,r.isAuthenticated()&&t.getPyramidsForUser(r.currentUser._id).then(function(e){l.pyramids=e.data,_.forEach(l.pyramids,function(e){s.push(e._id),n.getActiveChallengeByCompetitionByPlayer(e._id,r.currentUser._id).then(function(t){t.data&&(e.activeChallenge=t.data,0!==e.activeChallenge.timeLimit&&(e.activeChallenge.expires=moment().diff(moment(e.activeChallenge.created).add(e.activeChallenge.timeLimit,"d"),"s")*-1))})})})}var s=[],l=this;l.activeChallenge=null,a(),e.$on("ws:pyramid_updated",function(e,t){s.indexOf(t.competitionId)>=0&&(i.info(t.description),o())})}e.$inject=["$scope","pyramidsService","challengesService","identityService","notifyService"],angular.module("app").controller("MyPyramidsCtrl",e)}(),function(){"use strict";function e(e,t,n,r,i){function a(){n.competitionId&&(o.competitionId=n.competitionId,r.getPyramid(o.competitionId).then(function(e){e.data?o.pyramid=e.data:t.go("pyramids.myPyramids")}))}var o=this;o.competitionId=null,o.pyramid=null,a(),e.$on("ws:pyramid_deleted",function(e,n){o.competitionId===n.competitionId&&(i.info(n.description),t.go("pyramids.myPyramids"))})}e.$inject=["$scope","$state","$stateParams","pyramidsService","notifyService"],angular.module("app").controller("PyramidCtrl",e)}(),function(){"use strict";function e(e){function t(){e.getPyramids().then(function(e){n.pyramids=e.data})}var n=this;n.pyramids=[],t()}e.$inject=["pyramidsService"],angular.module("app").controller("PyramidsCtrl",e)}(),function(){"use strict";function e(e,t,n,r,i,a){function o(){t.competitionId&&(l.competitionId=t.competitionId,s())}function s(){r.getPyramid(l.competitionId).then(function(e){e.data?(l.pyramid=e.data,_.forEach(l.pyramid.players,function(e){a.getPlayerResultsByCompetition(l.competitionId,e._id).then(function(t){e.results=t.data})})):n.go("pyramids.myPyramids")}),a.getCompletedChallengesByCompetition(l.competitionId).then(function(e){l.challenges=e.data})}var l=this;l.competitionId=null,l.pyramid={},l.playersResults=[],l.challenges=[],o(),e.$on("ws:pyramid_updated",function(e,t){l.competitionId===t.competitionId&&(i.info(t.description),s())}),e.$on("ws:pyramid_deleted",function(e,t){l.competitionId===t.competitionId&&(i.info(t.description),n.go("pyramids.myPyramids"))})}e.$inject=["$scope","$stateParams","$state","pyramidsService","notifyService","challengesService"],angular.module("app").controller("StatsCtrl",e)}(),function(){"use strict";function e(e){function t(){}var n=this;n.indentity=e,t()}e.$inject=["identityService"],angular.module("app").controller("UserCtrl",e)}(),function(){"use strict";function e(e){function t(t,n,r){var i=r.scrollaxis||"y",a=r.theme||"minimal-dark",o=r.mousewheelaxis||"y";$("html").hasClass("ismobile")||e.malihuScroll(n,a,i,o)}var n={restrict:"C",link:t};return n}e.$inject=["scrollbarService"],angular.module("app").directive("cOverflow",e)}(),function(){"use strict";function e(){function e(e,t){t.click(function(){t.next().slideToggle(200),t.parent().toggleClass("toggled")})}var t={restrict:"A",link:e};return t}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,t){t.hasClass("btn-icon")||t.hasClass("btn-float")?Waves.attach(t,["waves-circle"]):t.hasClass("btn-light")?Waves.attach(t,["waves-light"]):Waves.attach(t),Waves.init()}var t={restrict:"C",link:e};return t}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,t){var n=t.children().first(),r=t.parent().hasClass("fg-float");n.focus(function(){t.addClass("fg-toggled")}),n.blur(function(){(!r||r&&0===n.val().length)&&t.removeClass("fg-toggled")})}var t={restrict:"C",link:e};return t}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;base64,
