angular.module("app",["ui.router","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer"]),function(){"use strict ";function e(){}angular.module("app").config(e)}(),function(){"use strict";function e(e){function t(){r.sidebarToggle.left=!r.sidebarToggle.left}var r=this;r.toggleSidebar=t,r.$state=e,r.sidebarToggle={left:!1,right:!1}}e.$inject=["$state"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,i,a){var o={superAdmin:r,admin:t,user:n};a.html5Mode(!0),i.otherwise("/"),i.when("/pyramids/","/pyramids"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"},header:{controller:"HeaderCtrl",controllerAs:"vm",templateUrl:"common/views/header.html"},sidebar:{controller:"SidebarCtrl",controllerAs:"vm",templateUrl:"common/views/sidebar.html"}}}).state("pyramids",{url:"/pyramids",views:{content:{controller:"PyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramids.html"},header:{controller:"HeaderCtrl",controllerAs:"vm",templateUrl:"common/views/header.html"}}}).state("pyramids.myPyramids",{url:"/my-pyramids",views:{"content@":{controller:"MyPyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/my-pyramids.html"}},resolve:{auth:o.user}}).state("pyramids.view",{url:"/view/:pyramidId",views:{"content@":{controller:"PyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramid.html"}}}).state("pyramids.create",{url:"/create",views:{"content@":{controller:"CreatePyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/create-pyramid.html"}},resolve:{auth:o.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"},header:{controller:"HeaderCtrl",controllerAs:"vm",templateUrl:"common/views/header.html"},sidebar:{controller:"SidebarCtrl",controllerAs:"vm",templateUrl:"common/views/sidebar.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"},header:{controller:"HeaderCtrl",controllerAs:"vm",templateUrl:"common/views/header.html"},sidebar:{controller:"SidebarCtrl",controllerAs:"vm",templateUrl:"common/views/sidebar.html"}}})}function t(e){return e.authorizeCurrentUserForRoute("admin")}function r(e){return e.authorizeCurrentUserForRoute("super-admin")}function n(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),t.$inject=["authService"],r.$inject=["authService"],n.$inject=["authService"]}(),function(){"use strict";function e(e,t){e.$on("$stateChangeError",function(e,r,n,i,a,o){"not authorized"===o&&(t.go("login"),t.previous=r)})}e.$inject=["$rootScope","$state"],angular.module("app").run(e)}(),function(){"use strict";function e(e,t,r,n,i){function a(e,n){var a=r.defer();return t.post("/login",{username:e,password:n}).then(function(e){e.data.success?(i.currentUser=e.data.user,a.resolve(!0)):a.resolve(!1)}),a.promise}function o(e){var n=r.defer();return t.post("/api/users",{userData:e}).then(function(e){e.data?(i.currentUser=e.data,n.resolve(!0)):n.resolve(!1)}),n.promise}function l(){var n=r.defer();return t.post("/logout",{logout:!0}).then(function(){i.currentUser=void 0,n.resolve(),e.go("home")}),n.promise}function s(e){return!!i.isAuthorized(e)||r.reject("not authorized")}function c(){return!!i.isAuthenticated()||r.reject("not authorized")}var u={authenticateUser:a,createUser:o,logout:l,authorizeCurrentUserForRoute:s,authenticatedUserForRoute:c};return u}e.$inject=["$state","$http","$q","userService","identityService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e,t){function r(){return e.get("/api/users").then(function(e){return e})}var n={getAllUsers:r};return n}e.$inject=["$http","identityService"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(e,t,r){function n(){console.log(e.previous)}function i(n,i){t.authenticateUser(n,i).then(function(t){t?(r.success("Login successful.  Welcome to Knifeplane!"),e.previous?e.go(e.previous):e.go("home")):r.error("Username / password combinaiton incorrect")})}var a=this;a.login=i,n()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,t,r){function n(){}function i(e){r.createUser(e).then(function(e){t.go("home")})}var a=this;a.register=i,n()}e.$inject=["$scope","$state","authService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/pyramids/components/pyramid.html",replace:!0,scope:{competitionId:"@"},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,r,n,i,a){function o(){t.getPyramid(g.competitionId).then(function(e){g.pyramid=e.data,g.levels=[];for(var t=1;t<=e.data.levels;++t)g.levels.push(t);l(),s(),u(),d(),m()})}function l(){g.pyramid.players=r("orderBy")(g.pyramid.players,"position")}function s(){_.forEach(g.pyramid.players,function(e){i.currentUser&&e._id===i.currentUser._id&&(g.isCurrentUserOnPyramid=!0,e.class="current-user",g.currentUserPlayer=e),a.getActiveChallengeByCompetitionByPlayer(g.competitionId,e._id).then(function(t){if(t.data){e.challenge={},e._id===t.data.challenger._id?e.challenge.position="challenger":e.challenge.position="opponent";var r=moment().diff(moment(t.data.created).add(t.data.timeLimit,"h"),"s")*-1;r>0?e.challenge.expires=r:r<=0&&!t.data.complete&&"challenger"===e.challenge.position&&y(null,!0,e),g.isCurrentUserOnPyramid&&e._id===i.currentUser._id?g.hasActiveChallenge=!0:e.class="unavailable"}})})}function c(){g.breakPoints=[];for(var e=0;e<g.pyramid.levels;e++)g.breakPoints.push(e*(e+1)/2+1)}function u(){g.numberOfBlocks=0;for(var e=g.pyramid.levels;e>0;e--)g.numberOfBlocks+=e}function d(){for(var e=g.pyramid.players.length;e<g.numberOfBlocks;e++)g.pyramid.players.push({firstName:"Empty",lastName:"Spot",position:99,class:"empty"})}function m(){var e=0;c();for(var t=0;t<g.pyramid.players.length;t++)g.breakPoints.indexOf(t+1)>-1&&(e+=1),g.pyramid.players[t].level=e}function p(e){e?g.showCreateChallengeOptions=!1:g.showCreateChallengeOptions=!0;var t=g.currentUserPlayer.level>1?g.currentUserPlayer.level-1:null;_.forEach(g.pyramid.players,function(r){r.level===t&&99!==r.position&&"unavailable"!=r.class&&(g.availableChallenges=!0,e?(r.class="",r.available=!1):(r.class="available",r.available=!0))})}function f(e){if(g.showCreateChallengeOptions)if(e.available){g.showCreateChallengeOptions=!1,g.hasActiveChallenge=!0;var t={competitionId:g.competitionId,complete:!1,forfeit:!1,timeLimit:24,challenger:{_id:g.currentUserPlayer._id,firstName:g.currentUserPlayer.firstName,lastName:g.currentUserPlayer.lastName,nickname:g.currentUserPlayer.nickname,position:g.currentUserPlayer.position},opponent:{_id:e._id,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname,position:e.position}};a.createChallenge(t).then(function(){v()})}else n.error("Sorry, that is not a valid challenge.")}function y(e,r,n){var i=n||g.currentUserPlayer;a.getActiveChallengeByCompetitionByPlayer(g.competitionId,i._id).then(function(n){g.hasActiveChallenge=!1,g.showCreateChallengeOptions=!1,g.showCompleteChallengeOptions=!1;var i=!1;r?(n.data.forfeit=!0,n.data.challenger.winner=!0,i=!0):e?n.data.challenger._id===g.currentUserPlayer._id?(n.data.challenger.winner=!0,i=!0):n.data.opponent.winner=!0:n.data.challenger._id===g.currentUserPlayer._id?n.data.opponent.winner=!0:(n.data.challenger.winner=!0,i=!0),a.completeChallenge(n.data).then(function(e){i?t.swapPositions(g.competitionId,e.data.opponent,e.data.challenger).then(v):v()})})}function h(){y(null,!0)}function v(){t.getPyramid(g.competitionId).then(function(e){g.pyramid=e.data,l(),s(),d(),m()})}var g=this;g.pyramid={},g.breakPoints=[],g.numberOfBlocks=0,g.isCurrentUserOnPyramid=!1,g.hasActiveChallenge=!1,g.showCreateChallengeOptions=!1,g.showCompleteChallengeOptions=!1,g.availableChallenges=!1,g.startChallenge=p,g.createChallenge=f,g.completeChallenge=y,g.challengeExpired=h,g.currentUserPlayer={},o(),e.$on("ws:challenge_created",function(e,t){g.competitionId===t.competitionId&&(n.info(t.description),v())}),e.$on("ws:challenge_completed",function(e,t){g.competitionId===t.competitionId&&(n.info(t.description),v())})}t.$inject=["$scope","pyramidsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("kpPyramid",e)}(),function(){"use strict";function e(){var e={restrict:"E",templateUrl:"/pyramids/components/pyramid.html",replace:!0,scope:{pyramidId:"@"},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,r,n,i){function a(){t.getPyramid(y.pyramidId).then(function(e){y.pyramid=e.data,g=y.pyramid.players.length,_.find(y.pyramid.players,["_id",i.currentUser._id])&&(y.isPlayerOnPyramid=!0),s(),c(),u(),d(),m(),y.isPlayerOnPyramid&&p()})}function o(e){if(i.isAuthenticated()&&y.isPlayerOnPyramid)if(_.isEmpty(h)&&99!==e.position&&i.isAuthorized("admin"))h=e,h.class="active";else if(h===e&&i.isAuthorized("admin"))h.class="",h={};else if(e.level===h.level||e.level<h.level-1||e.level>h.level+1||99===e.position)n.error("Sorry, thats not allowed!");else{var r=h.position,a=h.level;v=e,h.position=e.position,h.level=e.level,v.position=r,v.level=a,t.swapPositions(y.pyramidId,h,v),h.class="",h={},v={}}else i.isAuthenticated()&&!y.isPlayerOnPyramid&&99===e.position?l():n.error("You can not update this pyramid.<br>You must join the pyramid first.")}function l(){var e={position:g+1,_id:i.currentUser._id,firstName:i.currentUser.firstName,lastName:i.currentUser.lastName,nickname:i.currentUser.nickname};t.addPlayerToPyramid(y.pyramidId,e).then(function(e){y.isPlayerOnPyramid=!0,f()})}function s(){y.pyramid.players=r("orderBy")(y.pyramid.players,"position")}function c(){y.breakPoints=[];for(var e=0;e<y.pyramid.levels;e++)y.breakPoints.push(e*(e+1)/2+1)}function u(){y.numberOfBlocks=0;for(var e=y.pyramid.levels;e>0;e--)y.numberOfBlocks+=e}function d(){for(var e=y.pyramid.players.length;e<y.numberOfBlocks;e++)y.pyramid.players.push({firstName:"Empty",lastName:"Spot",position:99,class:"empty"})}function m(){y.level=0;for(var e=0;e<y.pyramid.players.length;e++)y.breakPoints.indexOf(e+1)>-1&&(y.level+=1),y.pyramid.players[e].level=y.level}function p(){!i.isAuthorized("admin")&&i.isAuthenticated()&&y.isPlayerOnPyramid&&(h=_.find(y.pyramid.players,["_id",i.currentUser._id]),h.class="active")}function f(){t.getPyramid(y.pyramidId).then(function(e){y.pyramid=e.data,s(),d(),m(),p()})}var y=this;y.pyramid={},y.breakPoints=[],y.numberOfBlocks=0,y.level=0,y.updatePyramid=o,y.isPlayerOnPyramid=!1;var h={},v={},g=0;a(),e.$on("ws:match_results",function(e,t){n.info(t),f()})}angular.module("app").directive("_kpPyramid",e),t.$inject=["$scope","pyramidsService","$filter","Notification","identityService"]}(),function(){"use strict";function e(e){function t(t){return e.get("/api/pyramid",{params:{pyramidId:t}})}function r(t){return e.get("/api/pyramids/user",{params:{userId:t}})}function n(t){return e.post("/api/pyramids/create",{pyramid:t})}function i(t,r,n){return e.post("/api/pyramids/swapPositions",{pyramidId:t,challenger:r,opponent:n})}function a(t,r){return e.post("/api/pyramids/addPlayer",{pyramidId:t,player:r})}var o={getPyramid:t,getPyramidsForUser:r,createPyramid:n,swapPositions:i,addPlayerToPyramid:a};return o}e.$inject=["$http"],angular.module("app").factory("pyramidsService",e)}(),function(){"use strict";function e(e,t,r,n){function i(){r.getAllUsers().then(function(e){l.availablePlayers=e.data})}function a(e){s+=1;var t={position:s,_id:e._id,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname};l.newPyramid.players.push(t),_.remove(l.availablePlayers,{_id:e._id})}function o(t){n.createPyramid(t).then(function(t){e.go("pyramids.view",{pyramidId:t.data._id})})}var l=this;l.availablePlayers=[],l.addPlayerToPyramid=a,l.createPyramid=o,i();var s=0}e.$inject=["$state","$stateParams","userService","pyramidsService"],angular.module("app").controller("AddPlayerCtrl",e)}(),function(){"use strict";function e(e,t,r){function n(){t.getAllUsers().then(function(e){a.availablePlayers=e.data})}function i(t){angular.forEach(a.addedPlayers,function(e){o+=1;var t={position:o,_id:e._id,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname};a.newPyramid.players.push(t)}),r.createPyramid(t).then(function(t){e.go("pyramids.view",{pyramidId:t.data._id})})}var a=this;a.newPyramid={players:[]},a.availablePlayers=[],a.addedPlayers=[],a.createPyramid=i,a.newPyramid.levels=4,n();var o=0}e.$inject=["$state","userService","pyramidsService"],angular.module("app").controller("CreatePyramidCtrl",e)}(),function(){"use strict";function e(e,t,r){function n(){t.getPyramidsForUser(r.currentUser._id).then(function(e){i.pyramids=e.data})}var i=this;i.pyramids=null,n()}e.$inject=["$state","pyramidsService","identityService"],angular.module("app").controller("MyPyramidsCtrl",e)}(),function(){"use strict";function e(e){function t(){e.pyramidId&&(r.pyramidId=e.pyramidId)}var r=this;r.pyramidId=null,t()}e.$inject=["$stateParams"],angular.module("app").controller("PyramidCtrl",e)}(),function(){"use strict";function e(){function e(){}var t=this;t.pyramids=null,e()}angular.module("app").controller("PyramidsCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@"},templateUrl:"/common/components/challenges.html"};return e}function t(e,t){function r(){n()}function n(){t.getActiveChallengesByCompetition(i.competitionId).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){e.expires=moment().diff(moment(e.created).add(e.timeLimit,"h"),"s")*-1}))})}var i=this;i.challenges=[],r(),e.$on("ws:challenge_created",function(e,t){i.competitionId===t.competitionId&&n()}),e.$on("ws:challenge_completed",function(e,t){i.competitionId===t.competitionId&&n()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/footer.html"};return e}function t(e,t){function r(){t.logout()}var n=this;n.indentity=e,n.logout=r}t.$inject=["identityService","authService"],angular.module("app").directive("kpFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/sidebar.html"};return e}function t(e,t){function r(){t.logout()}var n=this;n.indentity=e,n.logout=r}t.$inject=["identityService","authService"],angular.module("app").directive("kpSidebar",e)}(),function(){"use strict";function e(e){function t(t){return e.post("/api/challenges/create",{challenge:t})}function r(t){return e.post("/api/challenges/complete",{challenge:t})}function n(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function i(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function a(t,r){return e.get("/api/challenges/active/competition/player",{params:{competitionId:t,playerId:r}})}var o={createChallenge:t,completeChallenge:r,getChallengesByCompetition:n,getActiveChallengesByCompetition:i,getActiveChallengeByCompetitionByPlayer:a};return o}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(e){function t(){return!!this.currentUser}function r(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var n;null!==e.bootstrappedUserObject&&(n=e.bootstrappedUserObject);var i={currentUser:n,isAuthenticated:t,isAuthorized:r};return i}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,t,r){$.notify({icon:"zmdi zmdi-alert-circle-o",message:e,url:t,target:r},{type:"info"})}function t(e,t,r){$.notify({icon:"zmdi zmdi-check",message:e,url:t,target:r},{type:"success"})}function r(e,t,r){$.notify({icon:"zmdi zmdi-alert-triangle",message:e,url:t,target:r},{type:"warning"})}function n(e,t,r){$.notify({icon:"zmdi zmdi-alert-octagon",message:e,url:t,target:r},{type:"danger"})}function i(e,t,r){$.notify({message:e,url:t,target:r},{type:"inverse"})}var a={info:e,success:t,warning:r,error:n,inverse:i};return $.notifyDefaults({offset:{x:20,y:85}}),a}angular.module("app").factory("notifyService",e)}(),angular.module("app").service("websocketService",["$rootScope","$window",function(e,t){function r(){return"https:"===t.location.protocol?"wss://"+t.location.host:"ws://"+t.location.host}var n;this.connect=function(){n=new WebSocket(r()),n.onmessage=function(t){var r=JSON.parse(t.data);e.$broadcast("ws:"+r.topic,r.data)}},this.send=function(e,t){var r=JSON.stringify({topic:e,data:t});n.send(r)}}]).run(["websocketService",function(e){e.connect()}]),function(){"use strict";function e(e,t){function r(){t.logout()}var n=this;n.indentity=e,n.logout=r}e.$inject=["identityService","authService"],angular.module("app").controller("HeaderCtrl",e)}(),function(){"use strict";function e(){function e(){}e()}angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(){function e(e,t){t.click(function(){t.next().slideToggle(200),t.parent().toggleClass("toggled")})}var t={restrict:"A",link:e};return t}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,t){t.hasClass("btn-icon")||t.hasClass("btn-float")?Waves.attach(t,["waves-circle"]):t.hasClass("btn-light")?Waves.attach(t,["waves-light"]):Waves.attach(t),Waves.init()}var t={restrict:"C",link:e};return t}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,t){var r=t.children().first(),n=t.parent().hasClass("fg-float");r.focus(function(){t.addClass("fg-toggled")}),r.blur(function(){(!n||n&&0===r.val().length)&&t.removeClass("fg-toggled")})}var t={restrict:"C",link:e};return t}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;base64,
