angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","LocalStorageModule","angular-sortable-view","angular.vertilize"]),function(){"use strict ";function e(e,t,n){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache",t.options({appendToBody:!0}),n.errorOnUnhandledRejections(!1)}e.$inject=["$httpProvider","$uibTooltipProvider","$qProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e,t){function n(e){t.set("sidebarLocked",e)}var r=this;r.$state=e,r.lockSidebar=t.get("sidebarLocked"),r.toggleSidebarLocked=n}e.$inject=["$state","localStorageService"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,i,a){var o={superAdmin:n,admin:t,user:r};a.html5Mode(!0),i.otherwise("/"),i.when("/pyramids/","/pyramids"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("pyramids",{url:"/pyramids",views:{content:{controller:"PyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramids.html"}}}).state("pyramids.myPyramids",{url:"/my-pyramids",views:{"content@":{controller:"MyPyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/my-pyramids.html"}},resolve:{auth:o.user}}).state("pyramids.view",{url:"/view/:competitionId",views:{"content@":{controller:"PyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramid.html"}}}).state("pyramids.stats",{url:"/stats/:competitionId",views:{"content@":{controller:"StatsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/stats.html"}}}).state("pyramids.admin",{url:"/admin/:competitionId",views:{"content@":{controller:"AdminCtrl",controllerAs:"vm",templateUrl:"pyramids/views/admin.html"}},resolve:{auth:o.user}}).state("pyramids.create",{url:"/create",views:{"content@":{controller:"CreatePyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/create-pyramid.html"}},resolve:{auth:o.user}}).state("user",{url:"/user",views:{content:{controller:"UserCtrl",controllerAs:"vm",templateUrl:"users/views/user.html"}},resolve:{auth:o.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}}).state("verify",{url:"/verification",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("verification",{url:"/verification/:userId/:verificationToken",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("password-reset-request",{url:"/password-reset",views:{content:{controller:"PasswordResetCtrl",controllerAs:"vm",templateUrl:"authentication/views/password-reset.html"}}}).state("password-reset",{url:"/password-reset/:userId/:verificationToken",views:{content:{controller:"PasswordResetCtrl",controllerAs:"vm",templateUrl:"authentication/views/password-reset.html"}}})}function t(e){return e.authorizeCurrentUserForRoute("admin")}function n(e){return e.authorizeCurrentUserForRoute("super-admin")}function r(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),t.$inject=["authService"],n.$inject=["authService"],r.$inject=["authService"]}(),function(){"use strict";function e(e,t,n){e.$on("$stateChangeError",function(e,n,r,i,a,o){"not authorized"===o&&(t.go("login"),t.previous=n,t.prevParams=r)}),e.$on("$stateChangeStart",function(){n.setSidebarStatus(!1)})}e.$inject=["$rootScope","$state","sidebarService"],angular.module("app").run(e)}(),function(){"use strict";function e(e,t,n,r,i,a){function o(e,r){var a=n.defer();return t.post("/login",{username:e,password:r}).then(function(e){e.data.success?(i.currentUser=e.data.user,a.resolve(!0)):"unverified"===e.data.message?a.resolve("unverified"):a.resolve(!1)}),a.promise}function l(e){var r=n.defer();return t.post("/api/users",{userData:e}).then(function(e){e.data?r.resolve(!0):r.resolve(!1)},function(e){"Error: Duplicate Username"===e.data.reason&&a.error("Sorry, an account already exists with that email address.")}),r.promise}function s(){var r=n.defer();return t.post("/logout",{logout:!0}).then(function(){i.currentUser=void 0,r.resolve(),e.go("home")}),r.promise}function c(e){return!!i.isAuthorized(e)||n.reject("not authorized")}function u(){return!!i.isAuthenticated()||n.reject("not authorized")}var d={authenticateUser:o,createUser:l,logout:s,authorizeCurrentUserForRoute:c,authenticatedUserForRoute:u};return d}e.$inject=["$state","$http","$q","userService","identityService","notifyService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e){function t(){return e.get("/api/users").then(function(e){return e})}function n(t,n){return e.get("/api/user/verification",{params:{userId:t,verificationToken:n}})}function r(t){return e.get("/api/user/password/link",{params:{username:t}})}function i(t,n,r){return e.put("/api/user/password/reset",{userId:t,verificationToken:n,password:r})}var a={getAllUsers:t,verifyUser:n,generatePasswordResetLink:r,resetPassword:i};return a}e.$inject=["$http"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(e,t,n){function r(){}function i(r,i){t.authenticateUser(r,i).then(function(t){t?"unverified"===t?n.error("You must verify your email before you can login"):e.previous?(e.go(e.previous,e.prevParams),e.previous=null,e.prevParams=null):e.go("pyramids.myPyramids"):n.error("Username / password combinaiton incorrect")})}var a=this;a.login=i,r()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,t,n,r,i,a){function o(){a.isAuthenticated()?e.go("home"):t.userId&&t.verificationToken&&n.verifyUser(t.userId,t.verificationToken).then(function(e){e.data&&(c.verified=!0)})}function l(t){n.generatePasswordResetLink(t).then(function(t){t.data?(r.success("Please check your email for a password reset link"),e.go("home")):r.error("Could not find that email address")})}function s(a){a.password!==a.confirmPassword?r.error("Passwords don't match!"):n.resetPassword(t.userId,t.verificationToken,a.password).then(function(t){t.data&&i.authenticateUser(t.data.username,a.password).then(function(t){e.go("home")})})}var c=this;c.username="",c.verified=!1,c.resetPasswordForm={},c.generatePasswordResetLink=l,c.resetPassword=s,o()}e.$inject=["$state","$stateParams","userService","notifyService","authService","identityService"],angular.module("app").controller("PasswordResetCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){}function i(r){r.password!==r.confirmPassword?n.error("Passwords don't match!"):t.createUser(r).then(function(){e.go("verify")})}var a=this;a.register=i,r()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){t.userId&&t.verificationToken&&(i.verifying=!0,i.verified=null,n.verifyUser(t.userId,t.verificationToken).then(function(e){e.data?i.verified=!0:i.verified=!1}))}var i=this;i.verified=void 0,i.verifying=!1,r()}e.$inject=["$state","$stateParams","userService"],angular.module("app").controller("VerificationCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/footer.html"};return e}function t(e,t){function n(){t.logout()}var r=this;r.indentity=e,r.logout=n}t.$inject=["identityService","authService"],angular.module("app").directive("kpFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"headerCtrl",restrict:"A",templateUrl:"/common/components/header.html"};return e}function t(e,t,n,r,i){function a(){o(),e.$watch("headerCtrl.indentity.currentUser",function(){n.isAuthenticated()&&o()})}function o(){d.alerts=[],n.isAuthenticated()&&i.getActiveAlertsByPlayer(n.currentUser._id).then(function(e){d.alerts=e.data})}function l(e,t){i.clearAlert(e).then(function(){d.alerts.splice(t,1)})}function s(){i.clearAllAlertsByPlayer(n.currentUser._id).then(function(){d.alerts=[]})}function c(){t.setSidebarStatus(!d.sidebarStatus.left)}function u(){r.logout()}var d=this;d.indentity=n,d.logout=u,d.sidebarStatus=t.getSidebarStatus(),d.toggleSidebar=c,d.clearAlert=l,d.clearAllAlerts=s,d.alerts=[],a(),e.$on("ws:update_alerts",function(e,t){n.isAuthenticated()&&_.some(t,["userId",n.currentUser._id])&&o()})}t.$inject=["$scope","sidebarService","identityService","authService","alertsService"],angular.module("app").directive("kpHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"/common/components/sidebar.html"};return e}function t(e,t,n){function r(){t.logout()}var i=this;i.indentity=e,i.logout=r,i.sidebarStatus=n.getSidebarStatus()}t.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("kpSidebar",e)}(),function(){"use strict";function e(){return function(e,t){if(!angular.isObject(e))return e;var n=[];for(var r in e)n.push(e[r]);return n.sort(function(e,n){return e=parseInt(e[t]),n=parseInt(n[t]),e-n}),n}}angular.module("app").filter("orderObjectBy",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/alerts/",{params:{userId:t}})}function n(t){return e.put("/api/alert/clear",{alertId:t})}function r(t){return e.put("/api/alerts/clear",{userId:t})}var i={getActiveAlertsByPlayer:t,clearAlert:n,clearAllAlertsByPlayer:r};return i}e.$inject=["$http"],angular.module("app").factory("alertsService",e)}(),function(){"use strict";function e(e){function t(){return!!this.currentUser}function n(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var r;null!==e.bootstrappedUserObject&&(r=e.bootstrappedUserObject);var i={currentUser:r,isAuthenticated:t,isAuthorized:n};return i}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,t,n){$.notify({message:e,url:t,target:n},{type:"info"})}function t(e,t,n){$.notify({message:e,url:t,target:n},{type:"success"})}function n(e,t,n){$.notify({message:e,url:t,target:n},{type:"warning"})}function r(e,t,n){$.notify({message:e,url:t,target:n},{type:"danger"})}function i(e,t,n){$.notify({message:e,url:t,target:n},{type:"inverse"})}var a={info:e,success:t,warning:n,error:r,inverse:i};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85}}),a}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(e,t,n,r){$(e).mCustomScrollbar({theme:t,scrollInertia:100,axis:n,mouseWheel:{enable:!0,axis:r,preventDefault:!0}})}var t={malihuScroll:e};return t}angular.module("app").factory("scrollbarService",e)}(),function(){"use strict";function e(){function e(){return n}function t(e){n.left=e}var n={left:!1,right:!1},r={getSidebarStatus:e,setSidebarStatus:t};return r}angular.module("app").factory("sidebarService",e)}(),function(){"use strict";function e(e,t,n){function r(){return"https:"===t.location.protocol?"wss://"+t.location.host:"ws://"+t.location.host}function i(){o=new WebSocket(r()),o.onmessage=function(t){s=0;var n=JSON.parse(t.data);e.$broadcast("ws:"+n.topic,n.data)},o.onclose=function(){s<l.length?(console.log("WebSocket closed. Reconnecting..."),n(i,1e3*l[s]),s+=1):console.log("Giving up on WebSocket")}}function a(e,t){var n=JSON.stringify({topic:e,data:t});o.send(n)}var o,l=[3,10,100,1e3],s=0,c={connect:i,send:a};return c}e.$inject=["$rootScope","$window","$timeout"],angular.module("app").factory("websocketService",e).run(["websocketService",function(e){e.connect()}])}(),function(){"use strict";function e(e){function t(){e.getPyramids().then(function(e){n.pyramids=e.data})}var n=this;n.pyramids=[],t()}e.$inject=["pyramidsService"],angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/pyramids/components/pending-players.html"};return e}function t(e){function t(){}function n(t){t.position=i.pyramid.players.length+1,e.approvePendingPlayer(i.pyramid._id,t)}function r(t){e.denyPendingPlayer(i.pyramid._id,t)}var i=this;i.pendingPlayers=[],i.approvePendingPlayer=n,i.denyPendingPlayer=r,t()}t.$inject=["pyramidsService"],angular.module("app").directive("kpPendingPlayers",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/pyramids/components/pyramid-compact.html"};return e}function t(){function e(){}e()}angular.module("app").directive("kpPyramidCompact",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/pyramids/components/pyramid.html",replace:!0,scope:{pyramid:"="},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,n,r,i,a,o){function l(){for(var t=S;t>0;--t)$.maxPlayers+=t;e.$watch("vm.pyramid",function(){$.pyramid&&($.competitionId=$.pyramid._id,s(),c(),d(),p(),m())})}function s(){$.pyramid.players=r("orderBy")($.pyramid.players,"position")}function c(){$.currentUserIsAdmin=!1,$.currentUserIsPending=!1,a.isAuthenticated()&&($.currentUserIsAdmin=_.some($.pyramid.admins,["_id",a.currentUser._id]),$.currentUserIsPending=_.some($.pyramid.pendingPlayers,["_id",a.currentUser._id])),$.currentUserIsOnPyramid=!1,$.hasActiveChallenge=!1,_.forEach($.pyramid.players,function(e){a.isAuthenticated()&&e._id===a.currentUser._id&&($.currentUserIsOnPyramid=!0,e.class="current-user",$.currentUserPlayer=e,o.getActiveChallengeByCompetitionByPlayer($.competitionId,e._id).then(function(t){t.data&&($.hasActiveChallenge=!0,$.activeChallengeOpponent=t.data.challenger._id===e._id?t.data.opponent:t.data.challenger)}))}),o.getActiveChallengesByCompetition($.competitionId).then(function(e){_.forEach(e.data,function(e){var t=_.find($.pyramid.players,{_id:e.challenger._id});t.class="unavailable",t.challenge={position:"challenger"};var n=_.find($.pyramid.players,{_id:e.opponent._id});if(n.class="unavailable",n.challenge={position:"opponent"},0!==e.timeLimit){var r=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1;r>0?n.challenge.expires=r:r<=0&&v(null,!0,n)}}),f()})}function u(){$.breakPoints=[];for(var e=0;e<S;e++)$.breakPoints.push(e*(e+1)/2+1)}function d(){var e=0;$.levels=[],u();for(var t=0;t<$.pyramid.players.length;t++)$.breakPoints.indexOf(t+1)>-1&&(e+=1,$.levels.push(e)),$.pyramid.players[t].level=e}function p(){$.numberOfBlocks=0;for(var e=_.last($.levels);e>0;e--)$.numberOfBlocks+=e}function m(){$.numberOfRealPlayers=$.pyramid.players.length;for(var e=$.pyramid.players.length;e<$.numberOfBlocks;e++)$.pyramid.players.push({firstName:"Empty",lastName:"Spot",position:99,class:"empty"});d()}function f(){if($.currentUserIsOnPyramid&&!$.hasActiveChallenge){var e=$.currentUserPlayer.level>1?$.currentUserPlayer.level-1:null;_.forEach($.pyramid.players,function(t){t.level===e&&99!==t.position&&"unavailable"!==t.class&&($.availableChallenges=!0,t.available=!0,t.class="available")})}}function y(e){if(e.available){$.hasActiveChallenge=!0;var t={competitionName:$.pyramid.name,competitionId:$.competitionId,complete:!1,forfeit:!1,timeLimit:$.pyramid.forfeitDays,challenger:{_id:$.currentUserPlayer._id,email:$.currentUserPlayer.email,firstName:$.currentUserPlayer.firstName,lastName:$.currentUserPlayer.lastName,position:$.currentUserPlayer.position},opponent:{_id:e._id,email:e.email,firstName:e.firstName,lastName:e.lastName,position:e.position}};o.createChallenge(t).then(function(){$.pyramidMenuToggle=!1})}else i.error("Sorry, that is not a valid challenge.")}function v(e,t,r){var i=r||$.currentUserPlayer;o.getActiveChallengeByCompetitionByPlayer($.competitionId,i._id).then(function(i){$.hasActiveChallenge=!1;var a=!1;t?(i.data.forfeit=!0,"opponent"===r.challenge.position?(i.data.winner="challenger",a=!0):i.data.winner="opponent"):e?i.data.challenger._id===$.currentUserPlayer._id?(i.data.winner="challenger",a=!0):i.data.winner="opponent":i.data.challenger._id===$.currentUserPlayer._id?i.data.winner="opponent":(i.data.winner="challenger",a=!0),a?n.swapPositions($.competitionId,i.data.opponent,i.data.challenger).then(function(){o.completeChallenge(i.data).then(function(){U&&C()})}):o.completeChallenge(i.data).then(function(){U&&C()}),$.pyramidMenuToggle=!1})}function h(e){v(null,!0,e)}function g(){if(a.isAuthenticated())if($.numberOfRealPlayers<$.maxPlayers){var e={_id:a.currentUser._id,firstName:a.currentUser.firstName,lastName:a.currentUser.lastName,email:a.currentUser.username,position:$.numberOfRealPlayers+1};$.pyramid.open?swal({title:"Join Competition?",text:"You'll be added to the bottom",type:"warning",showCancelButton:!0,confirmButtonText:"Join",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToPyramid($.competitionId,e),swal("Welcome Aboard!","Now start fighting your way to the top","success")}):swal({title:"Send Join Request?",text:"This is a closed competition so an admin must approve your request",type:"warning",showCancelButton:!0,confirmButtonText:"Send Request",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToPyramidRequest($.pyramid,e).then(function(){$.currentUserIsPending=!0}),swal("Request Sent","You will receive an email once an admin processes the request.","success")})}else i.warning("Sorry, this pyramid is full");else i.warning("Please login to join a competition"),t.previous="pyramids.view",t.prevParams={competitionId:$.competitionId},t.go("login")}function P(){swal({title:"Leave Pyramid?",text:"You will lose your spot and forfeit any active challenges.",type:"error",showCancelButton:!0,confirmButtonText:"Yes, leave",confirmButtonClass:"btn-danger",cancelButtonText:"No, stay",closeOnConfirm:!1,closeOnCancel:!0},function(){C(),swal("OK, you'r out!","You've been removed from the pyramid.","success")})}function C(){a.isAuthenticated()&&$.currentUserIsOnPyramid&&(U=!0,$.hasActiveChallenge?v(null,!0,$.currentUserPlayer):($.currentUserIsOnPyramid=!1,$.hasActiveChallenge=!1,n.getPyramid($.competitionId).then(function(e){var t=e.data,r=$.currentUserPlayer.position;_.forEach(t.players,function(e){e.position>=r&&(e.position-=1)});for(var i=_.remove(t.players,function(e){return e._id===$.currentUserPlayer._id}),a=[],o=0;o<$.numberOfRealPlayers-1;++o){var l={_id:t.players[o]._id,firstName:t.players[o].firstName,lastName:t.players[o].lastName,position:t.players[o].position};a.push(l)}n.removedPlayerFromPyramid($.competitionId,i[0],a).then(function(){U=!1})})))}function w(e){99!==e.position||$.currentUserIsOnPyramid||g(),e.available===!0&&$.currentUserIsOnPyramid&&!$.hasActiveChallenge&&swal({title:"Challenge Request",text:"Challenge "+e.firstName+" "+e.lastName+"?",type:"warning",showCancelButton:!0,confirmButtonText:"Send Challenge",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){y(e),swal("Challenge Sent",e.firstName+" "+e.lastName+" has been notified of the challenge.","success")})}function b(){n.getPyramid($.competitionId).then(function(e){$.pyramid=e.data})}var S=10,$=this;$.competitionId=null,$.breakPoints=[],$.levels=[],$.numberOfBlocks=0,$.currentUserIsOnPyramid=!1,$.currentUserIsPending=!1,$.currentUserIsAdmin=!1,$.hasActiveChallenge=!1,$.activeChallengeOpponent=null,$.availableChallenges=!1,$.createChallenge=y,$.completeChallenge=v,$.challengeExpired=h,$.currentUserPlayer={},$.pyramidMenuToggle=!1,$.addCurrentUserToPyramid=g,$.confirmRemoveCurrentUserFromPyramid=P,$.playerClick=w,$.numberOfRealPlayers=0,$.maxPlayers=0,l();var U=!1;e.$on("ws:pyramid_updated",function(e,t){$.competitionId===t.competitionId&&(i.info(t.description),b())})}t.$inject=["$scope","$state","pyramidsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("kpPyramid",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/pyramids/components/update-admins.html"};return e}function t(e,t,n,r){function i(){e.$watch("vm.pyramid",function(){d.pyramid&&a()})}function a(){d.availableAdmins=[],r.getAllUsers().then(function(e){_.forEach(d.pyramid.admins,function(t){_.remove(e.data,function(e){return t._id===e._id})}),_.forEach(e.data,function(e){d.availableAdmins.push({firstName:e.firstName,lastName:e.lastName,email:e.email,_id:e._id})})})}function o(){t.updatePyramid(d.pyramid).then(function(){d.disableSubmit=!0})}function l(){t.getPyramid(d.pyramid._id).then(function(e){d.pyramid=e.data,d.disableSubmit=!0}),a()}function s(e){u.push(e),d.availableAdmins.push(_.remove(d.pyramid.admins,{_id:e._id})[0]),d.disableSubmit=!1}function c(e){d.pyramid.admins.push(_.remove(d.availableAdmins,{_id:e._id})[0]),d.disableSubmit=!1}var u=[],d=this;d.availableAdmins=[],d.updatePyramid=o,d.cancelUpdate=l,d.removeAdmin=s,d.addAdmin=c,d.disableSubmit=!0,i()}t.$inject=["$scope","pyramidsService","challengesService","userService"],angular.module("app").directive("kpUpdateAdmins",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/pyramids/components/update-players.html"};return e}function t(e,t,n,r,i){function a(){e.$watch("vm.pyramid",function(){m.pyramid&&o()})}function o(){i.getAllUsers().then(function(e){_.forEach(m.pyramid.players,function(t){_.remove(e.data,function(e){return t._id===e._id})}),m.availablePlayers=e.data})}function l(){_.forEach(p,function(e){r.deleteActiveChallengeByCompetitionByPlayer(m.pyramid._id,e._id)}),n.updatePyramid(m.pyramid).then(function(){m.disableSubmit=!0})}function s(){n.getPyramid(m.pyramid._id).then(function(e){e.data.players=t("orderBy")(e.data.players,"position"),m.pyramid=e.data,m.disableSubmit=!0}),o()}function c(){var e=1;_.forEach(m.pyramid.players,function(t){t.position=e,++e}),m.disableSubmit=!1}function u(e){p.push(e),m.availablePlayers.push(_.remove(m.pyramid.players,{_id:e._id})[0]),c()}function d(e){e.position=m.pyramid.players.length+1,m.pyramid.players.push(_.remove(m.availablePlayers,{_id:e._id})[0]),m.disableSubmit=!1}var p=[],m=this;m.availablePlayers=[],m.updatePyramid=l,m.cancelUpdate=s,m.reorderPlayers=c,m.removePlayer=u,m.addPlayer=d,m.disableSubmit=!0,a()}t.$inject=["$scope","$filter","pyramidsService","challengesService","userService"],angular.module("app").directive("kpUpdatePlayers",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/pyramid",{params:{competitionId:t}})}function n(t){return e.get("/api/pyramids/user",{params:{userId:t}})}function r(){return e.get("/api/pyramids")}function i(t){return e.post("/api/pyramids/create",{pyramid:t})}function a(t){return e.post("/api/pyramids/update",{pyramid:t})}function o(t){return e.delete("/api/pyramids/delete",{params:{competitionId:t}})}function l(t,n,r){return e.post("/api/pyramids/swapPositions",{competitionId:t,challenger:n,opponent:r})}function s(t,n){return e.post("/api/pyramids/addPlayer",{competitionId:t,player:n})}function c(t,n){return e.post("/api/pyramids/addPlayerRequest",{competition:t,player:n})}function u(t,n,r){return e.post("/api/pyramids/removePlayer",{competitionId:t,removedPlayer:n,players:r})}function d(t,n){return e.post("/api/pyramids/approvePlayer",{competitionId:t,player:n})}function p(t,n){return e.post("/api/pyramids/denyPlayer",{competitionId:t,player:n})}var m={getPyramid:t,getPyramidsForUser:n,getPyramids:r,createPyramid:i,updatePyramid:a,deletePyramid:o,swapPositions:l,addPlayerToPyramid:s,addPlayerToPyramidRequest:c,removedPlayerFromPyramid:u,approvePendingPlayer:d,denyPendingPlayer:p};return m}e.$inject=["$http"],angular.module("app").factory("pyramidsService",e)}(),function(){"use strict";function e(e,t,n,r,i,a,o,l){function s(){n.competitionId?(p.competitionId=n.competitionId,c()):t.go("pyramids.myPyramids")}function c(){i.getPyramid(p.competitionId).then(function(e){e.data&&_.some(e.data.admins,["_id",a.currentUser._id])?(p.isAdmin=!0,e.data.players=r("orderBy")(e.data.players,"position"),p.pyramid=e.data):t.go("pyramids.myPyramids")}),l.getCompletedChallengesByCompetition(p.competitionId).then(function(e){p.challenges=e.data})}function u(){i.getPyramid(p.competitionId).then(function(e){var t=e.data;t.open=p.pyramid.open,i.updatePyramid(t)})}function d(){swal({title:"Delete Competition?",text:"This can not be undone",type:"error",showCancelButton:!0,confirmButtonText:"Delete",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){i.deletePyramid(p.competitionId).then(function(){t.go("pyramids.myPyramids")})})}var p=this;p.competitionId=null,p.updatePyramidOpenStatus=u,p.deletePyramid=d,s(),e.$on("ws:pyramid_updated",function(e,t){p.competitionId===t.competitionId&&(o.info(t.description),c())}),e.$on("ws:pyramid_deleted",function(e,n){p.competitionId===n.competitionId&&(o.info(n.description),t.go("pyramids.myPyramids"))})}e.$inject=["$scope","$state","$stateParams","$filter","pyramidsService","identityService","notifyService","challengesService"],angular.module("app").controller("AdminCtrl",e)}(),function(){"use strict";function e(e,t,n,r){function i(){t.getAllUsers().then(function(e){d.availablePlayers=e.data});for(var e=0;e<u;e++)c.push(e*(e+1)/2+1)}function a(e){e.position=d.addedPlayers.length+1,d.addedPlayers.push(_.remove(d.availablePlayers,{_id:e._id})[0])}function o(e){d.availablePlayers.push(_.remove(d.addedPlayers,{_id:e._id})[0]),l()}function l(){var e=1;_.forEach(d.addedPlayers,function(t){t.position=e,++e})}function s(t){angular.forEach(d.addedPlayers,function(e){var n={_id:e._id,email:e.username,firstName:e.firstName,lastName:e.lastName,position:e.position};t.players.push(n)}),t.admins=[{_id:r.currentUser._id,email:r.currentUser.username,firstName:r.currentUser.firstName,lastName:r.currentUser.lastName,primary:!0}];for(var i=0;i<c.length;i++)if(t.players.length<c[i]){t.levels=i;break}n.createPyramid(t).then(function(t){e.go("pyramids.view",{competitionId:t.data._id})})}var c=[],u=10,d=this;d.newPyramid={players:[],open:!1},d.availablePlayers=[],d.addedPlayers=[],d.createPyramid=s,d.addPlayer=a,d.removePlayer=o,d.reorderPlayers=l,d.newPyramid.forfeitDays=1,i()}e.$inject=["$state","userService","pyramidsService","identityService"],angular.module("app").controller("CreatePyramidCtrl",e)}(),function(){"use strict";function e(e,t,n,r,i){function a(){o()}function o(){l=[],s.activeChallenge=null,r.isAuthenticated()&&t.getPyramidsForUser(r.currentUser._id).then(function(e){s.pyramids=e.data,_.forEach(s.pyramids,function(e){l.push(e._id),n.getActiveChallengeByCompetitionByPlayer(e._id,r.currentUser._id).then(function(t){t.data&&(e.activeChallenge=t.data,0!==e.activeChallenge.timeLimit&&(e.activeChallenge.expires=moment().diff(moment(e.activeChallenge.created).add(e.activeChallenge.timeLimit,"d"),"s")*-1))})})})}var l=[],s=this;s.activeChallenge=null,a(),e.$on("ws:pyramid_updated",function(e,t){l.indexOf(t.competitionId)>=0&&(i.info(t.description),o())})}e.$inject=["$scope","pyramidsService","challengesService","identityService","notifyService"],angular.module("app").controller("MyPyramidsCtrl",e)}(),function(){"use strict";function e(e,t,n,r,i){function a(){n.competitionId&&(o.competitionId=n.competitionId,r.getPyramid(o.competitionId).then(function(e){e.data?o.pyramid=e.data:t.go("pyramids.myPyramids")}))}var o=this;o.competitionId=null,o.pyramid=null,a(),e.$on("ws:pyramid_deleted",function(e,n){o.competitionId===n.competitionId&&(i.info(n.description),t.go("pyramids.myPyramids"))})}e.$inject=["$scope","$state","$stateParams","pyramidsService","notifyService"],angular.module("app").controller("PyramidCtrl",e)}(),function(){"use strict";function e(e){function t(){e.getPyramids().then(function(e){n.pyramids=e.data})}var n=this;n.pyramids=[],t()}e.$inject=["pyramidsService"],angular.module("app").controller("PyramidsCtrl",e)}(),function(){"use strict";function e(e,t,n,r,i,a){function o(){t.competitionId&&(s.competitionId=t.competitionId,l())}function l(){r.getPyramid(s.competitionId).then(function(e){e.data?(s.pyramid=e.data,_.forEach(s.pyramid.players,function(e){a.getPlayerResultsByCompetition(s.competitionId,e._id).then(function(t){e.results=t.data})})):n.go("pyramids.myPyramids")}),a.getCompletedChallengesByCompetition(s.competitionId).then(function(e){s.challenges=e.data})}var s=this;s.competitionId=null,s.pyramid={},s.playersResults=[],s.challenges=[],o(),e.$on("ws:pyramid_updated",function(e,t){s.competitionId===t.competitionId&&(i.info(t.description),l())}),e.$on("ws:pyramid_deleted",function(e,t){s.competitionId===t.competitionId&&(i.info(t.description),n.go("pyramids.myPyramids"))})}e.$inject=["$scope","$stateParams","$state","pyramidsService","notifyService","challengesService"],angular.module("app").controller("StatsCtrl",e)}(),function(){"use strict";function e(e){function t(){}var n=this;n.indentity=e,t()}e.$inject=["identityService"],angular.module("app").controller("UserCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/challenges/components/active-challenges.html"};return e}function t(e,t){function n(){e.$watch("vm.pyramid",function(){i.pyramid&&r()})}function r(){i.challenges=[],t.getActiveChallengesByCompetition(i.pyramid._id).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){0!==e.timeLimit&&(e.expires=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1)}))})}var i=this;i.challenges=[],n()}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpActiveChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@",allowDelete:"=",challenges:"="},templateUrl:"/challenges/components/completed-challenges.html"};return e}function t(e,t,n){function r(){e.$watch("vm.challenges",function(){o.challenges&&o.challenges.length>0&&i()})}function i(){_.forEach(o.challenges,function(e){e.loser="challenger"===e.winner?"opponent":"challenger",e.whenCompleted=moment(e.completed).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd",sameElse:"DD/MM/YYYY"})})}function a(e,t){n.deleteChallenge(o.competitionId,e).then(function(){o.challenges.splice(t,1)})}var o=this;o.challenges=[],o.deleteChallenge=a,r()}t.$inject=["$scope","$state","challengesService"],angular.module("app").directive("kpCompletedChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{player:"="},templateUrl:"/challenges/components/player-overall-results.html"};return e}function t(e){function t(){e.$watch("vm.player.results",function(){a.player&&(n(a.player),r(a.player),i(a.player))})}function n(e){for(var t=[],n=0;n<a.maxLevels;n++)t.push(n*(n+1)/2+1);e.level=t.length;for(var r=0;r<t.length;r++)if(e.position<t[r+1]){e.level=t.indexOf(t[r])+1;break}}function r(e){var t,n=0,r=!0;_.forEach(e.results,function(i){r&&("challenger"===i.winner&&i.challenger._id===e._id||"opponent"===i.winner&&i.opponent._id===e._id?"losing"!==t?(n+=1,t="winning"):r=!1:("opponent"===i.winner&&i.challenger._id===e._id||"challenger"===i.winner&&i.opponent._id===e._id)&&("winning"!==t?(n+=1,t="losing"):r=!1)),a.streak={type:t,value:n}})}function i(e){a.wins.asOpponent=_.size(_.filter(e.results,function(t){return t.opponent._id===e._id&&"opponent"===t.winner;
})),a.wins.asChallenger=_.size(_.filter(e.results,function(t){return t.challenger._id===e._id&&"challenger"===t.winner})),a.wins.total=a.wins.asChallenger+a.wins.asOpponent,a.wins.byForfeit=_.size(_.filter(e.results,function(t){return t.forfeit&&(t.challenger._id===e._id&&"challenger"===t.winner||t.opponent._id===e._id&&"opponent"===t.winner)})),a.loses.asOpponent=_.size(_.filter(e.results,function(t){return t.opponent._id===e._id&&"challenger"===t.winner})),a.loses.asChallenger=_.size(_.filter(e.results,function(t){return t.challenger._id===e._id&&"opponent"===t.winner})),a.loses.total=a.loses.asChallenger+a.loses.asOpponent,a.loses.byForfeit=_.size(_.filter(e.results,function(t){return t.forfeit&&(t.challenger._id===e._id&&"opponent"===t.winner||t.opponent._id===e._id&&"challenger"===t.winner)}))}var a=this;a.maxLevels=10,a.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},a.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},a.streak={type:null,value:0},t()}t.$inject=["$scope"],angular.module("app").directive("kpPlayerOverallResults",e)}(),function(){"use strict";function e(e){function t(t){return e.post("/api/challenges/create",{challenge:t})}function n(t){return e.post("/api/challenges/complete",{challenge:t})}function r(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function i(t){return e.get("/api/challenges/active/competition",{params:{competitionId:t}})}function a(t,n){return e.get("/api/challenges/active/competition/player",{params:{competitionId:t,playerId:n}})}function o(t,n){return e.get("/api/challenges/completed/competition",{params:{competitionId:t,limit:n}})}function l(t,n){return e.delete("/api/challenges/active/competition/player/delete",{params:{competitionId:t,playerId:n}})}function s(t,n){return e.delete("/api/challenges/delete",{params:{competitionId:t,challengeId:n}})}function c(t,n){return e.get("/api/challenges/results/competition/player",{params:{competitionId:t,playerId:n}})}var u={createChallenge:t,completeChallenge:n,getChallengesByCompetition:r,getActiveChallengesByCompetition:i,getActiveChallengeByCompetitionByPlayer:a,getCompletedChallengesByCompetition:o,deleteActiveChallengeByCompetitionByPlayer:l,deleteChallenge:s,getPlayerResultsByCompetition:c};return u}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(e){function t(t,n,r){var i=r.scrollaxis||"y",a=r.theme||"minimal-dark",o=r.mousewheelaxis||"y";$("html").hasClass("ismobile")||e.malihuScroll(n,a,i,o)}var n={restrict:"C",link:t};return n}e.$inject=["scrollbarService"],angular.module("app").directive("cOverflow",e)}(),function(){"use strict";function e(){function e(e,t){t.click(function(){t.next().slideToggle(200),t.parent().toggleClass("toggled")})}var t={restrict:"A",link:e};return t}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,t){t.hasClass("btn-icon")||t.hasClass("btn-float")?Waves.attach(t,["waves-circle"]):t.hasClass("btn-light")?Waves.attach(t,["waves-light"]):Waves.attach(t),Waves.init()}var t={restrict:"C",link:e};return t}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,t){var n=t.children().first(),r=t.parent().hasClass("fg-float");n.focus(function(){t.addClass("fg-toggled")}),n.blur(function(){(!r||r&&0===n.val().length)&&t.removeClass("fg-toggled")})}var t={restrict:"C",link:e};return t}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAuY29uZmlnLmpzIiwiYXBwLmNvbnRyb2xsZXIuanMiLCJhcHAucm91dGVzLmpzIiwiYXBwLnJ1bi5qcyIsImF1dGhlbnRpY2F0aW9uL3NlcnZpY2VzL2F1dGguc2VydmljZS5qcyIsImF1dGhlbnRpY2F0aW9uL3NlcnZpY2VzL3VzZXIuc2VydmljZS5qcyIsImF1dGhlbnRpY2F0aW9uL3ZpZXdzL2xvZ2luLmNvbnRyb2xsZXIuanMiLCJhdXRoZW50aWNhdGlvbi92aWV3cy9wYXNzd29yZC1yZXNldC5jb250cm9sbGVyLmpzIiwiYXV0aGVudGljYXRpb24vdmlld3MvcmVnaXN0ZXIuY29udHJvbGxlci5qcyIsImF1dGhlbnRpY2F0aW9uL3ZpZXdzL3ZlcmlmaWNhdGlvbi5jb250cm9sbGVyLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvZm9vdGVyLmRpcmVjdGl2ZS5qcyIsImNvbW1vbi9jb21wb25lbnRzL2hlYWRlci5kaXJlY3RpdmUuanMiLCJjb21tb24vY29tcG9uZW50cy9zaWRlYmFyLmRpcmVjdGl2ZS5qcyIsImNvbW1vbi9maWx0ZXJzL29yZGVyLW9iamVjdC1ieS5maWx0ZXIuanMiLCJjb21tb24vc2VydmljZXMvYWxlcnRzLnNlcnZpY2UuanMiLCJjb21tb24vc2VydmljZXMvaW5kZW50aXR5LnNlcnZpY2UuanMiLCJjb21tb24vc2VydmljZXMvbm90aWZ5LnNlcnZpY2UuanMiLCJjb21tb24vc2VydmljZXMvc2Nyb2xsYmFyLnNlcnZpY2UuanMiLCJjb21tb24vc2VydmljZXMvc2lkZWJhci5zZXJ2aWNlLmpzIiwiY29tbW9uL3NlcnZpY2VzL3dlYnNvY2tldC5zZXJ2aWNlLmpzIiwiY29tbW9uL3ZpZXdzL2hvbWUuY29udHJvbGxlci5qcyIsInB5cmFtaWRzL2NvbXBvbmVudHMvcGVuZGluZy1wbGF5ZXJzLmRpcmVjdGl2ZS5qcyIsInB5cmFtaWRzL2NvbXBvbmVudHMvcHlyYW1pZC1jb21wYWN0LmRpcmVjdGl2ZS5qcyIsInB5cmFtaWRzL2NvbXBvbmVudHMvcHlyYW1pZC5kaXJlY3RpdmUuanMiLCJweXJhbWlkcy9jb21wb25lbnRzL3VwZGF0ZS1hZG1pbnMuZGlyZWN0aXZlLmpzIiwicHlyYW1pZHMvY29tcG9uZW50cy91cGRhdGUtcGxheWVycy5kaXJlY3RpdmUuanMiLCJweXJhbWlkcy9zZXJ2aWNlcy9weXJhbWlkcy5zZXJ2aWNlLmpzIiwicHlyYW1pZHMvdmlld3MvYWRtaW4uY29udHJvbGxlci5qcyIsInB5cmFtaWRzL3ZpZXdzL2NyZWF0ZS1weXJhbWlkLmNvbnRyb2xsZXIuanMiLCJweXJhbWlkcy92aWV3cy9teS1weXJhbWlkcy5jb250cm9sbGVyLmpzIiwicHlyYW1pZHMvdmlld3MvcHlyYW1pZC5jb250cm9sbGVyLmpzIiwicHlyYW1pZHMvdmlld3MvcHlyYW1pZHMuY29udHJvbGxlci5qcyIsInB5cmFtaWRzL3ZpZXdzL3N0YXRzLmNvbnRyb2xsZXIuanMiLCJ1c2Vycy92aWV3cy91c2VyLmNvbnRyb2xsZXIuanMiLCJjaGFsbGVuZ2VzL2NvbXBvbmVudHMvYWN0aXZlLWNoYWxsZW5nZXMuZGlyZWN0aXZlLmpzIiwiY2hhbGxlbmdlcy9jb21wb25lbnRzL2NvbXBsZXRlZC1jaGFsbGVuZ2VzLmRpcmVjdGl2ZS5qcyIsImNoYWxsZW5nZXMvY29tcG9uZW50cy9wbGF5ZXItb3ZlcmFsbC1yZXN1bHRzLmRpcmVjdGl2ZS5qcyIsImNoYWxsZW5nZXMvc2VydmljZXMvY2hhbGxlbmdlcy5zZXJ2aWNlLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvdWkvc2Nyb2xsYmFyLmRpcmVjdGl2ZS5qcyIsImNvbW1vbi9jb21wb25lbnRzL3VpL3RvZ2dsZS1zdWJtZW51LmRpcmVjdGl2ZS5qcyIsImNvbW1vbi9jb21wb25lbnRzL3VpL3dhdmVzLmRpcmVjdGl2ZS5qcyIsImNvbW1vbi9jb21wb25lbnRzL3VpL2Zvcm1zL2ZnLWxpbmUuZGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWd1cmF0aW9uIiwiJGh0dHBQcm92aWRlciIsIiR1aWJUb29sdGlwUHJvdmlkZXIiLCIkcVByb3ZpZGVyIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiZ2V0Iiwib3B0aW9ucyIsImFwcGVuZFRvQm9keSIsImVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zIiwiY29uZmlnIiwiQXBwQ3RybCIsIiRzdGF0ZSIsImxvY2FsU3RvcmFnZVNlcnZpY2UiLCJ0b2dnbGVTaWRlYmFyTG9ja2VkIiwibG9ja2VkIiwic2V0IiwiYXBwQ3RybCIsInRoaXMiLCJsb2NrU2lkZWJhciIsImNvbnRyb2xsZXIiLCJjb25maWd1cmVSb3V0ZXMiLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwicm91dGVSb2xlQ2hlY2tzIiwic3VwZXJBZG1pbiIsInJlcXVpcmVTdXBlckFkbWluIiwiYWRtaW4iLCJyZXF1aXJlQWRtaW4iLCJ1c2VyIiwicmVxdWlyZUF1dGgiLCJodG1sNU1vZGUiLCJvdGhlcndpc2UiLCJ3aGVuIiwic3RhdGUiLCJ1cmwiLCJ2aWV3cyIsImNvbnRlbnQiLCJjb250cm9sbGVyQXMiLCJ0ZW1wbGF0ZVVybCIsImNvbnRlbnRAIiwicmVzb2x2ZSIsImF1dGgiLCJhdXRoU2VydmljZSIsImF1dGhvcml6ZUN1cnJlbnRVc2VyRm9yUm91dGUiLCJhdXRoZW50aWNhdGVkVXNlckZvclJvdXRlIiwiJGluamVjdCIsImFwcFJ1biIsIiRyb290U2NvcGUiLCJzaWRlYmFyU2VydmljZSIsIiRvbiIsImV2ZW50IiwidG9TdGF0ZSIsInRvUGFyYW1zIiwiZnJvbVN0YXRlIiwiZnJvbVBhcmFtcyIsImVycm9yIiwiZ28iLCJwcmV2aW91cyIsInByZXZQYXJhbXMiLCJzZXRTaWRlYmFyU3RhdHVzIiwicnVuIiwiJGh0dHAiLCIkcSIsInVzZXJTZXJ2aWNlIiwiaWRlbnRpdHlTZXJ2aWNlIiwibm90aWZ5U2VydmljZSIsImF1dGhlbnRpY2F0ZVVzZXIiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiZGZkIiwiZGVmZXIiLCJwb3N0IiwidGhlbiIsInJlc3BvbnNlIiwiZGF0YSIsInN1Y2Nlc3MiLCJjdXJyZW50VXNlciIsIm1lc3NhZ2UiLCJwcm9taXNlIiwiY3JlYXRlVXNlciIsInVzZXJEYXRhIiwicmVhc29uIiwibG9nb3V0IiwidW5kZWZpbmVkIiwicm9sZSIsImlzQXV0aG9yaXplZCIsInJlamVjdCIsImlzQXV0aGVudGljYXRlZCIsInNlcnZpY2UiLCJmYWN0b3J5IiwiZ2V0QWxsVXNlcnMiLCJ1c2VycyIsInZlcmlmeVVzZXIiLCJ1c2VySWQiLCJ2ZXJpZmljYXRpb25Ub2tlbiIsInBhcmFtcyIsImdlbmVyYXRlUGFzc3dvcmRSZXNldExpbmsiLCJyZXNldFBhc3N3b3JkIiwicHV0IiwiTG9naW5DdHJsIiwiYWN0aXZhdGUiLCJsb2dpbiIsInZtIiwiUGFzc3dvcmRSZXNldEN0cmwiLCIkc3RhdGVQYXJhbXMiLCJ2ZXJpZmllZCIsInJlc2V0UGFzc3dvcmRGb3JtIiwiY29uZmlybVBhc3N3b3JkIiwiUmVnaXN0ZXJDdHJsIiwicmVnaXN0ZXIiLCJuZXdVc2VyIiwiVmVyaWZpY2F0aW9uQ3RybCIsInZlcmlmeWluZyIsImtwRm9vdGVyIiwiZGlyZWN0aXZlIiwiYmluZFRvQ29udHJvbGxlciIsImN0cmxGdW5jIiwicmVzdHJpY3QiLCJpbmRlbnRpdHkiLCJrcEhlYWRlciIsIiRzY29wZSIsImFsZXJ0c1NlcnZpY2UiLCJnZXRBY3RpdmVBbGVydHMiLCIkd2F0Y2giLCJoZWFkZXJDdHJsIiwiYWxlcnRzIiwiZ2V0QWN0aXZlQWxlcnRzQnlQbGF5ZXIiLCJfaWQiLCJjbGVhckFsZXJ0IiwiaW5kZXgiLCJzcGxpY2UiLCJjbGVhckFsbEFsZXJ0cyIsImNsZWFyQWxsQWxlcnRzQnlQbGF5ZXIiLCJ0b2dnbGVTaWRlYmFyIiwic2lkZWJhclN0YXR1cyIsImxlZnQiLCJnZXRTaWRlYmFyU3RhdHVzIiwiZSIsIl8iLCJzb21lIiwia3BTaWRlYmFyIiwib3JkZXJPYmplY3RCeSIsImlucHV0IiwiYXR0cmlidXRlIiwiaXNPYmplY3QiLCJhcnJheSIsIm9iamVjdEtleSIsInB1c2giLCJzb3J0IiwiYSIsImIiLCJwYXJzZUludCIsImZpbHRlciIsImFsZXJ0SWQiLCIkd2luZG93Iiwicm9sZXMiLCJpbmRleE9mIiwiYm9vdHN0cmFwcGVkVXNlck9iamVjdCIsImluZm8iLCJ0YXJnZXQiLCIkIiwibm90aWZ5IiwidHlwZSIsIndhcm5pbmciLCJpbnZlcnNlIiwibm90aWZ5RGVmYXVsdHMiLCJuZXdlc3Rfb25fdG9wIiwib2Zmc2V0IiwieCIsInkiLCJzY3JvbGxiYXJTZXJ2aWNlIiwibWFsaWh1U2Nyb2xsIiwic2VsZWN0b3IiLCJ0aGVtZSIsInNjcm9sbGF4aXMiLCJtb3VzZXdoZWVsYXhpcyIsIm1DdXN0b21TY3JvbGxiYXIiLCJzY3JvbGxJbmVydGlhIiwiYXhpcyIsIm1vdXNlV2hlZWwiLCJlbmFibGUiLCJwcmV2ZW50RGVmYXVsdCIsInN0YXR1cyIsInJpZ2h0Iiwid2Vic29ja2V0U2VydmljZSIsIiR0aW1lb3V0Iiwid2Vic29ja2V0SG9zdCIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJob3N0IiwiY29ubmVjdCIsImNvbm5lY3Rpb24iLCJXZWJTb2NrZXQiLCJvbm1lc3NhZ2UiLCJyZXRyeSIsInBheWxvYWQiLCJKU09OIiwicGFyc2UiLCIkYnJvYWRjYXN0IiwidG9waWMiLCJvbmNsb3NlIiwicmV0cnlTZWNvbmRzIiwibGVuZ3RoIiwiY29uc29sZSIsImxvZyIsInNlbmQiLCJqc29uIiwic3RyaW5naWZ5IiwiSG9tZUN0cmwiLCJweXJhbWlkc1NlcnZpY2UiLCJnZXRQeXJhbWlkcyIsInB5cmFtaWRzIiwia3BQZW5kaW5nUGxheWVycyIsInNjb3BlIiwicHlyYW1pZCIsImFwcHJvdmVQZW5kaW5nUGxheWVyIiwicGxheWVyIiwicG9zaXRpb24iLCJwbGF5ZXJzIiwiZGVueVBlbmRpbmdQbGF5ZXIiLCJwZW5kaW5nUGxheWVycyIsImtwUHlyYW1pZENvbXBhY3QiLCJrcFB5cmFtaWQiLCJyZXBsYWNlIiwiJGZpbHRlciIsImNoYWxsZW5nZXNTZXJ2aWNlIiwiaSIsIm1heExldmVscyIsIm1heFBsYXllcnMiLCJjb21wZXRpdGlvbklkIiwib3JkZXJQbGF5ZXJzIiwiZ2V0UGxheWVyc1N0YXR1cyIsImFzc2lnbkxldmVsc1RvUGxheWVycyIsImNhbGN1bGF0ZVB5cmFtaWRCbG9ja3MiLCJmaWxsSW5FbXB0eUJsb2NrcyIsImN1cnJlbnRVc2VySXNBZG1pbiIsImN1cnJlbnRVc2VySXNQZW5kaW5nIiwiYWRtaW5zIiwiY3VycmVudFVzZXJJc09uUHlyYW1pZCIsImhhc0FjdGl2ZUNoYWxsZW5nZSIsImZvckVhY2giLCJjbGFzcyIsImN1cnJlbnRVc2VyUGxheWVyIiwiZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyIiwiY2hhbGxlbmdlIiwiYWN0aXZlQ2hhbGxlbmdlT3Bwb25lbnQiLCJjaGFsbGVuZ2VyIiwib3Bwb25lbnQiLCJnZXRBY3RpdmVDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbiIsImNoYWxsZW5nZXMiLCJmaW5kIiwidGltZUxpbWl0IiwidGltZVRvRXhwaXJlIiwibW9tZW50IiwiZGlmZiIsImNyZWF0ZWQiLCJhZGQiLCJleHBpcmVzIiwiY29tcGxldGVDaGFsbGVuZ2UiLCJmaW5kQXZhaWxhYmxlQ2hhbGxlbmdlcyIsImNyZWF0ZUJyZWFrUG9pbnRzIiwiYnJlYWtQb2ludHMiLCJsZXZlbCIsImxldmVscyIsIm51bWJlck9mQmxvY2tzIiwibGFzdCIsIm51bWJlck9mUmVhbFBsYXllcnMiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsImxldmVsQWJvdmUiLCJhdmFpbGFibGVDaGFsbGVuZ2VzIiwiYXZhaWxhYmxlIiwiY3JlYXRlQ2hhbGxlbmdlIiwiY29tcGV0aXRpb25OYW1lIiwibmFtZSIsImNvbXBsZXRlIiwiZm9yZmVpdCIsImZvcmZlaXREYXlzIiwiZW1haWwiLCJweXJhbWlkTWVudVRvZ2dsZSIsIndpbm5lcklzQ3VycmVudFVzZXIiLCJmb3JmZWl0TG9zZXIiLCJzd2FwUG9zaXRpb25zIiwid2lubmVyIiwicmVtb3ZpbmdDdXJyZW50VXNlciIsInJlbW92ZUN1cnJlbnRVc2VyRnJvbVB5cmFtaWQiLCJjaGFsbGVuZ2VFeHBpcmVkIiwiYWRkQ3VycmVudFVzZXJUb1B5cmFtaWQiLCJvcGVuIiwic3dhbCIsInRpdGxlIiwidGV4dCIsInNob3dDYW5jZWxCdXR0b24iLCJjb25maXJtQnV0dG9uVGV4dCIsImNhbmNlbEJ1dHRvblRleHQiLCJjbG9zZU9uQ29uZmlybSIsImNsb3NlT25DYW5jZWwiLCJhZGRQbGF5ZXJUb1B5cmFtaWQiLCJhZGRQbGF5ZXJUb1B5cmFtaWRSZXF1ZXN0IiwiY29uZmlybVJlbW92ZUN1cnJlbnRVc2VyRnJvbVB5cmFtaWQiLCJjb25maXJtQnV0dG9uQ2xhc3MiLCJnZXRQeXJhbWlkIiwicCIsIm9wZW5Qb3NpdGlvbiIsInJlbW92ZWRQbGF5ZXIiLCJyZW1vdmUiLCJ1cGRhdGVkUGxheWVycyIsInVwZGF0ZWRQbGF5ZXIiLCJyZW1vdmVkUGxheWVyRnJvbVB5cmFtaWQiLCJwbGF5ZXJDbGljayIsInJlZnJlc2hQeXJhbWlkIiwiY2hhbGxlbmdlRGV0YWlscyIsImRlc2NyaXB0aW9uIiwia3BVcGRhdGVBZG1pbnMiLCJnZXRBdmFpbGFibGVBZG1pbnMiLCJhdmFpbGFibGVBZG1pbnMiLCJweXJhbWlkQWRtaW4iLCJhdmFpbGFibGVBZG1pbiIsInVwZGF0ZVB5cmFtaWQiLCJkaXNhYmxlU3VibWl0IiwiY2FuY2VsVXBkYXRlIiwicmVtb3ZlQWRtaW4iLCJyZW1vdmVkQWRtaW5zIiwiYWRkQWRtaW4iLCJrcFVwZGF0ZVBsYXllcnMiLCJnZXRBdmFpbGFibGVQbGF5ZXJzIiwicHlyYW1pZFBsYXllciIsImF2YWlsYWJsZVBsYXllciIsImF2YWlsYWJsZVBsYXllcnMiLCJyZW1vdmVkUGxheWVycyIsImRlbGV0ZUFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllciIsInJlb3JkZXJQbGF5ZXJzIiwicmVtb3ZlUGxheWVyIiwiYWRkUGxheWVyIiwiZ2V0UHlyYW1pZHNGb3JVc2VyIiwiY3JlYXRlUHlyYW1pZCIsImRlbGV0ZVB5cmFtaWQiLCJkZWxldGUiLCJjb21wZXRpdGlvbiIsIkFkbWluQ3RybCIsImlzQWRtaW4iLCJnZXRDb21wbGV0ZWRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbiIsInVwZGF0ZVB5cmFtaWRPcGVuU3RhdHVzIiwidXBkYXRlZFB5cmFtaWQiLCJDcmVhdGVQeXJhbWlkQ3RybCIsImFkZGVkUGxheWVycyIsInByaW1hcnkiLCJuZXdQeXJhbWlkIiwiTXlQeXJhbWlkc0N0cmwiLCJteVB5cmFtaWRzIiwiYWN0aXZlQ2hhbGxlbmdlIiwiUHlyYW1pZEN0cmwiLCJQeXJhbWlkc0N0cmwiLCJTdGF0c0N0cmwiLCJnZXRQbGF5ZXJSZXN1bHRzQnlDb21wZXRpdGlvbiIsInJlc3VsdHMiLCJwbGF5ZXJzUmVzdWx0cyIsIlVzZXJDdHJsIiwia3BBY3RpdmVDaGFsbGVuZWdlcyIsImdldEFjdGl2ZUNoYWxsZW5nZXMiLCJrcENvbXBsZXRlZENoYWxsZW5lZ2VzIiwiYWxsb3dEZWxldGUiLCJkaXNwbGF5Q29tcGxldGVkQ2hhbGxlbmdlcyIsImxvc2VyIiwid2hlbkNvbXBsZXRlZCIsImNvbXBsZXRlZCIsImNhbGVuZGFyIiwic2FtZURheSIsIm5leHREYXkiLCJuZXh0V2VlayIsImxhc3REYXkiLCJsYXN0V2VlayIsInNhbWVFbHNlIiwiZGVsZXRlQ2hhbGxlbmdlIiwiY2hhbGxlbmdlSWQiLCIkaW5kZXgiLCJrcFBsYXllck92ZXJhbGxSZXN1bHRzIiwiYXNzaWducGxheWVyc1RvTGV2ZWxzIiwiY2FsY3VsYXRlU3RyZWFrIiwiY2FsY3VhdGVXaW5BbmRMb3NlcyIsImoiLCJzdHJlYWtUeXBlIiwic3RyZWFrIiwiY29udGludWVTdHJlYWsiLCJ2YWx1ZSIsIndpbnMiLCJhc09wcG9uZW50Iiwic2l6ZSIsImFzQ2hhbGxlbmdlciIsInRvdGFsIiwiYnlGb3JmZWl0IiwibG9zZXMiLCJnZXRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbiIsInBsYXllcklkIiwibGltaXQiLCJjT3ZlcmZsb3ciLCJsaW5rRnVuYyIsImVsZW1lbnQiLCJhdHRycyIsImhhc0NsYXNzIiwibGluayIsInRvZ2dsZVN1Ym1lbnUiLCJlbCIsImNsaWNrIiwibmV4dCIsInNsaWRlVG9nZ2xlIiwicGFyZW50IiwidG9nZ2xlQ2xhc3MiLCJ3YXZlc0VmZmVjdCIsIldhdmVzIiwiYXR0YWNoIiwiaW5pdCIsImZnTGluZSIsImNoaWxkcmVuIiwiZmlyc3QiLCJpc0Zsb2F0TGFiZWwiLCJmb2N1cyIsImFkZENsYXNzIiwiYmx1ciIsInZhbCIsInJlbW92ZUNsYXNzIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSxPQUNBLFlBQ0EsZUFDQSxZQUNBLHNCQUNBLGFBQ0Esd0JBQ0EsUUFDQSxxQkFDQSx3QkFDQSxzQkNWQSx3QkFJQSxTQUFBQyxHQUFBQyxFQUFBQyxFQUFBQyxHQUVBRixFQUFBRyxTQUFBQyxRQUFBQyxNQUNBTCxFQUFBRyxTQUFBQyxRQUFBQyxRQUdBTCxFQUFBRyxTQUFBQyxRQUFBQyxJQUFBLHFCQUFBLGdDQUVBTCxFQUFBRyxTQUFBQyxRQUFBQyxJQUFBLGlCQUFBLFdBQ0FMLEVBQUFHLFNBQUFDLFFBQUFDLElBQUEsT0FBQSxXQUVBSixFQUFBSyxTQUFBQyxjQUFBLElBQ0FMLEVBQUFNLDRCQUFBLGtFQWRBWCxRQUFBQyxPQUFBLE9BQUFXLE9BQUFWLE1DRkEsdUJBSUEsU0FBQVcsR0FBQUMsRUFBQUMsR0FRQSxRQUFBQyxHQUFBQyxHQUNBRixFQUFBRyxJQUFBLGdCQUFBRCxHQVJBLEdBQUFFLEdBQUFDLElBRUFELEdBQUFMLE9BQUFBLEVBRUFLLEVBQUFFLFlBQUFOLEVBQUFQLElBQUEsaUJBQ0FXLEVBQUFILG9CQUFBQSw2Q0FSQWhCLFFBQUFDLE9BQUEsT0FBQXFCLFdBQUEsVUFBQVQsTUNGQSx1QkFJQSxTQUFBVSxHQUFBQyxFQUFBQyxFQUFBQyxHQUNBLEdBQUFDLElBQ0FDLFdBQUFDLEVBQ0FD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LEVBQUFJLFNBQUFDLFlBQUEsYUFWQSxHQUFBclMsSUFDQUcsU0FBQSxJQUNBMlIsS0FBQUosRUFHQSxPQUFBMVIsR0FWQXRILFFBQ0FDLE9BQUEsT0FDQXFILFVBQUEsZ0JBQUErUixNQ0pBLFdBQ0EsWUFLQSxTQUFBTyxLQVFBLFFBQUFaLEdBQUF2TCxFQUFBd0wsR0FDQUEsRUFBQUUsU0FBQSxhQUFBRixFQUFBRSxTQUFBLGFBQ0FVLE1BQUFDLE9BQUFiLEdBQUEsaUJBQ0FBLEVBQUFFLFNBQUEsYUFDQVUsTUFBQUMsT0FBQWIsR0FBQSxnQkFFQVksTUFBQUMsT0FBQWIsR0FHQVksTUFBQUUsT0FoQkEsR0FBQXpTLElBQ0FHLFNBQUEsSUFDQTJSLEtBQUFKLEVBR0EsT0FBQTFSLEdBVkF0SCxRQUNBQyxPQUFBLE9BQ0FxSCxVQUFBLGNBQUFzUyxNQ0pBLFdBQ0EsWUFLQSxTQUFBSSxLQVFBLFFBQUFoQixHQUFBdkwsRUFBQXdMLEdBQ0EsR0FBQS9QLEdBQUErUCxFQUFBZ0IsV0FBQUMsUUFDQUMsRUFBQWxCLEVBQUFTLFNBQUFQLFNBQUEsV0FDQWpRLEdBQUFrUixNQUFBLFdBQ0FuQixFQUFBb0IsU0FBQSxnQkFHQW5SLEVBQUFvUixLQUFBLGFBQ0FILEdBQUFBLEdBQUEsSUFBQWpSLEVBQUFxUixNQUFBek4sU0FDQW1NLEVBQUF1QixZQUFBLGdCQWhCQSxHQUFBbFQsSUFDQUcsU0FBQSxJQUNBMlIsS0FBQUosRUFHQSxPQUFBMVIsR0FWQXRILFFBQ0FDLE9BQUEsT0FDQXFILFVBQUEsU0FBQTBTIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG4gICd1aS5yb3V0ZXInLFxuICAndWkuYm9vdHN0cmFwJyxcbiAgJ25nQW5pbWF0ZScsXG4gICdhbmd1bGFyLWxvYWRpbmctYmFyJyxcbiAgJ25vdWlzbGlkZXInLFxuICAnbG9jYWx5dGljcy5kaXJlY3RpdmVzJyxcbiAgJ3RpbWVyJyxcbiAgJ0xvY2FsU3RvcmFnZU1vZHVsZScsXG4gICdhbmd1bGFyLXNvcnRhYmxlLXZpZXcnLFxuICAnYW5ndWxhci52ZXJ0aWxpemUnXG5dKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCAnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29uZmlnKGNvbmZpZ3VyYXRpb24pO1xuXG4gIGZ1bmN0aW9uIGNvbmZpZ3VyYXRpb24oJGh0dHBQcm92aWRlciwgJHVpYlRvb2x0aXBQcm92aWRlciwgJHFQcm92aWRlcikge1xuICAgIC8vaW5pdGlhbGl6ZSBnZXQgaWYgbm90IHRoZXJlXG4gICAgaWYgKCEkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0KSB7XG4gICAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0ID0ge307ICAgIFxuICAgIH0gICAgXG4gICAgLy9kaXNhYmxlIElFIGFqYXggcmVxdWVzdCBjYWNoaW5nXG4gICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldFsnSWYtTW9kaWZpZWQtU2luY2UnXSA9ICdGcmksIDAxIEphbiAyMDE2IDA1OjAwOjAwIEdNVCc7XG4gICAgLy8gZXh0cmFcbiAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0WydDYWNoZS1Db250cm9sJ10gPSAnbm8tY2FjaGUnO1xuICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXRbJ1ByYWdtYSddID0gJ25vLWNhY2hlJztcblxuICAgICR1aWJUb29sdGlwUHJvdmlkZXIub3B0aW9ucyh7IGFwcGVuZFRvQm9keTogdHJ1ZSB9KTtcbiAgICAkcVByb3ZpZGVyLmVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zKGZhbHNlKTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdBcHBDdHJsJywgQXBwQ3RybCk7XG5cbiAgZnVuY3Rpb24gQXBwQ3RybCgkc3RhdGUsIGxvY2FsU3RvcmFnZVNlcnZpY2UpIHtcbiAgICB2YXIgYXBwQ3RybCA9IHRoaXM7XG4gICAgLy8gVXNlIHRoaXMgZm9yIFNpZGViYXIgbWVudVxuICAgIGFwcEN0cmwuJHN0YXRlID0gJHN0YXRlO1xuICAgIC8vIExvY2sgdGhlIHNpZGViYXIgaW4gdmlld1xuICAgIGFwcEN0cmwubG9ja1NpZGViYXIgPSBsb2NhbFN0b3JhZ2VTZXJ2aWNlLmdldCgnc2lkZWJhckxvY2tlZCcpO1xuICAgIGFwcEN0cmwudG9nZ2xlU2lkZWJhckxvY2tlZCA9IHRvZ2dsZVNpZGViYXJMb2NrZWQ7XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVTaWRlYmFyTG9ja2VkKGxvY2tlZCkge1xuICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5zZXQoJ3NpZGViYXJMb2NrZWQnLCBsb2NrZWQpO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb25maWcoY29uZmlndXJlUm91dGVzKTtcblxuICBmdW5jdGlvbiBjb25maWd1cmVSb3V0ZXMoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcbiAgICB2YXIgcm91dGVSb2xlQ2hlY2tzID0ge1xuICAgICAgc3VwZXJBZG1pbjogcmVxdWlyZVN1cGVyQWRtaW4sXG4gICAgICBhZG1pbjogcmVxdWlyZUFkbWluLFxuICAgICAgdXNlcjogcmVxdWlyZUF1dGhcbiAgICB9O1xuXG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuXG4gICAgLy8gZm9yIGFueSB1bm1hdGNoZWQgdXJsXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLndoZW4oJy9weXJhbWlkcy8nLCAnL3B5cmFtaWRzJyk7XG5cbiAgICAkc3RhdGVQcm92aWRlclxuICAgICAgLnN0YXRlKCdob21lJywge1xuICAgICAgICB1cmw6ICcvJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdIb21lQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbW1vbi92aWV3cy9ob21lLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncHlyYW1pZHMnLCB7XG4gICAgICAgIHVybDogJy9weXJhbWlkcycsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnQnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUHlyYW1pZHNDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHlyYW1pZHMvdmlld3MvcHlyYW1pZHMuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdweXJhbWlkcy5teVB5cmFtaWRzJywge1xuICAgICAgICB1cmw6ICcvbXktcHlyYW1pZHMnLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50QCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNeVB5cmFtaWRzQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3B5cmFtaWRzL3ZpZXdzL215LXB5cmFtaWRzLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgYXV0aDogcm91dGVSb2xlQ2hlY2tzLnVzZXJcbiAgICAgICAgfVxuICAgICAgfSkuc3RhdGUoJ3B5cmFtaWRzLnZpZXcnLCB7XG4gICAgICAgIHVybDogJy92aWV3Lzpjb21wZXRpdGlvbklkJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudEAnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUHlyYW1pZEN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdweXJhbWlkcy92aWV3cy9weXJhbWlkLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncHlyYW1pZHMuc3RhdHMnLCB7XG4gICAgICAgIHVybDogJy9zdGF0cy86Y29tcGV0aXRpb25JZCcsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnRAJzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ1N0YXRzQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3B5cmFtaWRzL3ZpZXdzL3N0YXRzLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncHlyYW1pZHMuYWRtaW4nLCB7XG4gICAgICAgIHVybDogJy9hZG1pbi86Y29tcGV0aXRpb25JZCcsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnRAJzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ0FkbWluQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3B5cmFtaWRzL3ZpZXdzL2FkbWluLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgYXV0aDogcm91dGVSb2xlQ2hlY2tzLnVzZXJcbiAgICAgICAgfVxuICAgICAgfSkuc3RhdGUoJ3B5cmFtaWRzLmNyZWF0ZScsIHtcbiAgICAgICAgdXJsOiAnL2NyZWF0ZScsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnRAJzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ0NyZWF0ZVB5cmFtaWRDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHlyYW1pZHMvdmlld3MvY3JlYXRlLXB5cmFtaWQuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICBhdXRoOiByb3V0ZVJvbGVDaGVja3MudXNlclxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgndXNlcicsIHtcbiAgICAgICAgdXJsOiAnL3VzZXInLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ1VzZXJDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndXNlcnMvdmlld3MvdXNlci5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgIGF1dGg6IHJvdXRlUm9sZUNoZWNrcy51c2VyXG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdsb2dpbicsIHtcbiAgICAgICAgdXJsOiAnL2xvZ2luJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhdXRoZW50aWNhdGlvbi92aWV3cy9sb2dpbi5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkuc3RhdGUoJ3JlZ2lzdGVyJywge1xuICAgICAgICB1cmw6ICcvcmVnaXN0ZXInLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2F1dGhlbnRpY2F0aW9uL3ZpZXdzL3JlZ2lzdGVyLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgndmVyaWZ5Jywge1xuICAgICAgICB1cmw6ICcvdmVyaWZpY2F0aW9uJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdWZXJpZmljYXRpb25DdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXV0aGVudGljYXRpb24vdmlld3MvdmVyaWZpY2F0aW9uLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgndmVyaWZpY2F0aW9uJywge1xuICAgICAgICB1cmw6ICcvdmVyaWZpY2F0aW9uLzp1c2VySWQvOnZlcmlmaWNhdGlvblRva2VuJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdWZXJpZmljYXRpb25DdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXV0aGVudGljYXRpb24vdmlld3MvdmVyaWZpY2F0aW9uLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncGFzc3dvcmQtcmVzZXQtcmVxdWVzdCcsIHtcbiAgICAgICAgdXJsOiAnL3Bhc3N3b3JkLXJlc2V0JyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdQYXNzd29yZFJlc2V0Q3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2F1dGhlbnRpY2F0aW9uL3ZpZXdzL3Bhc3N3b3JkLXJlc2V0Lmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncGFzc3dvcmQtcmVzZXQnLCB7XG4gICAgICAgIHVybDogJy9wYXNzd29yZC1yZXNldC86dXNlcklkLzp2ZXJpZmljYXRpb25Ub2tlbicsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnQnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUGFzc3dvcmRSZXNldEN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhdXRoZW50aWNhdGlvbi92aWV3cy9wYXNzd29yZC1yZXNldC5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICByZXF1aXJlQWRtaW4uJGluamVjdCA9IFsnYXV0aFNlcnZpY2UnXTtcblxuICBmdW5jdGlvbiByZXF1aXJlQWRtaW4oYXV0aFNlcnZpY2UpIHtcbiAgICByZXR1cm4gYXV0aFNlcnZpY2UuYXV0aG9yaXplQ3VycmVudFVzZXJGb3JSb3V0ZSgnYWRtaW4nKTtcbiAgfVxuXG4gIHJlcXVpcmVTdXBlckFkbWluLiRpbmplY3QgPSBbJ2F1dGhTZXJ2aWNlJ107XG5cbiAgZnVuY3Rpb24gcmVxdWlyZVN1cGVyQWRtaW4oYXV0aFNlcnZpY2UpIHtcbiAgICByZXR1cm4gYXV0aFNlcnZpY2UuYXV0aG9yaXplQ3VycmVudFVzZXJGb3JSb3V0ZSgnc3VwZXItYWRtaW4nKTtcbiAgfVxuXG4gIHJlcXVpcmVBdXRoLiRpbmplY3QgPSBbJ2F1dGhTZXJ2aWNlJ107XG5cbiAgZnVuY3Rpb24gcmVxdWlyZUF1dGgoYXV0aFNlcnZpY2UpIHtcbiAgICByZXR1cm4gYXV0aFNlcnZpY2UuYXV0aGVudGljYXRlZFVzZXJGb3JSb3V0ZSgpO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLnJ1bihhcHBSdW4pO1xuXG4gIGZ1bmN0aW9uIGFwcFJ1bigkcm9vdFNjb3BlLCAkc3RhdGUsIHNpZGViYXJTZXJ2aWNlKSB7XG4gICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZUVycm9yJywgZnVuY3Rpb24gKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zLCBlcnJvcikge1xuICAgICAgaWYgKGVycm9yID09PSAnbm90IGF1dGhvcml6ZWQnKSB7XG4gICAgICAgICRzdGF0ZS5nbygnbG9naW4nKTtcbiAgICAgICAgJHN0YXRlLnByZXZpb3VzID0gdG9TdGF0ZTtcbiAgICAgICAgJHN0YXRlLnByZXZQYXJhbXMgPSB0b1BhcmFtcztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNpZGViYXJTZXJ2aWNlLnNldFNpZGViYXJTdGF0dXMoZmFsc2UpO1xuICAgIH0pO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmZhY3RvcnkoJ2F1dGhTZXJ2aWNlJywgYXV0aFNlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIGF1dGhTZXJ2aWNlKCRzdGF0ZSwgJGh0dHAsICRxLCB1c2VyU2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlLCBub3RpZnlTZXJ2aWNlKSB7XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBhdXRoZW50aWNhdGVVc2VyOiBhdXRoZW50aWNhdGVVc2VyLFxuICAgICAgY3JlYXRlVXNlcjogY3JlYXRlVXNlcixcbiAgICAgIGxvZ291dDogbG9nb3V0LFxuICAgICAgYXV0aG9yaXplQ3VycmVudFVzZXJGb3JSb3V0ZTogYXV0aG9yaXplQ3VycmVudFVzZXJGb3JSb3V0ZSxcbiAgICAgIGF1dGhlbnRpY2F0ZWRVc2VyRm9yUm91dGU6IGF1dGhlbnRpY2F0ZWRVc2VyRm9yUm91dGVcbiAgICB9O1xuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gYXV0aGVudGljYXRlVXNlcih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgIHZhciBkZmQgPSAkcS5kZWZlcigpO1xuICAgICAgJGh0dHAucG9zdCgnL2xvZ2luJywge1xuICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsXG4gICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgIGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlciA9IHJlc3BvbnNlLmRhdGEudXNlcjtcbiAgICAgICAgICBkZmQucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UgPT09ICd1bnZlcmlmaWVkJykge1xuICAgICAgICAgIGRmZC5yZXNvbHZlKCd1bnZlcmlmaWVkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGZkLnJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZmQucHJvbWlzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVc2VyKHVzZXJEYXRhKSB7XG4gICAgICB2YXIgZGZkID0gJHEuZGVmZXIoKTtcbiAgICAgICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XG4gICAgICAgIHVzZXJEYXRhOiB1c2VyRGF0YVxuICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICBkZmQucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZmQucmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5yZWFzb24gPT09ICdFcnJvcjogRHVwbGljYXRlIFVzZXJuYW1lJykge1xuICAgICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ1NvcnJ5LCBhbiBhY2NvdW50IGFscmVhZHkgZXhpc3RzIHdpdGggdGhhdCBlbWFpbCBhZGRyZXNzLicpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZmQucHJvbWlzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gICAgICB2YXIgZGZkID0gJHEuZGVmZXIoKTtcbiAgICAgICRodHRwLnBvc3QoJy9sb2dvdXQnLCB7XG4gICAgICAgIGxvZ291dDogdHJ1ZVxuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgZGZkLnJlc29sdmUoKTtcbiAgICAgICAgJHN0YXRlLmdvKCdob21lJyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZmQucHJvbWlzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdXRob3JpemVDdXJyZW50VXNlckZvclJvdXRlKHJvbGUpIHtcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRob3JpemVkKHJvbGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICRxLnJlamVjdCgnbm90IGF1dGhvcml6ZWQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdXRoZW50aWNhdGVkVXNlckZvclJvdXRlKCkge1xuICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAkcS5yZWplY3QoJ25vdCBhdXRob3JpemVkJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmZhY3RvcnkoJ3VzZXJTZXJ2aWNlJywgdXNlclNlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIHVzZXJTZXJ2aWNlKCRodHRwKSB7XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBnZXRBbGxVc2VyczogZ2V0QWxsVXNlcnMsXG4gICAgICB2ZXJpZnlVc2VyOiB2ZXJpZnlVc2VyLFxuICAgICAgZ2VuZXJhdGVQYXNzd29yZFJlc2V0TGluazogZ2VuZXJhdGVQYXNzd29yZFJlc2V0TGluayxcbiAgICAgIHJlc2V0UGFzc3dvcmQ6IHJlc2V0UGFzc3dvcmRcbiAgICB9O1xuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gZ2V0QWxsVXNlcnMoKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJykudGhlbihmdW5jdGlvbiAodXNlcnMpIHtcbiAgICAgICAgcmV0dXJuIHVzZXJzO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmVyaWZ5VXNlcih1c2VySWQsIHZlcmlmaWNhdGlvblRva2VuKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXIvdmVyaWZpY2F0aW9uJywge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICB1c2VySWQ6IHVzZXJJZCxcbiAgICAgICAgICB2ZXJpZmljYXRpb25Ub2tlbjogdmVyaWZpY2F0aW9uVG9rZW5cbiAgICAgICAgfVxuICAgICAgfSk7ICBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZVBhc3N3b3JkUmVzZXRMaW5rKHVzZXJuYW1lKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXIvcGFzc3dvcmQvbGluaycsIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lXG4gICAgICAgIH1cbiAgICAgIH0pOyAgXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzZXRQYXNzd29yZCh1c2VySWQsIHZlcmlmaWNhdGlvblRva2VuLCBwYXNzd29yZCkge1xuICAgICAgcmV0dXJuICRodHRwLnB1dCgnL2FwaS91c2VyL3Bhc3N3b3JkL3Jlc2V0Jywge1xuICAgICAgICB1c2VySWQ6IHVzZXJJZCxcbiAgICAgICAgdmVyaWZpY2F0aW9uVG9rZW46IHZlcmlmaWNhdGlvblRva2VuLFxuICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgIH0pOyAgXG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIExvZ2luQ3RybCk7XG5cbiAgZnVuY3Rpb24gTG9naW5DdHJsKCRzdGF0ZSwgYXV0aFNlcnZpY2UsIG5vdGlmeVNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmxvZ2luID0gbG9naW47XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICBhdXRoU2VydmljZS5hdXRoZW50aWNhdGVVc2VyKHVzZXJuYW1lLCBwYXNzd29yZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ1VzZXJuYW1lIC8gcGFzc3dvcmQgY29tYmluYWl0b24gaW5jb3JyZWN0Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UgPT09ICd1bnZlcmlmaWVkJykge1xuICAgICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ1lvdSBtdXN0IHZlcmlmeSB5b3VyIGVtYWlsIGJlZm9yZSB5b3UgY2FuIGxvZ2luJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCRzdGF0ZS5wcmV2aW91cykge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCRzdGF0ZS5wcmV2aW91cywgJHN0YXRlLnByZXZQYXJhbXMpO1xuICAgICAgICAgICAgJHN0YXRlLnByZXZpb3VzID0gbnVsbDtcbiAgICAgICAgICAgICRzdGF0ZS5wcmV2UGFyYW1zID0gbnVsbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCdweXJhbWlkcy5teVB5cmFtaWRzJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignUGFzc3dvcmRSZXNldEN0cmwnLCBQYXNzd29yZFJlc2V0Q3RybCk7XG5cbiAgZnVuY3Rpb24gUGFzc3dvcmRSZXNldEN0cmwoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIHVzZXJTZXJ2aWNlLCBub3RpZnlTZXJ2aWNlLCBhdXRoU2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS51c2VybmFtZSA9ICcnO1xuICAgIHZtLnZlcmlmaWVkID0gZmFsc2U7XG4gICAgdm0ucmVzZXRQYXNzd29yZEZvcm0gPSB7fTtcbiAgICB2bS5nZW5lcmF0ZVBhc3N3b3JkUmVzZXRMaW5rID0gZ2VuZXJhdGVQYXNzd29yZFJlc2V0TGluaztcbiAgICB2bS5yZXNldFBhc3N3b3JkID0gcmVzZXRQYXNzd29yZDtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgJHN0YXRlLmdvKCdob21lJyk7XG4gICAgICB9IGVsc2UgaWYgKCRzdGF0ZVBhcmFtcy51c2VySWQgJiYgJHN0YXRlUGFyYW1zLnZlcmlmaWNhdGlvblRva2VuKSB7XG4gICAgICAgIHVzZXJTZXJ2aWNlLnZlcmlmeVVzZXIoJHN0YXRlUGFyYW1zLnVzZXJJZCwgJHN0YXRlUGFyYW1zLnZlcmlmaWNhdGlvblRva2VuKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhKSB7XG4gICAgICAgICAgICB2bS52ZXJpZmllZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZVBhc3N3b3JkUmVzZXRMaW5rKHVzZXJuYW1lKSB7XG4gICAgICB1c2VyU2VydmljZS5nZW5lcmF0ZVBhc3N3b3JkUmVzZXRMaW5rKHVzZXJuYW1lKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBpZiAoIXJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdDb3VsZCBub3QgZmluZCB0aGF0IGVtYWlsIGFkZHJlc3MnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub3RpZnlTZXJ2aWNlLnN1Y2Nlc3MoJ1BsZWFzZSBjaGVjayB5b3VyIGVtYWlsIGZvciBhIHBhc3N3b3JkIHJlc2V0IGxpbmsnKTtcbiAgICAgICAgICAkc3RhdGUuZ28oJ2hvbWUnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzZXRQYXNzd29yZChyZXNldFBhc3N3b3JkRm9ybSkge1xuICAgICAgaWYgKHJlc2V0UGFzc3dvcmRGb3JtLnBhc3N3b3JkICE9PSByZXNldFBhc3N3b3JkRm9ybS5jb25maXJtUGFzc3dvcmQpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5lcnJvcignUGFzc3dvcmRzIGRvblxcJ3QgbWF0Y2ghJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1c2VyU2VydmljZS5yZXNldFBhc3N3b3JkKCRzdGF0ZVBhcmFtcy51c2VySWQsICRzdGF0ZVBhcmFtcy52ZXJpZmljYXRpb25Ub2tlbiwgcmVzZXRQYXNzd29yZEZvcm0ucGFzc3dvcmQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICAgIGF1dGhTZXJ2aWNlLmF1dGhlbnRpY2F0ZVVzZXIocmVzcG9uc2UuZGF0YS51c2VybmFtZSwgcmVzZXRQYXNzd29yZEZvcm0ucGFzc3dvcmQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICRzdGF0ZS5nbygnaG9tZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgUmVnaXN0ZXJDdHJsKTtcblxuICBmdW5jdGlvbiBSZWdpc3RlckN0cmwoJHN0YXRlLCBhdXRoU2VydmljZSwgbm90aWZ5U2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0ucmVnaXN0ZXIgPSByZWdpc3RlcjtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHt9XG5cbiAgICBmdW5jdGlvbiByZWdpc3RlcihuZXdVc2VyKSB7XG4gICAgICBpZiAobmV3VXNlci5wYXNzd29yZCAhPT0gbmV3VXNlci5jb25maXJtUGFzc3dvcmQpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5lcnJvcignUGFzc3dvcmRzIGRvblxcJ3QgbWF0Y2ghJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdXRoU2VydmljZS5jcmVhdGVVc2VyKG5ld1VzZXIpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRzdGF0ZS5nbygndmVyaWZ5Jyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdWZXJpZmljYXRpb25DdHJsJywgVmVyaWZpY2F0aW9uQ3RybCk7XG5cbiAgZnVuY3Rpb24gVmVyaWZpY2F0aW9uQ3RybCgkc3RhdGUsICRzdGF0ZVBhcmFtcywgdXNlclNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnZlcmlmaWVkID0gdW5kZWZpbmVkO1xuICAgIHZtLnZlcmlmeWluZyA9IGZhbHNlO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgaWYgKCRzdGF0ZVBhcmFtcy51c2VySWQgJiYgJHN0YXRlUGFyYW1zLnZlcmlmaWNhdGlvblRva2VuKSB7XG4gICAgICAgIHZtLnZlcmlmeWluZyA9IHRydWU7XG4gICAgICAgIHZtLnZlcmlmaWVkID0gbnVsbDtcbiAgICAgICAgdXNlclNlcnZpY2UudmVyaWZ5VXNlcigkc3RhdGVQYXJhbXMudXNlcklkLCAkc3RhdGVQYXJhbXMudmVyaWZpY2F0aW9uVG9rZW4pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICAgIHZtLnZlcmlmaWVkID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdm0udmVyaWZpZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BGb290ZXInLCBrcEZvb3Rlcik7XG5cbiAgZnVuY3Rpb24ga3BGb290ZXIoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jb21tb24vY29tcG9uZW50cy9mb290ZXIuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoaWRlbnRpdHlTZXJ2aWNlLCBhdXRoU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uaW5kZW50aXR5ID0gaWRlbnRpdHlTZXJ2aWNlO1xuICAgIHZtLmxvZ291dCA9IGxvZ291dDtcblxuICAgIGZ1bmN0aW9uIGxvZ291dCgpIHtcbiAgICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BIZWFkZXInLCBrcEhlYWRlcik7XG5cbiAgZnVuY3Rpb24ga3BIZWFkZXIoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ2hlYWRlckN0cmwnLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NvbW1vbi9jb21wb25lbnRzL2hlYWRlci5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYygkc2NvcGUsIHNpZGViYXJTZXJ2aWNlLCBpZGVudGl0eVNlcnZpY2UsIGF1dGhTZXJ2aWNlLCBhbGVydHNTZXJ2aWNlKSB7XG4gICAgdmFyIGhlYWRlckN0cmwgPSB0aGlzO1xuICAgIGhlYWRlckN0cmwuaW5kZW50aXR5ID0gaWRlbnRpdHlTZXJ2aWNlO1xuICAgIGhlYWRlckN0cmwubG9nb3V0ID0gbG9nb3V0O1xuICAgIGhlYWRlckN0cmwuc2lkZWJhclN0YXR1cyA9IHNpZGViYXJTZXJ2aWNlLmdldFNpZGViYXJTdGF0dXMoKTtcbiAgICBoZWFkZXJDdHJsLnRvZ2dsZVNpZGViYXIgPSB0b2dnbGVTaWRlYmFyO1xuICAgIGhlYWRlckN0cmwuY2xlYXJBbGVydCA9IGNsZWFyQWxlcnQ7XG4gICAgaGVhZGVyQ3RybC5jbGVhckFsbEFsZXJ0cyA9IGNsZWFyQWxsQWxlcnRzO1xuICAgIGhlYWRlckN0cmwuYWxlcnRzID0gW107XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBnZXRBY3RpdmVBbGVydHMoKTtcbiAgICAgICRzY29wZS4kd2F0Y2goJ2hlYWRlckN0cmwuaW5kZW50aXR5LmN1cnJlbnRVc2VyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgICAgZ2V0QWN0aXZlQWxlcnRzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFjdGl2ZUFsZXJ0cygpIHtcbiAgICAgIGhlYWRlckN0cmwuYWxlcnRzID0gW107XG4gICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgIGFsZXJ0c1NlcnZpY2UuZ2V0QWN0aXZlQWxlcnRzQnlQbGF5ZXIoaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZCkudGhlbihmdW5jdGlvbiAoYWxlcnRzKSB7XG4gICAgICAgICAgaGVhZGVyQ3RybC5hbGVydHMgPSBhbGVydHMuZGF0YTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJBbGVydChjbGVhckFsZXJ0LCBpbmRleCkge1xuICAgICAgYWxlcnRzU2VydmljZS5jbGVhckFsZXJ0KGNsZWFyQWxlcnQpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBoZWFkZXJDdHJsLmFsZXJ0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJBbGxBbGVydHMoKSB7XG4gICAgICBhbGVydHNTZXJ2aWNlLmNsZWFyQWxsQWxlcnRzQnlQbGF5ZXIoaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGhlYWRlckN0cmwuYWxlcnRzID0gW107XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVTaWRlYmFyKCkge1xuICAgICAgc2lkZWJhclNlcnZpY2Uuc2V0U2lkZWJhclN0YXR1cyghaGVhZGVyQ3RybC5zaWRlYmFyU3RhdHVzLmxlZnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvZ291dCgpIHtcbiAgICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xuICAgIH1cblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czp1cGRhdGVfYWxlcnRzJywgZnVuY3Rpb24gKGUsIGFsZXJ0cykge1xuICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSAmJiBfLnNvbWUoYWxlcnRzLCBbJ3VzZXJJZCcsIGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWRdKSkge1xuICAgICAgICBnZXRBY3RpdmVBbGVydHMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BTaWRlYmFyJywga3BTaWRlYmFyKTtcblxuICBmdW5jdGlvbiBrcFNpZGViYXIoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3NpZGViYXJDdHJsJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jb21tb24vY29tcG9uZW50cy9zaWRlYmFyLmh0bWwnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKGlkZW50aXR5U2VydmljZSwgYXV0aFNlcnZpY2UsIHNpZGViYXJTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5pbmRlbnRpdHkgPSBpZGVudGl0eVNlcnZpY2U7XG4gICAgdm0ubG9nb3V0ID0gbG9nb3V0O1xuICAgIHZtLnNpZGViYXJTdGF0dXMgPSBzaWRlYmFyU2VydmljZS5nZXRTaWRlYmFyU3RhdHVzKCk7XG5cbiAgICBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gICAgICBhdXRoU2VydmljZS5sb2dvdXQoKTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuZmlsdGVyKCdvcmRlck9iamVjdEJ5Jywgb3JkZXJPYmplY3RCeSk7XG5cbiAgZnVuY3Rpb24gb3JkZXJPYmplY3RCeSgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0LCBhdHRyaWJ1dGUpIHtcbiAgICAgIGlmICghYW5ndWxhci5pc09iamVjdChpbnB1dCkpIHJldHVybiBpbnB1dDtcblxuICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICBmb3IgKHZhciBvYmplY3RLZXkgaW4gaW5wdXQpIHtcbiAgICAgICAgYXJyYXkucHVzaChpbnB1dFtvYmplY3RLZXldKTtcbiAgICAgIH1cblxuICAgICAgYXJyYXkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICBhID0gcGFyc2VJbnQoYVthdHRyaWJ1dGVdKTtcbiAgICAgICAgYiA9IHBhcnNlSW50KGJbYXR0cmlidXRlXSk7XG4gICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH07XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuZmFjdG9yeSgnYWxlcnRzU2VydmljZScsIGFsZXJ0c1NlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIGFsZXJ0c1NlcnZpY2UoJGh0dHApIHtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGdldEFjdGl2ZUFsZXJ0c0J5UGxheWVyOiBnZXRBY3RpdmVBbGVydHNCeVBsYXllcixcbiAgICAgIGNsZWFyQWxlcnQ6IGNsZWFyQWxlcnQsXG4gICAgICBjbGVhckFsbEFsZXJ0c0J5UGxheWVyOiBjbGVhckFsbEFsZXJ0c0J5UGxheWVyXG4gICAgfTtcblxuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB1bmNsZWFyZWQgYWxlcnRzIGZvciBhIHVzZXIgZnJvbSB0aGUgZGF0YWJhc2VcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1c2VySWQgaWQgZm9yIHRoZSB1c2VyXG4gICAgICogQHJldHVybiB7QXJyYXl9IGFsZXJ0c1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFjdGl2ZUFsZXJ0c0J5UGxheWVyKHVzZXJJZCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9hbGVydHMvJywge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICB1c2VySWQ6IHVzZXJJZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYXJrcyBhIGFsZXJ0cyBhcyBjbGVhcmVkXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYWxlcnRJZCBpZCBmb3IgdGhlIGFsZXJ0XG4gICAgICogQHJldHVybiB7U3RyaW5nfSBTdGF0dXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGVhckFsZXJ0KGFsZXJ0SWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvYWxlcnQvY2xlYXInLCB7XG4gICAgICAgIGFsZXJ0SWQ6IGFsZXJ0SWRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1hcmtzIGFsbCB1bnZpZXdlZCBhbGVydHMgYXMgdmlld2VkIGZvciBhIHVzZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1c2VySWQgaWQgZm9yIHRoZSB1c2VyXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBTdGF0dXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGVhckFsbEFsZXJ0c0J5UGxheWVyKHVzZXJJZCkge1xuICAgICAgcmV0dXJuICRodHRwLnB1dCgnL2FwaS9hbGVydHMvY2xlYXInLCB7XG4gICAgICAgIHVzZXJJZDogdXNlcklkXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuZmFjdG9yeSgnaWRlbnRpdHlTZXJ2aWNlJywgaWRlbnRpdHlTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBpZGVudGl0eVNlcnZpY2UoJHdpbmRvdykge1xuICAgIHZhciBjdXJyZW50VXNlcjtcbiAgICBpZiAoJHdpbmRvdy5ib290c3RyYXBwZWRVc2VyT2JqZWN0ICE9PSBudWxsKSB7XG4gICAgICBjdXJyZW50VXNlciA9ICR3aW5kb3cuYm9vdHN0cmFwcGVkVXNlck9iamVjdDtcbiAgICB9XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBjdXJyZW50VXNlcjogY3VycmVudFVzZXIsXG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGlzQXV0aGVudGljYXRlZCxcbiAgICAgIGlzQXV0aG9yaXplZDogaXNBdXRob3JpemVkXG4gICAgfTtcbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGlzQXV0aGVudGljYXRlZCgpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuY3VycmVudFVzZXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBdXRob3JpemVkKHJvbGUpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuY3VycmVudFVzZXIgJiYgdGhpcy5jdXJyZW50VXNlci5yb2xlcy5pbmRleE9mKHJvbGUpID4gLTE7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmZhY3RvcnkoJ25vdGlmeVNlcnZpY2UnLCBub3RpZnlTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBub3RpZnlTZXJ2aWNlKCkge1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgaW5mbzogaW5mbyxcbiAgICAgIHN1Y2Nlc3M6IHN1Y2Nlc3MsXG4gICAgICB3YXJuaW5nOiB3YXJuaW5nLFxuICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgaW52ZXJzZTogaW52ZXJzZVxuICAgIH07XG5cbiAgICAkLm5vdGlmeURlZmF1bHRzKHtcbiAgICAgIG5ld2VzdF9vbl90b3A6IHRydWUsXG4gICAgICBvZmZzZXQ6IHtcbiAgICAgICAgeDogMjAsXG4gICAgICAgIHk6IDg1XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGluZm8obWVzc2FnZSwgdXJsLCB0YXJnZXQpIHtcbiAgICAgICQubm90aWZ5KHtcbiAgICAgICAgLy8gb3B0aW9uc1xuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0sIHtcbiAgICAgICAgLy8gc2V0dGluZ3NcbiAgICAgICAgdHlwZTogJ2luZm8nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdWNjZXNzKG1lc3NhZ2UsIHVybCwgdGFyZ2V0KSB7XG4gICAgICAkLm5vdGlmeSh7XG4gICAgICAgIC8vIG9wdGlvbnNcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgICB9LCB7XG4gICAgICAgIC8vIHNldHRpbmdzXG4gICAgICAgIHR5cGU6ICdzdWNjZXNzJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlLCB1cmwsIHRhcmdldCkge1xuICAgICAgJC5ub3RpZnkoe1xuICAgICAgICAvLyBvcHRpb25zXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgfSwge1xuICAgICAgICAvLyBzZXR0aW5nc1xuICAgICAgICB0eXBlOiAnd2FybmluZydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UsIHVybCwgdGFyZ2V0KSB7XG4gICAgICAkLm5vdGlmeSh7XG4gICAgICAgIC8vIG9wdGlvbnNcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgICB9LCB7XG4gICAgICAgIC8vIHNldHRpbmdzXG4gICAgICAgIHR5cGU6ICdkYW5nZXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZlcnNlKG1lc3NhZ2UsIHVybCwgdGFyZ2V0KSB7XG4gICAgICAkLm5vdGlmeSh7XG4gICAgICAgIC8vIG9wdGlvbnNcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgICB9LCB7XG4gICAgICAgIC8vIHNldHRpbmdzXG4gICAgICAgIHR5cGU6ICdpbnZlcnNlJ1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmZhY3RvcnkoJ3Njcm9sbGJhclNlcnZpY2UnLCBzY3JvbGxiYXJTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBzY3JvbGxiYXJTZXJ2aWNlKCkge1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgbWFsaWh1U2Nyb2xsOiBtYWxpaHVTY3JvbGxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICBmdW5jdGlvbiBtYWxpaHVTY3JvbGwoc2VsZWN0b3IsIHRoZW1lLCBzY3JvbGxheGlzLCBtb3VzZXdoZWVsYXhpcykge1xuICAgICAgJChzZWxlY3RvcikubUN1c3RvbVNjcm9sbGJhcih7XG4gICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgc2Nyb2xsSW5lcnRpYTogMTAwLFxuICAgICAgICBheGlzOiBzY3JvbGxheGlzLFxuICAgICAgICBtb3VzZVdoZWVsOiB7XG4gICAgICAgICAgZW5hYmxlOiB0cnVlLFxuICAgICAgICAgIGF4aXM6IG1vdXNld2hlZWxheGlzLFxuICAgICAgICAgIHByZXZlbnREZWZhdWx0OiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5mYWN0b3J5KCdzaWRlYmFyU2VydmljZScsIHNpZGViYXJTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBzaWRlYmFyU2VydmljZSgpIHtcbiAgICB2YXIgc2lkZWJhclN0YXR1cyA9IHtcbiAgICAgIGxlZnQ6IGZhbHNlLFxuICAgICAgcmlnaHQ6IGZhbHNlXG4gICAgfTtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGdldFNpZGViYXJTdGF0dXM6IGdldFNpZGViYXJTdGF0dXMsXG4gICAgICBzZXRTaWRlYmFyU3RhdHVzOiBzZXRTaWRlYmFyU3RhdHVzXG4gICAgfTtcblxuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gZ2V0U2lkZWJhclN0YXR1cygpIHtcbiAgICAgIHJldHVybiBzaWRlYmFyU3RhdHVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFNpZGViYXJTdGF0dXMoc3RhdHVzKSB7XG4gICAgICBzaWRlYmFyU3RhdHVzLmxlZnQgPSBzdGF0dXM7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmZhY3RvcnkoJ3dlYnNvY2tldFNlcnZpY2UnLCB3ZWJzb2NrZXRTZXJ2aWNlKS5ydW4oZnVuY3Rpb24gKHdlYnNvY2tldFNlcnZpY2UpIHtcbiAgICB3ZWJzb2NrZXRTZXJ2aWNlLmNvbm5lY3QoKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gd2Vic29ja2V0U2VydmljZSgkcm9vdFNjb3BlLCAkd2luZG93LCAkdGltZW91dCkge1xuICAgIHZhciBjb25uZWN0aW9uO1xuICAgIHZhciByZXRyeVNlY29uZHMgPSBbMywgMTAsIDEwMCwgMTAwMF07XG4gICAgdmFyIHJldHJ5ID0gMDtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGNvbm5lY3Q6IGNvbm5lY3QsXG4gICAgICBzZW5kOiBzZW5kXG4gICAgfTtcblxuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gd2Vic29ja2V0SG9zdCgpIHtcbiAgICAgIGlmICgkd2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6Jykge1xuICAgICAgICByZXR1cm4gJ3dzczovLycgKyAkd2luZG93LmxvY2F0aW9uLmhvc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ3dzOi8vJyArICR3aW5kb3cubG9jYXRpb24uaG9zdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25uZWN0KCkge1xuICAgICAgY29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXQod2Vic29ja2V0SG9zdCgpKTtcblxuICAgICAgY29ubmVjdGlvbi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXRyeSA9IDA7XG4gICAgICAgIHZhciBwYXlsb2FkID0gSlNPTi5wYXJzZShlLmRhdGEpO1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3dzOicgKyBwYXlsb2FkLnRvcGljLCBwYXlsb2FkLmRhdGEpO1xuICAgICAgfTtcblxuICAgICAgY29ubmVjdGlvbi5vbmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocmV0cnkgPCByZXRyeVNlY29uZHMubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1dlYlNvY2tldCBjbG9zZWQuIFJlY29ubmVjdGluZy4uLicpO1xuICAgICAgICAgICR0aW1lb3V0KGNvbm5lY3QsIHJldHJ5U2Vjb25kc1tyZXRyeV0qMTAwMCk7XG4gICAgICAgICAgcmV0cnkgKz0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnR2l2aW5nIHVwIG9uIFdlYlNvY2tldCcpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlbmQodG9waWMsIGRhdGEpIHtcbiAgICAgIHZhciBqc29uID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB0b3BpYzogdG9waWMsXG4gICAgICAgIGRhdGE6IGRhdGFcbiAgICAgIH0pO1xuICAgICAgY29ubmVjdGlvbi5zZW5kKGpzb24pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdIb21lQ3RybCcsIEhvbWVDdHJsKTtcblxuICBmdW5jdGlvbiBIb21lQ3RybChweXJhbWlkc1NlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnB5cmFtaWRzID0gW107XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBweXJhbWlkc1NlcnZpY2UuZ2V0UHlyYW1pZHMoKS50aGVuKGZ1bmN0aW9uIChweXJhbWlkcykge1xuICAgICAgICB2bS5weXJhbWlkcyA9IHB5cmFtaWRzLmRhdGE7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2twUGVuZGluZ1BsYXllcnMnLCBrcFBlbmRpbmdQbGF5ZXJzKTtcblxuICBmdW5jdGlvbiBrcFBlbmRpbmdQbGF5ZXJzKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogY3RybEZ1bmMsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgcHlyYW1pZDogJz0nXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVVcmw6ICcvcHlyYW1pZHMvY29tcG9uZW50cy9wZW5kaW5nLXBsYXllcnMuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMocHlyYW1pZHNTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5wZW5kaW5nUGxheWVycyA9IFtdO1xuICAgIHZtLmFwcHJvdmVQZW5kaW5nUGxheWVyID0gYXBwcm92ZVBlbmRpbmdQbGF5ZXI7XG4gICAgdm0uZGVueVBlbmRpbmdQbGF5ZXIgPSBkZW55UGVuZGluZ1BsYXllcjtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHt9XG5cbiAgICBmdW5jdGlvbiBhcHByb3ZlUGVuZGluZ1BsYXllcihwbGF5ZXIpIHtcbiAgICAgIHBsYXllci5wb3NpdGlvbiA9IHZtLnB5cmFtaWQucGxheWVycy5sZW5ndGggKyAxO1xuICAgICAgcHlyYW1pZHNTZXJ2aWNlLmFwcHJvdmVQZW5kaW5nUGxheWVyKHZtLnB5cmFtaWQuX2lkLCBwbGF5ZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbnlQZW5kaW5nUGxheWVyKHBsYXllcikge1xuICAgICAgcHlyYW1pZHNTZXJ2aWNlLmRlbnlQZW5kaW5nUGxheWVyKHZtLnB5cmFtaWQuX2lkLCBwbGF5ZXIpO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BQeXJhbWlkQ29tcGFjdCcsIGtwUHlyYW1pZENvbXBhY3QpO1xuXG4gIGZ1bmN0aW9uIGtwUHlyYW1pZENvbXBhY3QoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBzY29wZToge1xuICAgICAgICBweXJhbWlkOiAnPScsXG5cbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogJy9weXJhbWlkcy9jb21wb25lbnRzL3B5cmFtaWQtY29tcGFjdC5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYygpIHtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHt9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdrcFB5cmFtaWQnLCBrcFB5cmFtaWQpO1xuXG4gIGZ1bmN0aW9uIGtwUHlyYW1pZCgpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL3B5cmFtaWRzL2NvbXBvbmVudHMvcHlyYW1pZC5odG1sJyxcbiAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICBzY29wZToge1xuICAgICAgICBweXJhbWlkOiAnPSdcbiAgICAgIH0sXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYygkc2NvcGUsICRzdGF0ZSwgcHlyYW1pZHNTZXJ2aWNlLCAkZmlsdGVyLCBub3RpZnlTZXJ2aWNlLCBpZGVudGl0eVNlcnZpY2UsIGNoYWxsZW5nZXNTZXJ2aWNlKSB7XG4gICAgdmFyIG1heExldmVscyA9IDEwO1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uY29tcGV0aXRpb25JZCA9IG51bGw7XG4gICAgdm0uYnJlYWtQb2ludHMgPSBbXTtcbiAgICB2bS5sZXZlbHMgPSBbXTtcbiAgICB2bS5udW1iZXJPZkJsb2NrcyA9IDA7XG4gICAgdm0uY3VycmVudFVzZXJJc09uUHlyYW1pZCA9IGZhbHNlO1xuICAgIHZtLmN1cnJlbnRVc2VySXNQZW5kaW5nID0gZmFsc2U7XG4gICAgdm0uY3VycmVudFVzZXJJc0FkbWluID0gZmFsc2U7XG4gICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gZmFsc2U7XG4gICAgdm0uYWN0aXZlQ2hhbGxlbmdlT3Bwb25lbnQgPSBudWxsO1xuICAgIHZtLmF2YWlsYWJsZUNoYWxsZW5nZXMgPSBmYWxzZTtcbiAgICB2bS5jcmVhdGVDaGFsbGVuZ2UgPSBjcmVhdGVDaGFsbGVuZ2U7XG4gICAgdm0uY29tcGxldGVDaGFsbGVuZ2UgPSBjb21wbGV0ZUNoYWxsZW5nZTtcbiAgICB2bS5jaGFsbGVuZ2VFeHBpcmVkID0gY2hhbGxlbmdlRXhwaXJlZDtcbiAgICB2bS5jdXJyZW50VXNlclBsYXllciA9IHt9O1xuICAgIHZtLnB5cmFtaWRNZW51VG9nZ2xlID0gZmFsc2U7XG4gICAgdm0uYWRkQ3VycmVudFVzZXJUb1B5cmFtaWQgPSBhZGRDdXJyZW50VXNlclRvUHlyYW1pZDtcbiAgICB2bS5jb25maXJtUmVtb3ZlQ3VycmVudFVzZXJGcm9tUHlyYW1pZCA9IGNvbmZpcm1SZW1vdmVDdXJyZW50VXNlckZyb21QeXJhbWlkO1xuICAgIHZtLnBsYXllckNsaWNrID0gcGxheWVyQ2xpY2s7XG4gICAgdm0ubnVtYmVyT2ZSZWFsUGxheWVycyA9IDA7XG4gICAgdm0ubWF4UGxheWVycyA9IDA7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAvLyBEZXRlcm1pbmUgdGhlIG1heGltdW0gbnVtYmVyIG9mIHBsYXllcnMgYmFzZWQgb24gdGhlIG1heGltdW0gbnVtYmVyIG9mIGxldmVsc1xuICAgICAgZm9yICh2YXIgaSA9IG1heExldmVsczsgaSA+IDA7IC0taSkge1xuICAgICAgICB2bS5tYXhQbGF5ZXJzICs9IGk7XG4gICAgICB9XG5cbiAgICAgICRzY29wZS4kd2F0Y2goJ3ZtLnB5cmFtaWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS5weXJhbWlkKSB7XG4gICAgICAgICAgdm0uY29tcGV0aXRpb25JZCA9IHZtLnB5cmFtaWQuX2lkO1xuICAgICAgICAgIG9yZGVyUGxheWVycygpO1xuICAgICAgICAgIGdldFBsYXllcnNTdGF0dXMoKTtcbiAgICAgICAgICBhc3NpZ25MZXZlbHNUb1BsYXllcnMoKTtcbiAgICAgICAgICBjYWxjdWxhdGVQeXJhbWlkQmxvY2tzKCk7XG4gICAgICAgICAgZmlsbEluRW1wdHlCbG9ja3MoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3JkZXIgdGhlIHBsYXllcnMgYnkgdGhlIHBvc2l0aW9uIHByb3BlcnR5IG9mIHRoZSBwbGF5ZXJzIGFycmF5IGluIHRoZSBweXJhbWlkIG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9yZGVyUGxheWVycygpIHtcbiAgICAgIHZtLnB5cmFtaWQucGxheWVycyA9ICRmaWx0ZXIoJ29yZGVyQnknKSh2bS5weXJhbWlkLnBsYXllcnMsICdwb3NpdGlvbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpZ3VyZSBvdXQgaWYgZWFjaCBwbGF5ZXIgaXMgYWxyZWFkeSBjaGFsbGVuZ2VkIGFuZCBzZXQgc29tZSBzdHVmZlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFBsYXllcnNTdGF0dXMoKSB7XG4gICAgICBcbiAgICAgIHZtLmN1cnJlbnRVc2VySXNBZG1pbiA9IGZhbHNlO1xuICAgICAgdm0uY3VycmVudFVzZXJJc1BlbmRpbmcgPSBmYWxzZTtcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBjdXJyZW50IHVzZXIgaXMgYW4gYWRtaW4gb2YgdGhpcyBweXJhbWlkXG4gICAgICAgIHZtLmN1cnJlbnRVc2VySXNBZG1pbiA9IF8uc29tZSh2bS5weXJhbWlkLmFkbWlucywgWydfaWQnLCBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuX2lkXSk7XG4gICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgY3VycmVudCB1c2VyIGhhcyBhIHBlbmRpbmcgcmVxdWVzdCB0byBqb2luXG4gICAgICAgIHZtLmN1cnJlbnRVc2VySXNQZW5kaW5nID0gXy5zb21lKHZtLnB5cmFtaWQucGVuZGluZ1BsYXllcnMsIFsnX2lkJywgaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZF0pO1xuICAgICAgfVxuXG4gICAgICB2bS5jdXJyZW50VXNlcklzT25QeXJhbWlkID0gZmFsc2U7XG4gICAgICB2bS5oYXNBY3RpdmVDaGFsbGVuZ2UgPSBmYWxzZTtcbiAgICAgIF8uZm9yRWFjaCh2bS5weXJhbWlkLnBsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgLy8gRmluZCB0aGUgY3VycmVudCB1c2VyIGlmIHRoZXkgYXJlIG9uIHRoaXMgcHlyYW1pZCBhbmQgc2V0IHNvbWUgcHJvcGVydGllc1xuICAgICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpICYmIHBsYXllci5faWQgPT09IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWQpIHtcbiAgICAgICAgICB2bS5jdXJyZW50VXNlcklzT25QeXJhbWlkID0gdHJ1ZTtcbiAgICAgICAgICBwbGF5ZXIuY2xhc3MgPSAnY3VycmVudC11c2VyJztcbiAgICAgICAgICB2bS5jdXJyZW50VXNlclBsYXllciA9IHBsYXllcjtcblxuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIGFuIGFjdGl2ZSBjaGFsbGVuZ2VcbiAgICAgICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXIodm0uY29tcGV0aXRpb25JZCwgcGxheWVyLl9pZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG4gICAgICAgICAgICBpZiAoY2hhbGxlbmdlLmRhdGEpIHtcbiAgICAgICAgICAgICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdm0uYWN0aXZlQ2hhbGxlbmdlT3Bwb25lbnQgPSBjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2VyLl9pZCA9PT0gcGxheWVyLl9pZCA/IGNoYWxsZW5nZS5kYXRhLm9wcG9uZW50IDogY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmdldEFjdGl2ZUNoYWxsZW5nZXNCeUNvbXBldGl0aW9uKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKGNoYWxsZW5nZXMpIHtcbiAgICAgICAgXy5mb3JFYWNoKGNoYWxsZW5nZXMuZGF0YSwgZnVuY3Rpb24gKGNoYWxsZW5nZSkge1xuXG4gICAgICAgICAgdmFyIGNoYWxsZW5nZXIgPSBfLmZpbmQodm0ucHlyYW1pZC5wbGF5ZXJzLCB7ICdfaWQnOiBjaGFsbGVuZ2UuY2hhbGxlbmdlci5faWQgfSk7XG4gICAgICAgICAgY2hhbGxlbmdlci5jbGFzcyA9ICd1bmF2YWlsYWJsZSc7XG4gICAgICAgICAgY2hhbGxlbmdlci5jaGFsbGVuZ2UgPSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2NoYWxsZW5nZXInXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHZhciBvcHBvbmVudCA9IF8uZmluZCh2bS5weXJhbWlkLnBsYXllcnMsIHsgJ19pZCc6IGNoYWxsZW5nZS5vcHBvbmVudC5faWQgfSk7XG4gICAgICAgICAgb3Bwb25lbnQuY2xhc3MgPSAndW5hdmFpbGFibGUnO1xuICAgICAgICAgIG9wcG9uZW50LmNoYWxsZW5nZSA9IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnb3Bwb25lbnQnXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIFRyYWNrIHdoZW4gdGhlIGNoYWxsZW5nZSB3aWxsIGV4cGlyZVxuICAgICAgICAgIGlmIChjaGFsbGVuZ2UudGltZUxpbWl0ICE9PSAwKSB7XG4gICAgICAgICAgICB2YXIgdGltZVRvRXhwaXJlID0gbW9tZW50KCkuZGlmZihtb21lbnQoY2hhbGxlbmdlLmNyZWF0ZWQpLmFkZChjaGFsbGVuZ2UudGltZUxpbWl0LCAnZCcpLCAncycpICogLTE7XG4gICAgICAgICAgICAvLyBJZiB0aGUgY2hhbGxlbmdlIGhhcyBub3QgeWV0IGV4cGlyZWQgZGlzcGxheSBhIGNvdW50ZG93biBvbiB0aGUgb3Bwb25lbnRcbiAgICAgICAgICAgIGlmICh0aW1lVG9FeHBpcmUgPiAwKSB7XG4gICAgICAgICAgICAgIG9wcG9uZW50LmNoYWxsZW5nZS5leHBpcmVzID0gdGltZVRvRXhwaXJlO1xuICAgICAgICAgICAgICAvLyBJZiB0aGUgY2hhbGxlbmdlIGV4cGlyZWQgd2hpbGUgbm8gb25lIHdhcyB2aWV3aW5nIHRoaXMgcHlyYW1pZCBjb21wbGV0ZSB0aGUgY2hhbGxlbmdlIGJ5IGZvcmZlaXRcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGltZVRvRXhwaXJlIDw9IDApIHtcbiAgICAgICAgICAgICAgY29tcGxldGVDaGFsbGVuZ2UobnVsbCwgdHJ1ZSwgb3Bwb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIE5vdyB0aGF0IHdlIGtub3cgd2hpY2ggcGxheWVycyBhcmUgaW4gY2hhbGxlbmdlcyBhbmQgd2hpY2ggYXJlbid0XG4gICAgICAgIC8vIGZpbmQgdGhlIGF2YWlsYWJsZSBjaGFsbGVuZ2VzIGZvciB0aGlzIHVzZXJcbiAgICAgICAgZmluZEF2YWlsYWJsZUNoYWxsZW5nZXMoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpZ3VyZSBvdXQgd2hlcmUgdG8gc3RhcnQgZWFjaCBuZXcgcm93IG9uIHRoZSBweXJhbWlkXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQnJlYWtQb2ludHMoKSB7XG4gICAgICB2bS5icmVha1BvaW50cyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXhMZXZlbHM7IGkrKykge1xuICAgICAgICB2bS5icmVha1BvaW50cy5wdXNoKCgoKGkgKiAoaSArIDEpKSAvIDIpKSArIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdpdmUgZWFjaCBwbGF5ZXIgYSBsZXZlbCBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgYnJlYWsgcG9pbnRzXG4gICAgLy8gVGhpcyB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHdobyBvdGhlciBwbGF5ZXJzIGNhbiBjaGFsbGVuZ2VcbiAgICBmdW5jdGlvbiBhc3NpZ25MZXZlbHNUb1BsYXllcnMoKSB7XG4gICAgICB2YXIgbGV2ZWwgPSAwO1xuICAgICAgdm0ubGV2ZWxzID0gW107XG4gICAgICBjcmVhdGVCcmVha1BvaW50cygpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS5weXJhbWlkLnBsYXllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHZtLmJyZWFrUG9pbnRzLmluZGV4T2YoaSArIDEpID4gLTEpIHtcbiAgICAgICAgICBsZXZlbCArPSAxO1xuICAgICAgICAgIC8vIFNldCB0aGUgbnVtYmVyIG9mIHRvdGFsIGxldmVsc1xuICAgICAgICAgIHZtLmxldmVscy5wdXNoKGxldmVsKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBHaXZlIGVhY2ggcGxheWVyIGEgbGV2ZWxcbiAgICAgICAgdm0ucHlyYW1pZC5wbGF5ZXJzW2ldLmxldmVsID0gbGV2ZWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSG93IG1hbnkgdG90YWwgYmxvY2tzIGluIHRoaXMgcHlyYW1pZFxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVB5cmFtaWRCbG9ja3MoKSB7XG4gICAgICB2bS5udW1iZXJPZkJsb2NrcyA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gXy5sYXN0KHZtLmxldmVscyk7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgdm0ubnVtYmVyT2ZCbG9ja3MgKz0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaWxsIG91dCB0aGUgcmVtYWluaW5nIGJsb2NrcyBvZiB0aGUgcHlyYW1pZCB3aXRoIGVtcHR5IGJsb2Nrc1xuICAgIGZ1bmN0aW9uIGZpbGxJbkVtcHR5QmxvY2tzKCkge1xuICAgICAgdm0ubnVtYmVyT2ZSZWFsUGxheWVycyA9IHZtLnB5cmFtaWQucGxheWVycy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gdm0ucHlyYW1pZC5wbGF5ZXJzLmxlbmd0aDsgaSA8IHZtLm51bWJlck9mQmxvY2tzOyBpKyspIHtcbiAgICAgICAgdm0ucHlyYW1pZC5wbGF5ZXJzLnB1c2goe1xuICAgICAgICAgIGZpcnN0TmFtZTogJ0VtcHR5JyxcbiAgICAgICAgICBsYXN0TmFtZTogJ1Nwb3QnLFxuICAgICAgICAgIHBvc2l0aW9uOiA5OSxcbiAgICAgICAgICBjbGFzczogJ2VtcHR5J1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vIFdlIGhhdmUgdG8gZ2l2ZSBsZXZlbHMgdG8gdGhlIG5ldyBlbXB0eSBzcG90c1xuICAgICAgYXNzaWduTGV2ZWxzVG9QbGF5ZXJzKCk7XG4gICAgfVxuXG4gICAgLy8gRmluZCBhbGwgdGhlIHBsYXllcnMgdGhhdCBhcmUgYXZhaWxhYmxlIHRvIGJlIGNoYWxsZW5nZWQgYnkgdGhpcyB1c2VyXG4gICAgZnVuY3Rpb24gZmluZEF2YWlsYWJsZUNoYWxsZW5nZXMoKSB7XG4gICAgICBpZiAodm0uY3VycmVudFVzZXJJc09uUHlyYW1pZCAmJiAhdm0uaGFzQWN0aXZlQ2hhbGxlbmdlKSB7XG4gICAgICAgIHZhciBsZXZlbEFib3ZlID0gdm0uY3VycmVudFVzZXJQbGF5ZXIubGV2ZWwgPiAxID8gdm0uY3VycmVudFVzZXJQbGF5ZXIubGV2ZWwgLSAxIDogbnVsbDtcbiAgICAgICAgXy5mb3JFYWNoKHZtLnB5cmFtaWQucGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICAgIGlmIChwbGF5ZXIubGV2ZWwgPT09IGxldmVsQWJvdmUgJiYgcGxheWVyLnBvc2l0aW9uICE9PSA5OSAmJiBwbGF5ZXIuY2xhc3MgIT09ICd1bmF2YWlsYWJsZScpIHtcbiAgICAgICAgICAgIHZtLmF2YWlsYWJsZUNoYWxsZW5nZXMgPSB0cnVlO1xuICAgICAgICAgICAgcGxheWVyLmF2YWlsYWJsZSA9IHRydWU7XG4gICAgICAgICAgICBwbGF5ZXIuY2xhc3MgPSAnYXZhaWxhYmxlJztcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoYWxsZW5nZShwbGF5ZXIpIHtcbiAgICAgIGlmICghcGxheWVyLmF2YWlsYWJsZSkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdTb3JyeSwgdGhhdCBpcyBub3QgYSB2YWxpZCBjaGFsbGVuZ2UuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bS5oYXNBY3RpdmVDaGFsbGVuZ2UgPSB0cnVlO1xuICAgICAgICB2YXIgY2hhbGxlbmdlID0ge1xuICAgICAgICAgIGNvbXBldGl0aW9uTmFtZTogdm0ucHlyYW1pZC5uYW1lLFxuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IHZtLmNvbXBldGl0aW9uSWQsXG4gICAgICAgICAgY29tcGxldGU6IGZhbHNlLFxuICAgICAgICAgIGZvcmZlaXQ6IGZhbHNlLFxuICAgICAgICAgIHRpbWVMaW1pdDogdm0ucHlyYW1pZC5mb3JmZWl0RGF5cyxcbiAgICAgICAgICBjaGFsbGVuZ2VyOiB7XG4gICAgICAgICAgICBfaWQ6IHZtLmN1cnJlbnRVc2VyUGxheWVyLl9pZCxcbiAgICAgICAgICAgIGVtYWlsOiB2bS5jdXJyZW50VXNlclBsYXllci5lbWFpbCxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogdm0uY3VycmVudFVzZXJQbGF5ZXIuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IHZtLmN1cnJlbnRVc2VyUGxheWVyLmxhc3ROYW1lLFxuICAgICAgICAgICAgcG9zaXRpb246IHZtLmN1cnJlbnRVc2VyUGxheWVyLnBvc2l0aW9uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHBvbmVudDoge1xuICAgICAgICAgICAgX2lkOiBwbGF5ZXIuX2lkLFxuICAgICAgICAgICAgZW1haWw6IHBsYXllci5lbWFpbCxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogcGxheWVyLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBwbGF5ZXIubGFzdE5hbWUsXG4gICAgICAgICAgICBwb3NpdGlvbjogcGxheWVyLnBvc2l0aW9uXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBDcmVhdGUgdGhlIGNoYWxsZW5nZVxuICAgICAgICAvLyBXZWJzb2NrZXQgZXZlbnQgd2lsbCByZWZyZXNoIHRoZSBweXJhbWlkXG4gICAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmNyZWF0ZUNoYWxsZW5nZShjaGFsbGVuZ2UpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZtLnB5cmFtaWRNZW51VG9nZ2xlID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wbGV0ZSBhIGNoYWxsZW5nZSBieSBhIHVzZXIgaW50ZXJhY3Rpb24gb3IgYSBmb3JmZWl0XG4gICAgICogXG4gICAgICogQHBhcmFtICB7Ym9vbGVhbn0gd2lubmVySXNDdXJyZW50VXNlclxuICAgICAqIEBwYXJhbSAge2Jvb2xlYW59IGZvcmZlaXRcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IGZvcmZlaXRMb3NlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBsZXRlQ2hhbGxlbmdlKHdpbm5lcklzQ3VycmVudFVzZXIsIGZvcmZlaXQsIGZvcmZlaXRMb3Nlcikge1xuICAgICAgdmFyIHBsYXllciA9IGZvcmZlaXRMb3NlciB8fCB2bS5jdXJyZW50VXNlclBsYXllcjtcbiAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmdldEFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllcih2bS5jb21wZXRpdGlvbklkLCBwbGF5ZXIuX2lkKS50aGVuKGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIHN3YXBQb3NpdGlvbnMgPSBmYWxzZTtcblxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIGZvcmZlaXRcbiAgICAgICAgaWYgKGZvcmZlaXQpIHtcbiAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS5mb3JmZWl0ID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZm9yZmVpdExvc2VyLmNoYWxsZW5nZS5wb3NpdGlvbiA9PT0gJ29wcG9uZW50Jykge1xuICAgICAgICAgICAgY2hhbGxlbmdlLmRhdGEud2lubmVyID0gJ2NoYWxsZW5nZXInO1xuICAgICAgICAgICAgc3dhcFBvc2l0aW9ucyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5kYXRhLndpbm5lciA9ICdvcHBvbmVudCc7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEZpZ3VyZSBvdXQgd2hvIHRoZSB3aW5uZXIgd2FzIHRvIHN0b3JlIGluIHRoZSBjaGFsbGVuZ2UgcmVjb3JkXG4gICAgICAgIH0gZWxzZSBpZiAod2lubmVySXNDdXJyZW50VXNlcikge1xuICAgICAgICAgIGlmIChjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2VyLl9pZCA9PT0gdm0uY3VycmVudFVzZXJQbGF5ZXIuX2lkKSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS53aW5uZXIgPSAnY2hhbGxlbmdlcic7XG4gICAgICAgICAgICBzd2FwUG9zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hhbGxlbmdlLmRhdGEud2lubmVyID0gJ29wcG9uZW50JztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNoYWxsZW5nZS5kYXRhLmNoYWxsZW5nZXIuX2lkID09PSB2bS5jdXJyZW50VXNlclBsYXllci5faWQpIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5kYXRhLndpbm5lciA9ICdvcHBvbmVudCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5kYXRhLndpbm5lciA9ICdjaGFsbGVuZ2VyJztcbiAgICAgICAgICAgIHN3YXBQb3NpdGlvbnMgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN3YXAgcG9zaXRpb25zIGFuZCB0aGVuIGNvbXBsZXRlIHRoZSBjaGFsbGVuZ2Ugb3IganVzdCBjb21wbGV0ZSB0aGUgY2hhbGxlbmdlXG4gICAgICAgIC8vIFdlYnNvY2tldCBldmVudCB3aWxsIHJlZnJlc2ggdGhlIHB5cmFtaWRcbiAgICAgICAgaWYgKHN3YXBQb3NpdGlvbnMpIHtcbiAgICAgICAgICBweXJhbWlkc1NlcnZpY2Uuc3dhcFBvc2l0aW9ucyh2bS5jb21wZXRpdGlvbklkLCBjaGFsbGVuZ2UuZGF0YS5vcHBvbmVudCwgY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlcikudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2VzU2VydmljZS5jb21wbGV0ZUNoYWxsZW5nZShjaGFsbGVuZ2UuZGF0YSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmIChyZW1vdmluZ0N1cnJlbnRVc2VyKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ3VycmVudFVzZXJGcm9tUHlyYW1pZCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFsbGVuZ2VzU2VydmljZS5jb21wbGV0ZUNoYWxsZW5nZShjaGFsbGVuZ2UuZGF0YSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAocmVtb3ZpbmdDdXJyZW50VXNlcikge1xuICAgICAgICAgICAgICByZW1vdmVDdXJyZW50VXNlckZyb21QeXJhbWlkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2bS5weXJhbWlkTWVudVRvZ2dsZSA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxzIHRoZSBjb21wbGV0ZSBjaGFsbG5nZSBmdW5jdGlvbiB3aXRoIHRoZSBmb3JmZWl0aW5nIHBsYXllclxuICAgICAqIEBwYXJhbSAge29iamVjdH0gcGxheWVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhbGxlbmdlRXhwaXJlZChwbGF5ZXIpIHtcbiAgICAgIGNvbXBsZXRlQ2hhbGxlbmdlKG51bGwsIHRydWUsIHBsYXllcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIGN1cnJlbnQgdXNlciB0aGUgcHlyYW1pZCBcbiAgICAgKiBpZiB0aGV5J3JlIG5vdCBhbHJlYWR5IG9uIGl0IGFuZCB0aGVyZSdzIHNwYWNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkQ3VycmVudFVzZXJUb1B5cmFtaWQoKSB7XG4gICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgIGlmICh2bS5udW1iZXJPZlJlYWxQbGF5ZXJzIDwgdm0ubWF4UGxheWVycykge1xuICAgICAgICAgIHZhciBwbGF5ZXIgPSB7XG4gICAgICAgICAgICBfaWQ6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWQsXG4gICAgICAgICAgICBmaXJzdE5hbWU6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5maXJzdE5hbWUsXG4gICAgICAgICAgICBsYXN0TmFtZTogaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLmxhc3ROYW1lLFxuICAgICAgICAgICAgZW1haWw6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci51c2VybmFtZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB2bS5udW1iZXJPZlJlYWxQbGF5ZXJzICsgMVxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKHZtLnB5cmFtaWQub3Blbikge1xuICAgICAgICAgICAgc3dhbCh7XG4gICAgICAgICAgICAgIHRpdGxlOiAnSm9pbiBDb21wZXRpdGlvbj8nLFxuICAgICAgICAgICAgICB0ZXh0OiAnWW91XFwnbGwgYmUgYWRkZWQgdG8gdGhlIGJvdHRvbScsXG4gICAgICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJyxcbiAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdKb2luJyxcbiAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ05ldmVybWluZCcsXG4gICAgICAgICAgICAgIGNsb3NlT25Db25maXJtOiBmYWxzZSxcbiAgICAgICAgICAgICAgY2xvc2VPbkNhbmNlbDogdHJ1ZVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBweXJhbWlkc1NlcnZpY2UuYWRkUGxheWVyVG9QeXJhbWlkKHZtLmNvbXBldGl0aW9uSWQsIHBsYXllcik7XG4gICAgICAgICAgICAgIHN3YWwoJ1dlbGNvbWUgQWJvYXJkIScsICdOb3cgc3RhcnQgZmlnaHRpbmcgeW91ciB3YXkgdG8gdGhlIHRvcCcsICdzdWNjZXNzJyk7XG4gICAgICAgICAgICB9KTsgIFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2FsKHtcbiAgICAgICAgICAgICAgdGl0bGU6ICdTZW5kIEpvaW4gUmVxdWVzdD8nLFxuICAgICAgICAgICAgICB0ZXh0OiAnVGhpcyBpcyBhIGNsb3NlZCBjb21wZXRpdGlvbiBzbyBhbiBhZG1pbiBtdXN0IGFwcHJvdmUgeW91ciByZXF1ZXN0JyxcbiAgICAgICAgICAgICAgdHlwZTogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ1NlbmQgUmVxdWVzdCcsXG4gICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICdOZXZlcm1pbmQnLFxuICAgICAgICAgICAgICBjbG9zZU9uQ29uZmlybTogZmFsc2UsXG4gICAgICAgICAgICAgIGNsb3NlT25DYW5jZWw6IHRydWVcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcHlyYW1pZHNTZXJ2aWNlLmFkZFBsYXllclRvUHlyYW1pZFJlcXVlc3Qodm0ucHlyYW1pZCwgcGxheWVyKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2bS5jdXJyZW50VXNlcklzUGVuZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBzd2FsKCdSZXF1ZXN0IFNlbnQnLCAnWW91IHdpbGwgcmVjZWl2ZSBhbiBlbWFpbCBvbmNlIGFuIGFkbWluIHByb2Nlc3NlcyB0aGUgcmVxdWVzdC4nLCAnc3VjY2VzcycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vdGlmeVNlcnZpY2Uud2FybmluZygnU29ycnksIHRoaXMgcHlyYW1pZCBpcyBmdWxsJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2Uud2FybmluZygnUGxlYXNlIGxvZ2luIHRvIGpvaW4gYSBjb21wZXRpdGlvbicpO1xuICAgICAgICAkc3RhdGUucHJldmlvdXMgPSAncHlyYW1pZHMudmlldyc7XG4gICAgICAgICRzdGF0ZS5wcmV2UGFyYW1zID0geydjb21wZXRpdGlvbklkJzogdm0uY29tcGV0aXRpb25JZH07XG4gICAgICAgICRzdGF0ZS5nbygnbG9naW4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maXJtUmVtb3ZlQ3VycmVudFVzZXJGcm9tUHlyYW1pZCgpIHtcbiAgICAgIHN3YWwoe1xuICAgICAgICB0aXRsZTogJ0xlYXZlIFB5cmFtaWQ/JyxcbiAgICAgICAgdGV4dDogJ1lvdSB3aWxsIGxvc2UgeW91ciBzcG90IGFuZCBmb3JmZWl0IGFueSBhY3RpdmUgY2hhbGxlbmdlcy4nLFxuICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ1llcywgbGVhdmUnLFxuICAgICAgICBjb25maXJtQnV0dG9uQ2xhc3M6ICdidG4tZGFuZ2VyJyxcbiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ05vLCBzdGF5JyxcbiAgICAgICAgY2xvc2VPbkNvbmZpcm06IGZhbHNlLFxuICAgICAgICBjbG9zZU9uQ2FuY2VsOiB0cnVlXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZUN1cnJlbnRVc2VyRnJvbVB5cmFtaWQoKTtcbiAgICAgICAgc3dhbCgnT0ssIHlvdVxcJ3Igb3V0IScsICdZb3VcXCd2ZSBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgcHlyYW1pZC4nLCAnc3VjY2VzcycpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVXNlIHRoaXMgdG8gZW5mb3JjZSBvcmRlciBvZiBvcGVyYXRpb25zIHdoZW4gdGhlIHBsYXllciB0byBiZSByZW1vdmVkIGhhZCBhbiBhY3RpdmUgY2hhbGxlbmdlXG4gICAgdmFyIHJlbW92aW5nQ3VycmVudFVzZXIgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHJlbW92ZUN1cnJlbnRVc2VyRnJvbVB5cmFtaWQoKSB7XG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIHVzZXIgaXMgbG9nZ2VkIGluIGFuZCBpcyBvbiB0aGlzIHB5cmFtaWRcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkgJiYgdm0uY3VycmVudFVzZXJJc09uUHlyYW1pZCkge1xuICAgICAgICByZW1vdmluZ0N1cnJlbnRVc2VyID0gdHJ1ZTtcbiAgICAgICAgLy8gRm9yZmVpdCBpZiB0aGV5IGhhdmUgYW4gYWN0aXZlIGNoYWxsZW5nZVxuICAgICAgICBpZiAodm0uaGFzQWN0aXZlQ2hhbGxlbmdlKSB7XG4gICAgICAgICAgY29tcGxldGVDaGFsbGVuZ2UobnVsbCwgdHJ1ZSwgdm0uY3VycmVudFVzZXJQbGF5ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNpbmNlIHdlIGFyZSByZW1vdmluZyB0aGVtIC4uLlxuICAgICAgICAgIHZtLmN1cnJlbnRVc2VySXNPblB5cmFtaWQgPSBmYWxzZTtcbiAgICAgICAgICB2bS5oYXNBY3RpdmVDaGFsbGVuZ2UgPSBmYWxzZTtcblxuICAgICAgICAgIC8vIEdldCBhbiB1cGRhdGVkIGNvcHkgb2YgdGhlIHB5cmFtaWQgaW5jYXNlIGEgZm9yZmVpdCBoYXBwZW5lZFxuICAgICAgICAgIHB5cmFtaWRzU2VydmljZS5nZXRQeXJhbWlkKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICAgIC8vIFN0b3JlIHRoZSB1cGRhdGVkIGNvcHkgbG9jYWxseSBzbyBhcyBub3QgdG8gZGlzdHJ1cHQgdGhlIHB5cmFtaWRcbiAgICAgICAgICAgIC8vIHVudGlsIHRoZSBwbGF5ZXIgaGFzIGJlZW4gcmVtb3ZlZFxuICAgICAgICAgICAgdmFyIHB5cmFtaWQgPSBwLmRhdGE7XG5cbiAgICAgICAgICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhlIHNwb3QgdGhleSB3ZXJlIGluIG9uIHRoZSBweXJhbWlkXG4gICAgICAgICAgICB2YXIgb3BlblBvc2l0aW9uID0gdm0uY3VycmVudFVzZXJQbGF5ZXIucG9zaXRpb247XG5cbiAgICAgICAgICAgIC8vIE1vdmUgYWxsIHRoZSBwbGF5ZXJzIHVwIDEgcG9zaXRpb24gdGhhdCB3ZXJlIGJlaGluZCB0aGUgcmVtb3ZlZCBwbGF5ZXJcbiAgICAgICAgICAgIF8uZm9yRWFjaChweXJhbWlkLnBsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgICAgICAgaWYgKHBsYXllci5wb3NpdGlvbiA+PSBvcGVuUG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXIucG9zaXRpb24gLT0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZWQgdGhlIHBsYXllciBmcm9tIHRoZSBweXJhbWlkXG4gICAgICAgICAgICB2YXIgcmVtb3ZlZFBsYXllciA9IF8ucmVtb3ZlKHB5cmFtaWQucGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICAgICAgICByZXR1cm4gcGxheWVyLl9pZCA9PT0gdm0uY3VycmVudFVzZXJQbGF5ZXIuX2lkO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIE1ha2UgYSBuZXcgYXJyYXkgb2YgYWxsIHRoZSBwbGF5ZXJzIHN0aWxsIG9uIHRoZSBweXJhbWlkXG4gICAgICAgICAgICAvLyBvbmx5IHVzZSB0aGUgcHJvcGVydGllcyB3ZSB3YW50IHRvIHN0b3JlIGluIHRoZSBweXJhbWlkIGRvY3VtZW50XG4gICAgICAgICAgICB2YXIgdXBkYXRlZFBsYXllcnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0ubnVtYmVyT2ZSZWFsUGxheWVycyAtIDE7ICsraSkge1xuICAgICAgICAgICAgICB2YXIgdXBkYXRlZFBsYXllciA9IHtcbiAgICAgICAgICAgICAgICBfaWQ6IHB5cmFtaWQucGxheWVyc1tpXS5faWQsXG4gICAgICAgICAgICAgICAgZmlyc3ROYW1lOiBweXJhbWlkLnBsYXllcnNbaV0uZmlyc3ROYW1lLFxuICAgICAgICAgICAgICAgIGxhc3ROYW1lOiBweXJhbWlkLnBsYXllcnNbaV0ubGFzdE5hbWUsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHB5cmFtaWQucGxheWVyc1tpXS5wb3NpdGlvblxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIHVwZGF0ZWRQbGF5ZXJzLnB1c2godXBkYXRlZFBsYXllcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENhbGwgc2VydmljZSB0byByZW1vdmUgdGhlIHBsYXllclxuICAgICAgICAgICAgcHlyYW1pZHNTZXJ2aWNlLnJlbW92ZWRQbGF5ZXJGcm9tUHlyYW1pZCh2bS5jb21wZXRpdGlvbklkLCByZW1vdmVkUGxheWVyWzBdLCB1cGRhdGVkUGxheWVycykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJlbW92aW5nQ3VycmVudFVzZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlndXJlIG91dCB3aGF0IHRoZSBhcHByb3ByaWF0ZSBhY3Rpb24gaXMgYmFzZWQgb24gdGhlIHBsYXllciBjbGlja2luZyBhbmQgdGhlIHBsYXllciBiZWluZyBjbGlja2VkXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGxheWVyQ2xpY2socGxheWVyKSB7XG4gICAgICAvLyBjbGlja2VkIG9uIGVtcHR5IHNwb3RcbiAgICAgIGlmIChwbGF5ZXIucG9zaXRpb24gPT09IDk5ICYmICF2bS5jdXJyZW50VXNlcklzT25QeXJhbWlkKSB7XG4gICAgICAgIGFkZEN1cnJlbnRVc2VyVG9QeXJhbWlkKCk7XG4gICAgICB9XG4gICAgICBpZiAocGxheWVyLmF2YWlsYWJsZSA9PT0gdHJ1ZSAmJiB2bS5jdXJyZW50VXNlcklzT25QeXJhbWlkICYmICF2bS5oYXNBY3RpdmVDaGFsbGVuZ2UpIHtcbiAgICAgICAgc3dhbCh7XG4gICAgICAgICAgdGl0bGU6ICdDaGFsbGVuZ2UgUmVxdWVzdCcsXG4gICAgICAgICAgdGV4dDogJ0NoYWxsZW5nZSAnICsgcGxheWVyLmZpcnN0TmFtZSArICcgJyArIHBsYXllci5sYXN0TmFtZSArICc/JyxcbiAgICAgICAgICB0eXBlOiAnd2FybmluZycsXG4gICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ1NlbmQgQ2hhbGxlbmdlJyxcbiAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAnTmV2ZXJtaW5kJyxcbiAgICAgICAgICBjbG9zZU9uQ29uZmlybTogZmFsc2UsXG4gICAgICAgICAgY2xvc2VPbkNhbmNlbDogdHJ1ZVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY3JlYXRlQ2hhbGxlbmdlKHBsYXllcik7XG4gICAgICAgICAgc3dhbCgnQ2hhbGxlbmdlIFNlbnQnLCBwbGF5ZXIuZmlyc3ROYW1lICsgJyAnICsgcGxheWVyLmxhc3ROYW1lICsgJyBoYXMgYmVlbiBub3RpZmllZCBvZiB0aGUgY2hhbGxlbmdlLicsICdzdWNjZXNzJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZnJlc2ggdGhlIHB5cmFtaWQgYmVjYXN1ZSBvZiBhbiB1cGRhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWZyZXNoUHlyYW1pZCgpIHtcbiAgICAgIHB5cmFtaWRzU2VydmljZS5nZXRQeXJhbWlkKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKHB5cmFtaWQpIHtcbiAgICAgICAgdm0ucHlyYW1pZCA9IHB5cmFtaWQuZGF0YTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czpweXJhbWlkX3VwZGF0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNoYWxsZW5nZURldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oY2hhbGxlbmdlRGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgIHJlZnJlc2hQeXJhbWlkKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2twVXBkYXRlQWRtaW5zJywga3BVcGRhdGVBZG1pbnMpO1xuXG4gIGZ1bmN0aW9uIGtwVXBkYXRlQWRtaW5zKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogY3RybEZ1bmMsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgcHlyYW1pZDogJz0nXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVVcmw6ICcvcHlyYW1pZHMvY29tcG9uZW50cy91cGRhdGUtYWRtaW5zLmh0bWwnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKCRzY29wZSwgcHlyYW1pZHNTZXJ2aWNlLCBjaGFsbGVuZ2VzU2VydmljZSwgdXNlclNlcnZpY2UpIHtcbiAgICB2YXIgcmVtb3ZlZEFkbWlucyA9IFtdO1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uYXZhaWxhYmxlQWRtaW5zID0gW107XG4gICAgdm0udXBkYXRlUHlyYW1pZCA9IHVwZGF0ZVB5cmFtaWQ7XG4gICAgdm0uY2FuY2VsVXBkYXRlID0gY2FuY2VsVXBkYXRlO1xuICAgIHZtLnJlbW92ZUFkbWluID0gcmVtb3ZlQWRtaW47XG4gICAgdm0uYWRkQWRtaW4gPSBhZGRBZG1pbjtcbiAgICB2bS5kaXNhYmxlU3VibWl0ID0gdHJ1ZTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICRzY29wZS4kd2F0Y2goJ3ZtLnB5cmFtaWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS5weXJhbWlkKSB7XG4gICAgICAgICAgZ2V0QXZhaWxhYmxlQWRtaW5zKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEF2YWlsYWJsZUFkbWlucygpIHtcbiAgICAgIHZtLmF2YWlsYWJsZUFkbWlucyA9IFtdO1xuICAgICAgdXNlclNlcnZpY2UuZ2V0QWxsVXNlcnMoKS50aGVuKGZ1bmN0aW9uICh1c2Vycykge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIGN1cnJlbnQgYWRtaW5zIGZyb20gdGhlIGxpc3Qgb2YgYXZhaWxhYmxlIGFkbWluc1xuICAgICAgICBfLmZvckVhY2godm0ucHlyYW1pZC5hZG1pbnMsIGZ1bmN0aW9uIChweXJhbWlkQWRtaW4pIHtcbiAgICAgICAgICBfLnJlbW92ZSh1c2Vycy5kYXRhLCBmdW5jdGlvbiAoYXZhaWxhYmxlQWRtaW4pe1xuICAgICAgICAgICAgcmV0dXJuIHB5cmFtaWRBZG1pbi5faWQgPT09IGF2YWlsYWJsZUFkbWluLl9pZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIF8uZm9yRWFjaCh1c2Vycy5kYXRhLCBmdW5jdGlvbiAoYXZhaWxhYmxlQWRtaW4pIHtcbiAgICAgICAgICB2bS5hdmFpbGFibGVBZG1pbnMucHVzaCh7XG4gICAgICAgICAgICBmaXJzdE5hbWU6IGF2YWlsYWJsZUFkbWluLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBhdmFpbGFibGVBZG1pbi5sYXN0TmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiBhdmFpbGFibGVBZG1pbi5lbWFpbCxcbiAgICAgICAgICAgIF9pZDogYXZhaWxhYmxlQWRtaW4uX2lkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSB0aGUgdXBkYXRlcyB0aGF0IHdlcmUgcmVxdXN0ZWRcbiAgICBmdW5jdGlvbiB1cGRhdGVQeXJhbWlkKCkge1xuICAgICAgcHlyYW1pZHNTZXJ2aWNlLnVwZGF0ZVB5cmFtaWQodm0ucHlyYW1pZCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZtLmRpc2FibGVTdWJtaXQgPSB0cnVlO1xuICAgICAgfSk7ICAgXG4gICAgfVxuXG4gICAgLy8gQ2FuY2VsIHRoZSB1cGRhdGUgYW5kIHB1dCBldmVyeXRoaW5nIGJhY2sgdG8gdGhlIG9yZ2luYWxcbiAgICBmdW5jdGlvbiBjYW5jZWxVcGRhdGUoKSB7XG4gICAgICBweXJhbWlkc1NlcnZpY2UuZ2V0UHlyYW1pZCh2bS5weXJhbWlkLl9pZCkudGhlbihmdW5jdGlvbiAocHlyYW1pZCkge1xuICAgICAgICB2bS5weXJhbWlkID0gcHlyYW1pZC5kYXRhO1xuICAgICAgICB2bS5kaXNhYmxlU3VibWl0ID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgZ2V0QXZhaWxhYmxlQWRtaW5zKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbiBhZG1pbiBmcm9tIHRoZSBweXJhbWlkXG4gICAgICogUXVldWUgdXAgdGhlIGFkbWlucyB0byBiZSByZW1vdmVkIGFuZCByZW1vdmUgdGhlbSBmcm9tIHRoZSBkaXNwbGF5XG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBhZG1pblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZUFkbWluKGFkbWluKSB7XG4gICAgICByZW1vdmVkQWRtaW5zLnB1c2goYWRtaW4pO1xuICAgICAgdm0uYXZhaWxhYmxlQWRtaW5zLnB1c2goXy5yZW1vdmUodm0ucHlyYW1pZC5hZG1pbnMsIHtfaWQ6IGFkbWluLl9pZH0pWzBdKTtcbiAgICAgIHZtLmRpc2FibGVTdWJtaXQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIGFkbWluIHRvIHRoZSBweXJhbWlkXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBhZG1pblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZEFkbWluKGFkbWluKSB7XG4gICAgICB2bS5weXJhbWlkLmFkbWlucy5wdXNoKF8ucmVtb3ZlKHZtLmF2YWlsYWJsZUFkbWlucywge19pZDogYWRtaW4uX2lkfSlbMF0pO1xuICAgICAgdm0uZGlzYWJsZVN1Ym1pdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BVcGRhdGVQbGF5ZXJzJywga3BVcGRhdGVQbGF5ZXJzKTtcblxuICBmdW5jdGlvbiBrcFVwZGF0ZVBsYXllcnMoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBzY29wZToge1xuICAgICAgICBweXJhbWlkOiAnPSdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogJy9weXJhbWlkcy9jb21wb25lbnRzL3VwZGF0ZS1wbGF5ZXJzLmh0bWwnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKCRzY29wZSwgJGZpbHRlciwgcHlyYW1pZHNTZXJ2aWNlLCBjaGFsbGVuZ2VzU2VydmljZSwgdXNlclNlcnZpY2UpIHtcbiAgICB2YXIgcmVtb3ZlZFBsYXllcnMgPSBbXTtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmF2YWlsYWJsZVBsYXllcnMgPSBbXTtcbiAgICB2bS51cGRhdGVQeXJhbWlkID0gdXBkYXRlUHlyYW1pZDtcbiAgICB2bS5jYW5jZWxVcGRhdGUgPSBjYW5jZWxVcGRhdGU7XG4gICAgdm0ucmVvcmRlclBsYXllcnMgPSByZW9yZGVyUGxheWVycztcbiAgICB2bS5yZW1vdmVQbGF5ZXIgPSByZW1vdmVQbGF5ZXI7XG4gICAgdm0uYWRkUGxheWVyID0gYWRkUGxheWVyO1xuICAgIHZtLmRpc2FibGVTdWJtaXQgPSB0cnVlO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgJHNjb3BlLiR3YXRjaCgndm0ucHlyYW1pZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHZtLnB5cmFtaWQpIHtcbiAgICAgICAgICBnZXRBdmFpbGFibGVQbGF5ZXJzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEF2YWlsYWJsZVBsYXllcnMoKSB7XG4gICAgICB1c2VyU2VydmljZS5nZXRBbGxVc2VycygpLnRoZW4oZnVuY3Rpb24gKHVzZXJzKSB7XG4gICAgICAgIF8uZm9yRWFjaCh2bS5weXJhbWlkLnBsYXllcnMsIGZ1bmN0aW9uIChweXJhbWlkUGxheWVyKSB7XG4gICAgICAgICAgXy5yZW1vdmUodXNlcnMuZGF0YSwgZnVuY3Rpb24gKGF2YWlsYWJsZVBsYXllcil7XG4gICAgICAgICAgICByZXR1cm4gcHlyYW1pZFBsYXllci5faWQgPT09IGF2YWlsYWJsZVBsYXllci5faWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2bS5hdmFpbGFibGVQbGF5ZXJzID0gdXNlcnMuZGF0YTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFBlcmZvcm0gdGhlIHVwZGF0ZXMgdGhhdCB3ZXJlIHJlcXVzdGVkXG4gICAgZnVuY3Rpb24gdXBkYXRlUHlyYW1pZCgpIHtcbiAgICAgIF8uZm9yRWFjaChyZW1vdmVkUGxheWVycywgZnVuY3Rpb24ocGxheWVyKSB7XG4gICAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmRlbGV0ZUFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllcih2bS5weXJhbWlkLl9pZCwgcGxheWVyLl9pZCk7XG4gICAgICB9KTtcbiAgICAgIHB5cmFtaWRzU2VydmljZS51cGRhdGVQeXJhbWlkKHZtLnB5cmFtaWQpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB2bS5kaXNhYmxlU3VibWl0ID0gdHJ1ZTtcbiAgICAgIH0pOyAgIFxuICAgIH1cblxuICAgIC8vIENhbmNlbCB0aGUgdXBkYXRlIGFuZCBwdXQgZXZlcnl0aGluZyBiYWNrIHRvIHRoZSBvcmdpbmFsXG4gICAgZnVuY3Rpb24gY2FuY2VsVXBkYXRlKCkge1xuICAgICAgcHlyYW1pZHNTZXJ2aWNlLmdldFB5cmFtaWQodm0ucHlyYW1pZC5faWQpLnRoZW4oZnVuY3Rpb24gKHB5cmFtaWQpIHtcbiAgICAgICAgcHlyYW1pZC5kYXRhLnBsYXllcnMgPSAkZmlsdGVyKCdvcmRlckJ5JykocHlyYW1pZC5kYXRhLnBsYXllcnMsICdwb3NpdGlvbicpO1xuICAgICAgICB2bS5weXJhbWlkID0gcHlyYW1pZC5kYXRhO1xuICAgICAgICB2bS5kaXNhYmxlU3VibWl0ID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgZ2V0QXZhaWxhYmxlUGxheWVycygpO1xuICAgIH1cblxuICAgIC8vIFJlb3JkZXIgdGhlIHBsYXllcnMgYmFzZWQgb24gdGhlIGRyYWctZHJvcFxuICAgIGZ1bmN0aW9uIHJlb3JkZXJQbGF5ZXJzKCkge1xuICAgICAgdmFyIGkgPSAxO1xuICAgICAgXy5mb3JFYWNoKHZtLnB5cmFtaWQucGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICBwbGF5ZXIucG9zaXRpb24gPSBpO1xuICAgICAgICArK2k7XG4gICAgICB9KTtcbiAgICAgIHZtLmRpc2FibGVTdWJtaXQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgcGxheWVyIGZyb20gdGhlIHB5cmFtaWRcbiAgICAgKiBRdWV1ZSB1cCB0aGUgcGxheWVycyB0byBiZSByZW1vdmVkIGFuZCByZW1vdmUgdGhlbSBmcm9tIHRoZSBkaXNwbGF5XG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBwbGF5ZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVQbGF5ZXIocGxheWVyKSB7XG4gICAgICByZW1vdmVkUGxheWVycy5wdXNoKHBsYXllcik7XG4gICAgICB2bS5hdmFpbGFibGVQbGF5ZXJzLnB1c2goXy5yZW1vdmUodm0ucHlyYW1pZC5wbGF5ZXJzLCB7X2lkOiBwbGF5ZXIuX2lkfSlbMF0pO1xuICAgICAgcmVvcmRlclBsYXllcnMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgcGxheWVyIHRvIHRoZSBuZXcgcHlyYW1pZFxuICAgICAqIEBwYXJhbSAge29iamVjdH0gcGxheWVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkUGxheWVyKHBsYXllcikge1xuICAgICAgcGxheWVyLnBvc2l0aW9uID0gdm0ucHlyYW1pZC5wbGF5ZXJzLmxlbmd0aCArIDE7XG4gICAgICB2bS5weXJhbWlkLnBsYXllcnMucHVzaChfLnJlbW92ZSh2bS5hdmFpbGFibGVQbGF5ZXJzLCB7X2lkOiBwbGF5ZXIuX2lkfSlbMF0pO1xuICAgICAgdm0uZGlzYWJsZVN1Ym1pdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5mYWN0b3J5KCdweXJhbWlkc1NlcnZpY2UnLCBweXJhbWlkc1NlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIHB5cmFtaWRzU2VydmljZSgkaHR0cCkge1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgZ2V0UHlyYW1pZDogZ2V0UHlyYW1pZCxcbiAgICAgIGdldFB5cmFtaWRzRm9yVXNlcjogZ2V0UHlyYW1pZHNGb3JVc2VyLFxuICAgICAgZ2V0UHlyYW1pZHM6IGdldFB5cmFtaWRzLFxuICAgICAgY3JlYXRlUHlyYW1pZDogY3JlYXRlUHlyYW1pZCxcbiAgICAgIHVwZGF0ZVB5cmFtaWQ6IHVwZGF0ZVB5cmFtaWQsXG4gICAgICBkZWxldGVQeXJhbWlkOiBkZWxldGVQeXJhbWlkLFxuICAgICAgc3dhcFBvc2l0aW9uczogc3dhcFBvc2l0aW9ucyxcbiAgICAgIGFkZFBsYXllclRvUHlyYW1pZDogYWRkUGxheWVyVG9QeXJhbWlkLFxuICAgICAgYWRkUGxheWVyVG9QeXJhbWlkUmVxdWVzdDogYWRkUGxheWVyVG9QeXJhbWlkUmVxdWVzdCxcbiAgICAgIHJlbW92ZWRQbGF5ZXJGcm9tUHlyYW1pZDogcmVtb3ZlZFBsYXllckZyb21QeXJhbWlkLFxuICAgICAgYXBwcm92ZVBlbmRpbmdQbGF5ZXI6IGFwcHJvdmVQZW5kaW5nUGxheWVyLFxuICAgICAgZGVueVBlbmRpbmdQbGF5ZXI6IGRlbnlQZW5kaW5nUGxheWVyXG4gICAgfTtcblxuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHB5cmFtaWQgZnJvbSB0aGUgZGF0YWJhc2UgKG9yIG1lbW9yeSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBweXJhbWlkIGlkIGZvciB0aGUgcmVxdWVzdGVkIHB5cmFtaWRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHB5cmFtaWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRQeXJhbWlkKGNvbXBldGl0aW9uSWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcHlyYW1pZCcsIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBweXJhbWlkcyBmcm9tIHRoZSBkYXRhYmFzZSB0aGF0IGEgcGFydGljdWxhciB1c2VyIGlzIGluY2x1ZGVkIGluXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3VzZXJJZH0gdGhlIHVzZXIgaWQgZm9yIHRoZSByZXF1ZXN0ZWQgdXNlclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gcHlyYW1pZHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRQeXJhbWlkc0ZvclVzZXIodXNlcklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3B5cmFtaWRzL3VzZXInLCB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIHVzZXJJZDogdXNlcklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGFjdGl2ZSBweXJhbWlkcyBmcm9tIHRoZSBkYXRhYmFzZVxuICAgICAqXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBweXJhbWlkc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFB5cmFtaWRzKCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9weXJhbWlkcycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVB5cmFtaWQocHlyYW1pZCkge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcHlyYW1pZHMvY3JlYXRlJywge1xuICAgICAgICBweXJhbWlkOiBweXJhbWlkXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVQeXJhbWlkKHB5cmFtaWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3B5cmFtaWRzL3VwZGF0ZScsIHtcbiAgICAgICAgcHlyYW1pZDogcHlyYW1pZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVsZXRlUHlyYW1pZChjb21wZXRpdGlvbklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZGVsZXRlKCcvYXBpL3B5cmFtaWRzL2RlbGV0ZScsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3dhcFBvc2l0aW9ucyhjb21wZXRpdGlvbklkLCBjaGFsbGVuZ2VyLCBvcHBvbmVudCkge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcHlyYW1pZHMvc3dhcFBvc2l0aW9ucycsIHtcbiAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgY2hhbGxlbmdlcjogY2hhbGxlbmdlcixcbiAgICAgICAgb3Bwb25lbnQ6IG9wcG9uZW50XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRQbGF5ZXJUb1B5cmFtaWQoY29tcGV0aXRpb25JZCwgcGxheWVyKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9weXJhbWlkcy9hZGRQbGF5ZXInLCB7XG4gICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgIHBsYXllcjogcGxheWVyXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRQbGF5ZXJUb1B5cmFtaWRSZXF1ZXN0KGNvbXBldGl0aW9uLCBwbGF5ZXIpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3B5cmFtaWRzL2FkZFBsYXllclJlcXVlc3QnLCB7XG4gICAgICAgIGNvbXBldGl0aW9uOiBjb21wZXRpdGlvbixcbiAgICAgICAgcGxheWVyOiBwbGF5ZXJcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZWRQbGF5ZXJGcm9tUHlyYW1pZChjb21wZXRpdGlvbklkLCByZW1vdmVkUGxheWVyLCBwbGF5ZXJzKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9weXJhbWlkcy9yZW1vdmVQbGF5ZXInLCB7XG4gICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgIHJlbW92ZWRQbGF5ZXI6IHJlbW92ZWRQbGF5ZXIsXG4gICAgICAgIHBsYXllcnM6IHBsYXllcnNcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcHJvdmVQZW5kaW5nUGxheWVyKGNvbXBldGl0aW9uSWQsIHBsYXllcikge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcHlyYW1pZHMvYXBwcm92ZVBsYXllcicsIHtcbiAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgcGxheWVyOiBwbGF5ZXJcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbnlQZW5kaW5nUGxheWVyKGNvbXBldGl0aW9uSWQsIHBsYXllcikge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcHlyYW1pZHMvZGVueVBsYXllcicsIHtcbiAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgcGxheWVyOiBwbGF5ZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdBZG1pbkN0cmwnLCBBZG1pbkN0cmwpO1xuXG4gIGZ1bmN0aW9uIEFkbWluQ3RybCgkc2NvcGUsICRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkZmlsdGVyLCBweXJhbWlkc1NlcnZpY2UsIGlkZW50aXR5U2VydmljZSwgbm90aWZ5U2VydmljZSwgY2hhbGxlbmdlc1NlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmNvbXBldGl0aW9uSWQgPSBudWxsO1xuICAgIHZtLnVwZGF0ZVB5cmFtaWRPcGVuU3RhdHVzID0gdXBkYXRlUHlyYW1pZE9wZW5TdGF0dXM7XG4gICAgdm0uZGVsZXRlUHlyYW1pZCA9IGRlbGV0ZVB5cmFtaWQ7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBpZiAoJHN0YXRlUGFyYW1zLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgdm0uY29tcGV0aXRpb25JZCA9ICRzdGF0ZVBhcmFtcy5jb21wZXRpdGlvbklkO1xuICAgICAgICByZWZyZXNoUHlyYW1pZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHN0YXRlLmdvKCdweXJhbWlkcy5teVB5cmFtaWRzJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVmcmVzaFB5cmFtaWQoKSB7XG4gICAgICBweXJhbWlkc1NlcnZpY2UuZ2V0UHlyYW1pZCh2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChweXJhbWlkKSB7XG4gICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGlzIHVzZXIgaXMgYW4gYWRtaW4gb2YgdGhpcyBjb21wZXRpdGlvblxuICAgICAgICBpZiAocHlyYW1pZC5kYXRhICYmIF8uc29tZShweXJhbWlkLmRhdGEuYWRtaW5zLCBbJ19pZCcsIGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWRdKSkge1xuICAgICAgICAgIHZtLmlzQWRtaW4gPSB0cnVlO1xuICAgICAgICAgIC8vIERpc3BsYXkgdGhlIHBsYXllcnMgaW4gdGhlIHByb3BlciBvcmRlclxuICAgICAgICAgIHB5cmFtaWQuZGF0YS5wbGF5ZXJzID0gJGZpbHRlcignb3JkZXJCeScpKHB5cmFtaWQuZGF0YS5wbGF5ZXJzLCAncG9zaXRpb24nKTtcbiAgICAgICAgICB2bS5weXJhbWlkID0gcHlyYW1pZC5kYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRzdGF0ZS5nbygncHlyYW1pZHMubXlQeXJhbWlkcycpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmdldENvbXBsZXRlZENoYWxsZW5nZXNCeUNvbXBldGl0aW9uKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKGNoYWxsZW5nZXMpIHtcbiAgICAgICAgdm0uY2hhbGxlbmdlcyA9IGNoYWxsZW5nZXMuZGF0YTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFBlcmZvcm0gdGhlIHVwZGF0ZXMgdGhhdCB3ZXJlIHJlcXVzdGVkXG4gICAgZnVuY3Rpb24gdXBkYXRlUHlyYW1pZE9wZW5TdGF0dXMoKSB7XG4gICAgICBweXJhbWlkc1NlcnZpY2UuZ2V0UHlyYW1pZCh2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChweXJhbWlkKSB7XG4gICAgICAgIHZhciB1cGRhdGVkUHlyYW1pZCA9IHB5cmFtaWQuZGF0YTtcbiAgICAgICAgdXBkYXRlZFB5cmFtaWQub3BlbiA9IHZtLnB5cmFtaWQub3BlbjtcbiAgICAgICAgcHlyYW1pZHNTZXJ2aWNlLnVwZGF0ZVB5cmFtaWQodXBkYXRlZFB5cmFtaWQpO1xuICAgICAgfSk7ICAgICAgXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVsZXRlUHlyYW1pZCgpIHtcbiAgICAgIHN3YWwoe1xuICAgICAgICB0aXRsZTogJ0RlbGV0ZSBDb21wZXRpdGlvbj8nLFxuICAgICAgICB0ZXh0OiAnVGhpcyBjYW4gbm90IGJlIHVuZG9uZScsXG4gICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXG4gICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnRGVsZXRlJyxcbiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ05ldmVybWluZCcsXG4gICAgICAgIGNsb3NlT25Db25maXJtOiB0cnVlLFxuICAgICAgICBjbG9zZU9uQ2FuY2VsOiB0cnVlXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHB5cmFtaWRzU2VydmljZS5kZWxldGVQeXJhbWlkKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRzdGF0ZS5nbygncHlyYW1pZHMubXlQeXJhbWlkcycpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czpweXJhbWlkX3VwZGF0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNoYWxsZW5nZURldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oY2hhbGxlbmdlRGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgIHJlZnJlc2hQeXJhbWlkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6cHlyYW1pZF9kZWxldGVkJywgZnVuY3Rpb24gKF8sIGNoYWxsZW5nZURldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5pbmZvKGNoYWxsZW5nZURldGFpbHMuZGVzY3JpcHRpb24pO1xuICAgICAgICAkc3RhdGUuZ28oJ3B5cmFtaWRzLm15UHlyYW1pZHMnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSkoKTsiLCIvKipcbiAqIENyZWF0ZXMgYSBweXJhbWlkXG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0NyZWF0ZVB5cmFtaWRDdHJsJywgQ3JlYXRlUHlyYW1pZEN0cmwpO1xuXG4gIGZ1bmN0aW9uIENyZWF0ZVB5cmFtaWRDdHJsKCRzdGF0ZSwgdXNlclNlcnZpY2UsIHB5cmFtaWRzU2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlKSB7XG4gICAgdmFyIGJyZWFrUG9pbnRzID0gW107XG4gICAgdmFyIG1heExldmVscyA9IDEwO1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0ubmV3UHlyYW1pZCA9IHtcbiAgICAgIHBsYXllcnM6IFtdLFxuICAgICAgb3BlbjogZmFsc2VcbiAgICB9O1xuICAgIHZtLmF2YWlsYWJsZVBsYXllcnMgPSBbXTtcbiAgICB2bS5hZGRlZFBsYXllcnMgPSBbXTtcbiAgICB2bS5jcmVhdGVQeXJhbWlkID0gY3JlYXRlUHlyYW1pZDtcbiAgICB2bS5hZGRQbGF5ZXIgPSBhZGRQbGF5ZXI7XG4gICAgdm0ucmVtb3ZlUGxheWVyID0gcmVtb3ZlUGxheWVyO1xuICAgIHZtLnJlb3JkZXJQbGF5ZXJzID0gcmVvcmRlclBsYXllcnM7XG4gICAgdm0ubmV3UHlyYW1pZC5mb3JmZWl0RGF5cyA9IDE7XG5cbiAgICBhY3RpdmF0ZSgpO1xuICAgIFxuICAgIC8qKlxuICAgICAqIFJ1bnMgb24gY29udHJvbGxlciBpbnN0YW50aWF0aW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICB1c2VyU2VydmljZS5nZXRBbGxVc2VycygpLnRoZW4oZnVuY3Rpb24gKHVzZXJzKSB7XG4gICAgICAgIHZtLmF2YWlsYWJsZVBsYXllcnMgPSB1c2Vycy5kYXRhO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIENyZWF0ZSBicmVhayBwb2ludHMgYXJyYXlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF4TGV2ZWxzOyBpKyspIHtcbiAgICAgICAgYnJlYWtQb2ludHMucHVzaCgoKChpICogKGkgKyAxKSkgLyAyKSkgKyAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgcGxheWVyIHRvIHRoZSBuZXcgcHlyYW1pZFxuICAgICAqIENoZWNrcyB0byBtYWtlIHN1cmUgeW91IGFyZSBub3QgYWRkaW5nIHRvbyBtYW55IHBsYXllcnNcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IHBsYXllclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZFBsYXllcihwbGF5ZXIpIHtcbiAgICAgIHBsYXllci5wb3NpdGlvbiA9IHZtLmFkZGVkUGxheWVycy5sZW5ndGggKyAxO1xuICAgICAgdm0uYWRkZWRQbGF5ZXJzLnB1c2goXy5yZW1vdmUodm0uYXZhaWxhYmxlUGxheWVycywge19pZDogcGxheWVyLl9pZH0pWzBdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgcHJldml1b3NseSBhZGRlZCBwbGF5ZXIgZnJvbSB0aGUgcHlyYW1pZFxuICAgICAqIEBwYXJhbSAge29iamVjdH0gcGxheWVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlUGxheWVyKHBsYXllcikge1xuICAgICAgdm0uYXZhaWxhYmxlUGxheWVycy5wdXNoKF8ucmVtb3ZlKHZtLmFkZGVkUGxheWVycywge19pZDogcGxheWVyLl9pZH0pWzBdKTtcbiAgICAgIHJlb3JkZXJQbGF5ZXJzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciB0aGUgcGxheWVycyBiYXNlZCBvbiB0aGUgZHJhZy1kcm9wXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlclBsYXllcnMoKSB7XG4gICAgICB2YXIgaSA9IDE7XG4gICAgICBfLmZvckVhY2godm0uYWRkZWRQbGF5ZXJzLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgIHBsYXllci5wb3NpdGlvbiA9IGk7XG4gICAgICAgICsraTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgcHlyYW1pZFxuICAgICAqIEBwYXJhbSAge29iamVjdH0gcHlyYW1pZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVB5cmFtaWQocHlyYW1pZCkge1xuICAgICAgYW5ndWxhci5mb3JFYWNoKHZtLmFkZGVkUGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICB2YXIgYWRkUGxheWVyID0ge1xuICAgICAgICAgIF9pZDogcGxheWVyLl9pZCxcbiAgICAgICAgICBlbWFpbDogcGxheWVyLnVzZXJuYW1lLFxuICAgICAgICAgIGZpcnN0TmFtZTogcGxheWVyLmZpcnN0TmFtZSxcbiAgICAgICAgICBsYXN0TmFtZTogcGxheWVyLmxhc3ROYW1lLFxuICAgICAgICAgIHBvc2l0aW9uOiBwbGF5ZXIucG9zaXRpb25cbiAgICAgICAgfTtcbiAgICAgICAgcHlyYW1pZC5wbGF5ZXJzLnB1c2goYWRkUGxheWVyKTtcbiAgICAgIH0pO1xuICAgICAgcHlyYW1pZC5hZG1pbnMgPSBbe1xuICAgICAgICBfaWQ6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWQsXG4gICAgICAgIGVtYWlsOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIudXNlcm5hbWUsXG4gICAgICAgIGZpcnN0TmFtZTogaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLmZpcnN0TmFtZSxcbiAgICAgICAgbGFzdE5hbWU6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5sYXN0TmFtZSxcbiAgICAgICAgcHJpbWFyeTogdHJ1ZVxuICAgICAgfV07XG5cbiAgICAgIC8vIEZpZ3VyZSBvdXQgdGhlIG51bWJlciBvZiBsZXZlbHMgYmFzZWQgb24gdGhlIG51bWJlciBvZiBwbGF5ZXJzXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJyZWFrUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChweXJhbWlkLnBsYXllcnMubGVuZ3RoIDwgYnJlYWtQb2ludHNbaV0pIHtcbiAgICAgICAgICBweXJhbWlkLmxldmVscyA9IGk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHlyYW1pZHNTZXJ2aWNlLmNyZWF0ZVB5cmFtaWQocHlyYW1pZCkudGhlbihmdW5jdGlvbiAobmV3UHlyYW1pZCkge1xuICAgICAgICAkc3RhdGUuZ28oJ3B5cmFtaWRzLnZpZXcnLCB7XG4gICAgICAgICAgY29tcGV0aXRpb25JZDogbmV3UHlyYW1pZC5kYXRhLl9pZFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdNeVB5cmFtaWRzQ3RybCcsIE15UHlyYW1pZHNDdHJsKTtcblxuICBmdW5jdGlvbiBNeVB5cmFtaWRzQ3RybCgkc2NvcGUsIHB5cmFtaWRzU2VydmljZSwgY2hhbGxlbmdlc1NlcnZpY2UsIGlkZW50aXR5U2VydmljZSwgbm90aWZ5U2VydmljZSkge1xuICAgIHZhciBteVB5cmFtaWRzID0gW107XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5hY3RpdmVDaGFsbGVuZ2UgPSBudWxsO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgZ2V0UHlyYW1pZHNGb3JVc2VyKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UHlyYW1pZHNGb3JVc2VyKCkge1xuICAgICAgbXlQeXJhbWlkcyA9IFtdO1xuICAgICAgdm0uYWN0aXZlQ2hhbGxlbmdlID0gbnVsbDtcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgcHlyYW1pZHNTZXJ2aWNlLmdldFB5cmFtaWRzRm9yVXNlcihpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuX2lkKS50aGVuKGZ1bmN0aW9uIChweXJhbWlkcykge1xuICAgICAgICAgIHZtLnB5cmFtaWRzID0gcHlyYW1pZHMuZGF0YTtcbiAgICAgICAgICBfLmZvckVhY2godm0ucHlyYW1pZHMsIGZ1bmN0aW9uKHB5cmFtaWQpIHtcbiAgICAgICAgICAgIG15UHlyYW1pZHMucHVzaChweXJhbWlkLl9pZCk7XG4gICAgICAgICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXIocHlyYW1pZC5faWQsIGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWQpLnRoZW4oZnVuY3Rpb24gKGNoYWxsZW5nZSkge1xuICAgICAgICAgICAgICBpZiAoY2hhbGxlbmdlLmRhdGEpIHtcbiAgICAgICAgICAgICAgICBweXJhbWlkLmFjdGl2ZUNoYWxsZW5nZSA9IGNoYWxsZW5nZS5kYXRhO1xuICAgICAgICAgICAgICAgIGlmIChweXJhbWlkLmFjdGl2ZUNoYWxsZW5nZS50aW1lTGltaXQgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgIHB5cmFtaWQuYWN0aXZlQ2hhbGxlbmdlLmV4cGlyZXMgPSAobW9tZW50KCkuZGlmZihtb21lbnQocHlyYW1pZC5hY3RpdmVDaGFsbGVuZ2UuY3JlYXRlZCkuYWRkKHB5cmFtaWQuYWN0aXZlQ2hhbGxlbmdlLnRpbWVMaW1pdCwgJ2QnKSwncycpKSAqIC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czpweXJhbWlkX3VwZGF0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKG15UHlyYW1pZHMuaW5kZXhPZihjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQpID49IDApIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5pbmZvKGNoYWxsZW5nZURldGFpbHMuZGVzY3JpcHRpb24pO1xuICAgICAgICBnZXRQeXJhbWlkc0ZvclVzZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdQeXJhbWlkQ3RybCcsIFB5cmFtaWRDdHJsKTtcblxuICBmdW5jdGlvbiBQeXJhbWlkQ3RybCgkc2NvcGUsICRzdGF0ZSwgJHN0YXRlUGFyYW1zLCBweXJhbWlkc1NlcnZpY2UsIG5vdGlmeVNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmNvbXBldGl0aW9uSWQgPSBudWxsO1xuICAgIHZtLnB5cmFtaWQgPSBudWxsO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIHZtLmNvbXBldGl0aW9uSWQgPSAkc3RhdGVQYXJhbXMuY29tcGV0aXRpb25JZDtcblxuICAgICAgICBweXJhbWlkc1NlcnZpY2UuZ2V0UHlyYW1pZCh2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChweXJhbWlkKSB7XG4gICAgICAgICAgaWYgKHB5cmFtaWQuZGF0YSkge1xuICAgICAgICAgICAgdm0ucHlyYW1pZCA9IHB5cmFtaWQuZGF0YTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCdweXJhbWlkcy5teVB5cmFtaWRzJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6cHlyYW1pZF9kZWxldGVkJywgZnVuY3Rpb24gKF8sIGNoYWxsZW5nZURldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5pbmZvKGNoYWxsZW5nZURldGFpbHMuZGVzY3JpcHRpb24pO1xuICAgICAgICAkc3RhdGUuZ28oJ3B5cmFtaWRzLm15UHlyYW1pZHMnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdQeXJhbWlkc0N0cmwnLCBQeXJhbWlkc0N0cmwpO1xuXG4gIGZ1bmN0aW9uIFB5cmFtaWRzQ3RybChweXJhbWlkc1NlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnB5cmFtaWRzID0gW107XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBweXJhbWlkc1NlcnZpY2UuZ2V0UHlyYW1pZHMoKS50aGVuKGZ1bmN0aW9uIChweXJhbWlkcykge1xuICAgICAgICB2bS5weXJhbWlkcyA9IHB5cmFtaWRzLmRhdGE7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignU3RhdHNDdHJsJywgU3RhdHNDdHJsKTtcblxuICBmdW5jdGlvbiBTdGF0c0N0cmwoJHNjb3BlLCAkc3RhdGVQYXJhbXMsICRzdGF0ZSwgcHlyYW1pZHNTZXJ2aWNlLCBub3RpZnlTZXJ2aWNlLCBjaGFsbGVuZ2VzU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uY29tcGV0aXRpb25JZCA9IG51bGw7XG4gICAgdm0ucHlyYW1pZCA9IHt9O1xuICAgIHZtLnBsYXllcnNSZXN1bHRzID0gW107XG4gICAgdm0uY2hhbGxlbmdlcyA9IFtdO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIHZtLmNvbXBldGl0aW9uSWQgPSAkc3RhdGVQYXJhbXMuY29tcGV0aXRpb25JZDtcbiAgICAgICAgcmVmcmVzaFB5cmFtaWQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWZyZXNoUHlyYW1pZCgpIHtcbiAgICAgIHB5cmFtaWRzU2VydmljZS5nZXRQeXJhbWlkKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKHB5cmFtaWQpIHtcbiAgICAgICAgaWYgKHB5cmFtaWQuZGF0YSkge1xuICAgICAgICAgIHZtLnB5cmFtaWQgPSBweXJhbWlkLmRhdGE7XG5cbiAgICAgICAgICBfLmZvckVhY2godm0ucHlyYW1pZC5wbGF5ZXJzLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRQbGF5ZXJSZXN1bHRzQnlDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkLCBwbGF5ZXIuX2lkKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICAgICAgICAgIHBsYXllci5yZXN1bHRzID0gcmVzdWx0cy5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJHN0YXRlLmdvKCdweXJhbWlkcy5teVB5cmFtaWRzJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZ2V0Q29tcGxldGVkQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24odm0uY29tcGV0aXRpb25JZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlcykge1xuICAgICAgICB2bS5jaGFsbGVuZ2VzID0gY2hhbGxlbmdlcy5kYXRhO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOnB5cmFtaWRfdXBkYXRlZCcsIGZ1bmN0aW9uIChfLCBjaGFsbGVuZ2VEZXRhaWxzKSB7XG4gICAgICBpZiAodm0uY29tcGV0aXRpb25JZCA9PT0gY2hhbGxlbmdlRGV0YWlscy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuaW5mbyhjaGFsbGVuZ2VEZXRhaWxzLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgcmVmcmVzaFB5cmFtaWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czpweXJhbWlkX2RlbGV0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNoYWxsZW5nZURldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oY2hhbGxlbmdlRGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgICRzdGF0ZS5nbygncHlyYW1pZHMubXlQeXJhbWlkcycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ1VzZXJDdHJsJywgVXNlckN0cmwpO1xuXG4gIGZ1bmN0aW9uIFVzZXJDdHJsKGlkZW50aXR5U2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uaW5kZW50aXR5ID0gaWRlbnRpdHlTZXJ2aWNlO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge31cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BBY3RpdmVDaGFsbGVuZWdlcycsIGtwQWN0aXZlQ2hhbGxlbmVnZXMpO1xuXG4gIGZ1bmN0aW9uIGtwQWN0aXZlQ2hhbGxlbmVnZXMoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBzY29wZToge1xuICAgICAgICBweXJhbWlkOiAnPSdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jaGFsbGVuZ2VzL2NvbXBvbmVudHMvYWN0aXZlLWNoYWxsZW5nZXMuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoJHNjb3BlLCBjaGFsbGVuZ2VzU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uY2hhbGxlbmdlcyA9IFtdO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgJHNjb3BlLiR3YXRjaCgndm0ucHlyYW1pZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHZtLnB5cmFtaWQpIHtcbiAgICAgICAgICBnZXRBY3RpdmVDaGFsbGVuZ2VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFjdGl2ZUNoYWxsZW5nZXMoKSB7XG4gICAgICB2bS5jaGFsbGVuZ2VzID0gW107XG4gICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRBY3RpdmVDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbih2bS5weXJhbWlkLl9pZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlcykge1xuICAgICAgICBpZiAoY2hhbGxlbmdlcy5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2bS5jaGFsbGVuZ2VzID0gY2hhbGxlbmdlcy5kYXRhO1xuICAgICAgICAgIF8uZm9yRWFjaCh2bS5jaGFsbGVuZ2VzLCBmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG4gICAgICAgICAgICBpZiAoY2hhbGxlbmdlLnRpbWVMaW1pdCAhPT0gMCkge1xuICAgICAgICAgICAgICBjaGFsbGVuZ2UuZXhwaXJlcyA9IChtb21lbnQoKS5kaWZmKG1vbWVudChjaGFsbGVuZ2UuY3JlYXRlZCkuYWRkKGNoYWxsZW5nZS50aW1lTGltaXQsICdkJyksJ3MnKSkgKiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdrcENvbXBsZXRlZENoYWxsZW5lZ2VzJywga3BDb21wbGV0ZWRDaGFsbGVuZWdlcyk7XG5cbiAgZnVuY3Rpb24ga3BDb21wbGV0ZWRDaGFsbGVuZWdlcygpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGNvbXBldGl0aW9uSWQ6ICdAJyxcbiAgICAgICAgYWxsb3dEZWxldGU6ICc9JyxcbiAgICAgICAgY2hhbGxlbmdlczogJz0nXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVVcmw6ICcvY2hhbGxlbmdlcy9jb21wb25lbnRzL2NvbXBsZXRlZC1jaGFsbGVuZ2VzLmh0bWwnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKCRzY29wZSwgJHN0YXRlLCBjaGFsbGVuZ2VzU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uY2hhbGxlbmdlcyA9IFtdO1xuICAgIHZtLmRlbGV0ZUNoYWxsZW5nZSA9IGRlbGV0ZUNoYWxsZW5nZTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICRzY29wZS4kd2F0Y2goJ3ZtLmNoYWxsZW5nZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHZtLmNoYWxsZW5nZXMgJiYgdm0uY2hhbGxlbmdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZGlzcGxheUNvbXBsZXRlZENoYWxsZW5nZXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlzcGxheUNvbXBsZXRlZENoYWxsZW5nZXMoKSB7XG4gICAgICBfLmZvckVhY2godm0uY2hhbGxlbmdlcywgZnVuY3Rpb24gKGNoYWxsZW5nZSkge1xuICAgICAgICBjaGFsbGVuZ2UubG9zZXIgPSBjaGFsbGVuZ2Uud2lubmVyID09PSAnY2hhbGxlbmdlcicgPyAnb3Bwb25lbnQnIDogJ2NoYWxsZW5nZXInO1xuICAgICAgICBjaGFsbGVuZ2Uud2hlbkNvbXBsZXRlZCA9IG1vbWVudChjaGFsbGVuZ2UuY29tcGxldGVkKS5jYWxlbmRhcihudWxsLCB7XG4gICAgICAgICAgc2FtZURheTogJ1tUb2RheV0nLFxuICAgICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3ddJyxcbiAgICAgICAgICBuZXh0V2VlazogJ2RkZGQnLFxuICAgICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5XScsXG4gICAgICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCcsXG4gICAgICAgICAgc2FtZUVsc2U6ICdERC9NTS9ZWVlZJ1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUNoYWxsZW5nZShjaGFsbGVuZ2VJZCwgJGluZGV4KSB7XG4gICAgICBjaGFsbGVuZ2VzU2VydmljZS5kZWxldGVDaGFsbGVuZ2Uodm0uY29tcGV0aXRpb25JZCwgY2hhbGxlbmdlSWQpLnRoZW4gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdm0uY2hhbGxlbmdlcy5zcGxpY2UoJGluZGV4LCAxKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BQbGF5ZXJPdmVyYWxsUmVzdWx0cycsIGtwUGxheWVyT3ZlcmFsbFJlc3VsdHMpO1xuXG4gIGZ1bmN0aW9uIGtwUGxheWVyT3ZlcmFsbFJlc3VsdHMoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBzY29wZToge1xuICAgICAgICBwbGF5ZXI6ICc9J1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NoYWxsZW5nZXMvY29tcG9uZW50cy9wbGF5ZXItb3ZlcmFsbC1yZXN1bHRzLmh0bWwnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKCRzY29wZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0ubWF4TGV2ZWxzID0gMTA7XG4gICAgdm0ud2lucyA9IHtcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgYXNDaGFsbGVuZ2VyOiAwLFxuICAgICAgYXNPcHBvbmVudDogMCxcbiAgICAgIGJ5Rm9yZmVpdDogMFxuICAgIH07XG4gICAgdm0ubG9zZXMgPSB7XG4gICAgICB0b3RhbDogMCxcbiAgICAgIGFzQ2hhbGxlbmdlcjogMCxcbiAgICAgIGFzT3Bwb25lbnQ6IDAsXG4gICAgICBieUZvcmZlaXQ6IDBcbiAgICB9O1xuICAgIHZtLnN0cmVhayA9IHtcbiAgICAgIHR5cGU6IG51bGwsXG4gICAgICB2YWx1ZTogMFxuICAgIH07XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAkc2NvcGUuJHdhdGNoKCd2bS5wbGF5ZXIucmVzdWx0cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHZtLnBsYXllcikge1xuICAgICAgICAgIGFzc2lnbnBsYXllcnNUb0xldmVscyh2bS5wbGF5ZXIpO1xuICAgICAgICAgIGNhbGN1bGF0ZVN0cmVhayh2bS5wbGF5ZXIpO1xuICAgICAgICAgIGNhbGN1YXRlV2luQW5kTG9zZXModm0ucGxheWVyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXNzaWducGxheWVyc1RvTGV2ZWxzKHBsYXllcikge1xuICAgICAgLy8gRGV0ZXJtaW5lIGFsbCB0aGUgYnJlYWsgcG9pbnRzIHRvIGZpZ3VyZSBvdXQgbGV2ZWxzXG4gICAgICB2YXIgYnJlYWtQb2ludHMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0ubWF4TGV2ZWxzOyBpKyspIHtcbiAgICAgICAgYnJlYWtQb2ludHMucHVzaCgoKChpICogKGkgKyAxKSkgLyAyKSkgKyAxKTtcbiAgICAgIH1cblxuICAgICAgLy8gRGVmYXVsdCBhbGwgcGxheWVycyB0byB0aGUgbG93ZXN0IGxldmVsXG4gICAgICBwbGF5ZXIubGV2ZWwgPSBicmVha1BvaW50cy5sZW5ndGg7XG4gICAgICAvLyBOb3cgY2hlY2sgdG8gc2VlIGlmIHRoZSBwbGF5ZXIgaXMgYXQgYSBoaWdoZXIgbGV2ZWxcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYnJlYWtQb2ludHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHBsYXllci5wb3NpdGlvbiA8IGJyZWFrUG9pbnRzW2ogKyAxXSkge1xuICAgICAgICAgIHBsYXllci5sZXZlbCA9IGJyZWFrUG9pbnRzLmluZGV4T2YoYnJlYWtQb2ludHNbal0pICsgMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVN0cmVhayhwbGF5ZXIpIHtcbiAgICAgIC8vIEZpZ3VyZSBvdXQgdGhlIHBsYXllcidzIGN1cnJlbnQgc3RyZWFrXG4gICAgICB2YXIgc3RyZWFrID0gMDtcbiAgICAgIHZhciBjb250aW51ZVN0cmVhayA9IHRydWU7XG4gICAgICB2YXIgc3RyZWFrVHlwZTtcbiAgICAgIF8uZm9yRWFjaChwbGF5ZXIucmVzdWx0cywgZnVuY3Rpb24gKGNoYWxsZW5nZSkge1xuICAgICAgICBpZiAoY29udGludWVTdHJlYWspIHtcbiAgICAgICAgICAvLyBXaW5uaW5nIFN0cmVha1xuICAgICAgICAgIGlmICgoY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInICYmIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLl9pZCA9PT0gcGxheWVyLl9pZCkgfHxcbiAgICAgICAgICAgIChjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnICYmIGNoYWxsZW5nZS5vcHBvbmVudC5faWQgPT09IHBsYXllci5faWQpKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGV5IGFyZSBub3QgYWxyZWFkeSBvbiBhIGxvc2luZyBzdHJlYWsgYW5kIDEgdG8gdGhlaXIgd2lubmluZyBzdHJlYWtcbiAgICAgICAgICAgIGlmIChzdHJlYWtUeXBlICE9PSAnbG9zaW5nJykge1xuICAgICAgICAgICAgICBzdHJlYWsgKz0gMTtcbiAgICAgICAgICAgICAgc3RyZWFrVHlwZSA9ICd3aW5uaW5nJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlU3RyZWFrID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgLy8gTG9zaW5nIFN0cmVha1xuICAgICAgICAgIH0gZWxzZSBpZiAoKGNoYWxsZW5nZS53aW5uZXIgPT09ICdvcHBvbmVudCcgJiYgY2hhbGxlbmdlLmNoYWxsZW5nZXIuX2lkID09PSBwbGF5ZXIuX2lkKSB8fFxuICAgICAgICAgICAgKGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJyAmJiBjaGFsbGVuZ2Uub3Bwb25lbnQuX2lkID09PSBwbGF5ZXIuX2lkKSkge1xuICAgICAgICAgICAgLy8gSWYgdGhleSBhcmUgbm90IGFscmVhZHkgb24gYSB3aW5uaW5nIHN0cmVhayBhbmQgMSB0byB0aGVpciBsb3Npbmcgc3RyZWFrXG4gICAgICAgICAgICBpZiAoc3RyZWFrVHlwZSAhPT0gJ3dpbm5pbmcnKSB7XG4gICAgICAgICAgICAgIHN0cmVhayArPSAxO1xuICAgICAgICAgICAgICBzdHJlYWtUeXBlID0gJ2xvc2luZyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb250aW51ZVN0cmVhayA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2bS5zdHJlYWsgPSB7XG4gICAgICAgICAgdHlwZTogc3RyZWFrVHlwZSxcbiAgICAgICAgICB2YWx1ZTogc3RyZWFrXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxjdWF0ZVdpbkFuZExvc2VzKHBsYXllcikge1xuICAgICAgLy8gRmlndXJlIG91dCB3aW5zIGFuZCBsb3Nlc1xuICAgICAgdm0ud2lucy5hc09wcG9uZW50ID0gXy5zaXplKF8uZmlsdGVyKHBsYXllci5yZXN1bHRzLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgY2hhbGxlbmdlLm9wcG9uZW50Ll9pZCA9PT0gcGxheWVyLl9pZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnXG4gICAgICAgICk7XG4gICAgICB9KSk7XG5cbiAgICAgIHZtLndpbnMuYXNDaGFsbGVuZ2VyID0gXy5zaXplKF8uZmlsdGVyKHBsYXllci5yZXN1bHRzLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgY2hhbGxlbmdlLmNoYWxsZW5nZXIuX2lkID09PSBwbGF5ZXIuX2lkICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJ1xuICAgICAgICApO1xuICAgICAgfSkpO1xuXG4gICAgICB2bS53aW5zLnRvdGFsID0gdm0ud2lucy5hc0NoYWxsZW5nZXIgKyB2bS53aW5zLmFzT3Bwb25lbnQ7XG5cbiAgICAgIHZtLndpbnMuYnlGb3JmZWl0ID0gXy5zaXplKF8uZmlsdGVyKHBsYXllci5yZXN1bHRzLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgY2hhbGxlbmdlLmZvcmZlaXQgJiYgKChjaGFsbGVuZ2UuY2hhbGxlbmdlci5faWQgPT09IHBsYXllci5faWQgJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInKSB8fFxuICAgICAgICAgIChjaGFsbGVuZ2Uub3Bwb25lbnQuX2lkID09PSBwbGF5ZXIuX2lkICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdvcHBvbmVudCcpKVxuICAgICAgICApO1xuICAgICAgfSkpO1xuXG4gICAgICB2bS5sb3Nlcy5hc09wcG9uZW50ID0gXy5zaXplKF8uZmlsdGVyKHBsYXllci5yZXN1bHRzLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgY2hhbGxlbmdlLm9wcG9uZW50Ll9pZCA9PT0gcGxheWVyLl9pZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnY2hhbGxlbmdlcidcbiAgICAgICAgKTtcbiAgICAgIH0pKTtcblxuICAgICAgdm0ubG9zZXMuYXNDaGFsbGVuZ2VyID0gXy5zaXplKF8uZmlsdGVyKHBsYXllci5yZXN1bHRzLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgY2hhbGxlbmdlLmNoYWxsZW5nZXIuX2lkID09PSBwbGF5ZXIuX2lkICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdvcHBvbmVudCdcbiAgICAgICAgKTtcbiAgICAgIH0pKTtcblxuICAgICAgdm0ubG9zZXMudG90YWwgPSB2bS5sb3Nlcy5hc0NoYWxsZW5nZXIgKyB2bS5sb3Nlcy5hc09wcG9uZW50O1xuXG4gICAgICB2bS5sb3Nlcy5ieUZvcmZlaXQgPSBfLnNpemUoXy5maWx0ZXIocGxheWVyLnJlc3VsdHMsIGZ1bmN0aW9uKGNoYWxsZW5nZSkgeyBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBjaGFsbGVuZ2UuZm9yZmVpdCAmJiAoKGNoYWxsZW5nZS5jaGFsbGVuZ2VyLl9pZCA9PT0gcGxheWVyLl9pZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnKSB8fFxuICAgICAgICAgIChjaGFsbGVuZ2Uub3Bwb25lbnQuX2lkID09PSBwbGF5ZXIuX2lkICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJykpXG4gICAgICAgICk7XG4gICAgICB9KSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmZhY3RvcnkoJ2NoYWxsZW5nZXNTZXJ2aWNlJywgY2hhbGxlbmdlc1NlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIGNoYWxsZW5nZXNTZXJ2aWNlKCRodHRwKSB7XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBjcmVhdGVDaGFsbGVuZ2U6IGNyZWF0ZUNoYWxsZW5nZSxcbiAgICAgIGNvbXBsZXRlQ2hhbGxlbmdlOiBjb21wbGV0ZUNoYWxsZW5nZSxcbiAgICAgIGdldENoYWxsZW5nZXNCeUNvbXBldGl0aW9uOiBnZXRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbixcbiAgICAgIGdldEFjdGl2ZUNoYWxsZW5nZXNCeUNvbXBldGl0aW9uOiBnZXRBY3RpdmVDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbixcbiAgICAgIGdldEFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllcjogZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyLFxuICAgICAgZ2V0Q29tcGxldGVkQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb246IGdldENvbXBsZXRlZENoYWxsZW5nZXNCeUNvbXBldGl0aW9uLFxuICAgICAgZGVsZXRlQWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyOiBkZWxldGVBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXIsXG4gICAgICBkZWxldGVDaGFsbGVuZ2U6IGRlbGV0ZUNoYWxsZW5nZSxcbiAgICAgIGdldFBsYXllclJlc3VsdHNCeUNvbXBldGl0aW9uOiBnZXRQbGF5ZXJSZXN1bHRzQnlDb21wZXRpdGlvblxuICAgIH07XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoYWxsZW5nZShjaGFsbGVuZ2UpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2NoYWxsZW5nZXMvY3JlYXRlJywge1xuICAgICAgICBjaGFsbGVuZ2U6IGNoYWxsZW5nZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGxldGVDaGFsbGVuZ2UoY2hhbGxlbmdlKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jaGFsbGVuZ2VzL2NvbXBsZXRlJywgIHtcbiAgICAgICAgY2hhbGxlbmdlOiBjaGFsbGVuZ2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENoYWxsZW5nZXNCeUNvbXBldGl0aW9uKGNvbXBldGl0aW9uSWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY2hhbGxlbmdlcy9jb21wZXRpdGlvbicsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QWN0aXZlQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24oY29tcGV0aXRpb25JZCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jaGFsbGVuZ2VzL2FjdGl2ZS9jb21wZXRpdGlvbicsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyKGNvbXBldGl0aW9uSWQsIHBsYXllcklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2NoYWxsZW5nZXMvYWN0aXZlL2NvbXBldGl0aW9uL3BsYXllcicsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgICAgcGxheWVySWQ6IHBsYXllcklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvbXBsZXRlZENoYWxsZW5nZXNCeUNvbXBldGl0aW9uKGNvbXBldGl0aW9uSWQsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2NoYWxsZW5nZXMvY29tcGxldGVkL2NvbXBldGl0aW9uJywgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgICBsaW1pdDogbGltaXRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVsZXRlQWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyKGNvbXBldGl0aW9uSWQsIHBsYXllcklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZGVsZXRlKCcvYXBpL2NoYWxsZW5nZXMvYWN0aXZlL2NvbXBldGl0aW9uL3BsYXllci9kZWxldGUnLCAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkLFxuICAgICAgICAgIHBsYXllcklkOiBwbGF5ZXJJZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWxldGVDaGFsbGVuZ2UoY29tcGV0aXRpb25JZCwgY2hhbGxlbmdlSWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5kZWxldGUoJy9hcGkvY2hhbGxlbmdlcy9kZWxldGUnLCAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkLFxuICAgICAgICAgIGNoYWxsZW5nZUlkOiBjaGFsbGVuZ2VJZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQbGF5ZXJSZXN1bHRzQnlDb21wZXRpdGlvbihjb21wZXRpdGlvbklkLCBwbGF5ZXJJZCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jaGFsbGVuZ2VzL3Jlc3VsdHMvY29tcGV0aXRpb24vcGxheWVyJywgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgICBwbGF5ZXJJZDogcGxheWVySWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgnY092ZXJmbG93JywgY092ZXJmbG93KTtcblxuICBmdW5jdGlvbiBjT3ZlcmZsb3coc2Nyb2xsYmFyU2VydmljZSkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICByZXN0cmljdDogJ0MnLFxuICAgICAgbGluazogbGlua0Z1bmMsXG4gICAgfTtcblxuICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHZhciBzY3JvbGxheGlzID0gYXR0cnMuc2Nyb2xsYXhpcyB8fCAneSc7XG4gICAgICB2YXIgdGhlbWUgPSBhdHRycy50aGVtZSB8fCAnbWluaW1hbC1kYXJrJztcbiAgICAgIHZhciBtb3VzZXdoZWVsYXhpcyA9IGF0dHJzLm1vdXNld2hlZWxheGlzIHx8ICd5JztcbiAgICAgIGlmICghJCgnaHRtbCcpLmhhc0NsYXNzKCdpc21vYmlsZScpKSB7XG4gICAgICAgIHNjcm9sbGJhclNlcnZpY2UubWFsaWh1U2Nyb2xsKGVsZW1lbnQsIHRoZW1lLCBzY3JvbGxheGlzLCBtb3VzZXdoZWVsYXhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgndG9nZ2xlU3VibWVudScsIHRvZ2dsZVN1Ym1lbnUpO1xuXG4gIGZ1bmN0aW9uIHRvZ2dsZVN1Ym1lbnUoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBsaW5rOiBsaW5rRnVuYyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcblxuICAgIGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCkge1xuICAgICAgZWwuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBlbC5uZXh0KCkuc2xpZGVUb2dnbGUoMjAwKTtcbiAgICAgICAgZWwucGFyZW50KCkudG9nZ2xlQ2xhc3MoJ3RvZ2dsZWQnKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ3dhdmVzRWZmZWN0Jywgd2F2ZXNFZmZlY3QpO1xuXG4gIGZ1bmN0aW9uIHdhdmVzRWZmZWN0KCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICByZXN0cmljdDogJ0MnLFxuICAgICAgbGluazogbGlua0Z1bmMsXG4gICAgfTtcblxuICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQuaGFzQ2xhc3MoJ2J0bi1pY29uJykgfHwgZWxlbWVudC5oYXNDbGFzcygnYnRuLWZsb2F0JykpIHtcbiAgICAgICAgV2F2ZXMuYXR0YWNoKGVsZW1lbnQsIFsnd2F2ZXMtY2lyY2xlJ10pO1xuICAgICAgfSBlbHNlIGlmIChlbGVtZW50Lmhhc0NsYXNzKCdidG4tbGlnaHQnKSkge1xuICAgICAgICBXYXZlcy5hdHRhY2goZWxlbWVudCwgWyd3YXZlcy1saWdodCddKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFdhdmVzLmF0dGFjaChlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgV2F2ZXMuaW5pdCgpO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2ZnTGluZScsIGZnTGluZSk7XG5cbiAgZnVuY3Rpb24gZmdMaW5lKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICByZXN0cmljdDogJ0MnLFxuICAgICAgbGluazogbGlua0Z1bmMsXG4gICAgfTtcblxuICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWxlbWVudCkge1xuICAgICAgdmFyIGlucHV0ID0gZWxlbWVudC5jaGlsZHJlbigpLmZpcnN0KCk7XG4gICAgICB2YXIgaXNGbG9hdExhYmVsID0gZWxlbWVudC5wYXJlbnQoKS5oYXNDbGFzcygnZmctZmxvYXQnKTtcbiAgICAgIGlucHV0LmZvY3VzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnZmctdG9nZ2xlZCcpO1xuICAgICAgfSk7XG5cbiAgICAgIGlucHV0LmJsdXIoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzRmxvYXRMYWJlbCB8fCAoaXNGbG9hdExhYmVsICYmIGlucHV0LnZhbCgpLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdmZy10b2dnbGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
