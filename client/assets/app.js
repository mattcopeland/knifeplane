angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","LocalStorageModule","angular-sortable-view"]),function(){"use strict ";function e(e,t){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache",t.options({appendToBody:!0})}e.$inject=["$httpProvider","$uibTooltipProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e,t){function n(e){t.set("sidebarLocked",e)}var r=this;r.$state=e,r.lockSidebar=t.get("sidebarLocked"),r.toggleSidebarLocked=n}e.$inject=["$state","localStorageService"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,i,o){var a={superAdmin:n,admin:t,user:r};o.html5Mode(!0),i.otherwise("/"),i.when("/pyramids/","/pyramids"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("pyramids",{url:"/pyramids",views:{content:{controller:"PyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramids.html"}}}).state("pyramids.myPyramids",{url:"/my-pyramids",views:{"content@":{controller:"MyPyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/my-pyramids.html"}},resolve:{auth:a.user}}).state("pyramids.view",{url:"/view/:competitionId",views:{"content@":{controller:"PyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramid.html"}}}).state("pyramids.stats",{url:"/stats/:competitionId",views:{"content@":{controller:"StatsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/stats.html"}}}).state("pyramids.admin",{url:"/admin/:competitionId",views:{"content@":{controller:"AdminCtrl",controllerAs:"vm",templateUrl:"pyramids/views/admin.html"}},resolve:{auth:a.user}}).state("pyramids.create",{url:"/create",views:{"content@":{controller:"CreatePyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/create-pyramid.html"}},resolve:{auth:a.user}}).state("user",{url:"/user",views:{content:{controller:"UserCtrl",controllerAs:"vm",templateUrl:"users/views/user.html"}},resolve:{auth:a.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}}).state("verify",{url:"/verification",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("verification",{url:"/verification/:userId/:verificationToken",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}})}function t(e){return e.authorizeCurrentUserForRoute("admin")}function n(e){return e.authorizeCurrentUserForRoute("super-admin")}function r(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),t.$inject=["authService"],n.$inject=["authService"],r.$inject=["authService"]}(),function(){"use strict";function e(e,t,n){e.$on("$stateChangeError",function(e,n,r,i,o,a){"not authorized"===a&&(t.go("login"),t.previous=n,t.prevParams=r)}),e.$on("$stateChangeStart",function(){n.setSidebarStatus(!1)})}e.$inject=["$rootScope","$state","sidebarService"],angular.module("app").run(e)}(),function(){"use strict";function e(e,t,n,r,i,o){function a(e,r){var o=n.defer();return t.post("/login",{username:e,password:r}).then(function(e){e.data.success?(i.currentUser=e.data.user,o.resolve(!0)):"unverified"===e.data.message?o.resolve("unverified"):o.resolve(!1)}),o.promise}function l(e){var r=n.defer();return t.post("/api/users",{userData:e}).then(function(e){e.data?r.resolve(!0):r.resolve(!1)},function(e){"Error: Duplicate Username"===e.data.reason&&o.error("Sorry, an account already exists with that email address.")}),r.promise}function s(){var r=n.defer();return t.post("/logout",{logout:!0}).then(function(){i.currentUser=void 0,r.resolve(),e.go("home")}),r.promise}function c(e){return!!i.isAuthorized(e)||n.reject("not authorized")}function u(){return!!i.isAuthenticated()||n.reject("not authorized")}var d={authenticateUser:a,createUser:l,logout:s,authorizeCurrentUserForRoute:c,authenticatedUserForRoute:u};return d}e.$inject=["$state","$http","$q","userService","identityService","notifyService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e){function t(){return e.get("/api/users").then(function(e){return e})}function n(t,n){return e.get("/api/user/verification",{params:{userId:t,verificationToken:n}})}var r={getAllUsers:t,verifyUser:n};return r}e.$inject=["$http"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(e,t,n){function r(){}function i(r,i){t.authenticateUser(r,i).then(function(t){t?"unverified"===t?n.error("You must verify your email before you can login"):e.previous?(e.go(e.previous,e.prevParams),e.previous=null,e.prevParams=null):e.go("home"):n.error("Username / password combinaiton incorrect")})}var o=this;o.login=i,r()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){}function i(r){r.password!==r.confirmPassword?n.error("Passwords don't match!"):t.createUser(r).then(function(){e.go("verify")})}var o=this;o.register=i,r()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){t.userId&&t.verificationToken&&(i.verifying=!0,i.verified=null,n.verifyUser(t.userId,t.verificationToken).then(function(e){e.data?i.verified=!0:i.verified=!1}))}var i=this;i.verified=void 0,i.verifying=!1,r()}e.$inject=["$state","$stateParams","userService"],angular.module("app").controller("VerificationCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@"},templateUrl:"/challenges/components/active-challenges.html"};return e}function t(e,t){function n(){r()}function r(){i.challenges=[],t.getActiveChallengesByCompetition(i.competitionId).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){0!==e.timeLimit&&(e.expires=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1)}))})}var i=this;i.challenges=[],n(),e.$on("ws:challenge_created",function(e,t){i.competitionId===t.competitionId&&r()}),e.$on("ws:challenge_completed",function(e,t){i.competitionId===t.competitionId&&r()}),e.$on("ws:pyramid_updated",function(e,t){i.competitionId===t.competitionId&&r()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpActiveChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@",limit:"@"},templateUrl:"/challenges/components/completed-challenges.html"};return e}function t(e,t){function n(){r()}function r(){i.challenges=[],t.getCompletedChallengesByCompetition(i.competitionId,i.limit).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){e.loser="challenger"===e.winner?"opponent":"challenger",e.whenCompleted=moment(e.completed).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd",sameElse:"DD/MM/YYYY"})}))})}var i=this;i.challenges=[],n(),e.$on("ws:challenge_completed",function(e,t){i.competitionId===t.competitionId&&r()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpCompletedChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@",player:"="},templateUrl:"/challenges/components/player-overall-results.html"};return e}function t(e){function t(){n(r.competitionId,r.player._id)}function n(t,n){e.getPlayerResultsByCompetition(t,n).then(function(e){for(var t=[],i=0;i<r.maxLevels;i++)t.push(i*(i+1)/2+1);r.player.level=t.length;for(var o=0;o<t.length;o++)if(r.player.position<t[o+1]){r.player.level=t.indexOf(t[o])+1;break}var a,l=0,s=!0;_.forEach(e.data,function(e){s&&("challenger"===e.winner&&e.challenger._id===n||"opponent"===e.winner&&e.opponent._id===n?"losing"!==a?(l+=1,a="winning"):s=!1:("opponent"===e.winner&&e.challenger._id===n||"challenger"===e.winner&&e.opponent._id===n)&&("winning"!==a?(l+=1,a="losing"):s=!1)),r.streak={type:a,value:l}}),r.wins.asOpponent=_.size(_.filter(e.data,function(e){return e.opponent._id===n&&"opponent"===e.winner})),r.wins.asChallenger=_.size(_.filter(e.data,function(e){return e.challenger._id===n&&"challenger"===e.winner})),r.wins.total=r.wins.asChallenger+r.wins.asOpponent,r.wins.byForfeit=_.size(_.filter(e.data,function(e){return e.forfeit&&(e.challenger._id===n&&"challenger"===e.winner||e.opponent._id===n&&"opponent"===e.winner)})),r.loses.asOpponent=_.size(_.filter(e.data,function(e){return e.opponent._id===n&&"challenger"===e.winner})),r.loses.asChallenger=_.size(_.filter(e.data,function(e){return e.challenger._id===n&&"opponent"===e.winner})),r.loses.total=r.loses.asChallenger+r.loses.asOpponent,r.loses.byForfeit=_.size(_.filter(e.data,function(e){return e.forfeit&&(e.challenger._id===n&&"opponent"===e.winner||e.opponent._id===n&&"challenger"===e.winner)}))})}var r=this;r.maxLevels=10,r.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},r.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},r.streak={type:null,value:0},t()}t.$inject=["challengesService"],angular.module("app").directive("kpPlayerOverallResults",e)}(),function(){"use strict";function e(e){function t(t){return e.post("/api/challenges/create",{challenge:t})}function n(t){return e.post("/api/challenges/complete",{challenge:t})}function r(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function i(t){return e.get("/api/challenges/active/competition",{params:{competitionId:t}})}function o(t,n){return e.get("/api/challenges/active/competition/player",{params:{competitionId:t,playerId:n}})}function a(t,n){return e.get("/api/challenges/completed/competition",{params:{competitionId:t,limit:n}})}function l(t,n){return e.delete("/api/challenges/active/competition/player/delete",{params:{competitionId:t,playerId:n}})}function s(t,n){return e.get("/api/challenges/results/competition/player",{params:{competitionId:t,playerId:n}})}var c={createChallenge:t,completeChallenge:n,getChallengesByCompetition:r,getActiveChallengesByCompetition:i,getActiveChallengeByCompetitionByPlayer:o,getCompletedChallengesByCompetition:a,deleteActiveChallengeByCompetitionByPlayer:l,getPlayerResultsByCompetition:s};return c}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/footer.html"};return e}function t(e,t){function n(){t.logout()}var r=this;r.indentity=e,r.logout=n}t.$inject=["identityService","authService"],angular.module("app").directive("kpFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"headerCtrl",restrict:"A",templateUrl:"/common/components/header.html"};return e}function t(e,t,n){function r(){o.sidebarStatus.left=!o.sidebarStatus.left,e.setSidebarStatus(o.sidebarStatus.left)}function i(){n.logout()}var o=this;o.indentity=t,o.logout=i,o.sidebarStatus=e.getSidebarStatus(),o.toggleSidebar=r}t.$inject=["sidebarService","identityService","authService"],angular.module("app").directive("kpHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"/common/components/sidebar.html"};return e}function t(e,t,n){function r(){t.logout()}var i=this;i.indentity=e,i.logout=r,i.sidebarStatus=n.getSidebarStatus()}t.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("kpSidebar",e)}(),function(){"use strict";function e(){return function(e,t){if(!angular.isObject(e))return e;var n=[];for(var r in e)n.push(e[r]);return n.sort(function(e,n){return e=parseInt(e[t]),n=parseInt(n[t]),e-n}),n}}angular.module("app").filter("orderObjectBy",e)}(),function(){"use strict";function e(){function e(){}e()}angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(e){function t(){return!!this.currentUser}function n(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var r;null!==e.bootstrappedUserObject&&(r=e.bootstrappedUserObject);var i={currentUser:r,isAuthenticated:t,isAuthorized:n};return i}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,t,n){$.notify({message:e,url:t,target:n},{type:"info"})}function t(e,t,n){$.notify({message:e,url:t,target:n},{type:"success"})}function n(e,t,n){$.notify({message:e,url:t,target:n},{type:"warning"})}function r(e,t,n){$.notify({message:e,url:t,target:n},{type:"danger"})}function i(e,t,n){$.notify({message:e,url:t,target:n},{type:"inverse"})}var o={info:e,success:t,warning:n,error:r,inverse:i};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85}}),o}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(e,t,n,r){$(e).mCustomScrollbar({theme:t,scrollInertia:100,axis:n,mouseWheel:{enable:!0,axis:r,preventDefault:!0}})}var t={malihuScroll:e};return t}angular.module("app").factory("scrollbarService",e)}(),function(){"use strict";function e(){function e(){return n}function t(e){n.left=e}var n={left:!1,right:!1},r={getSidebarStatus:e,setSidebarStatus:t};return r}angular.module("app").factory("sidebarService",e)}(),angular.module("app").service("websocketService",["$rootScope","$window",function(e,t){function n(){return"https:"===t.location.protocol?"wss://"+t.location.host:"ws://"+t.location.host}var r;this.connect=function(){r=new WebSocket(n()),r.onmessage=function(t){var n=JSON.parse(t.data);e.$broadcast("ws:"+n.topic,n.data)}},this.send=function(e,t){var n=JSON.stringify({topic:e,data:t});r.send(n)}}]).run(["websocketService",function(e){e.connect()}]),function(){"use strict";function e(e){function t(t){return e.get("/api/pyramid",{params:{competitionId:t}})}function n(t){return e.get("/api/pyramids/user",{params:{userId:t}})}function r(){return e.get("/api/pyramids")}function i(t){return e.post("/api/pyramids/create",{pyramid:t})}function o(t){return e.post("/api/pyramids/update",{pyramid:t})}function a(t,n,r){return e.post("/api/pyramids/swapPositions",{competitionId:t,challenger:n,opponent:r})}function l(t,n){return e.post("/api/pyramids/addPlayer",{competitionId:t,player:n})}function s(t,n){return e.post("/api/pyramids/addPlayerRequest",{competition:t,player:n})}function c(t,n,r){return e.post("/api/pyramids/removePlayer",{competitionId:t,removedPlayer:n,players:r})}function u(t,n){return e.post("/api/pyramids/approvePlayer",{competitionId:t,player:n})}function d(t,n){return e.post("/api/pyramids/denyPlayer",{competitionId:t,player:n})}var p={getPyramid:t,getPyramidsForUser:n,getPyramids:r,createPyramid:i,updatePyramid:o,swapPositions:a,addPlayerToPyramid:l,addPlayerToPyramidRequest:s,removedPlayerFromPyramid:c,approvePendingPlayer:u,denyPendingPlayer:d};return p}e.$inject=["$http"],angular.module("app").factory("pyramidsService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/pyramids/components/pending-players.html"};return e}function t(e){function t(){}function n(t){t.position=i.pyramid.players.length+1,e.approvePendingPlayer(i.pyramid._id,t)}function r(t){e.denyPendingPlayer(i.pyramid._id,t)}var i=this;i.pendingPlayers=[],i.approvePendingPlayer=n,i.denyPendingPlayer=r,t()}t.$inject=["pyramidsService"],angular.module("app").directive("kpPendingPlayers",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{type:"@"},templateUrl:"/pyramids/components/pyramid-compact.html"};return e}function t(e,t){function n(){"user"===r.type?e.getPyramidsForUser(t.currentUser._id).then(function(e){r.pyramids=e.data}):e.getPyramids().then(function(e){r.pyramids=e.data})}var r=this;r.pyramids=null,n()}t.$inject=["pyramidsService","identityService"],angular.module("app").directive("kpPyramidCompact",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/pyramids/components/pyramid.html",replace:!0,scope:{competitionId:"@"},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,n,r,i,o,a){function l(){n.getPyramid(S.competitionId).then(function(e){for(var t=I;t>0;--t)S.maxPlayers+=t;e.data&&(S.pyramid=e.data,s(),c(),d(),p(),m())})}function s(){S.pyramid.players=r("orderBy")(S.pyramid.players,"position")}function c(){o.isAuthenticated()&&(S.currentUserIsOwner=_.some(S.pyramid.owners,["_id",o.currentUser._id])),S.currentUserIsOnPyramid=!1,S.hasActiveChallenge=!1,_.forEach(S.pyramid.players,function(e){o.isAuthenticated()&&e._id===o.currentUser._id&&(S.currentUserIsOnPyramid=!0,e.class="current-user",S.currentUserPlayer=e,a.getActiveChallengeByCompetitionByPlayer(S.competitionId,e._id).then(function(e){e.data&&(S.hasActiveChallenge=!0)}))}),S.currentUserIsPending=!1,_.forEach(S.pyramid.pendingPlayers,function(e){o.isAuthenticated()&&e._id===o.currentUser._id&&(S.currentUserIsPending=!0)}),a.getActiveChallengesByCompetition(S.competitionId).then(function(e){_.forEach(e.data,function(e){var t=_.find(S.pyramid.players,{_id:e.challenger._id});t.class="unavailable",t.challenge={position:"challenger"};var n=_.find(S.pyramid.players,{_id:e.opponent._id});if(n.class="unavailable",n.challenge={position:"opponent"},0!==e.timeLimit){var r=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1;r>0?n.challenge.expires=r:r<=0&&v(null,!0,n)}}),f()})}function u(){S.breakPoints=[];for(var e=0;e<I;e++)S.breakPoints.push(e*(e+1)/2+1)}function d(){var e=0;S.levels=[],u();for(var t=0;t<S.pyramid.players.length;t++)S.breakPoints.indexOf(t+1)>-1&&(e+=1,S.levels.push(e)),S.pyramid.players[t].level=e}function p(){S.numberOfBlocks=0;for(var e=_.last(S.levels);e>0;e--)S.numberOfBlocks+=e}function m(){S.numberOfRealPlayers=S.pyramid.players.length;for(var e=S.pyramid.players.length;e<S.numberOfBlocks;e++)S.pyramid.players.push({firstName:"Empty",lastName:"Spot",position:99,class:"empty"});d()}function f(){var e=S.currentUserPlayer.level>1?S.currentUserPlayer.level-1:null;_.forEach(S.pyramid.players,function(t){t.level===e&&99!==t.position&&"unavailable"!==t.class&&(S.availableChallenges=!0,t.available=!0)})}function y(e){if(e.available){S.hasActiveChallenge=!0;var t={competitionName:S.pyramid.name,competitionId:S.competitionId,complete:!1,forfeit:!1,timeLimit:S.pyramid.forfeitDays,challenger:{_id:S.currentUserPlayer._id,email:S.currentUserPlayer.email,firstName:S.currentUserPlayer.firstName,lastName:S.currentUserPlayer.lastName,position:S.currentUserPlayer.position},opponent:{_id:e._id,email:e.email,firstName:e.firstName,lastName:e.lastName,position:e.position}};a.createChallenge(t).then(function(){S.pyramidMenuToggle=!1})}else i.error("Sorry, that is not a valid challenge.")}function v(e,t,r){var i=r||S.currentUserPlayer;a.getActiveChallengeByCompetitionByPlayer(S.competitionId,i._id).then(function(i){S.hasActiveChallenge=!1;var o=!1;t?(i.data.forfeit=!0,"opponent"===r.challenge.position?(i.data.winner="challenger",o=!0):i.data.winner="opponent"):e?i.data.challenger._id===S.currentUserPlayer._id?(i.data.winner="challenger",o=!0):i.data.winner="opponent":i.data.challenger._id===S.currentUserPlayer._id?i.data.winner="opponent":(i.data.winner="challenger",o=!0),o?n.swapPositions(S.competitionId,i.data.opponent,i.data.challenger).then(function(){a.completeChallenge(i.data).then(function(){$&&w()})}):a.completeChallenge(i.data).then(function(){$&&w()}),S.pyramidMenuToggle=!1})}function g(e){v(null,!0,e)}function h(){if(o.isAuthenticated())if(S.numberOfRealPlayers<S.maxPlayers){var e={_id:o.currentUser._id,firstName:o.currentUser.firstName,lastName:o.currentUser.lastName,email:o.currentUser.username,position:S.numberOfRealPlayers+1};S.pyramid.open?swal({title:"Join Competition?",text:"You'll be added to the bottom",type:"warning",showCancelButton:!0,confirmButtonText:"Join",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToPyramid(S.competitionId,e),swal("Welcome Aboard!","Now start fighting your way to the top","success")}):swal({title:"Send Join Request?",text:"This is a closed competition so the owner must approve your request",type:"warning",showCancelButton:!0,confirmButtonText:"Send Request",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToPyramidRequest(S.pyramid,e).then(function(){S.currentUserIsPending=!0}),swal("Request Sent","You will receive an email once the owner processes the request.","success")})}else i.warning("Sorry, this pyramid is full");else t.go("login")}function P(){swal({title:"Leave Pyramid?",text:"You will lose your spot and forfeit any active challenges.",type:"error",showCancelButton:!0,confirmButtonText:"Yes, leave",confirmButtonClass:"btn-danger",cancelButtonText:"No, stay",closeOnConfirm:!1,closeOnCancel:!0},function(){w(),swal("OK, you'r out!","You've been removed from the pyramid.","success")})}function w(){o.isAuthenticated()&&S.currentUserIsOnPyramid&&($=!0,S.hasActiveChallenge?v(null,!0,S.currentUserPlayer):(S.currentUserIsOnPyramid=!1,S.hasActiveChallenge=!1,n.getPyramid(S.competitionId).then(function(e){var t=e.data,r=S.currentUserPlayer.position;_.forEach(t.players,function(e){e.position>=r&&(e.position-=1)});for(var i=_.remove(t.players,function(e){return e._id===S.currentUserPlayer._id}),o=[],a=0;a<S.numberOfRealPlayers-1;++a){var l={_id:t.players[a]._id,firstName:t.players[a].firstName,lastName:t.players[a].lastName,position:t.players[a].position};o.push(l)}n.removedPlayerFromPyramid(S.competitionId,i[0],o).then(function(){$=!1})})))}function C(){n.getPyramid(S.competitionId).then(function(e){S.pyramid=e.data,s(),c(),d(),p(),m()})}var I=10,S=this;S.pyramid={},S.breakPoints=[],S.levels=[],S.numberOfBlocks=0,S.currentUserIsOnPyramid=!1,S.currentUserIsPending=!1,S.currentUserIsOwner=!1,S.hasActiveChallenge=!1,S.availableChallenges=!1,S.createChallenge=y,S.completeChallenge=v,S.challengeExpired=g,S.currentUserPlayer={},S.pyramidMenuToggle=!1,S.addCurrentUserToPyramid=h,S.confirmRemoveCurrentUserFromPyramid=P,S.numberOfRealPlayers=0,S.maxPlayers=0,l();var $=!1;e.$on("ws:challenge_created",function(e,t){S.competitionId===t.competitionId&&(i.info(t.description),C())}),e.$on("ws:challenge_completed",function(e,t){S.competitionId===t.competitionId&&(i.info(t.description),$||C())}),e.$on("ws:player_added",function(e,t){S.competitionId===t.competitionId&&(i.info(t.description),C())}),e.$on("ws:player_removed",function(e,t){S.competitionId===t.competitionId&&(i.info(t.description),C())}),e.$on("ws:pyramid_updated",function(e,t){S.competitionId===t.competitionId&&(i.info(t.description),C())})}t.$inject=["$scope","$state","pyramidsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("kpPyramid",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/pyramids/components/update-players.html"};return e}function t(e,t,n){function r(){}function i(){_.forEach(s,function(e){n.deleteActiveChallengeByCompetitionByPlayer(c.pyramid._id,e._id)}),t.updatePyramid(c.pyramid)}function o(){t.getPyramid(c.pyramid._id).then(function(t){t.data.players=e("orderBy")(t.data.players,"position"),c.pyramid=t.data})}function a(){var e=1;_.forEach(c.pyramid.players,function(t){t.position=e,++e})}function l(e,t){s.push(e),c.pyramid.players.splice(t,1),a()}var s=[],c=this;c.updatePyramid=i,c.cancelUpdate=o,c.reorderPlayers=a,c.removePlayer=l,r()}t.$inject=["$filter","pyramidsService","challengesService"],angular.module("app").directive("kpUpdatePlayers",e)}(),function(){"use strict";function e(e,t,n,r,i,o,a){function l(){n.competitionId?(u.competitionId=n.competitionId,s()):t.go("pyramids.myPyramids")}function s(){i.getPyramid(u.competitionId).then(function(e){e.data&&_.some(e.data.owners,["_id",o.currentUser._id])?(e.data.players=r("orderBy")(e.data.players,"position"),u.pyramid=e.data):t.go("pyramids.myPyramids")})}function c(){i.getPyramid(u.competitionId).then(function(e){var t=e.data;t.open=u.pyramid.open,i.updatePyramid(t)})}var u=this;u.competitionId=null,u.updatePyramidOpenStatus=c,l(),e.$on("ws:challenge_completed",function(e,t){u.competitionId===t.competitionId&&(a.info(t.description),s())}),e.$on("ws:player_added",function(e,t){u.competitionId===t.competitionId&&(a.info(t.description),s())}),e.$on("ws:player_removed",function(e,t){u.competitionId===t.competitionId&&(a.info(t.description),s())}),e.$on("ws:pyramid_updated",function(e,t){u.competitionId===t.competitionId&&(a.info(t.description),s())}),e.$on("ws:add_player_request",function(e,t){u.competitionId===t.competitionId&&(a.info(t.description),s())}),e.$on("ws:add_player_request_denied",function(e,t){u.competitionId===t.competitionId&&(a.info(t.description),s())})}e.$inject=["$scope","$state","$stateParams","$filter","pyramidsService","identityService","notifyService"],angular.module("app").controller("AdminCtrl",e)}(),function(){"use strict";function e(e,t,n,r){function i(){t.getAllUsers().then(function(e){d.availablePlayers=e.data});for(var e=0;e<u;e++)c.push(e*(e+1)/2+1)}function o(e){e.position=d.addedPlayers.length+1,d.addedPlayers.push(_.remove(d.availablePlayers,{_id:e._id})[0])}function a(e){d.availablePlayers.push(_.remove(d.addedPlayers,{_id:e._id})[0]),l()}function l(){var e=1;_.forEach(d.addedPlayers,function(t){t.position=e,++e})}function s(t){angular.forEach(d.addedPlayers,function(e){p+=1;var n={position:p,_id:e._id,email:e.username,firstName:e.firstName,lastName:e.lastName};t.players.push(n)}),t.owners=[{_id:r.currentUser._id,email:r.currentUser.username,firstName:r.currentUser.firstName,lastName:r.currentUser.lastName}];for(var i=0;i<c.length;i++)if(t.players.length<c[i]){t.levels=i;break}n.createPyramid(t).then(function(t){e.go("pyramids.view",{competitionId:t.data._id})})}var c=[],u=10,d=this;d.newPyramid={players:[],open:!1},d.availablePlayers=[],d.addedPlayers=[],d.createPyramid=s,d.addPlayer=o,d.removePlayer=a,d.reorderPlayers=l,d.newPyramid.forfeitDays=1,i();var p=0}e.$inject=["$state","userService","pyramidsService","identityService"],angular.module("app").controller("CreatePyramidCtrl",e)}(),function(){"use strict";function e(){function e(){}e()}angular.module("app").controller("MyPyramidsCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){t.competitionId&&(i.competitionId=t.competitionId,n.getPyramid(i.competitionId).then(function(t){t.data?i.pyramid=t.data:e.go("pyramids.myPyramids")}))}var i=this;i.competitionId=null,i.pyramid=null,r()}e.$inject=["$state","$stateParams","pyramidsService"],angular.module("app").controller("PyramidCtrl",e)}(),function(){"use strict";function e(){function e(){}e()}angular.module("app").controller("PyramidsCtrl",e)}(),function(){"use strict";function e(e,t,n,r,i){function o(){t.competitionId&&(l.competitionId=t.competitionId,a())}function a(){r.getPyramid(l.competitionId).then(function(e){e.data?l.pyramid=e.data:n.go("pyramids.myPyramids")})}var l=this;l.competitionId=null,l.pyramid=null,o(),e.$on("ws:challenge_completed",function(e,t){l.competitionId===t.competitionId&&(i.info(t.description),a())})}e.$inject=["$scope","$stateParams","$state","pyramidsService","notifyService"],angular.module("app").controller("StatsCtrl",e)}(),function(){"use strict";function e(e){console.log("asdfsdf");var t=this;t.indentity=e}e.$inject=["identityService"],angular.module("app").controller("UserCtrl",e)}(),function(){"use strict";function e(e){function t(t,n,r){var i=r.scrollaxis||"y",o=r.theme||"minimal-dark",a=r.mousewheelaxis||"y";$("html").hasClass("ismobile")||e.malihuScroll(n,o,i,a)}var n={restrict:"C",link:t};return n}e.$inject=["scrollbarService"],angular.module("app").directive("cOverflow",e)}(),function(){"use strict";function e(){function e(e,t){t.click(function(){t.next().slideToggle(200),t.parent().toggleClass("toggled")})}var t={restrict:"A",link:e};return t}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,t){t.hasClass("btn-icon")||t.hasClass("btn-float")?Waves.attach(t,["waves-circle"]):t.hasClass("btn-light")?Waves.attach(t,["waves-light"]):Waves.attach(t),Waves.init()}var t={restrict:"C",link:e};return t}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,t){var n=t.children().first(),r=t.parent().hasClass("fg-float");n.focus(function(){t.addClass("fg-toggled")}),n.blur(function(){(!r||r&&0===n.val().length)&&t.removeClass("fg-toggled")})}var t={restrict:"C",link:e};return t}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAuY29uZmlnLmpzIiwiYXBwLmNvbnRyb2xsZXIuanMiLCJhcHAucm91dGVzLmpzIiwiYXBwLnJ1bi5qcyIsImF1dGhlbnRpY2F0aW9uL3NlcnZpY2VzL2F1dGguc2VydmljZS5qcyIsImF1dGhlbnRpY2F0aW9uL3NlcnZpY2VzL3VzZXIuc2VydmljZS5qcyIsImF1dGhlbnRpY2F0aW9uL3ZpZXdzL2xvZ2luLmNvbnRyb2xsZXIuanMiLCJhdXRoZW50aWNhdGlvbi92aWV3cy9yZWdpc3Rlci5jb250cm9sbGVyLmpzIiwiYXV0aGVudGljYXRpb24vdmlld3MvdmVyaWZpY2F0aW9uLmNvbnRyb2xsZXIuanMiLCJjaGFsbGVuZ2VzL2NvbXBvbmVudHMvYWN0aXZlLWNoYWxsZW5nZXMuZGlyZWN0aXZlLmpzIiwiY2hhbGxlbmdlcy9jb21wb25lbnRzL2NvbXBsZXRlZC1jaGFsbGVuZ2VzLmRpcmVjdGl2ZS5qcyIsImNoYWxsZW5nZXMvY29tcG9uZW50cy9wbGF5ZXItb3ZlcmFsbC1yZXN1bHRzLmRpcmVjdGl2ZS5qcyIsImNoYWxsZW5nZXMvc2VydmljZXMvY2hhbGxlbmdlcy5zZXJ2aWNlLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvZm9vdGVyLmRpcmVjdGl2ZS5qcyIsImNvbW1vbi9jb21wb25lbnRzL2hlYWRlci5kaXJlY3RpdmUuanMiLCJjb21tb24vY29tcG9uZW50cy9zaWRlYmFyLmRpcmVjdGl2ZS5qcyIsImNvbW1vbi9maWx0ZXJzL29yZGVyLW9iamVjdC1ieS5maWx0ZXIuanMiLCJjb21tb24vdmlld3MvaG9tZS5jb250cm9sbGVyLmpzIiwiY29tbW9uL3NlcnZpY2VzL2luZGVudGl0eS5zZXJ2aWNlLmpzIiwiY29tbW9uL3NlcnZpY2VzL25vdGlmeS5zZXJ2aWNlLmpzIiwiY29tbW9uL3NlcnZpY2VzL3Njcm9sbGJhci5zZXJ2aWNlLmpzIiwiY29tbW9uL3NlcnZpY2VzL3NpZGViYXIuc2VydmljZS5qcyIsImNvbW1vbi9zZXJ2aWNlcy93ZWJzb2NrZXQuc2VydmljZS5qcyIsInB5cmFtaWRzL3NlcnZpY2VzL3B5cmFtaWRzLnNlcnZpY2UuanMiLCJweXJhbWlkcy9jb21wb25lbnRzL3BlbmRpbmctcGxheWVycy5kaXJlY3RpdmUuanMiLCJweXJhbWlkcy9jb21wb25lbnRzL3B5cmFtaWQtY29tcGFjdC5kaXJlY3RpdmUuanMiLCJweXJhbWlkcy9jb21wb25lbnRzL3B5cmFtaWQuZGlyZWN0aXZlLmpzIiwicHlyYW1pZHMvY29tcG9uZW50cy91cGRhdGUtcGxheWVycy5kaXJlY3RpdmUuanMiLCJweXJhbWlkcy92aWV3cy9hZG1pbi5jb250cm9sbGVyLmpzIiwicHlyYW1pZHMvdmlld3MvY3JlYXRlLXB5cmFtaWQuY29udHJvbGxlci5qcyIsInB5cmFtaWRzL3ZpZXdzL215LXB5cmFtaWRzLmNvbnRyb2xsZXIuanMiLCJweXJhbWlkcy92aWV3cy9weXJhbWlkLmNvbnRyb2xsZXIuanMiLCJweXJhbWlkcy92aWV3cy9weXJhbWlkcy5jb250cm9sbGVyLmpzIiwicHlyYW1pZHMvdmlld3Mvc3RhdHMuY29udHJvbGxlci5qcyIsInVzZXJzL3ZpZXdzL3VzZXIuY29udHJvbGxlci5qcyIsImNvbW1vbi9jb21wb25lbnRzL3VpL3Njcm9sbGJhci5kaXJlY3RpdmUuanMiLCJjb21tb24vY29tcG9uZW50cy91aS90b2dnbGUtc3VibWVudS5kaXJlY3RpdmUuanMiLCJjb21tb24vY29tcG9uZW50cy91aS93YXZlcy5kaXJlY3RpdmUuanMiLCJjb21tb24vY29tcG9uZW50cy91aS9mb3Jtcy9mZy1saW5lLmRpcmVjdGl2ZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlndXJhdGlvbiIsIiRodHRwUHJvdmlkZXIiLCIkdWliVG9vbHRpcFByb3ZpZGVyIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiZ2V0Iiwib3B0aW9ucyIsImFwcGVuZFRvQm9keSIsImNvbmZpZyIsIkFwcEN0cmwiLCIkc3RhdGUiLCJsb2NhbFN0b3JhZ2VTZXJ2aWNlIiwidG9nZ2xlU2lkZWJhckxvY2tlZCIsImxvY2tlZCIsInNldCIsImFwcEN0cmwiLCJ0aGlzIiwibG9ja1NpZGViYXIiLCJjb250cm9sbGVyIiwiY29uZmlndXJlUm91dGVzIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsInJvdXRlUm9sZUNoZWNrcyIsInN1cGVyQWRtaW4iLCJyZXF1aXJlU3VwZXJBZG1pbiIsImFkbWluIiwicmVxdWlyZUFkbWluIiwidXNlciIsInJlcXVpcmVBdXRoIiwiaHRtbDVNb2RlIiwib3RoZXJ3aXNlIiwid2hlbiIsInN0YXRlIiwidXJsIiwidmlld3MiLCJjb250ZW50IiwiY29udHJvbGxlckFzIiwidGVtcGxhdGVVcmwiLCJjb250ZW50QCIsInJlc29sdmUiLCJhdXRoIiwiYXV0aFNlcnZpY2UiLCJhdXRob3JpemVDdXJyZW50VXNlckZvclJvdXRlIiwiYXV0aGVudGljYXRlZFVzZXJGb3JSb3V0ZSIsIiRpbmplY3QiLCJhcHBSdW4iLCIkcm9vdFNjb3BlIiwic2lkZWJhclNlcnZpY2UiLCIkb24iLCJldmVudCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiLCJlcnJvciIsImdvIiwicHJldmlvdXMiLCJwcmV2UGFyYW1zIiwic2V0U2lkZWJhclN0YXR1cyIsInJ1biIsIiRodHRwIiwiJHEiLCJ1c2VyU2VydmljZSIsImlkZW50aXR5U2VydmljZSIsIm5vdGlmeVNlcnZpY2UiLCJhdXRoZW50aWNhdGVVc2VyIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImRmZCIsImRlZmVyIiwicG9zdCIsInRoZW4iLCJyZXNwb25zZSIsImRhdGEiLCJzdWNjZXNzIiwiY3VycmVudFVzZXIiLCJtZXNzYWdlIiwicHJvbWlzZSIsImNyZWF0ZVVzZXIiLCJ1c2VyRGF0YSIsInJlYXNvbiIsImxvZ291dCIsInVuZGVmaW5lZCIsInJvbGUiLCJpc0F1dGhvcml6ZWQiLCJyZWplY3QiLCJpc0F1dGhlbnRpY2F0ZWQiLCJzZXJ2aWNlIiwiZmFjdG9yeSIsImdldEFsbFVzZXJzIiwidXNlcnMiLCJ2ZXJpZnlVc2VyIiwidXNlcklkIiwidmVyaWZpY2F0aW9uVG9rZW4iLCJwYXJhbXMiLCJMb2dpbkN0cmwiLCJhY3RpdmF0ZSIsImxvZ2luIiwidm0iLCJSZWdpc3RlckN0cmwiLCJyZWdpc3RlciIsIm5ld1VzZXIiLCJjb25maXJtUGFzc3dvcmQiLCJWZXJpZmljYXRpb25DdHJsIiwiJHN0YXRlUGFyYW1zIiwidmVyaWZ5aW5nIiwidmVyaWZpZWQiLCJrcEFjdGl2ZUNoYWxsZW5lZ2VzIiwiZGlyZWN0aXZlIiwiYmluZFRvQ29udHJvbGxlciIsImN0cmxGdW5jIiwicmVzdHJpY3QiLCJzY29wZSIsImNvbXBldGl0aW9uSWQiLCIkc2NvcGUiLCJjaGFsbGVuZ2VzU2VydmljZSIsImdldEFjdGl2ZUNoYWxsZW5nZXMiLCJjaGFsbGVuZ2VzIiwiZ2V0QWN0aXZlQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24iLCJsZW5ndGgiLCJfIiwiZm9yRWFjaCIsImNoYWxsZW5nZSIsInRpbWVMaW1pdCIsImV4cGlyZXMiLCJtb21lbnQiLCJkaWZmIiwiY3JlYXRlZCIsImFkZCIsImNoYWxsZW5nZURldGFpbHMiLCJrcENvbXBsZXRlZENoYWxsZW5lZ2VzIiwibGltaXQiLCJnZXRDb21wbGV0ZWRDaGFsbGVuZ2VzIiwiZ2V0Q29tcGxldGVkQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24iLCJsb3NlciIsIndpbm5lciIsIndoZW5Db21wbGV0ZWQiLCJjb21wbGV0ZWQiLCJjYWxlbmRhciIsInNhbWVEYXkiLCJuZXh0RGF5IiwibmV4dFdlZWsiLCJsYXN0RGF5IiwibGFzdFdlZWsiLCJzYW1lRWxzZSIsImtwUGxheWVyT3ZlcmFsbFJlc3VsdHMiLCJwbGF5ZXIiLCJnZXRQbGF5ZXJPdmVyYWxsUmVzdWx0cyIsIl9pZCIsInBsYXllcklkIiwiZ2V0UGxheWVyUmVzdWx0c0J5Q29tcGV0aXRpb24iLCJyZXN1bHRzIiwiYnJlYWtQb2ludHMiLCJpIiwibWF4TGV2ZWxzIiwicHVzaCIsImxldmVsIiwiaiIsInBvc2l0aW9uIiwiaW5kZXhPZiIsInN0cmVha1R5cGUiLCJzdHJlYWsiLCJjb250aW51ZVN0cmVhayIsImNoYWxsZW5nZXIiLCJvcHBvbmVudCIsInR5cGUiLCJ2YWx1ZSIsIndpbnMiLCJhc09wcG9uZW50Iiwic2l6ZSIsImZpbHRlciIsImFzQ2hhbGxlbmdlciIsInRvdGFsIiwiYnlGb3JmZWl0IiwiZm9yZmVpdCIsImxvc2VzIiwiY3JlYXRlQ2hhbGxlbmdlIiwiY29tcGxldGVDaGFsbGVuZ2UiLCJnZXRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbiIsImdldEFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllciIsImRlbGV0ZUFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllciIsImRlbGV0ZSIsImtwRm9vdGVyIiwiaW5kZW50aXR5Iiwia3BIZWFkZXIiLCJ0b2dnbGVTaWRlYmFyIiwic2lkZWJhclN0YXR1cyIsImxlZnQiLCJnZXRTaWRlYmFyU3RhdHVzIiwia3BTaWRlYmFyIiwib3JkZXJPYmplY3RCeSIsImlucHV0IiwiYXR0cmlidXRlIiwiaXNPYmplY3QiLCJhcnJheSIsIm9iamVjdEtleSIsInNvcnQiLCJhIiwiYiIsInBhcnNlSW50IiwiSG9tZUN0cmwiLCIkd2luZG93Iiwicm9sZXMiLCJib290c3RyYXBwZWRVc2VyT2JqZWN0IiwiaW5mbyIsInRhcmdldCIsIiQiLCJub3RpZnkiLCJ3YXJuaW5nIiwiaW52ZXJzZSIsIm5vdGlmeURlZmF1bHRzIiwibmV3ZXN0X29uX3RvcCIsIm9mZnNldCIsIngiLCJ5Iiwic2Nyb2xsYmFyU2VydmljZSIsIm1hbGlodVNjcm9sbCIsInNlbGVjdG9yIiwidGhlbWUiLCJzY3JvbGxheGlzIiwibW91c2V3aGVlbGF4aXMiLCJtQ3VzdG9tU2Nyb2xsYmFyIiwic2Nyb2xsSW5lcnRpYSIsImF4aXMiLCJtb3VzZVdoZWVsIiwiZW5hYmxlIiwicHJldmVudERlZmF1bHQiLCJzdGF0dXMiLCJyaWdodCIsIndlYnNvY2tldEhvc3QiLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdCIsImNvbm5lY3Rpb24iLCJjb25uZWN0IiwiV2ViU29ja2V0Iiwib25tZXNzYWdlIiwiZSIsInBheWxvYWQiLCJKU09OIiwicGFyc2UiLCIkYnJvYWRjYXN0IiwidG9waWMiLCJzZW5kIiwianNvbiIsInN0cmluZ2lmeSIsIndlYnNvY2tldFNlcnZpY2UiLCJweXJhbWlkc1NlcnZpY2UiLCJnZXRQeXJhbWlkIiwiZ2V0UHlyYW1pZHNGb3JVc2VyIiwiZ2V0UHlyYW1pZHMiLCJjcmVhdGVQeXJhbWlkIiwicHlyYW1pZCIsInVwZGF0ZVB5cmFtaWQiLCJzd2FwUG9zaXRpb25zIiwiYWRkUGxheWVyVG9QeXJhbWlkIiwiYWRkUGxheWVyVG9QeXJhbWlkUmVxdWVzdCIsImNvbXBldGl0aW9uIiwicmVtb3ZlZFBsYXllckZyb21QeXJhbWlkIiwicmVtb3ZlZFBsYXllciIsInBsYXllcnMiLCJhcHByb3ZlUGVuZGluZ1BsYXllciIsImRlbnlQZW5kaW5nUGxheWVyIiwia3BQZW5kaW5nUGxheWVycyIsInBlbmRpbmdQbGF5ZXJzIiwia3BQeXJhbWlkQ29tcGFjdCIsInB5cmFtaWRzIiwia3BQeXJhbWlkIiwicmVwbGFjZSIsIiRmaWx0ZXIiLCJtYXhQbGF5ZXJzIiwib3JkZXJQbGF5ZXJzIiwiZ2V0UGxheWVyc1N0YXR1cyIsImFzc2lnbkxldmVsc1RvUGxheWVycyIsImNhbGN1bGF0ZVB5cmFtaWRCbG9ja3MiLCJmaWxsSW5FbXB0eUJsb2NrcyIsImN1cnJlbnRVc2VySXNPd25lciIsInNvbWUiLCJvd25lcnMiLCJjdXJyZW50VXNlcklzT25QeXJhbWlkIiwiaGFzQWN0aXZlQ2hhbGxlbmdlIiwiY2xhc3MiLCJjdXJyZW50VXNlclBsYXllciIsImN1cnJlbnRVc2VySXNQZW5kaW5nIiwiZmluZCIsInRpbWVUb0V4cGlyZSIsImZpbmRBdmFpbGFibGVDaGFsbGVuZ2VzIiwiY3JlYXRlQnJlYWtQb2ludHMiLCJsZXZlbHMiLCJudW1iZXJPZkJsb2NrcyIsImxhc3QiLCJudW1iZXJPZlJlYWxQbGF5ZXJzIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJsZXZlbEFib3ZlIiwiYXZhaWxhYmxlQ2hhbGxlbmdlcyIsImF2YWlsYWJsZSIsImNvbXBldGl0aW9uTmFtZSIsIm5hbWUiLCJjb21wbGV0ZSIsImZvcmZlaXREYXlzIiwiZW1haWwiLCJweXJhbWlkTWVudVRvZ2dsZSIsIndpbm5lcklzQ3VycmVudFVzZXIiLCJmb3JmZWl0TG9zZXIiLCJyZW1vdmluZ0N1cnJlbnRVc2VyIiwicmVtb3ZlQ3VycmVudFVzZXJGcm9tUHlyYW1pZCIsImNoYWxsZW5nZUV4cGlyZWQiLCJhZGRDdXJyZW50VXNlclRvUHlyYW1pZCIsIm9wZW4iLCJzd2FsIiwidGl0bGUiLCJ0ZXh0Iiwic2hvd0NhbmNlbEJ1dHRvbiIsImNvbmZpcm1CdXR0b25UZXh0IiwiY2FuY2VsQnV0dG9uVGV4dCIsImNsb3NlT25Db25maXJtIiwiY2xvc2VPbkNhbmNlbCIsImNvbmZpcm1SZW1vdmVDdXJyZW50VXNlckZyb21QeXJhbWlkIiwiY29uZmlybUJ1dHRvbkNsYXNzIiwicCIsIm9wZW5Qb3NpdGlvbiIsInJlbW92ZSIsInVwZGF0ZWRQbGF5ZXJzIiwidXBkYXRlZFBsYXllciIsInJlZnJlc2hQeXJhbWlkIiwiZGVzY3JpcHRpb24iLCJkZXRhaWxzIiwia3BVcGRhdGVQbGF5ZXJzIiwicmVtb3ZlZFBsYXllcnMiLCJjYW5jZWxVcGRhdGUiLCJyZW9yZGVyUGxheWVycyIsInJlbW92ZVBsYXllciIsInBsYXllckluZGV4Iiwic3BsaWNlIiwiQWRtaW5DdHJsIiwidXBkYXRlUHlyYW1pZE9wZW5TdGF0dXMiLCJ1cGRhdGVkUHlyYW1pZCIsIkNyZWF0ZVB5cmFtaWRDdHJsIiwiYXZhaWxhYmxlUGxheWVycyIsImFkZFBsYXllciIsImFkZGVkUGxheWVycyIsIm5ld1B5cmFtaWQiLCJNeVB5cmFtaWRzQ3RybCIsIlB5cmFtaWRDdHJsIiwiUHlyYW1pZHNDdHJsIiwiU3RhdHNDdHJsIiwiVXNlckN0cmwiLCJjb25zb2xlIiwibG9nIiwiY092ZXJmbG93IiwibGlua0Z1bmMiLCJlbGVtZW50IiwiYXR0cnMiLCJoYXNDbGFzcyIsImxpbmsiLCJ0b2dnbGVTdWJtZW51IiwiZWwiLCJjbGljayIsIm5leHQiLCJzbGlkZVRvZ2dsZSIsInBhcmVudCIsInRvZ2dsZUNsYXNzIiwid2F2ZXNFZmZlY3QiLCJXYXZlcyIsImF0dGFjaCIsImluaXQiLCJmZ0xpbmUiLCJjaGlsZHJlbiIsImZpcnN0IiwiaXNGbG9hdExhYmVsIiwiZm9jdXMiLCJhZGRDbGFzcyIsImJsdXIiLCJ2YWwiLCJyZW1vdmVDbGFzcyJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQUFDLE9BQUEsT0FDQSxZQUNBLGVBQ0EsWUFDQSxzQkFDQSxhQUNBLHdCQUNBLFFBQ0EscUJBQ0EsMEJDVEEsd0JBSUEsU0FBQUMsR0FBQUMsRUFBQUMsR0FFQUQsRUFBQUUsU0FBQUMsUUFBQUMsTUFDQUosRUFBQUUsU0FBQUMsUUFBQUMsUUFHQUosRUFBQUUsU0FBQUMsUUFBQUMsSUFBQSxxQkFBQSxnQ0FFQUosRUFBQUUsU0FBQUMsUUFBQUMsSUFBQSxpQkFBQSxXQUNBSixFQUFBRSxTQUFBQyxRQUFBQyxJQUFBLE9BQUEsV0FFQUgsRUFBQUksU0FBQUMsY0FBQSxzREFiQVQsUUFBQUMsT0FBQSxPQUFBUyxPQUFBUixNQ0ZBLHVCQUlBLFNBQUFTLEdBQUFDLEVBQUFDLEdBUUEsUUFBQUMsR0FBQUMsR0FDQUYsRUFBQUcsSUFBQSxnQkFBQUQsR0FSQSxHQUFBRSxHQUFBQyxJQUVBRCxHQUFBTCxPQUFBQSxFQUVBSyxFQUFBRSxZQUFBTixFQUFBTixJQUFBLGlCQUNBVSxFQUFBSCxvQkFBQUEsNkNBUkFkLFFBQUFDLE9BQUEsT0FBQW1CLFdBQUEsVUFBQVQsTUNGQSx1QkFJQSxTQUFBVSxHQUFBQyxFQUFBQyxFQUFBQyxHQUNBLEdBQUFDLElBQ0FDLFdBQUFDLEVBQ0FDLE1BQUFD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USxJQUNBRyxTQUFBLElBQ0FvUCxLQUFBSixFQUdBLE9BQUFuUCxHQVZBL0csUUFDQUMsT0FBQSxPQUNBOEcsVUFBQSxTQUFBbVEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcbiAgJ3VpLnJvdXRlcicsXG4gICd1aS5ib290c3RyYXAnLFxuICAnbmdBbmltYXRlJyxcbiAgJ2FuZ3VsYXItbG9hZGluZy1iYXInLFxuICAnbm91aXNsaWRlcicsXG4gICdsb2NhbHl0aWNzLmRpcmVjdGl2ZXMnLFxuICAndGltZXInLFxuICAnTG9jYWxTdG9yYWdlTW9kdWxlJyxcbiAgJ2FuZ3VsYXItc29ydGFibGUtdmlldydcbl0pOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0ICc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb25maWcoY29uZmlndXJhdGlvbik7XG5cbiAgZnVuY3Rpb24gY29uZmlndXJhdGlvbigkaHR0cFByb3ZpZGVyLCAkdWliVG9vbHRpcFByb3ZpZGVyKSB7XG4gICAgLy9pbml0aWFsaXplIGdldCBpZiBub3QgdGhlcmVcbiAgICBpZiAoISRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXQpIHtcbiAgICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXQgPSB7fTsgICAgXG4gICAgfSAgICBcbiAgICAvL2Rpc2FibGUgSUUgYWpheCByZXF1ZXN0IGNhY2hpbmdcbiAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0WydJZi1Nb2RpZmllZC1TaW5jZSddID0gJ0ZyaSwgMDEgSmFuIDIwMTYgMDU6MDA6MDAgR01UJztcbiAgICAvLyBleHRyYVxuICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXRbJ0NhY2hlLUNvbnRyb2wnXSA9ICduby1jYWNoZSc7XG4gICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldFsnUHJhZ21hJ10gPSAnbm8tY2FjaGUnO1xuXG4gICAgJHVpYlRvb2x0aXBQcm92aWRlci5vcHRpb25zKHsgYXBwZW5kVG9Cb2R5OiB0cnVlIH0pO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0FwcEN0cmwnLCBBcHBDdHJsKTtcblxuICBmdW5jdGlvbiBBcHBDdHJsKCRzdGF0ZSwgbG9jYWxTdG9yYWdlU2VydmljZSkge1xuICAgIHZhciBhcHBDdHJsID0gdGhpcztcbiAgICAvLyBVc2UgdGhpcyBmb3IgU2lkZWJhciBtZW51XG4gICAgYXBwQ3RybC4kc3RhdGUgPSAkc3RhdGU7XG4gICAgLy8gTG9jayB0aGUgc2lkZWJhciBpbiB2aWV3XG4gICAgYXBwQ3RybC5sb2NrU2lkZWJhciA9IGxvY2FsU3RvcmFnZVNlcnZpY2UuZ2V0KCdzaWRlYmFyTG9ja2VkJyk7XG4gICAgYXBwQ3RybC50b2dnbGVTaWRlYmFyTG9ja2VkID0gdG9nZ2xlU2lkZWJhckxvY2tlZDtcblxuICAgIGZ1bmN0aW9uIHRvZ2dsZVNpZGViYXJMb2NrZWQobG9ja2VkKSB7XG4gICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLnNldCgnc2lkZWJhckxvY2tlZCcsIGxvY2tlZCk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbmZpZyhjb25maWd1cmVSb3V0ZXMpO1xuXG4gIGZ1bmN0aW9uIGNvbmZpZ3VyZVJvdXRlcygkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xuICAgIHZhciByb3V0ZVJvbGVDaGVja3MgPSB7XG4gICAgICBzdXBlckFkbWluOiByZXF1aXJlU3VwZXJBZG1pbixcbiAgICAgIGFkbWluOiByZXF1aXJlQWRtaW4sXG4gICAgICB1c2VyOiByZXF1aXJlQXV0aFxuICAgIH07XG5cbiAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG5cbiAgICAvLyBmb3IgYW55IHVubWF0Y2hlZCB1cmxcbiAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG5cbiAgICAkdXJsUm91dGVyUHJvdmlkZXIud2hlbignL3B5cmFtaWRzLycsICcvcHlyYW1pZHMnKTtcblxuICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAuc3RhdGUoJ2hvbWUnLCB7XG4gICAgICAgIHVybDogJy8nLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ0hvbWVDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tbW9uL3ZpZXdzL2hvbWUuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdweXJhbWlkcycsIHtcbiAgICAgICAgdXJsOiAnL3B5cmFtaWRzJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdQeXJhbWlkc0N0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdweXJhbWlkcy92aWV3cy9weXJhbWlkcy5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkuc3RhdGUoJ3B5cmFtaWRzLm15UHlyYW1pZHMnLCB7XG4gICAgICAgIHVybDogJy9teS1weXJhbWlkcycsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnRAJzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ015UHlyYW1pZHNDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHlyYW1pZHMvdmlld3MvbXktcHlyYW1pZHMuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICBhdXRoOiByb3V0ZVJvbGVDaGVja3MudXNlclxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncHlyYW1pZHMudmlldycsIHtcbiAgICAgICAgdXJsOiAnL3ZpZXcvOmNvbXBldGl0aW9uSWQnLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50QCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdQeXJhbWlkQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3B5cmFtaWRzL3ZpZXdzL3B5cmFtaWQuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdweXJhbWlkcy5zdGF0cycsIHtcbiAgICAgICAgdXJsOiAnL3N0YXRzLzpjb21wZXRpdGlvbklkJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudEAnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnU3RhdHNDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHlyYW1pZHMvdmlld3Mvc3RhdHMuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdweXJhbWlkcy5hZG1pbicsIHtcbiAgICAgICAgdXJsOiAnL2FkbWluLzpjb21wZXRpdGlvbklkJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudEAnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQWRtaW5DdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHlyYW1pZHMvdmlld3MvYWRtaW4uaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICBhdXRoOiByb3V0ZVJvbGVDaGVja3MudXNlclxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncHlyYW1pZHMuY3JlYXRlJywge1xuICAgICAgICB1cmw6ICcvY3JlYXRlJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudEAnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQ3JlYXRlUHlyYW1pZEN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdweXJhbWlkcy92aWV3cy9jcmVhdGUtcHlyYW1pZC5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgIGF1dGg6IHJvdXRlUm9sZUNoZWNrcy51c2VyXG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCd1c2VyJywge1xuICAgICAgICB1cmw6ICcvdXNlcicsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnQnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnVXNlckN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd1c2Vycy92aWV3cy91c2VyLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgYXV0aDogcm91dGVSb2xlQ2hlY2tzLnVzZXJcbiAgICAgICAgfVxuICAgICAgfSkuc3RhdGUoJ2xvZ2luJywge1xuICAgICAgICB1cmw6ICcvbG9naW4nLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ0xvZ2luQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2F1dGhlbnRpY2F0aW9uL3ZpZXdzL2xvZ2luLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncmVnaXN0ZXInLCB7XG4gICAgICAgIHVybDogJy9yZWdpc3RlcicsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnQnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXV0aGVudGljYXRpb24vdmlld3MvcmVnaXN0ZXIuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCd2ZXJpZnknLCB7XG4gICAgICAgIHVybDogJy92ZXJpZmljYXRpb24nLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ1ZlcmlmaWNhdGlvbkN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhdXRoZW50aWNhdGlvbi92aWV3cy92ZXJpZmljYXRpb24uaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCd2ZXJpZmljYXRpb24nLCB7XG4gICAgICAgIHVybDogJy92ZXJpZmljYXRpb24vOnVzZXJJZC86dmVyaWZpY2F0aW9uVG9rZW4nLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ1ZlcmlmaWNhdGlvbkN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhdXRoZW50aWNhdGlvbi92aWV3cy92ZXJpZmljYXRpb24uaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgcmVxdWlyZUFkbWluLiRpbmplY3QgPSBbJ2F1dGhTZXJ2aWNlJ107XG5cbiAgZnVuY3Rpb24gcmVxdWlyZUFkbWluKGF1dGhTZXJ2aWNlKSB7XG4gICAgcmV0dXJuIGF1dGhTZXJ2aWNlLmF1dGhvcml6ZUN1cnJlbnRVc2VyRm9yUm91dGUoJ2FkbWluJyk7XG4gIH1cblxuICByZXF1aXJlU3VwZXJBZG1pbi4kaW5qZWN0ID0gWydhdXRoU2VydmljZSddO1xuXG4gIGZ1bmN0aW9uIHJlcXVpcmVTdXBlckFkbWluKGF1dGhTZXJ2aWNlKSB7XG4gICAgcmV0dXJuIGF1dGhTZXJ2aWNlLmF1dGhvcml6ZUN1cnJlbnRVc2VyRm9yUm91dGUoJ3N1cGVyLWFkbWluJyk7XG4gIH1cblxuICByZXF1aXJlQXV0aC4kaW5qZWN0ID0gWydhdXRoU2VydmljZSddO1xuXG4gIGZ1bmN0aW9uIHJlcXVpcmVBdXRoKGF1dGhTZXJ2aWNlKSB7XG4gICAgcmV0dXJuIGF1dGhTZXJ2aWNlLmF1dGhlbnRpY2F0ZWRVc2VyRm9yUm91dGUoKTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5ydW4oYXBwUnVuKTtcblxuICBmdW5jdGlvbiBhcHBSdW4oJHJvb3RTY29wZSwgJHN0YXRlLCBzaWRlYmFyU2VydmljZSkge1xuICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VFcnJvcicsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcywgZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciA9PT0gJ25vdCBhdXRob3JpemVkJykge1xuICAgICAgICAkc3RhdGUuZ28oJ2xvZ2luJyk7XG4gICAgICAgICRzdGF0ZS5wcmV2aW91cyA9IHRvU3RhdGU7XG4gICAgICAgICRzdGF0ZS5wcmV2UGFyYW1zID0gdG9QYXJhbXM7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzaWRlYmFyU2VydmljZS5zZXRTaWRlYmFyU3RhdHVzKGZhbHNlKTtcbiAgICB9KTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5mYWN0b3J5KCdhdXRoU2VydmljZScsIGF1dGhTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBhdXRoU2VydmljZSgkc3RhdGUsICRodHRwLCAkcSwgdXNlclNlcnZpY2UsIGlkZW50aXR5U2VydmljZSwgbm90aWZ5U2VydmljZSkge1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgYXV0aGVudGljYXRlVXNlcjogYXV0aGVudGljYXRlVXNlcixcbiAgICAgIGNyZWF0ZVVzZXI6IGNyZWF0ZVVzZXIsXG4gICAgICBsb2dvdXQ6IGxvZ291dCxcbiAgICAgIGF1dGhvcml6ZUN1cnJlbnRVc2VyRm9yUm91dGU6IGF1dGhvcml6ZUN1cnJlbnRVc2VyRm9yUm91dGUsXG4gICAgICBhdXRoZW50aWNhdGVkVXNlckZvclJvdXRlOiBhdXRoZW50aWNhdGVkVXNlckZvclJvdXRlXG4gICAgfTtcbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZVVzZXIodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICB2YXIgZGZkID0gJHEuZGVmZXIoKTtcbiAgICAgICRodHRwLnBvc3QoJy9sb2dpbicsIHtcbiAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIgPSByZXNwb25zZS5kYXRhLnVzZXI7XG4gICAgICAgICAgZGZkLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlID09PSAndW52ZXJpZmllZCcpIHtcbiAgICAgICAgICBkZmQucmVzb2x2ZSgndW52ZXJpZmllZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRmZC5yZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGZkLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVXNlcih1c2VyRGF0YSkge1xuICAgICAgdmFyIGRmZCA9ICRxLmRlZmVyKCk7XG4gICAgICAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywge1xuICAgICAgICB1c2VyRGF0YTogdXNlckRhdGFcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5kYXRhKSB7XG4gICAgICAgICAgZGZkLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGZkLnJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEucmVhc29uID09PSAnRXJyb3I6IER1cGxpY2F0ZSBVc2VybmFtZScpIHtcbiAgICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdTb3JyeSwgYW4gYWNjb3VudCBhbHJlYWR5IGV4aXN0cyB3aXRoIHRoYXQgZW1haWwgYWRkcmVzcy4nKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGZkLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9nb3V0KCkge1xuICAgICAgdmFyIGRmZCA9ICRxLmRlZmVyKCk7XG4gICAgICAkaHR0cC5wb3N0KCcvbG9nb3V0Jywge1xuICAgICAgICBsb2dvdXQ6IHRydWVcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGRmZC5yZXNvbHZlKCk7XG4gICAgICAgICRzdGF0ZS5nbygnaG9tZScpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGZkLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXV0aG9yaXplQ3VycmVudFVzZXJGb3JSb3V0ZShyb2xlKSB7XG4gICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aG9yaXplZChyb2xlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAkcS5yZWplY3QoJ25vdCBhdXRob3JpemVkJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXV0aGVudGljYXRlZFVzZXJGb3JSb3V0ZSgpIHtcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJHEucmVqZWN0KCdub3QgYXV0aG9yaXplZCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5mYWN0b3J5KCd1c2VyU2VydmljZScsIHVzZXJTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiB1c2VyU2VydmljZSgkaHR0cCkge1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgZ2V0QWxsVXNlcnM6IGdldEFsbFVzZXJzLFxuICAgICAgdmVyaWZ5VXNlcjogdmVyaWZ5VXNlclxuICAgIH07XG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICBmdW5jdGlvbiBnZXRBbGxVc2VycygpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKS50aGVuKGZ1bmN0aW9uICh1c2Vycykge1xuICAgICAgICByZXR1cm4gdXNlcnM7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2ZXJpZnlVc2VyKHVzZXJJZCwgdmVyaWZpY2F0aW9uVG9rZW4pIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlci92ZXJpZmljYXRpb24nLCB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIHVzZXJJZDogdXNlcklkLFxuICAgICAgICAgIHZlcmlmaWNhdGlvblRva2VuOiB2ZXJpZmljYXRpb25Ub2tlblxuICAgICAgICB9XG4gICAgICB9KTsgIFxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBMb2dpbkN0cmwpO1xuXG4gIGZ1bmN0aW9uIExvZ2luQ3RybCgkc3RhdGUsIGF1dGhTZXJ2aWNlLCBub3RpZnlTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5sb2dpbiA9IGxvZ2luO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgYXV0aFNlcnZpY2UuYXV0aGVudGljYXRlVXNlcih1c2VybmFtZSwgcGFzc3dvcmQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICghcmVzcG9uc2UpIHtcbiAgICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdVc2VybmFtZSAvIHBhc3N3b3JkIGNvbWJpbmFpdG9uIGluY29ycmVjdCcpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlID09PSAndW52ZXJpZmllZCcpIHtcbiAgICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdZb3UgbXVzdCB2ZXJpZnkgeW91ciBlbWFpbCBiZWZvcmUgeW91IGNhbiBsb2dpbicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICgkc3RhdGUucHJldmlvdXMpIHtcbiAgICAgICAgICAgICRzdGF0ZS5nbygkc3RhdGUucHJldmlvdXMsICRzdGF0ZS5wcmV2UGFyYW1zKTtcbiAgICAgICAgICAgICRzdGF0ZS5wcmV2aW91cyA9IG51bGw7XG4gICAgICAgICAgICAkc3RhdGUucHJldlBhcmFtcyA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRzdGF0ZS5nbygnaG9tZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ1JlZ2lzdGVyQ3RybCcsIFJlZ2lzdGVyQ3RybCk7XG5cbiAgZnVuY3Rpb24gUmVnaXN0ZXJDdHJsKCRzdGF0ZSwgYXV0aFNlcnZpY2UsIG5vdGlmeVNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7fVxuXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXIobmV3VXNlcikge1xuICAgICAgaWYgKG5ld1VzZXIucGFzc3dvcmQgIT09IG5ld1VzZXIuY29uZmlybVBhc3N3b3JkKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ1Bhc3N3b3JkcyBkb25cXCd0IG1hdGNoIScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXV0aFNlcnZpY2UuY3JlYXRlVXNlcihuZXdVc2VyKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkc3RhdGUuZ28oJ3ZlcmlmeScpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignVmVyaWZpY2F0aW9uQ3RybCcsIFZlcmlmaWNhdGlvbkN0cmwpO1xuXG4gIGZ1bmN0aW9uIFZlcmlmaWNhdGlvbkN0cmwoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIHVzZXJTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS52ZXJpZmllZCA9IHVuZGVmaW5lZDtcbiAgICB2bS52ZXJpZnlpbmcgPSBmYWxzZTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGlmICgkc3RhdGVQYXJhbXMudXNlcklkICYmICRzdGF0ZVBhcmFtcy52ZXJpZmljYXRpb25Ub2tlbikge1xuICAgICAgICB2bS52ZXJpZnlpbmcgPSB0cnVlO1xuICAgICAgICB2bS52ZXJpZmllZCA9IG51bGw7XG4gICAgICAgIHVzZXJTZXJ2aWNlLnZlcmlmeVVzZXIoJHN0YXRlUGFyYW1zLnVzZXJJZCwgJHN0YXRlUGFyYW1zLnZlcmlmaWNhdGlvblRva2VuKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhKSB7XG4gICAgICAgICAgICB2bS52ZXJpZmllZCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZtLnZlcmlmaWVkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2twQWN0aXZlQ2hhbGxlbmVnZXMnLCBrcEFjdGl2ZUNoYWxsZW5lZ2VzKTtcblxuICBmdW5jdGlvbiBrcEFjdGl2ZUNoYWxsZW5lZ2VzKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogY3RybEZ1bmMsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgY29tcGV0aXRpb25JZDogJ0AnXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVVcmw6ICcvY2hhbGxlbmdlcy9jb21wb25lbnRzL2FjdGl2ZS1jaGFsbGVuZ2VzLmh0bWwnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKCRzY29wZSwgY2hhbGxlbmdlc1NlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmNoYWxsZW5nZXMgPSBbXTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGdldEFjdGl2ZUNoYWxsZW5nZXMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBY3RpdmVDaGFsbGVuZ2VzKCkge1xuICAgICAgdm0uY2hhbGxlbmdlcyA9IFtdO1xuICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZ2V0QWN0aXZlQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24odm0uY29tcGV0aXRpb25JZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlcykge1xuICAgICAgICBpZiAoY2hhbGxlbmdlcy5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2bS5jaGFsbGVuZ2VzID0gY2hhbGxlbmdlcy5kYXRhO1xuICAgICAgICAgIF8uZm9yRWFjaCh2bS5jaGFsbGVuZ2VzLCBmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG4gICAgICAgICAgICBpZiAoY2hhbGxlbmdlLnRpbWVMaW1pdCAhPT0gMCkge1xuICAgICAgICAgICAgICBjaGFsbGVuZ2UuZXhwaXJlcyA9IChtb21lbnQoKS5kaWZmKG1vbWVudChjaGFsbGVuZ2UuY3JlYXRlZCkuYWRkKGNoYWxsZW5nZS50aW1lTGltaXQsICdkJyksJ3MnKSkgKiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNoYWxsZW5nZV9jcmVhdGVkJywgZnVuY3Rpb24gKF8sIGNoYWxsZW5nZURldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgZ2V0QWN0aXZlQ2hhbGxlbmdlcygpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNoYWxsZW5nZV9jb21wbGV0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNoYWxsZW5nZURldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBnZXRBY3RpdmVDaGFsbGVuZ2VzKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6cHlyYW1pZF91cGRhdGVkJywgZnVuY3Rpb24gKF8sIGNoYWxsZW5nZURldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgZ2V0QWN0aXZlQ2hhbGxlbmdlcygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdrcENvbXBsZXRlZENoYWxsZW5lZ2VzJywga3BDb21wbGV0ZWRDaGFsbGVuZWdlcyk7XG5cbiAgZnVuY3Rpb24ga3BDb21wbGV0ZWRDaGFsbGVuZWdlcygpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGNvbXBldGl0aW9uSWQ6ICdAJyxcbiAgICAgICAgbGltaXQ6ICdAJ1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NoYWxsZW5nZXMvY29tcG9uZW50cy9jb21wbGV0ZWQtY2hhbGxlbmdlcy5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYygkc2NvcGUsIGNoYWxsZW5nZXNTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5jaGFsbGVuZ2VzID0gW107XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBnZXRDb21wbGV0ZWRDaGFsbGVuZ2VzKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcGxldGVkQ2hhbGxlbmdlcygpIHtcbiAgICAgIHZtLmNoYWxsZW5nZXMgPSBbXTtcbiAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmdldENvbXBsZXRlZENoYWxsZW5nZXNCeUNvbXBldGl0aW9uKHZtLmNvbXBldGl0aW9uSWQsIHZtLmxpbWl0KS50aGVuKGZ1bmN0aW9uIChjaGFsbGVuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFsbGVuZ2VzLmRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZtLmNoYWxsZW5nZXMgPSBjaGFsbGVuZ2VzLmRhdGE7XG4gICAgICAgICAgXy5mb3JFYWNoKHZtLmNoYWxsZW5nZXMsIGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5sb3NlciA9IGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJyA/ICdvcHBvbmVudCcgOiAnY2hhbGxlbmdlcic7XG4gICAgICAgICAgICBjaGFsbGVuZ2Uud2hlbkNvbXBsZXRlZCA9IG1vbWVudChjaGFsbGVuZ2UuY29tcGxldGVkKS5jYWxlbmRhcihudWxsLCB7XG4gICAgICAgICAgICAgIHNhbWVEYXk6ICdbVG9kYXldJyxcbiAgICAgICAgICAgICAgbmV4dERheTogJ1tUb21vcnJvd10nLFxuICAgICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQnLFxuICAgICAgICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheV0nLFxuICAgICAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkJyxcbiAgICAgICAgICAgICAgc2FtZUVsc2U6ICdERC9NTS9ZWVlZJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czpjaGFsbGVuZ2VfY29tcGxldGVkJywgZnVuY3Rpb24gKF8sIGNoYWxsZW5nZURldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgZ2V0Q29tcGxldGVkQ2hhbGxlbmdlcygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdrcFBsYXllck92ZXJhbGxSZXN1bHRzJywga3BQbGF5ZXJPdmVyYWxsUmVzdWx0cyk7XG5cbiAgZnVuY3Rpb24ga3BQbGF5ZXJPdmVyYWxsUmVzdWx0cygpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGNvbXBldGl0aW9uSWQ6ICdAJyxcbiAgICAgICAgcGxheWVyOiAnPSdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jaGFsbGVuZ2VzL2NvbXBvbmVudHMvcGxheWVyLW92ZXJhbGwtcmVzdWx0cy5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYyhjaGFsbGVuZ2VzU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0ubWF4TGV2ZWxzID0gMTA7XG4gICAgdm0ud2lucyA9IHtcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgYXNDaGFsbGVuZ2VyOiAwLFxuICAgICAgYXNPcHBvbmVudDogMCxcbiAgICAgIGJ5Rm9yZmVpdDogMFxuICAgIH07XG4gICAgdm0ubG9zZXMgPSB7XG4gICAgICB0b3RhbDogMCxcbiAgICAgIGFzQ2hhbGxlbmdlcjogMCxcbiAgICAgIGFzT3Bwb25lbnQ6IDAsXG4gICAgICBieUZvcmZlaXQ6IDBcbiAgICB9O1xuICAgIHZtLnN0cmVhayA9IHtcbiAgICAgIHR5cGU6IG51bGwsXG4gICAgICB2YWx1ZTogMFxuICAgIH07XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBnZXRQbGF5ZXJPdmVyYWxsUmVzdWx0cyh2bS5jb21wZXRpdGlvbklkLCB2bS5wbGF5ZXIuX2lkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQbGF5ZXJPdmVyYWxsUmVzdWx0cyhjb21wZXRpdGlvbklkLCBwbGF5ZXJJZCkge1xuICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZ2V0UGxheWVyUmVzdWx0c0J5Q29tcGV0aXRpb24oY29tcGV0aXRpb25JZCwgcGxheWVySWQpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcblxuICAgICAgICAvLyBEZXRlcm1pbmUgYWxsIHRoZSBicmVhayBwb2ludHMgdG8gZmlndXJlIG91dCBsZXZlbHNcbiAgICAgICAgdmFyIGJyZWFrUG9pbnRzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0ubWF4TGV2ZWxzOyBpKyspIHtcbiAgICAgICAgICBicmVha1BvaW50cy5wdXNoKCgoKGkgKiAoaSArIDEpKSAvIDIpKSArIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVmYXVsdCBhbGwgcGxheWVycyB0byB0aGUgbG93ZXN0IGxldmVsXG4gICAgICAgIHZtLnBsYXllci5sZXZlbCA9IGJyZWFrUG9pbnRzLmxlbmd0aDtcbiAgICAgICAgLy8gTm93IGNoZWNrIHRvIHNlZSBpZiB0aGUgcGxheWVyIGlzIGF0IGEgaGlnaGVyIGxldmVsXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYnJlYWtQb2ludHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBpZiAodm0ucGxheWVyLnBvc2l0aW9uIDwgYnJlYWtQb2ludHNbaiArIDFdKSB7XG4gICAgICAgICAgICB2bS5wbGF5ZXIubGV2ZWwgPSBicmVha1BvaW50cy5pbmRleE9mKGJyZWFrUG9pbnRzW2pdKSArIDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaWd1cmUgb3V0IHRoZSBwbGF5ZXIncyBjdXJyZW50IHN0cmVha1xuICAgICAgICB2YXIgc3RyZWFrID0gMDtcbiAgICAgICAgdmFyIGNvbnRpbnVlU3RyZWFrID0gdHJ1ZTtcbiAgICAgICAgdmFyIHN0cmVha1R5cGU7XG4gICAgICAgIF8uZm9yRWFjaChyZXN1bHRzLmRhdGEsIGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgICBpZiAoY29udGludWVTdHJlYWspIHtcbiAgICAgICAgICAgIC8vIFdpbm5pbmcgU3RyZWFrXG4gICAgICAgICAgICBpZiAoKGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJyAmJiBjaGFsbGVuZ2UuY2hhbGxlbmdlci5faWQgPT09IHBsYXllcklkKSB8fFxuICAgICAgICAgICAgICAoY2hhbGxlbmdlLndpbm5lciA9PT0gJ29wcG9uZW50JyAmJiBjaGFsbGVuZ2Uub3Bwb25lbnQuX2lkID09PSBwbGF5ZXJJZCkpIHtcbiAgICAgICAgICAgICAgLy8gSWYgdGhleSBhcmUgbm90IGFscmVhZHkgb24gYSBsb3Npbmcgc3RyZWFrIGFuZCAxIHRvIHRoZWlyIHdpbm5pbmcgc3RyZWFrXG4gICAgICAgICAgICAgIGlmIChzdHJlYWtUeXBlICE9PSAnbG9zaW5nJykge1xuICAgICAgICAgICAgICAgIHN0cmVhayArPSAxO1xuICAgICAgICAgICAgICAgIHN0cmVha1R5cGUgPSAnd2lubmluZyc7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGludWVTdHJlYWsgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTG9zaW5nIFN0cmVha1xuICAgICAgICAgICAgfSBlbHNlIGlmICgoY2hhbGxlbmdlLndpbm5lciA9PT0gJ29wcG9uZW50JyAmJiBjaGFsbGVuZ2UuY2hhbGxlbmdlci5faWQgPT09IHBsYXllcklkKSB8fFxuICAgICAgICAgICAgICAoY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInICYmIGNoYWxsZW5nZS5vcHBvbmVudC5faWQgPT09IHBsYXllcklkKSkge1xuICAgICAgICAgICAgICAvLyBJZiB0aGV5IGFyZSBub3QgYWxyZWFkeSBvbiBhIHdpbm5pbmcgc3RyZWFrIGFuZCAxIHRvIHRoZWlyIGxvc2luZyBzdHJlYWtcbiAgICAgICAgICAgICAgaWYgKHN0cmVha1R5cGUgIT09ICd3aW5uaW5nJykge1xuICAgICAgICAgICAgICAgIHN0cmVhayArPSAxO1xuICAgICAgICAgICAgICAgIHN0cmVha1R5cGUgPSAnbG9zaW5nJztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZVN0cmVhayA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZtLnN0cmVhayA9IHtcbiAgICAgICAgICAgIHR5cGU6IHN0cmVha1R5cGUsXG4gICAgICAgICAgICB2YWx1ZTogc3RyZWFrXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRmlndXJlIG91dCB3aW5zIGFuZCBsb3Nlc1xuICAgICAgICB2bS53aW5zLmFzT3Bwb25lbnQgPSBfLnNpemUoXy5maWx0ZXIocmVzdWx0cy5kYXRhLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGNoYWxsZW5nZS5vcHBvbmVudC5faWQgPT09IHBsYXllcklkICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdvcHBvbmVudCdcbiAgICAgICAgICApO1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgdm0ud2lucy5hc0NoYWxsZW5nZXIgPSBfLnNpemUoXy5maWx0ZXIocmVzdWx0cy5kYXRhLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLl9pZCA9PT0gcGxheWVySWQgJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInXG4gICAgICAgICAgKTtcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHZtLndpbnMudG90YWwgPSB2bS53aW5zLmFzQ2hhbGxlbmdlciArIHZtLndpbnMuYXNPcHBvbmVudDtcblxuICAgICAgICB2bS53aW5zLmJ5Rm9yZmVpdCA9IF8uc2l6ZShfLmZpbHRlcihyZXN1bHRzLmRhdGEsIGZ1bmN0aW9uKGNoYWxsZW5nZSkgeyBcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgY2hhbGxlbmdlLmZvcmZlaXQgJiYgKChjaGFsbGVuZ2UuY2hhbGxlbmdlci5faWQgPT09IHBsYXllcklkICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJykgfHxcbiAgICAgICAgICAgIChjaGFsbGVuZ2Uub3Bwb25lbnQuX2lkID09PSBwbGF5ZXJJZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnKSlcbiAgICAgICAgICApO1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgdm0ubG9zZXMuYXNPcHBvbmVudCA9IF8uc2l6ZShfLmZpbHRlcihyZXN1bHRzLmRhdGEsIGZ1bmN0aW9uKGNoYWxsZW5nZSkgeyBcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgY2hhbGxlbmdlLm9wcG9uZW50Ll9pZCA9PT0gcGxheWVySWQgJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInXG4gICAgICAgICAgKTtcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHZtLmxvc2VzLmFzQ2hhbGxlbmdlciA9IF8uc2l6ZShfLmZpbHRlcihyZXN1bHRzLmRhdGEsIGZ1bmN0aW9uKGNoYWxsZW5nZSkgeyBcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgY2hhbGxlbmdlLmNoYWxsZW5nZXIuX2lkID09PSBwbGF5ZXJJZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnXG4gICAgICAgICAgKTtcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHZtLmxvc2VzLnRvdGFsID0gdm0ubG9zZXMuYXNDaGFsbGVuZ2VyICsgdm0ubG9zZXMuYXNPcHBvbmVudDtcblxuICAgICAgICB2bS5sb3Nlcy5ieUZvcmZlaXQgPSBfLnNpemUoXy5maWx0ZXIocmVzdWx0cy5kYXRhLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGNoYWxsZW5nZS5mb3JmZWl0ICYmICgoY2hhbGxlbmdlLmNoYWxsZW5nZXIuX2lkID09PSBwbGF5ZXJJZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnKSB8fFxuICAgICAgICAgICAgKGNoYWxsZW5nZS5vcHBvbmVudC5faWQgPT09IHBsYXllcklkICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJykpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmZhY3RvcnkoJ2NoYWxsZW5nZXNTZXJ2aWNlJywgY2hhbGxlbmdlc1NlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIGNoYWxsZW5nZXNTZXJ2aWNlKCRodHRwKSB7XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBjcmVhdGVDaGFsbGVuZ2U6IGNyZWF0ZUNoYWxsZW5nZSxcbiAgICAgIGNvbXBsZXRlQ2hhbGxlbmdlOiBjb21wbGV0ZUNoYWxsZW5nZSxcbiAgICAgIGdldENoYWxsZW5nZXNCeUNvbXBldGl0aW9uOiBnZXRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbixcbiAgICAgIGdldEFjdGl2ZUNoYWxsZW5nZXNCeUNvbXBldGl0aW9uOiBnZXRBY3RpdmVDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbixcbiAgICAgIGdldEFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllcjogZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyLFxuICAgICAgZ2V0Q29tcGxldGVkQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb246IGdldENvbXBsZXRlZENoYWxsZW5nZXNCeUNvbXBldGl0aW9uLFxuICAgICAgZGVsZXRlQWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyOiBkZWxldGVBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXIsXG4gICAgICBnZXRQbGF5ZXJSZXN1bHRzQnlDb21wZXRpdGlvbjogZ2V0UGxheWVyUmVzdWx0c0J5Q29tcGV0aXRpb25cbiAgICB9O1xuXG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDaGFsbGVuZ2UoY2hhbGxlbmdlKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jaGFsbGVuZ2VzL2NyZWF0ZScsIHtcbiAgICAgICAgY2hhbGxlbmdlOiBjaGFsbGVuZ2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlQ2hhbGxlbmdlKGNoYWxsZW5nZSkge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY2hhbGxlbmdlcy9jb21wbGV0ZScsICB7XG4gICAgICAgIGNoYWxsZW5nZTogY2hhbGxlbmdlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbihjb21wZXRpdGlvbklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2NoYWxsZW5nZXMvY29tcGV0aXRpb24nLCAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFjdGl2ZUNoYWxsZW5nZXNCeUNvbXBldGl0aW9uKGNvbXBldGl0aW9uSWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY2hhbGxlbmdlcy9hY3RpdmUvY29tcGV0aXRpb24nLCAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllcihjb21wZXRpdGlvbklkLCBwbGF5ZXJJZCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jaGFsbGVuZ2VzL2FjdGl2ZS9jb21wZXRpdGlvbi9wbGF5ZXInLCAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkLFxuICAgICAgICAgIHBsYXllcklkOiBwbGF5ZXJJZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDb21wbGV0ZWRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbihjb21wZXRpdGlvbklkLCBsaW1pdCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jaGFsbGVuZ2VzL2NvbXBsZXRlZC9jb21wZXRpdGlvbicsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgICAgbGltaXQ6IGxpbWl0XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllcihjb21wZXRpdGlvbklkLCBwbGF5ZXJJZCkge1xuICAgICAgcmV0dXJuICRodHRwLmRlbGV0ZSgnL2FwaS9jaGFsbGVuZ2VzL2FjdGl2ZS9jb21wZXRpdGlvbi9wbGF5ZXIvZGVsZXRlJywgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgICBwbGF5ZXJJZDogcGxheWVySWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGxheWVyUmVzdWx0c0J5Q29tcGV0aXRpb24oY29tcGV0aXRpb25JZCwgcGxheWVySWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY2hhbGxlbmdlcy9yZXN1bHRzL2NvbXBldGl0aW9uL3BsYXllcicsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgICAgcGxheWVySWQ6IHBsYXllcklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BGb290ZXInLCBrcEZvb3Rlcik7XG5cbiAgZnVuY3Rpb24ga3BGb290ZXIoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jb21tb24vY29tcG9uZW50cy9mb290ZXIuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoaWRlbnRpdHlTZXJ2aWNlLCBhdXRoU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uaW5kZW50aXR5ID0gaWRlbnRpdHlTZXJ2aWNlO1xuICAgIHZtLmxvZ291dCA9IGxvZ291dDtcblxuICAgIGZ1bmN0aW9uIGxvZ291dCgpIHtcbiAgICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BIZWFkZXInLCBrcEhlYWRlcik7XG5cbiAgZnVuY3Rpb24ga3BIZWFkZXIoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ2hlYWRlckN0cmwnLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NvbW1vbi9jb21wb25lbnRzL2hlYWRlci5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYyhzaWRlYmFyU2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlLCBhdXRoU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uaW5kZW50aXR5ID0gaWRlbnRpdHlTZXJ2aWNlO1xuICAgIHZtLmxvZ291dCA9IGxvZ291dDtcbiAgICB2bS5zaWRlYmFyU3RhdHVzID0gc2lkZWJhclNlcnZpY2UuZ2V0U2lkZWJhclN0YXR1cygpO1xuICAgIHZtLnRvZ2dsZVNpZGViYXIgPSB0b2dnbGVTaWRlYmFyO1xuXG4gICAgZnVuY3Rpb24gdG9nZ2xlU2lkZWJhcigpIHtcbiAgICAgIHZtLnNpZGViYXJTdGF0dXMubGVmdCA9ICF2bS5zaWRlYmFyU3RhdHVzLmxlZnQ7XG4gICAgICBzaWRlYmFyU2VydmljZS5zZXRTaWRlYmFyU3RhdHVzKHZtLnNpZGViYXJTdGF0dXMubGVmdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9nb3V0KCkge1xuICAgICAgYXV0aFNlcnZpY2UubG9nb3V0KCk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdrcFNpZGViYXInLCBrcFNpZGViYXIpO1xuXG4gIGZ1bmN0aW9uIGtwU2lkZWJhcigpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAnc2lkZWJhckN0cmwnLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NvbW1vbi9jb21wb25lbnRzL3NpZGViYXIuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoaWRlbnRpdHlTZXJ2aWNlLCBhdXRoU2VydmljZSwgc2lkZWJhclNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmluZGVudGl0eSA9IGlkZW50aXR5U2VydmljZTtcbiAgICB2bS5sb2dvdXQgPSBsb2dvdXQ7XG4gICAgdm0uc2lkZWJhclN0YXR1cyA9IHNpZGViYXJTZXJ2aWNlLmdldFNpZGViYXJTdGF0dXMoKTtcblxuICAgIGZ1bmN0aW9uIGxvZ291dCgpIHtcbiAgICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5maWx0ZXIoJ29yZGVyT2JqZWN0QnknLCBvcmRlck9iamVjdEJ5KTtcblxuICBmdW5jdGlvbiBvcmRlck9iamVjdEJ5KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQsIGF0dHJpYnV0ZSkge1xuICAgICAgaWYgKCFhbmd1bGFyLmlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuXG4gICAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICAgIGZvciAodmFyIG9iamVjdEtleSBpbiBpbnB1dCkge1xuICAgICAgICBhcnJheS5wdXNoKGlucHV0W29iamVjdEtleV0pO1xuICAgICAgfVxuXG4gICAgICBhcnJheS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIGEgPSBwYXJzZUludChhW2F0dHJpYnV0ZV0pO1xuICAgICAgICBiID0gcGFyc2VJbnQoYlthdHRyaWJ1dGVdKTtcbiAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdIb21lQ3RybCcsIEhvbWVDdHJsKTtcblxuICBmdW5jdGlvbiBIb21lQ3RybCgpIHtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHt9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuZmFjdG9yeSgnaWRlbnRpdHlTZXJ2aWNlJywgaWRlbnRpdHlTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBpZGVudGl0eVNlcnZpY2UoJHdpbmRvdykge1xuICAgIHZhciBjdXJyZW50VXNlcjtcbiAgICBpZiAoJHdpbmRvdy5ib290c3RyYXBwZWRVc2VyT2JqZWN0ICE9PSBudWxsKSB7XG4gICAgICBjdXJyZW50VXNlciA9ICR3aW5kb3cuYm9vdHN0cmFwcGVkVXNlck9iamVjdDtcbiAgICB9XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBjdXJyZW50VXNlcjogY3VycmVudFVzZXIsXG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGlzQXV0aGVudGljYXRlZCxcbiAgICAgIGlzQXV0aG9yaXplZDogaXNBdXRob3JpemVkXG4gICAgfTtcbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGlzQXV0aGVudGljYXRlZCgpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuY3VycmVudFVzZXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBdXRob3JpemVkKHJvbGUpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuY3VycmVudFVzZXIgJiYgdGhpcy5jdXJyZW50VXNlci5yb2xlcy5pbmRleE9mKHJvbGUpID4gLTE7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmZhY3RvcnkoJ25vdGlmeVNlcnZpY2UnLCBub3RpZnlTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBub3RpZnlTZXJ2aWNlKCkge1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgaW5mbzogaW5mbyxcbiAgICAgIHN1Y2Nlc3M6IHN1Y2Nlc3MsXG4gICAgICB3YXJuaW5nOiB3YXJuaW5nLFxuICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgaW52ZXJzZTogaW52ZXJzZVxuICAgIH07XG5cbiAgICAkLm5vdGlmeURlZmF1bHRzKHtcbiAgICAgIG5ld2VzdF9vbl90b3A6IHRydWUsXG4gICAgICBvZmZzZXQ6IHtcbiAgICAgICAgeDogMjAsXG4gICAgICAgIHk6IDg1XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGluZm8obWVzc2FnZSwgdXJsLCB0YXJnZXQpIHtcbiAgICAgICQubm90aWZ5KHtcbiAgICAgICAgLy8gb3B0aW9uc1xuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0sIHtcbiAgICAgICAgLy8gc2V0dGluZ3NcbiAgICAgICAgdHlwZTogJ2luZm8nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdWNjZXNzKG1lc3NhZ2UsIHVybCwgdGFyZ2V0KSB7XG4gICAgICAkLm5vdGlmeSh7XG4gICAgICAgIC8vIG9wdGlvbnNcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgICB9LCB7XG4gICAgICAgIC8vIHNldHRpbmdzXG4gICAgICAgIHR5cGU6ICdzdWNjZXNzJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlLCB1cmwsIHRhcmdldCkge1xuICAgICAgJC5ub3RpZnkoe1xuICAgICAgICAvLyBvcHRpb25zXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgfSwge1xuICAgICAgICAvLyBzZXR0aW5nc1xuICAgICAgICB0eXBlOiAnd2FybmluZydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UsIHVybCwgdGFyZ2V0KSB7XG4gICAgICAkLm5vdGlmeSh7XG4gICAgICAgIC8vIG9wdGlvbnNcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgICB9LCB7XG4gICAgICAgIC8vIHNldHRpbmdzXG4gICAgICAgIHR5cGU6ICdkYW5nZXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZlcnNlKG1lc3NhZ2UsIHVybCwgdGFyZ2V0KSB7XG4gICAgICAkLm5vdGlmeSh7XG4gICAgICAgIC8vIG9wdGlvbnNcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgICB9LCB7XG4gICAgICAgIC8vIHNldHRpbmdzXG4gICAgICAgIHR5cGU6ICdpbnZlcnNlJ1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmZhY3RvcnkoJ3Njcm9sbGJhclNlcnZpY2UnLCBzY3JvbGxiYXJTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBzY3JvbGxiYXJTZXJ2aWNlKCkge1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgbWFsaWh1U2Nyb2xsOiBtYWxpaHVTY3JvbGxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICBmdW5jdGlvbiBtYWxpaHVTY3JvbGwoc2VsZWN0b3IsIHRoZW1lLCBzY3JvbGxheGlzLCBtb3VzZXdoZWVsYXhpcykge1xuICAgICAgJChzZWxlY3RvcikubUN1c3RvbVNjcm9sbGJhcih7XG4gICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgc2Nyb2xsSW5lcnRpYTogMTAwLFxuICAgICAgICBheGlzOiBzY3JvbGxheGlzLFxuICAgICAgICBtb3VzZVdoZWVsOiB7XG4gICAgICAgICAgZW5hYmxlOiB0cnVlLFxuICAgICAgICAgIGF4aXM6IG1vdXNld2hlZWxheGlzLFxuICAgICAgICAgIHByZXZlbnREZWZhdWx0OiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5mYWN0b3J5KCdzaWRlYmFyU2VydmljZScsIHNpZGViYXJTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBzaWRlYmFyU2VydmljZSgpIHtcbiAgICB2YXIgc2lkZWJhclN0YXR1cyA9IHtcbiAgICAgIGxlZnQ6IGZhbHNlLFxuICAgICAgcmlnaHQ6IGZhbHNlXG4gICAgfTtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGdldFNpZGViYXJTdGF0dXM6IGdldFNpZGViYXJTdGF0dXMsXG4gICAgICBzZXRTaWRlYmFyU3RhdHVzOiBzZXRTaWRlYmFyU3RhdHVzXG4gICAgfTtcblxuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gZ2V0U2lkZWJhclN0YXR1cygpIHtcbiAgICAgIHJldHVybiBzaWRlYmFyU3RhdHVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFNpZGViYXJTdGF0dXMoc3RhdHVzKSB7XG4gICAgICBzaWRlYmFyU3RhdHVzLmxlZnQgPSBzdGF0dXM7XG4gICAgfVxuICB9XG59KSgpOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAuc2VydmljZSgnd2Vic29ja2V0U2VydmljZScsIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkd2luZG93KSB7XG4gICAgZnVuY3Rpb24gd2Vic29ja2V0SG9zdCgpIHtcbiAgICAgIGlmICgkd2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6Jykge1xuICAgICAgICByZXR1cm4gJ3dzczovLycgKyAkd2luZG93LmxvY2F0aW9uLmhvc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ3dzOi8vJyArICR3aW5kb3cubG9jYXRpb24uaG9zdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY29ubmVjdGlvbjtcbiAgICB0aGlzLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25uZWN0aW9uID0gbmV3IFdlYlNvY2tldCh3ZWJzb2NrZXRIb3N0KCkpO1xuXG4gICAgICBjb25uZWN0aW9uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBwYXlsb2FkID0gSlNPTi5wYXJzZShlLmRhdGEpO1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3dzOicgKyBwYXlsb2FkLnRvcGljLCBwYXlsb2FkLmRhdGEpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdGhpcy5zZW5kID0gZnVuY3Rpb24gKHRvcGljLCBkYXRhKSB7XG4gICAgICB2YXIganNvbiA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICBkYXRhOiBkYXRhXG4gICAgICB9KTtcbiAgICAgIGNvbm5lY3Rpb24uc2VuZChqc29uKTtcbiAgICB9O1xuICB9KS5ydW4oZnVuY3Rpb24gKHdlYnNvY2tldFNlcnZpY2UpIHtcbiAgICB3ZWJzb2NrZXRTZXJ2aWNlLmNvbm5lY3QoKTtcbiAgfSk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuZmFjdG9yeSgncHlyYW1pZHNTZXJ2aWNlJywgcHlyYW1pZHNTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBweXJhbWlkc1NlcnZpY2UoJGh0dHApIHtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGdldFB5cmFtaWQ6IGdldFB5cmFtaWQsXG4gICAgICBnZXRQeXJhbWlkc0ZvclVzZXI6IGdldFB5cmFtaWRzRm9yVXNlcixcbiAgICAgIGdldFB5cmFtaWRzOiBnZXRQeXJhbWlkcyxcbiAgICAgIGNyZWF0ZVB5cmFtaWQ6IGNyZWF0ZVB5cmFtaWQsXG4gICAgICB1cGRhdGVQeXJhbWlkOiB1cGRhdGVQeXJhbWlkLFxuICAgICAgc3dhcFBvc2l0aW9uczogc3dhcFBvc2l0aW9ucyxcbiAgICAgIGFkZFBsYXllclRvUHlyYW1pZDogYWRkUGxheWVyVG9QeXJhbWlkLFxuICAgICAgYWRkUGxheWVyVG9QeXJhbWlkUmVxdWVzdDogYWRkUGxheWVyVG9QeXJhbWlkUmVxdWVzdCxcbiAgICAgIHJlbW92ZWRQbGF5ZXJGcm9tUHlyYW1pZDogcmVtb3ZlZFBsYXllckZyb21QeXJhbWlkLFxuICAgICAgYXBwcm92ZVBlbmRpbmdQbGF5ZXI6IGFwcHJvdmVQZW5kaW5nUGxheWVyLFxuICAgICAgZGVueVBlbmRpbmdQbGF5ZXI6IGRlbnlQZW5kaW5nUGxheWVyXG4gICAgfTtcblxuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHB5cmFtaWQgZnJvbSB0aGUgZGF0YWJhc2UgKG9yIG1lbW9yeSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBweXJhbWlkIGlkIGZvciB0aGUgcmVxdWVzdGVkIHB5cmFtaWRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHB5cmFtaWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRQeXJhbWlkKGNvbXBldGl0aW9uSWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcHlyYW1pZCcsIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBweXJhbWlkcyBmcm9tIHRoZSBkYXRhYmFzZSB0aGF0IGEgcGFydGljdWxhciB1c2VyIGlzIGluY2x1ZGVkIGluXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3VzZXJJZH0gdGhlIHVzZXIgaWQgZm9yIHRoZSByZXF1ZXN0ZWQgdXNlclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gcHlyYW1pZHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRQeXJhbWlkc0ZvclVzZXIodXNlcklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3B5cmFtaWRzL3VzZXInLCB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIHVzZXJJZDogdXNlcklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGFjdGl2ZSBweXJhbWlkcyBmcm9tIHRoZSBkYXRhYmFzZVxuICAgICAqXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBweXJhbWlkc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFB5cmFtaWRzKCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9weXJhbWlkcycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVB5cmFtaWQocHlyYW1pZCkge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcHlyYW1pZHMvY3JlYXRlJywge1xuICAgICAgICBweXJhbWlkOiBweXJhbWlkXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVQeXJhbWlkKHB5cmFtaWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3B5cmFtaWRzL3VwZGF0ZScsIHtcbiAgICAgICAgcHlyYW1pZDogcHlyYW1pZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3dhcFBvc2l0aW9ucyhjb21wZXRpdGlvbklkLCBjaGFsbGVuZ2VyLCBvcHBvbmVudCkge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcHlyYW1pZHMvc3dhcFBvc2l0aW9ucycsIHtcbiAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgY2hhbGxlbmdlcjogY2hhbGxlbmdlcixcbiAgICAgICAgb3Bwb25lbnQ6IG9wcG9uZW50XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRQbGF5ZXJUb1B5cmFtaWQoY29tcGV0aXRpb25JZCwgcGxheWVyKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9weXJhbWlkcy9hZGRQbGF5ZXInLCB7XG4gICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgIHBsYXllcjogcGxheWVyXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRQbGF5ZXJUb1B5cmFtaWRSZXF1ZXN0KGNvbXBldGl0aW9uLCBwbGF5ZXIpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3B5cmFtaWRzL2FkZFBsYXllclJlcXVlc3QnLCB7XG4gICAgICAgIGNvbXBldGl0aW9uOiBjb21wZXRpdGlvbixcbiAgICAgICAgcGxheWVyOiBwbGF5ZXJcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZWRQbGF5ZXJGcm9tUHlyYW1pZChjb21wZXRpdGlvbklkLCByZW1vdmVkUGxheWVyLCBwbGF5ZXJzKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9weXJhbWlkcy9yZW1vdmVQbGF5ZXInLCB7XG4gICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgIHJlbW92ZWRQbGF5ZXI6IHJlbW92ZWRQbGF5ZXIsXG4gICAgICAgIHBsYXllcnM6IHBsYXllcnNcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcHJvdmVQZW5kaW5nUGxheWVyKGNvbXBldGl0aW9uSWQsIHBsYXllcikge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcHlyYW1pZHMvYXBwcm92ZVBsYXllcicsIHtcbiAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgcGxheWVyOiBwbGF5ZXJcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbnlQZW5kaW5nUGxheWVyKGNvbXBldGl0aW9uSWQsIHBsYXllcikge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcHlyYW1pZHMvZGVueVBsYXllcicsIHtcbiAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgcGxheWVyOiBwbGF5ZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BQZW5kaW5nUGxheWVycycsIGtwUGVuZGluZ1BsYXllcnMpO1xuXG4gIGZ1bmN0aW9uIGtwUGVuZGluZ1BsYXllcnMoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBzY29wZToge1xuICAgICAgICBweXJhbWlkOiAnPSdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogJy9weXJhbWlkcy9jb21wb25lbnRzL3BlbmRpbmctcGxheWVycy5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYyhweXJhbWlkc1NlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnBlbmRpbmdQbGF5ZXJzID0gW107XG4gICAgdm0uYXBwcm92ZVBlbmRpbmdQbGF5ZXIgPSBhcHByb3ZlUGVuZGluZ1BsYXllcjtcbiAgICB2bS5kZW55UGVuZGluZ1BsYXllciA9IGRlbnlQZW5kaW5nUGxheWVyO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge31cblxuICAgIGZ1bmN0aW9uIGFwcHJvdmVQZW5kaW5nUGxheWVyKHBsYXllcikge1xuICAgICAgcGxheWVyLnBvc2l0aW9uID0gdm0ucHlyYW1pZC5wbGF5ZXJzLmxlbmd0aCArIDE7XG4gICAgICBweXJhbWlkc1NlcnZpY2UuYXBwcm92ZVBlbmRpbmdQbGF5ZXIodm0ucHlyYW1pZC5faWQsIHBsYXllcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVueVBlbmRpbmdQbGF5ZXIocGxheWVyKSB7XG4gICAgICBweXJhbWlkc1NlcnZpY2UuZGVueVBlbmRpbmdQbGF5ZXIodm0ucHlyYW1pZC5faWQsIHBsYXllcik7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdrcFB5cmFtaWRDb21wYWN0Jywga3BQeXJhbWlkQ29tcGFjdCk7XG5cbiAgZnVuY3Rpb24ga3BQeXJhbWlkQ29tcGFjdCgpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIHR5cGU6ICdAJyxcblxuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL3B5cmFtaWRzL2NvbXBvbmVudHMvcHlyYW1pZC1jb21wYWN0Lmh0bWwnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKHB5cmFtaWRzU2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5weXJhbWlkcyA9IG51bGw7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBpZiAodm0udHlwZSA9PT0gJ3VzZXInKSB7XG4gICAgICAgIHB5cmFtaWRzU2VydmljZS5nZXRQeXJhbWlkc0ZvclVzZXIoaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZCkudGhlbihmdW5jdGlvbiAocHlyYW1pZHMpIHtcbiAgICAgICAgICB2bS5weXJhbWlkcyA9IHB5cmFtaWRzLmRhdGE7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHlyYW1pZHNTZXJ2aWNlLmdldFB5cmFtaWRzKCkudGhlbihmdW5jdGlvbiAocHlyYW1pZHMpIHtcbiAgICAgICAgICB2bS5weXJhbWlkcyA9IHB5cmFtaWRzLmRhdGE7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2twUHlyYW1pZCcsIGtwUHlyYW1pZCk7XG5cbiAgZnVuY3Rpb24ga3BQeXJhbWlkKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgdGVtcGxhdGVVcmw6ICcvcHlyYW1pZHMvY29tcG9uZW50cy9weXJhbWlkLmh0bWwnLFxuICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGNvbXBldGl0aW9uSWQ6ICdAJ1xuICAgICAgfSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKCRzY29wZSwgJHN0YXRlLCBweXJhbWlkc1NlcnZpY2UsICRmaWx0ZXIsIG5vdGlmeVNlcnZpY2UsIGlkZW50aXR5U2VydmljZSwgY2hhbGxlbmdlc1NlcnZpY2UpIHtcbiAgICB2YXIgbWF4TGV2ZWxzID0gMTA7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5weXJhbWlkID0ge307XG4gICAgdm0uYnJlYWtQb2ludHMgPSBbXTtcbiAgICB2bS5sZXZlbHMgPSBbXTtcbiAgICB2bS5udW1iZXJPZkJsb2NrcyA9IDA7XG4gICAgdm0uY3VycmVudFVzZXJJc09uUHlyYW1pZCA9IGZhbHNlO1xuICAgIHZtLmN1cnJlbnRVc2VySXNQZW5kaW5nID0gZmFsc2U7XG4gICAgdm0uY3VycmVudFVzZXJJc093bmVyID0gZmFsc2U7XG4gICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gZmFsc2U7XG4gICAgdm0uYXZhaWxhYmxlQ2hhbGxlbmdlcyA9IGZhbHNlO1xuICAgIHZtLmNyZWF0ZUNoYWxsZW5nZSA9IGNyZWF0ZUNoYWxsZW5nZTtcbiAgICB2bS5jb21wbGV0ZUNoYWxsZW5nZSA9IGNvbXBsZXRlQ2hhbGxlbmdlO1xuICAgIHZtLmNoYWxsZW5nZUV4cGlyZWQgPSBjaGFsbGVuZ2VFeHBpcmVkO1xuICAgIHZtLmN1cnJlbnRVc2VyUGxheWVyID0ge307XG4gICAgdm0ucHlyYW1pZE1lbnVUb2dnbGUgPSBmYWxzZTtcbiAgICB2bS5hZGRDdXJyZW50VXNlclRvUHlyYW1pZCA9IGFkZEN1cnJlbnRVc2VyVG9QeXJhbWlkO1xuICAgIHZtLmNvbmZpcm1SZW1vdmVDdXJyZW50VXNlckZyb21QeXJhbWlkID0gY29uZmlybVJlbW92ZUN1cnJlbnRVc2VyRnJvbVB5cmFtaWQ7XG4gICAgdm0ubnVtYmVyT2ZSZWFsUGxheWVycyA9IDA7XG4gICAgdm0ubWF4UGxheWVycyA9IDA7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBweXJhbWlkc1NlcnZpY2UuZ2V0UHlyYW1pZCh2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChweXJhbWlkKSB7XG4gICAgICAgIC8vIERldGVybWluZSB0aGUgbWF4aW11bSBudW1iZXIgb2YgcGxheWVycyBiYXNlZCBvbiB0aGUgbWF4aW11bSBudW1iZXIgb2YgbGV2ZWxzXG4gICAgICAgIGZvciAodmFyIGkgPSBtYXhMZXZlbHM7IGkgPiAwOyAtLWkpIHtcbiAgICAgICAgICB2bS5tYXhQbGF5ZXJzICs9IGk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHlyYW1pZC5kYXRhKSB7XG4gICAgICAgICAgdm0ucHlyYW1pZCA9IHB5cmFtaWQuZGF0YTtcblxuICAgICAgICAgIG9yZGVyUGxheWVycygpO1xuICAgICAgICAgIGdldFBsYXllcnNTdGF0dXMoKTtcbiAgICAgICAgICBhc3NpZ25MZXZlbHNUb1BsYXllcnMoKTtcbiAgICAgICAgICBjYWxjdWxhdGVQeXJhbWlkQmxvY2tzKCk7XG4gICAgICAgICAgZmlsbEluRW1wdHlCbG9ja3MoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3JkZXIgdGhlIHBsYXllcnMgYnkgdGhlIHBvc2l0aW9uIHByb3BlcnR5IG9mIHRoZSBwbGF5ZXJzIGFycmF5IGluIHRoZSBweXJhbWlkIG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9yZGVyUGxheWVycygpIHtcbiAgICAgIHZtLnB5cmFtaWQucGxheWVycyA9ICRmaWx0ZXIoJ29yZGVyQnknKSh2bS5weXJhbWlkLnBsYXllcnMsICdwb3NpdGlvbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpZ3VyZSBvdXQgaWYgZWFjaCBwbGF5ZXIgaXMgYWxyZWFkeSBjaGFsbGVuZ2VkIGFuZCBzZXQgc29tZSBzdHVmZlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFBsYXllcnNTdGF0dXMoKSB7XG4gICAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIGN1cnJlbnQgdXNlciBpcyBhbiBvd25lciBvZiB0aGlzIHB5cmFtaWRcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgdm0uY3VycmVudFVzZXJJc093bmVyID0gXy5zb21lKHZtLnB5cmFtaWQub3duZXJzLCBbJ19pZCcsIGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWRdKTtcbiAgICAgIH1cblxuICAgICAgdm0uY3VycmVudFVzZXJJc09uUHlyYW1pZCA9IGZhbHNlO1xuICAgICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gZmFsc2U7XG4gICAgICBfLmZvckVhY2godm0ucHlyYW1pZC5wbGF5ZXJzLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgIC8vIEZpbmQgdGhlIGN1cnJlbnQgdXNlciBpZiB0aGV5IGFyZSBvbiB0aGlzIHB5cmFtaWQgYW5kIHNldCBzb21lIHByb3BlcnRpZXNcbiAgICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSAmJiBwbGF5ZXIuX2lkID09PSBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuX2lkKSB7XG4gICAgICAgICAgdm0uY3VycmVudFVzZXJJc09uUHlyYW1pZCA9IHRydWU7XG4gICAgICAgICAgcGxheWVyLmNsYXNzID0gJ2N1cnJlbnQtdXNlcic7XG4gICAgICAgICAgdm0uY3VycmVudFVzZXJQbGF5ZXIgPSBwbGF5ZXI7XG5cbiAgICAgICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXIodm0uY29tcGV0aXRpb25JZCwgcGxheWVyLl9pZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG4gICAgICAgICAgICBpZiAoY2hhbGxlbmdlLmRhdGEpIHtcbiAgICAgICAgICAgICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgY3VycmVudCB1c2VyIGhhcyBhIHBlbmRpbmcgcmVxdWVzdCB0byBqb2luXG4gICAgICB2bS5jdXJyZW50VXNlcklzUGVuZGluZyA9IGZhbHNlO1xuICAgICAgXy5mb3JFYWNoKHZtLnB5cmFtaWQucGVuZGluZ1BsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSAmJiBwbGF5ZXIuX2lkID09PSBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuX2lkKSB7XG4gICAgICAgICAgdm0uY3VycmVudFVzZXJJc1BlbmRpbmcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZ2V0QWN0aXZlQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24odm0uY29tcGV0aXRpb25JZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlcykge1xuICAgICAgICBfLmZvckVhY2goY2hhbGxlbmdlcy5kYXRhLCBmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG5cbiAgICAgICAgICB2YXIgY2hhbGxlbmdlciA9IF8uZmluZCh2bS5weXJhbWlkLnBsYXllcnMsIHsgJ19pZCc6IGNoYWxsZW5nZS5jaGFsbGVuZ2VyLl9pZCB9KTtcbiAgICAgICAgICBjaGFsbGVuZ2VyLmNsYXNzID0gJ3VuYXZhaWxhYmxlJztcbiAgICAgICAgICBjaGFsbGVuZ2VyLmNoYWxsZW5nZSA9IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnY2hhbGxlbmdlcidcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdmFyIG9wcG9uZW50ID0gXy5maW5kKHZtLnB5cmFtaWQucGxheWVycywgeyAnX2lkJzogY2hhbGxlbmdlLm9wcG9uZW50Ll9pZCB9KTtcbiAgICAgICAgICBvcHBvbmVudC5jbGFzcyA9ICd1bmF2YWlsYWJsZSc7XG4gICAgICAgICAgb3Bwb25lbnQuY2hhbGxlbmdlID0ge1xuICAgICAgICAgICAgcG9zaXRpb246ICdvcHBvbmVudCdcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gVHJhY2sgd2hlbiB0aGUgY2hhbGxlbmdlIHdpbGwgZXhwaXJlXG4gICAgICAgICAgaWYgKGNoYWxsZW5nZS50aW1lTGltaXQgIT09IDApIHtcbiAgICAgICAgICAgIHZhciB0aW1lVG9FeHBpcmUgPSBtb21lbnQoKS5kaWZmKG1vbWVudChjaGFsbGVuZ2UuY3JlYXRlZCkuYWRkKGNoYWxsZW5nZS50aW1lTGltaXQsICdkJyksICdzJykgKiAtMTtcbiAgICAgICAgICAgIC8vIElmIHRoZSBjaGFsbGVuZ2UgaGFzIG5vdCB5ZXQgZXhwaXJlZCBkaXNwbGF5IGEgY291bnRkb3duIG9uIHRoZSBvcHBvbmVudFxuICAgICAgICAgICAgaWYgKHRpbWVUb0V4cGlyZSA+IDApIHtcbiAgICAgICAgICAgICAgb3Bwb25lbnQuY2hhbGxlbmdlLmV4cGlyZXMgPSB0aW1lVG9FeHBpcmU7XG4gICAgICAgICAgICAgIC8vIElmIHRoZSBjaGFsbGVuZ2UgZXhwaXJlZCB3aGlsZSBubyBvbmUgd2FzIHZpZXdpbmcgdGhpcyBweXJhbWlkIGNvbXBsZXRlIHRoZSBjaGFsbGVuZ2UgYnkgZm9yZmVpdFxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aW1lVG9FeHBpcmUgPD0gMCkge1xuICAgICAgICAgICAgICBjb21wbGV0ZUNoYWxsZW5nZShudWxsLCB0cnVlLCBvcHBvbmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gTm93IHRoYXQgd2Uga25vdyB3aGljaCBwbGF5ZXJzIGFyZSBpbiBjaGFsbGVuZ2VzIGFuZCB3aGljaCBhcmVuJ3RcbiAgICAgICAgLy8gZmluZCB0aGUgYXZhaWxhYmxlIGNoYWxsZW5nZXMgZm9yIHRoaXMgdXNlclxuICAgICAgICBmaW5kQXZhaWxhYmxlQ2hhbGxlbmdlcygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlndXJlIG91dCB3aGVyZSB0byBzdGFydCBlYWNoIG5ldyByb3cgb24gdGhlIHB5cmFtaWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCcmVha1BvaW50cygpIHtcbiAgICAgIHZtLmJyZWFrUG9pbnRzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heExldmVsczsgaSsrKSB7XG4gICAgICAgIHZtLmJyZWFrUG9pbnRzLnB1c2goKCgoaSAqIChpICsgMSkpIC8gMikpICsgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gR2l2ZSBlYWNoIHBsYXllciBhIGxldmVsIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBicmVhayBwb2ludHNcbiAgICAvLyBUaGlzIHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgd2hvIG90aGVyIHBsYXllcnMgY2FuIGNoYWxsZW5nZVxuICAgIGZ1bmN0aW9uIGFzc2lnbkxldmVsc1RvUGxheWVycygpIHtcbiAgICAgIHZhciBsZXZlbCA9IDA7XG4gICAgICB2bS5sZXZlbHMgPSBbXTtcbiAgICAgIGNyZWF0ZUJyZWFrUG9pbnRzKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLnB5cmFtaWQucGxheWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodm0uYnJlYWtQb2ludHMuaW5kZXhPZihpICsgMSkgPiAtMSkge1xuICAgICAgICAgIGxldmVsICs9IDE7XG4gICAgICAgICAgLy8gU2V0IHRoZSBudW1iZXIgb2YgdG90YWwgbGV2ZWxzXG4gICAgICAgICAgdm0ubGV2ZWxzLnB1c2gobGV2ZWwpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEdpdmUgZWFjaCBwbGF5ZXIgYSBsZXZlbFxuICAgICAgICB2bS5weXJhbWlkLnBsYXllcnNbaV0ubGV2ZWwgPSBsZXZlbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIb3cgbWFueSB0b3RhbCBibG9ja3MgaW4gdGhpcyBweXJhbWlkXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlUHlyYW1pZEJsb2NrcygpIHtcbiAgICAgIHZtLm51bWJlck9mQmxvY2tzID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSBfLmxhc3Qodm0ubGV2ZWxzKTsgaSA+IDA7IGktLSkge1xuICAgICAgICB2bS5udW1iZXJPZkJsb2NrcyArPSBpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbGwgb3V0IHRoZSByZW1haW5pbmcgYmxvY2tzIG9mIHRoZSBweXJhbWlkIHdpdGggZW1wdHkgYmxvY2tzXG4gICAgZnVuY3Rpb24gZmlsbEluRW1wdHlCbG9ja3MoKSB7XG4gICAgICB2bS5udW1iZXJPZlJlYWxQbGF5ZXJzID0gdm0ucHlyYW1pZC5wbGF5ZXJzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSB2bS5weXJhbWlkLnBsYXllcnMubGVuZ3RoOyBpIDwgdm0ubnVtYmVyT2ZCbG9ja3M7IGkrKykge1xuICAgICAgICB2bS5weXJhbWlkLnBsYXllcnMucHVzaCh7XG4gICAgICAgICAgZmlyc3ROYW1lOiAnRW1wdHknLFxuICAgICAgICAgIGxhc3ROYW1lOiAnU3BvdCcsXG4gICAgICAgICAgcG9zaXRpb246IDk5LFxuICAgICAgICAgIGNsYXNzOiAnZW1wdHknXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gV2UgaGF2ZSB0byBnaXZlIGxldmVscyB0byB0aGUgbmV3IGVtcHR5IHNwb3RzXG4gICAgICBhc3NpZ25MZXZlbHNUb1BsYXllcnMoKTtcbiAgICB9XG5cbiAgICAvLyBGaW5kIGFsbCB0aGUgcGxheWVycyB0aGF0IGFyZSBhdmFpbGFibGUgdG8gYmUgY2hhbGxlbmdlZCBieSB0aGlzIHVzZXJcbiAgICBmdW5jdGlvbiBmaW5kQXZhaWxhYmxlQ2hhbGxlbmdlcygpIHtcbiAgICAgIHZhciBsZXZlbEFib3ZlID0gdm0uY3VycmVudFVzZXJQbGF5ZXIubGV2ZWwgPiAxID8gdm0uY3VycmVudFVzZXJQbGF5ZXIubGV2ZWwgLSAxIDogbnVsbDtcbiAgICAgIF8uZm9yRWFjaCh2bS5weXJhbWlkLnBsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgaWYgKHBsYXllci5sZXZlbCA9PT0gbGV2ZWxBYm92ZSAmJiBwbGF5ZXIucG9zaXRpb24gIT09IDk5ICYmIHBsYXllci5jbGFzcyAhPT0gJ3VuYXZhaWxhYmxlJykge1xuICAgICAgICAgIHZtLmF2YWlsYWJsZUNoYWxsZW5nZXMgPSB0cnVlO1xuICAgICAgICAgIHBsYXllci5hdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDaGFsbGVuZ2UocGxheWVyKSB7XG4gICAgICBpZiAoIXBsYXllci5hdmFpbGFibGUpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5lcnJvcignU29ycnksIHRoYXQgaXMgbm90IGEgdmFsaWQgY2hhbGxlbmdlLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gdHJ1ZTtcbiAgICAgICAgdmFyIGNoYWxsZW5nZSA9IHtcbiAgICAgICAgICBjb21wZXRpdGlvbk5hbWU6IHZtLnB5cmFtaWQubmFtZSxcbiAgICAgICAgICBjb21wZXRpdGlvbklkOiB2bS5jb21wZXRpdGlvbklkLFxuICAgICAgICAgIGNvbXBsZXRlOiBmYWxzZSxcbiAgICAgICAgICBmb3JmZWl0OiBmYWxzZSxcbiAgICAgICAgICB0aW1lTGltaXQ6IHZtLnB5cmFtaWQuZm9yZmVpdERheXMsXG4gICAgICAgICAgY2hhbGxlbmdlcjoge1xuICAgICAgICAgICAgX2lkOiB2bS5jdXJyZW50VXNlclBsYXllci5faWQsXG4gICAgICAgICAgICBlbWFpbDogdm0uY3VycmVudFVzZXJQbGF5ZXIuZW1haWwsXG4gICAgICAgICAgICBmaXJzdE5hbWU6IHZtLmN1cnJlbnRVc2VyUGxheWVyLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiB2bS5jdXJyZW50VXNlclBsYXllci5sYXN0TmFtZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB2bS5jdXJyZW50VXNlclBsYXllci5wb3NpdGlvblxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3Bwb25lbnQ6IHtcbiAgICAgICAgICAgIF9pZDogcGxheWVyLl9pZCxcbiAgICAgICAgICAgIGVtYWlsOiBwbGF5ZXIuZW1haWwsXG4gICAgICAgICAgICBmaXJzdE5hbWU6IHBsYXllci5maXJzdE5hbWUsXG4gICAgICAgICAgICBsYXN0TmFtZTogcGxheWVyLmxhc3ROYW1lLFxuICAgICAgICAgICAgcG9zaXRpb246IHBsYXllci5wb3NpdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBjaGFsbGVuZ2VcbiAgICAgICAgLy8gV2Vic29ja2V0IGV2ZW50IHdpbGwgcmVmcmVzaCB0aGUgcHlyYW1pZFxuICAgICAgICBjaGFsbGVuZ2VzU2VydmljZS5jcmVhdGVDaGFsbGVuZ2UoY2hhbGxlbmdlKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2bS5weXJhbWlkTWVudVRvZ2dsZSA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcGxldGUgYSBjaGFsbGVuZ2UgYnkgYSB1c2VyIGludGVyYWN0aW9uIG9yIGEgZm9yZmVpdFxuICAgICAqIFxuICAgICAqIEBwYXJhbSAge2Jvb2xlYW59IHdpbm5lcklzQ3VycmVudFVzZXJcbiAgICAgKiBAcGFyYW0gIHtib29sZWFufSBmb3JmZWl0XG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBmb3JmZWl0TG9zZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wbGV0ZUNoYWxsZW5nZSh3aW5uZXJJc0N1cnJlbnRVc2VyLCBmb3JmZWl0LCBmb3JmZWl0TG9zZXIpIHtcbiAgICAgIHZhciBwbGF5ZXIgPSBmb3JmZWl0TG9zZXIgfHwgdm0uY3VycmVudFVzZXJQbGF5ZXI7XG4gICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXIodm0uY29tcGV0aXRpb25JZCwgcGxheWVyLl9pZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG4gICAgICAgIHZtLmhhc0FjdGl2ZUNoYWxsZW5nZSA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBzd2FwUG9zaXRpb25zID0gZmFsc2U7XG5cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBmb3JmZWl0XG4gICAgICAgIGlmIChmb3JmZWl0KSB7XG4gICAgICAgICAgY2hhbGxlbmdlLmRhdGEuZm9yZmVpdCA9IHRydWU7XG4gICAgICAgICAgaWYgKGZvcmZlaXRMb3Nlci5jaGFsbGVuZ2UucG9zaXRpb24gPT09ICdvcHBvbmVudCcpIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5kYXRhLndpbm5lciA9ICdjaGFsbGVuZ2VyJztcbiAgICAgICAgICAgIHN3YXBQb3NpdGlvbnMgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS53aW5uZXIgPSAnb3Bwb25lbnQnO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBGaWd1cmUgb3V0IHdobyB0aGUgd2lubmVyIHdhcyB0byBzdG9yZSBpbiB0aGUgY2hhbGxlbmdlIHJlY29yZFxuICAgICAgICB9IGVsc2UgaWYgKHdpbm5lcklzQ3VycmVudFVzZXIpIHtcbiAgICAgICAgICBpZiAoY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlci5faWQgPT09IHZtLmN1cnJlbnRVc2VyUGxheWVyLl9pZCkge1xuICAgICAgICAgICAgY2hhbGxlbmdlLmRhdGEud2lubmVyID0gJ2NoYWxsZW5nZXInO1xuICAgICAgICAgICAgc3dhcFBvc2l0aW9ucyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5kYXRhLndpbm5lciA9ICdvcHBvbmVudCc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2VyLl9pZCA9PT0gdm0uY3VycmVudFVzZXJQbGF5ZXIuX2lkKSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS53aW5uZXIgPSAnb3Bwb25lbnQnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS53aW5uZXIgPSAnY2hhbGxlbmdlcic7XG4gICAgICAgICAgICBzd2FwUG9zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTd2FwIHBvc2l0aW9ucyBhbmQgdGhlbiBjb21wbGV0ZSB0aGUgY2hhbGxlbmdlIG9yIGp1c3QgY29tcGxldGUgdGhlIGNoYWxsZW5nZVxuICAgICAgICAvLyBXZWJzb2NrZXQgZXZlbnQgd2lsbCByZWZyZXNoIHRoZSBweXJhbWlkXG4gICAgICAgIGlmIChzd2FwUG9zaXRpb25zKSB7XG4gICAgICAgICAgcHlyYW1pZHNTZXJ2aWNlLnN3YXBQb3NpdGlvbnModm0uY29tcGV0aXRpb25JZCwgY2hhbGxlbmdlLmRhdGEub3Bwb25lbnQsIGNoYWxsZW5nZS5kYXRhLmNoYWxsZW5nZXIpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuY29tcGxldGVDaGFsbGVuZ2UoY2hhbGxlbmdlLmRhdGEpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAocmVtb3ZpbmdDdXJyZW50VXNlcikge1xuICAgICAgICAgICAgICAgIHJlbW92ZUN1cnJlbnRVc2VyRnJvbVB5cmFtaWQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuY29tcGxldGVDaGFsbGVuZ2UoY2hhbGxlbmdlLmRhdGEpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHJlbW92aW5nQ3VycmVudFVzZXIpIHtcbiAgICAgICAgICAgICAgcmVtb3ZlQ3VycmVudFVzZXJGcm9tUHlyYW1pZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdm0ucHlyYW1pZE1lbnVUb2dnbGUgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxscyB0aGUgY29tcGxldGUgY2hhbGxuZ2UgZnVuY3Rpb24gd2l0aCB0aGUgZm9yZmVpdGluZyBwbGF5ZXJcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IHBsYXllclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWxsZW5nZUV4cGlyZWQocGxheWVyKSB7XG4gICAgICBjb21wbGV0ZUNoYWxsZW5nZShudWxsLCB0cnVlLCBwbGF5ZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSBjdXJyZW50IHVzZXIgdGhlIHB5cmFtaWQgXG4gICAgICogaWYgdGhleSdyZSBub3QgYWxyZWFkeSBvbiBpdCBhbmQgdGhlcmUncyBzcGFjZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZEN1cnJlbnRVc2VyVG9QeXJhbWlkKCkge1xuICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICBpZiAodm0ubnVtYmVyT2ZSZWFsUGxheWVycyA8IHZtLm1heFBsYXllcnMpIHtcbiAgICAgICAgICB2YXIgcGxheWVyID0ge1xuICAgICAgICAgICAgX2lkOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuX2lkLFxuICAgICAgICAgICAgZmlyc3ROYW1lOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5sYXN0TmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIudXNlcm5hbWUsXG4gICAgICAgICAgICBwb3NpdGlvbjogdm0ubnVtYmVyT2ZSZWFsUGxheWVycyArIDFcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmICh2bS5weXJhbWlkLm9wZW4pIHtcbiAgICAgICAgICAgIHN3YWwoe1xuICAgICAgICAgICAgICB0aXRsZTogJ0pvaW4gQ29tcGV0aXRpb24/JyxcbiAgICAgICAgICAgICAgdGV4dDogJ1lvdVxcJ2xsIGJlIGFkZGVkIHRvIHRoZSBib3R0b20nLFxuICAgICAgICAgICAgICB0eXBlOiAnd2FybmluZycsXG4gICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXG4gICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnSm9pbicsXG4gICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICdOZXZlcm1pbmQnLFxuICAgICAgICAgICAgICBjbG9zZU9uQ29uZmlybTogZmFsc2UsXG4gICAgICAgICAgICAgIGNsb3NlT25DYW5jZWw6IHRydWVcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcHlyYW1pZHNTZXJ2aWNlLmFkZFBsYXllclRvUHlyYW1pZCh2bS5jb21wZXRpdGlvbklkLCBwbGF5ZXIpO1xuICAgICAgICAgICAgICBzd2FsKCdXZWxjb21lIEFib2FyZCEnLCAnTm93IHN0YXJ0IGZpZ2h0aW5nIHlvdXIgd2F5IHRvIHRoZSB0b3AnLCAnc3VjY2VzcycpO1xuICAgICAgICAgICAgfSk7ICBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dhbCh7XG4gICAgICAgICAgICAgIHRpdGxlOiAnU2VuZCBKb2luIFJlcXVlc3Q/JyxcbiAgICAgICAgICAgICAgdGV4dDogJ1RoaXMgaXMgYSBjbG9zZWQgY29tcGV0aXRpb24gc28gdGhlIG93bmVyIG11c3QgYXBwcm92ZSB5b3VyIHJlcXVlc3QnLFxuICAgICAgICAgICAgICB0eXBlOiAnd2FybmluZycsXG4gICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXG4gICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnU2VuZCBSZXF1ZXN0JyxcbiAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ05ldmVybWluZCcsXG4gICAgICAgICAgICAgIGNsb3NlT25Db25maXJtOiBmYWxzZSxcbiAgICAgICAgICAgICAgY2xvc2VPbkNhbmNlbDogdHJ1ZVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBweXJhbWlkc1NlcnZpY2UuYWRkUGxheWVyVG9QeXJhbWlkUmVxdWVzdCh2bS5weXJhbWlkLCBwbGF5ZXIpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZtLmN1cnJlbnRVc2VySXNQZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHN3YWwoJ1JlcXVlc3QgU2VudCcsICdZb3Ugd2lsbCByZWNlaXZlIGFuIGVtYWlsIG9uY2UgdGhlIG93bmVyIHByb2Nlc3NlcyB0aGUgcmVxdWVzdC4nLCAnc3VjY2VzcycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vdGlmeVNlcnZpY2Uud2FybmluZygnU29ycnksIHRoaXMgcHlyYW1pZCBpcyBmdWxsJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRzdGF0ZS5nbygnbG9naW4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maXJtUmVtb3ZlQ3VycmVudFVzZXJGcm9tUHlyYW1pZCgpIHtcbiAgICAgIHN3YWwoe1xuICAgICAgICB0aXRsZTogJ0xlYXZlIFB5cmFtaWQ/JyxcbiAgICAgICAgdGV4dDogJ1lvdSB3aWxsIGxvc2UgeW91ciBzcG90IGFuZCBmb3JmZWl0IGFueSBhY3RpdmUgY2hhbGxlbmdlcy4nLFxuICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ1llcywgbGVhdmUnLFxuICAgICAgICBjb25maXJtQnV0dG9uQ2xhc3M6ICdidG4tZGFuZ2VyJyxcbiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ05vLCBzdGF5JyxcbiAgICAgICAgY2xvc2VPbkNvbmZpcm06IGZhbHNlLFxuICAgICAgICBjbG9zZU9uQ2FuY2VsOiB0cnVlXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZUN1cnJlbnRVc2VyRnJvbVB5cmFtaWQoKTtcbiAgICAgICAgc3dhbCgnT0ssIHlvdVxcJ3Igb3V0IScsICdZb3VcXCd2ZSBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgcHlyYW1pZC4nLCAnc3VjY2VzcycpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVXNlIHRoaXMgdG8gZW5mb3JjZSBvcmRlciBvZiBvcGVyYXRpb25zIHdoZW4gdGhlIHBsYXllciB0byBiZSByZW1vdmVkIGhhZCBhbiBhY3RpdmUgY2hhbGxlbmdlXG4gICAgdmFyIHJlbW92aW5nQ3VycmVudFVzZXIgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHJlbW92ZUN1cnJlbnRVc2VyRnJvbVB5cmFtaWQoKSB7XG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIHVzZXIgaXMgbG9nZ2VkIGluIGFuZCBpcyBvbiB0aGlzIHB5cmFtaWRcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkgJiYgdm0uY3VycmVudFVzZXJJc09uUHlyYW1pZCkge1xuICAgICAgICByZW1vdmluZ0N1cnJlbnRVc2VyID0gdHJ1ZTtcbiAgICAgICAgLy8gRm9yZmVpdCBpZiB0aGV5IGhhdmUgYW4gYWN0aXZlIGNoYWxsZW5nZVxuICAgICAgICBpZiAodm0uaGFzQWN0aXZlQ2hhbGxlbmdlKSB7XG4gICAgICAgICAgY29tcGxldGVDaGFsbGVuZ2UobnVsbCwgdHJ1ZSwgdm0uY3VycmVudFVzZXJQbGF5ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNpbmNlIHdlIGFyZSByZW1vdmluZyB0aGVtIC4uLlxuICAgICAgICAgIHZtLmN1cnJlbnRVc2VySXNPblB5cmFtaWQgPSBmYWxzZTtcbiAgICAgICAgICB2bS5oYXNBY3RpdmVDaGFsbGVuZ2UgPSBmYWxzZTtcblxuICAgICAgICAgIC8vIEdldCBhbiB1cGRhdGVkIGNvcHkgb2YgdGhlIHB5cmFtaWQgaW5jYXNlIGEgZm9yZmVpdCBoYXBwZW5lZFxuICAgICAgICAgIHB5cmFtaWRzU2VydmljZS5nZXRQeXJhbWlkKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICAgIC8vIFN0b3JlIHRoZSB1cGRhdGVkIGNvcHkgbG9jYWxseSBzbyBhcyBub3QgdG8gZGlzdHJ1cHQgdGhlIHB5cmFtaWRcbiAgICAgICAgICAgIC8vIHVudGlsIHRoZSBwbGF5ZXIgaGFzIGJlZW4gcmVtb3ZlZFxuICAgICAgICAgICAgdmFyIHB5cmFtaWQgPSBwLmRhdGE7XG5cbiAgICAgICAgICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhlIHNwb3QgdGhleSB3ZXJlIGluIG9uIHRoZSBweXJhbWlkXG4gICAgICAgICAgICB2YXIgb3BlblBvc2l0aW9uID0gdm0uY3VycmVudFVzZXJQbGF5ZXIucG9zaXRpb247XG5cbiAgICAgICAgICAgIC8vIE1vdmUgYWxsIHRoZSBwbGF5ZXJzIHVwIDEgcG9zaXRpb24gdGhhdCB3ZXJlIGJlaGluZCB0aGUgcmVtb3ZlZCBwbGF5ZXJcbiAgICAgICAgICAgIF8uZm9yRWFjaChweXJhbWlkLnBsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgICAgICAgaWYgKHBsYXllci5wb3NpdGlvbiA+PSBvcGVuUG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXIucG9zaXRpb24gLT0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZWQgdGhlIHBsYXllciBmcm9tIHRoZSBweXJhbWlkXG4gICAgICAgICAgICB2YXIgcmVtb3ZlZFBsYXllciA9IF8ucmVtb3ZlKHB5cmFtaWQucGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICAgICAgICByZXR1cm4gcGxheWVyLl9pZCA9PT0gdm0uY3VycmVudFVzZXJQbGF5ZXIuX2lkO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIE1ha2UgYSBuZXcgYXJyYXkgb2YgYWxsIHRoZSBwbGF5ZXJzIHN0aWxsIG9uIHRoZSBweXJhbWlkXG4gICAgICAgICAgICAvLyBvbmx5IHVzZSB0aGUgcHJvcGVydGllcyB3ZSB3YW50IHRvIHN0b3JlIGluIHRoZSBweXJhbWlkIGRvY3VtZW50XG4gICAgICAgICAgICB2YXIgdXBkYXRlZFBsYXllcnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0ubnVtYmVyT2ZSZWFsUGxheWVycyAtIDE7ICsraSkge1xuICAgICAgICAgICAgICB2YXIgdXBkYXRlZFBsYXllciA9IHtcbiAgICAgICAgICAgICAgICBfaWQ6IHB5cmFtaWQucGxheWVyc1tpXS5faWQsXG4gICAgICAgICAgICAgICAgZmlyc3ROYW1lOiBweXJhbWlkLnBsYXllcnNbaV0uZmlyc3ROYW1lLFxuICAgICAgICAgICAgICAgIGxhc3ROYW1lOiBweXJhbWlkLnBsYXllcnNbaV0ubGFzdE5hbWUsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHB5cmFtaWQucGxheWVyc1tpXS5wb3NpdGlvblxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIHVwZGF0ZWRQbGF5ZXJzLnB1c2godXBkYXRlZFBsYXllcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENhbGwgc2VydmljZSB0byByZW1vdmUgdGhlIHBsYXllclxuICAgICAgICAgICAgcHlyYW1pZHNTZXJ2aWNlLnJlbW92ZWRQbGF5ZXJGcm9tUHlyYW1pZCh2bS5jb21wZXRpdGlvbklkLCByZW1vdmVkUGxheWVyWzBdLCB1cGRhdGVkUGxheWVycykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJlbW92aW5nQ3VycmVudFVzZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVmcmVzaCB0aGUgcHlyYW1pZCBiZWNhc3VlIG9mIGFuIHVwZGF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZnJlc2hQeXJhbWlkKCkge1xuICAgICAgcHlyYW1pZHNTZXJ2aWNlLmdldFB5cmFtaWQodm0uY29tcGV0aXRpb25JZCkudGhlbihmdW5jdGlvbiAocHlyYW1pZCkge1xuICAgICAgICB2bS5weXJhbWlkID0gcHlyYW1pZC5kYXRhO1xuICAgICAgICBvcmRlclBsYXllcnMoKTtcbiAgICAgICAgZ2V0UGxheWVyc1N0YXR1cygpO1xuICAgICAgICBhc3NpZ25MZXZlbHNUb1BsYXllcnMoKTtcbiAgICAgICAgY2FsY3VsYXRlUHlyYW1pZEJsb2NrcygpO1xuICAgICAgICBmaWxsSW5FbXB0eUJsb2NrcygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNoYWxsZW5nZV9jcmVhdGVkJywgZnVuY3Rpb24gKF8sIGNoYWxsZW5nZURldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5pbmZvKGNoYWxsZW5nZURldGFpbHMuZGVzY3JpcHRpb24pO1xuICAgICAgICByZWZyZXNoUHlyYW1pZCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNoYWxsZW5nZV9jb21wbGV0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNoYWxsZW5nZURldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oY2hhbGxlbmdlRGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgIGlmICghcmVtb3ZpbmdDdXJyZW50VXNlcikge1xuICAgICAgICAgIHJlZnJlc2hQeXJhbWlkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czpwbGF5ZXJfYWRkZWQnLCBmdW5jdGlvbiAoXywgZGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGRldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oZGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgIHJlZnJlc2hQeXJhbWlkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6cGxheWVyX3JlbW92ZWQnLCBmdW5jdGlvbiAoXywgZGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGRldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oZGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgIHJlZnJlc2hQeXJhbWlkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6cHlyYW1pZF91cGRhdGVkJywgZnVuY3Rpb24gKF8sIGNoYWxsZW5nZURldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5pbmZvKGNoYWxsZW5nZURldGFpbHMuZGVzY3JpcHRpb24pO1xuICAgICAgICByZWZyZXNoUHlyYW1pZCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdrcFVwZGF0ZVBsYXllcnMnLCBrcFVwZGF0ZVBsYXllcnMpO1xuXG4gIGZ1bmN0aW9uIGtwVXBkYXRlUGxheWVycygpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIHB5cmFtaWQ6ICc9J1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL3B5cmFtaWRzL2NvbXBvbmVudHMvdXBkYXRlLXBsYXllcnMuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoJGZpbHRlciwgcHlyYW1pZHNTZXJ2aWNlLCBjaGFsbGVuZ2VzU2VydmljZSkge1xuICAgIHZhciByZW1vdmVkUGxheWVycyA9IFtdO1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0udXBkYXRlUHlyYW1pZCA9IHVwZGF0ZVB5cmFtaWQ7XG4gICAgdm0uY2FuY2VsVXBkYXRlID0gY2FuY2VsVXBkYXRlO1xuICAgIHZtLnJlb3JkZXJQbGF5ZXJzID0gcmVvcmRlclBsYXllcnM7XG4gICAgdm0ucmVtb3ZlUGxheWVyID0gcmVtb3ZlUGxheWVyO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge31cblxuICAgIC8vIFBlcmZvcm0gdGhlIHVwZGF0ZXMgdGhhdCB3ZXJlIHJlcXVzdGVkXG4gICAgZnVuY3Rpb24gdXBkYXRlUHlyYW1pZCgpIHtcbiAgICAgIF8uZm9yRWFjaChyZW1vdmVkUGxheWVycywgZnVuY3Rpb24ocGxheWVyKSB7XG4gICAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmRlbGV0ZUFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllcih2bS5weXJhbWlkLl9pZCwgcGxheWVyLl9pZCk7XG4gICAgICB9KTtcbiAgICAgIHB5cmFtaWRzU2VydmljZS51cGRhdGVQeXJhbWlkKHZtLnB5cmFtaWQpOyAgICAgIFxuICAgIH1cblxuICAgIC8vIENhbmNlbCB0aGUgdXBkYXRlIGFuZCBwdXQgZXZlcnl0aGluZyBiYWNrIHRvIHRoZSBvcmdpbmFsXG4gICAgZnVuY3Rpb24gY2FuY2VsVXBkYXRlKCkge1xuICAgICAgcHlyYW1pZHNTZXJ2aWNlLmdldFB5cmFtaWQodm0ucHlyYW1pZC5faWQpLnRoZW4oZnVuY3Rpb24gKHB5cmFtaWQpIHtcbiAgICAgICAgcHlyYW1pZC5kYXRhLnBsYXllcnMgPSAkZmlsdGVyKCdvcmRlckJ5JykocHlyYW1pZC5kYXRhLnBsYXllcnMsICdwb3NpdGlvbicpO1xuICAgICAgICB2bS5weXJhbWlkID0gcHlyYW1pZC5kYXRhO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUmVvcmRlciB0aGUgcGxheWVycyBiYXNlZCBvbiB0aGUgZHJhZy1kcm9wXG4gICAgZnVuY3Rpb24gcmVvcmRlclBsYXllcnMoKSB7XG4gICAgICB2YXIgaSA9IDE7XG4gICAgICBfLmZvckVhY2godm0ucHlyYW1pZC5wbGF5ZXJzLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgIHBsYXllci5wb3NpdGlvbiA9IGk7XG4gICAgICAgICsraTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFF1ZXVlIHVwIHRoZSBwbGF5ZXJzIHRvIGJlIHJlbW92ZWQgYW5kIHJlbW92ZSB0aGVtIGZyb20gdGhlIGRpc3BsYXlcbiAgICBmdW5jdGlvbiByZW1vdmVQbGF5ZXIocGxheWVyLCBwbGF5ZXJJbmRleCkge1xuICAgICAgcmVtb3ZlZFBsYXllcnMucHVzaChwbGF5ZXIpO1xuICAgICAgdm0ucHlyYW1pZC5wbGF5ZXJzLnNwbGljZShwbGF5ZXJJbmRleCwgMSk7XG4gICAgICByZW9yZGVyUGxheWVycygpO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdBZG1pbkN0cmwnLCBBZG1pbkN0cmwpO1xuXG4gIGZ1bmN0aW9uIEFkbWluQ3RybCgkc2NvcGUsICRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkZmlsdGVyLCBweXJhbWlkc1NlcnZpY2UsIGlkZW50aXR5U2VydmljZSwgbm90aWZ5U2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uY29tcGV0aXRpb25JZCA9IG51bGw7XG4gICAgdm0udXBkYXRlUHlyYW1pZE9wZW5TdGF0dXMgPSB1cGRhdGVQeXJhbWlkT3BlblN0YXR1cztcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGlmICgkc3RhdGVQYXJhbXMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICB2bS5jb21wZXRpdGlvbklkID0gJHN0YXRlUGFyYW1zLmNvbXBldGl0aW9uSWQ7XG4gICAgICAgIHJlZnJlc2hQeXJhbWlkKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkc3RhdGUuZ28oJ3B5cmFtaWRzLm15UHlyYW1pZHMnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWZyZXNoUHlyYW1pZCgpIHtcbiAgICAgIHB5cmFtaWRzU2VydmljZS5nZXRQeXJhbWlkKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKHB5cmFtaWQpIHtcbiAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoaXMgdXNlciBpcyBhbiBvd25lciBvZiB0aGlzIGNvbXBldGl0aW9uXG4gICAgICAgIGlmIChweXJhbWlkLmRhdGEgJiYgXy5zb21lKHB5cmFtaWQuZGF0YS5vd25lcnMsIFsnX2lkJywgaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZF0pKSB7XG4gICAgICAgICAgLy8gRGlzcGxheSB0aGUgcGxheWVycyBpbiB0aGUgcHJvcGVyIG9yZGVyXG4gICAgICAgICAgcHlyYW1pZC5kYXRhLnBsYXllcnMgPSAkZmlsdGVyKCdvcmRlckJ5JykocHlyYW1pZC5kYXRhLnBsYXllcnMsICdwb3NpdGlvbicpO1xuICAgICAgICAgIHZtLnB5cmFtaWQgPSBweXJhbWlkLmRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJHN0YXRlLmdvKCdweXJhbWlkcy5teVB5cmFtaWRzJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFBlcmZvcm0gdGhlIHVwZGF0ZXMgdGhhdCB3ZXJlIHJlcXVzdGVkXG4gICAgZnVuY3Rpb24gdXBkYXRlUHlyYW1pZE9wZW5TdGF0dXMoKSB7XG4gICAgICBweXJhbWlkc1NlcnZpY2UuZ2V0UHlyYW1pZCh2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChweXJhbWlkKSB7XG4gICAgICAgIHZhciB1cGRhdGVkUHlyYW1pZCA9IHB5cmFtaWQuZGF0YTtcbiAgICAgICAgdXBkYXRlZFB5cmFtaWQub3BlbiA9IHZtLnB5cmFtaWQub3BlbjtcbiAgICAgICAgcHlyYW1pZHNTZXJ2aWNlLnVwZGF0ZVB5cmFtaWQodXBkYXRlZFB5cmFtaWQpO1xuICAgICAgfSk7ICAgICAgXG4gICAgfVxuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNoYWxsZW5nZV9jb21wbGV0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNoYWxsZW5nZURldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oY2hhbGxlbmdlRGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgIHJlZnJlc2hQeXJhbWlkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6cGxheWVyX2FkZGVkJywgZnVuY3Rpb24gKF8sIGRldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBkZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5pbmZvKGRldGFpbHMuZGVzY3JpcHRpb24pO1xuICAgICAgICByZWZyZXNoUHlyYW1pZCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOnBsYXllcl9yZW1vdmVkJywgZnVuY3Rpb24gKF8sIGRldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBkZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5pbmZvKGRldGFpbHMuZGVzY3JpcHRpb24pO1xuICAgICAgICByZWZyZXNoUHlyYW1pZCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOnB5cmFtaWRfdXBkYXRlZCcsIGZ1bmN0aW9uIChfLCBjaGFsbGVuZ2VEZXRhaWxzKSB7XG4gICAgICBpZiAodm0uY29tcGV0aXRpb25JZCA9PT0gY2hhbGxlbmdlRGV0YWlscy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuaW5mbyhjaGFsbGVuZ2VEZXRhaWxzLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgcmVmcmVzaFB5cmFtaWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czphZGRfcGxheWVyX3JlcXVlc3QnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNoYWxsZW5nZURldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oY2hhbGxlbmdlRGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgIHJlZnJlc2hQeXJhbWlkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6YWRkX3BsYXllcl9yZXF1ZXN0X2RlbmllZCcsIGZ1bmN0aW9uIChfLCBjaGFsbGVuZ2VEZXRhaWxzKSB7XG4gICAgICBpZiAodm0uY29tcGV0aXRpb25JZCA9PT0gY2hhbGxlbmdlRGV0YWlscy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuaW5mbyhjaGFsbGVuZ2VEZXRhaWxzLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgcmVmcmVzaFB5cmFtaWQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSkoKTsiLCIvKipcbiAqIENyZWF0ZXMgYSBweXJhbWlkXG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0NyZWF0ZVB5cmFtaWRDdHJsJywgQ3JlYXRlUHlyYW1pZEN0cmwpO1xuXG4gIGZ1bmN0aW9uIENyZWF0ZVB5cmFtaWRDdHJsKCRzdGF0ZSwgdXNlclNlcnZpY2UsIHB5cmFtaWRzU2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlKSB7XG4gICAgdmFyIGJyZWFrUG9pbnRzID0gW107XG4gICAgdmFyIG1heExldmVscyA9IDEwO1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0ubmV3UHlyYW1pZCA9IHtcbiAgICAgIHBsYXllcnM6IFtdLFxuICAgICAgb3BlbjogZmFsc2VcbiAgICB9O1xuICAgIHZtLmF2YWlsYWJsZVBsYXllcnMgPSBbXTtcbiAgICB2bS5hZGRlZFBsYXllcnMgPSBbXTtcbiAgICB2bS5jcmVhdGVQeXJhbWlkID0gY3JlYXRlUHlyYW1pZDtcbiAgICB2bS5hZGRQbGF5ZXIgPSBhZGRQbGF5ZXI7XG4gICAgdm0ucmVtb3ZlUGxheWVyID0gcmVtb3ZlUGxheWVyO1xuICAgIHZtLnJlb3JkZXJQbGF5ZXJzID0gcmVvcmRlclBsYXllcnM7XG4gICAgdm0ubmV3UHlyYW1pZC5mb3JmZWl0RGF5cyA9IDE7XG5cbiAgICBhY3RpdmF0ZSgpO1xuICAgIFxuICAgIC8qKlxuICAgICAqIFJ1bnMgb24gY29udHJvbGxlciBpbnN0YW50aWF0aW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICB1c2VyU2VydmljZS5nZXRBbGxVc2VycygpLnRoZW4oZnVuY3Rpb24gKHVzZXJzKSB7XG4gICAgICAgIHZtLmF2YWlsYWJsZVBsYXllcnMgPSB1c2Vycy5kYXRhO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIENyZWF0ZSBicmVhayBwb2ludHMgYXJyYXlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF4TGV2ZWxzOyBpKyspIHtcbiAgICAgICAgYnJlYWtQb2ludHMucHVzaCgoKChpICogKGkgKyAxKSkgLyAyKSkgKyAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgcGxheWVyIHRvIHRoZSBuZXcgcHlyYW1pZFxuICAgICAqIENoZWNrcyB0byBtYWtlIHN1cmUgeW91IGFyZSBub3QgYWRkaW5nIHRvbyBtYW55IHBsYXllcnNcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IHBsYXllclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZFBsYXllcihwbGF5ZXIpIHtcbiAgICAgIHBsYXllci5wb3NpdGlvbiA9IHZtLmFkZGVkUGxheWVycy5sZW5ndGggKyAxO1xuICAgICAgdm0uYWRkZWRQbGF5ZXJzLnB1c2goXy5yZW1vdmUodm0uYXZhaWxhYmxlUGxheWVycywge19pZDogcGxheWVyLl9pZH0pWzBdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgcHJldml1b3NseSBhZGRlZCBwbGF5ZXIgZnJvbSB0aGUgcHlyYW1pZFxuICAgICAqIEBwYXJhbSAge29iamVjdH0gcGxheWVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlUGxheWVyKHBsYXllcikge1xuICAgICAgdm0uYXZhaWxhYmxlUGxheWVycy5wdXNoKF8ucmVtb3ZlKHZtLmFkZGVkUGxheWVycywge19pZDogcGxheWVyLl9pZH0pWzBdKTtcbiAgICAgIHJlb3JkZXJQbGF5ZXJzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciB0aGUgcGxheWVycyBiYXNlZCBvbiB0aGUgZHJhZy1kcm9wXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlclBsYXllcnMoKSB7XG4gICAgICB2YXIgaSA9IDE7XG4gICAgICBfLmZvckVhY2godm0uYWRkZWRQbGF5ZXJzLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgIHBsYXllci5wb3NpdGlvbiA9IGk7XG4gICAgICAgICsraTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFVzZWQgdG8ga2VlcCB0cmFjayBvZiBwb3NpdGlvbiBvbiB0aGUgcHlyYW1pZCBiYXNlZCBvbiB3aGVuIHRoZSBwbGF5ZXIgd2FzIGFkZGVkXG4gICAgdmFyIHBvc2l0aW9uID0gMDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgcHlyYW1pZFxuICAgICAqIEBwYXJhbSAge29iamVjdH0gcHlyYW1pZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVB5cmFtaWQocHlyYW1pZCkge1xuICAgICAgYW5ndWxhci5mb3JFYWNoKHZtLmFkZGVkUGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICBwb3NpdGlvbiArPSAxO1xuICAgICAgICB2YXIgYWRkUGxheWVyID0ge1xuICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICAgICAgICBfaWQ6IHBsYXllci5faWQsXG4gICAgICAgICAgZW1haWw6IHBsYXllci51c2VybmFtZSxcbiAgICAgICAgICBmaXJzdE5hbWU6IHBsYXllci5maXJzdE5hbWUsXG4gICAgICAgICAgbGFzdE5hbWU6IHBsYXllci5sYXN0TmFtZVxuICAgICAgICB9O1xuICAgICAgICBweXJhbWlkLnBsYXllcnMucHVzaChhZGRQbGF5ZXIpO1xuICAgICAgfSk7XG4gICAgICBweXJhbWlkLm93bmVycyA9IFt7XG4gICAgICAgIF9pZDogaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZCxcbiAgICAgICAgZW1haWw6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci51c2VybmFtZSxcbiAgICAgICAgZmlyc3ROYW1lOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuZmlyc3ROYW1lLFxuICAgICAgICBsYXN0TmFtZTogaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLmxhc3ROYW1lXG4gICAgICB9XTtcblxuICAgICAgLy8gRmlndXJlIG91dCB0aGUgbnVtYmVyIG9mIGxldmVscyBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIHBsYXllcnNcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnJlYWtQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHB5cmFtaWQucGxheWVycy5sZW5ndGggPCBicmVha1BvaW50c1tpXSkge1xuICAgICAgICAgIHB5cmFtaWQubGV2ZWxzID0gaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBweXJhbWlkc1NlcnZpY2UuY3JlYXRlUHlyYW1pZChweXJhbWlkKS50aGVuKGZ1bmN0aW9uIChuZXdQeXJhbWlkKSB7XG4gICAgICAgICRzdGF0ZS5nbygncHlyYW1pZHMudmlldycsIHtcbiAgICAgICAgICBjb21wZXRpdGlvbklkOiBuZXdQeXJhbWlkLmRhdGEuX2lkXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ015UHlyYW1pZHNDdHJsJywgTXlQeXJhbWlkc0N0cmwpO1xuXG4gIGZ1bmN0aW9uIE15UHlyYW1pZHNDdHJsKCkge1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge31cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdQeXJhbWlkQ3RybCcsIFB5cmFtaWRDdHJsKTtcblxuICBmdW5jdGlvbiBQeXJhbWlkQ3RybCgkc3RhdGUsICRzdGF0ZVBhcmFtcywgcHlyYW1pZHNTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5jb21wZXRpdGlvbklkID0gbnVsbDtcbiAgICB2bS5weXJhbWlkID0gbnVsbDtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGlmICgkc3RhdGVQYXJhbXMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICB2bS5jb21wZXRpdGlvbklkID0gJHN0YXRlUGFyYW1zLmNvbXBldGl0aW9uSWQ7XG5cbiAgICAgICAgcHlyYW1pZHNTZXJ2aWNlLmdldFB5cmFtaWQodm0uY29tcGV0aXRpb25JZCkudGhlbihmdW5jdGlvbiAocHlyYW1pZCkge1xuICAgICAgICAgIGlmIChweXJhbWlkLmRhdGEpIHtcbiAgICAgICAgICAgIHZtLnB5cmFtaWQgPSBweXJhbWlkLmRhdGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRzdGF0ZS5nbygncHlyYW1pZHMubXlQeXJhbWlkcycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ1B5cmFtaWRzQ3RybCcsIFB5cmFtaWRzQ3RybCk7XG5cbiAgZnVuY3Rpb24gUHlyYW1pZHNDdHJsKCkge1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge31cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdTdGF0c0N0cmwnLCBTdGF0c0N0cmwpO1xuXG4gIGZ1bmN0aW9uIFN0YXRzQ3RybCgkc2NvcGUsICRzdGF0ZVBhcmFtcywgJHN0YXRlLCBweXJhbWlkc1NlcnZpY2UsIG5vdGlmeVNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmNvbXBldGl0aW9uSWQgPSBudWxsO1xuICAgIHZtLnB5cmFtaWQgPSBudWxsO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIHZtLmNvbXBldGl0aW9uSWQgPSAkc3RhdGVQYXJhbXMuY29tcGV0aXRpb25JZDtcbiAgICAgICAgcmVmcmVzaFB5cmFtaWQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWZyZXNoUHlyYW1pZCgpIHtcbiAgICAgIHB5cmFtaWRzU2VydmljZS5nZXRQeXJhbWlkKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKHB5cmFtaWQpIHtcbiAgICAgICAgaWYgKHB5cmFtaWQuZGF0YSkge1xuICAgICAgICAgIHZtLnB5cmFtaWQgPSBweXJhbWlkLmRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJHN0YXRlLmdvKCdweXJhbWlkcy5teVB5cmFtaWRzJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czpjaGFsbGVuZ2VfY29tcGxldGVkJywgZnVuY3Rpb24gKF8sIGNoYWxsZW5nZURldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5pbmZvKGNoYWxsZW5nZURldGFpbHMuZGVzY3JpcHRpb24pO1xuICAgICAgICByZWZyZXNoUHlyYW1pZCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ1VzZXJDdHJsJywgVXNlckN0cmwpO1xuXG4gIGZ1bmN0aW9uIFVzZXJDdHJsKGlkZW50aXR5U2VydmljZSkge1xuICAgIGNvbnNvbGUubG9nKCdhc2Rmc2RmJyk7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5pbmRlbnRpdHkgPSBpZGVudGl0eVNlcnZpY2U7XG5cbiAgICAvL2FjdGl2YXRlKCk7XG5cbiAgICAvL2Z1bmN0aW9uIGFjdGl2YXRlKCkge31cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2NPdmVyZmxvdycsIGNPdmVyZmxvdyk7XG5cbiAgZnVuY3Rpb24gY092ZXJmbG93KHNjcm9sbGJhclNlcnZpY2UpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdDJyxcbiAgICAgIGxpbms6IGxpbmtGdW5jLFxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICB2YXIgc2Nyb2xsYXhpcyA9IGF0dHJzLnNjcm9sbGF4aXMgfHwgJ3knO1xuICAgICAgdmFyIHRoZW1lID0gYXR0cnMudGhlbWUgfHwgJ21pbmltYWwtZGFyayc7XG4gICAgICB2YXIgbW91c2V3aGVlbGF4aXMgPSBhdHRycy5tb3VzZXdoZWVsYXhpcyB8fCAneSc7XG4gICAgICBpZiAoISQoJ2h0bWwnKS5oYXNDbGFzcygnaXNtb2JpbGUnKSkge1xuICAgICAgICBzY3JvbGxiYXJTZXJ2aWNlLm1hbGlodVNjcm9sbChlbGVtZW50LCB0aGVtZSwgc2Nyb2xsYXhpcywgbW91c2V3aGVlbGF4aXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ3RvZ2dsZVN1Ym1lbnUnLCB0b2dnbGVTdWJtZW51KTtcblxuICBmdW5jdGlvbiB0b2dnbGVTdWJtZW51KCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgbGluazogbGlua0Z1bmMsXG4gICAgfTtcblxuICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwpIHtcbiAgICAgIGVsLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwubmV4dCgpLnNsaWRlVG9nZ2xlKDIwMCk7XG4gICAgICAgIGVsLnBhcmVudCgpLnRvZ2dsZUNsYXNzKCd0b2dnbGVkJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd3YXZlc0VmZmVjdCcsIHdhdmVzRWZmZWN0KTtcblxuICBmdW5jdGlvbiB3YXZlc0VmZmVjdCgpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdDJyxcbiAgICAgIGxpbms6IGxpbmtGdW5jLFxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50Lmhhc0NsYXNzKCdidG4taWNvbicpIHx8IGVsZW1lbnQuaGFzQ2xhc3MoJ2J0bi1mbG9hdCcpKSB7XG4gICAgICAgIFdhdmVzLmF0dGFjaChlbGVtZW50LCBbJ3dhdmVzLWNpcmNsZSddKTtcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5oYXNDbGFzcygnYnRuLWxpZ2h0JykpIHtcbiAgICAgICAgV2F2ZXMuYXR0YWNoKGVsZW1lbnQsIFsnd2F2ZXMtbGlnaHQnXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBXYXZlcy5hdHRhY2goZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIFdhdmVzLmluaXQoKTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdmZ0xpbmUnLCBmZ0xpbmUpO1xuXG4gIGZ1bmN0aW9uIGZnTGluZSgpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdDJyxcbiAgICAgIGxpbms6IGxpbmtGdW5jLFxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQuY2hpbGRyZW4oKS5maXJzdCgpO1xuICAgICAgdmFyIGlzRmxvYXRMYWJlbCA9IGVsZW1lbnQucGFyZW50KCkuaGFzQ2xhc3MoJ2ZnLWZsb2F0Jyk7XG4gICAgICBpbnB1dC5mb2N1cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2ZnLXRvZ2dsZWQnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpbnB1dC5ibHVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc0Zsb2F0TGFiZWwgfHwgKGlzRmxvYXRMYWJlbCAmJiBpbnB1dC52YWwoKS5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZmctdG9nZ2xlZCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7Il19
