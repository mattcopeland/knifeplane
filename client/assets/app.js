angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","LocalStorageModule","angular-sortable-view"]),function(){"use strict ";function e(e,t){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache",t.options({appendToBody:!0})}e.$inject=["$httpProvider","$uibTooltipProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e,t){function n(e){t.set("sidebarLocked",e)}var r=this;r.$state=e,r.lockSidebar=t.get("sidebarLocked"),r.toggleSidebarLocked=n}e.$inject=["$state","localStorageService"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,i,o){var a={superAdmin:n,admin:t,user:r};o.html5Mode(!0),i.otherwise("/"),i.when("/pyramids/","/pyramids"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("pyramids",{url:"/pyramids",views:{content:{controller:"PyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramids.html"}}}).state("pyramids.myPyramids",{url:"/my-pyramids",views:{"content@":{controller:"MyPyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/my-pyramids.html"}},resolve:{auth:a.user}}).state("pyramids.view",{url:"/view/:competitionId",views:{"content@":{controller:"PyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramid.html"}}}).state("pyramids.stats",{url:"/stats/:competitionId",views:{"content@":{controller:"StatsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/stats.html"}}}).state("pyramids.admin",{url:"/admin/:competitionId",views:{"content@":{controller:"AdminCtrl",controllerAs:"vm",templateUrl:"pyramids/views/admin.html"}},resolve:{auth:a.user}}).state("pyramids.create",{url:"/create",views:{"content@":{controller:"CreatePyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/create-pyramid.html"}},resolve:{auth:a.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}}).state("verify",{url:"/verification",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("verification",{url:"/verification/:userId/:verificationToken",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}})}function t(e){return e.authorizeCurrentUserForRoute("admin")}function n(e){return e.authorizeCurrentUserForRoute("super-admin")}function r(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),t.$inject=["authService"],n.$inject=["authService"],r.$inject=["authService"]}(),function(){"use strict";function e(e,t,n){e.$on("$stateChangeError",function(e,n,r,i,o,a){"not authorized"===a&&(t.go("login"),t.previous=n,t.prevParams=r)}),e.$on("$stateChangeStart",function(){n.setSidebarStatus(!1)})}e.$inject=["$rootScope","$state","sidebarService"],angular.module("app").run(e)}(),function(){"use strict";function e(e,t,n,r,i,o){function a(e,r){var o=n.defer();return t.post("/login",{username:e,password:r}).then(function(e){e.data.success?(i.currentUser=e.data.user,o.resolve(!0)):"unverified"===e.data.message?o.resolve("unverified"):o.resolve(!1)}),o.promise}function l(e){var r=n.defer();return t.post("/api/users",{userData:e}).then(function(e){e.data?r.resolve(!0):r.resolve(!1)},function(e){"Error: Duplicate Username"===e.data.reason&&o.error("Sorry, an account already exists with that email address.")}),r.promise}function c(){var r=n.defer();return t.post("/logout",{logout:!0}).then(function(){i.currentUser=void 0,r.resolve(),e.go("home")}),r.promise}function s(e){return!!i.isAuthorized(e)||n.reject("not authorized")}function u(){return!!i.isAuthenticated()||n.reject("not authorized")}var d={authenticateUser:a,createUser:l,logout:c,authorizeCurrentUserForRoute:s,authenticatedUserForRoute:u};return d}e.$inject=["$state","$http","$q","userService","identityService","notifyService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e){function t(){return e.get("/api/users").then(function(e){return e})}function n(t,n){return e.get("/api/user/verification",{params:{userId:t,verificationToken:n}})}var r={getAllUsers:t,verifyUser:n};return r}e.$inject=["$http"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(e,t,n){function r(){}function i(r,i){t.authenticateUser(r,i).then(function(t){t?"unverified"===t?n.error("You must verify your email before you can login"):e.previous?(e.go(e.previous,e.prevParams),e.previous=null,e.prevParams=null):e.go("home"):n.error("Username / password combinaiton incorrect")})}var o=this;o.login=i,r()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){}function i(r){r.password!==r.confirmPassword?n.error("Passwords don't match!"):t.createUser(r).then(function(){e.go("verify")})}var o=this;o.register=i,r()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){t.userId&&t.verificationToken&&(i.verifying=!0,i.verified=null,n.verifyUser(t.userId,t.verificationToken).then(function(e){e.data?i.verified=!0:i.verified=!1}))}var i=this;i.verified=void 0,i.verifying=!1,r()}e.$inject=["$state","$stateParams","userService"],angular.module("app").controller("VerificationCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@"},templateUrl:"/challenges/components/active-challenges.html"};return e}function t(e,t){function n(){r()}function r(){i.challenges=[],t.getActiveChallengesByCompetition(i.competitionId).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){0!==e.timeLimit&&(e.expires=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1)}))})}var i=this;i.challenges=[],n(),e.$on("ws:challenge_created",function(e,t){i.competitionId===t.competitionId&&r()}),e.$on("ws:challenge_completed",function(e,t){i.competitionId===t.competitionId&&r()}),e.$on("ws:pyramid_updated",function(e,t){i.competitionId===t.competitionId&&r()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpActiveChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@",limit:"@"},templateUrl:"/challenges/components/completed-challenges.html"};return e}function t(e,t){function n(){r()}function r(){i.challenges=[],t.getCompletedChallengesByCompetition(i.competitionId,i.limit).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){e.loser="challenger"===e.winner?"opponent":"challenger",e.whenCompleted=moment(e.completed).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd",sameElse:"DD/MM/YYYY"})}))})}var i=this;i.challenges=[],n(),e.$on("ws:challenge_completed",function(e,t){i.competitionId===t.competitionId&&r()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpCompletedChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@",player:"="},templateUrl:"/challenges/components/player-overall-results.html"};return e}function t(e,t,n){function r(){i(o.competitionId,o.player._id)}function i(e,n){t.getPlayerResultsByCompetition(e,n).then(function(e){for(var t=[],r=0;r<o.maxLevels;r++)t.push(r*(r+1)/2+1);o.player.level=t.length;for(var i=0;i<t.length;i++)if(o.player.position<t[i+1]){o.player.level=t.indexOf(t[i])+1;break}var a,l=0,c=!0;_.forEach(e.data,function(e){c&&("challenger"===e.winner&&e.challenger._id===n||"opponent"===e.winner&&e.opponent._id===n?"losing"!==a?(l+=1,a="winning"):c=!1:("opponent"===e.winner&&e.challenger._id===n||"challenger"===e.winner&&e.opponent._id===n)&&("winning"!==a?(l+=1,a="losing"):c=!1)),o.streak={type:a,value:l}}),o.wins.asOpponent=_.size(_.filter(e.data,function(e){return e.opponent._id===n&&"opponent"===e.winner})),o.wins.asChallenger=_.size(_.filter(e.data,function(e){return e.challenger._id===n&&"challenger"===e.winner})),o.wins.total=o.wins.asChallenger+o.wins.asOpponent,o.wins.byForfeit=_.size(_.filter(e.data,function(e){return e.forfeit&&(e.challenger._id===n&&"challenger"===e.winner||e.opponent._id===n&&"opponent"===e.winner)})),o.loses.asOpponent=_.size(_.filter(e.data,function(e){return e.opponent._id===n&&"challenger"===e.winner})),o.loses.asChallenger=_.size(_.filter(e.data,function(e){return e.challenger._id===n&&"opponent"===e.winner})),o.loses.total=o.loses.asChallenger+o.loses.asOpponent,o.loses.byForfeit=_.size(_.filter(e.data,function(e){return e.forfeit&&(e.challenger._id===n&&"opponent"===e.winner||e.opponent._id===n&&"challenger"===e.winner)}))})}var o=this;o.maxLevels=10,o.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},o.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},o.streak={type:null,value:0},r(),e.$on("ws:challenge_completed",function(e,t){o.competitionId===t.competitionId&&(o.player._id===t.challengerId?(n.info(t.description),i(t.competitionId,t.challengerId)):o.player._id===t.opponentId&&i(t.competitionId,t.opponentId))})}t.$inject=["$scope","challengesService","notifyService"],angular.module("app").directive("kpPlayerOverallResults",e)}(),function(){"use strict";function e(e){function t(t){return e.post("/api/challenges/create",{challenge:t})}function n(t){return e.post("/api/challenges/complete",{challenge:t})}function r(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function i(t){return e.get("/api/challenges/active/competition",{params:{competitionId:t}})}function o(t,n){return e.get("/api/challenges/active/competition/player",{params:{competitionId:t,playerId:n}})}function a(t,n){return e.get("/api/challenges/completed/competition",{params:{competitionId:t,limit:n}})}function l(t,n){return e.delete("/api/challenges/active/competition/player/delete",{params:{competitionId:t,playerId:n}})}function c(t,n){return e.get("/api/challenges/results/competition/player",{params:{competitionId:t,playerId:n}})}var s={createChallenge:t,completeChallenge:n,getChallengesByCompetition:r,getActiveChallengesByCompetition:i,getActiveChallengeByCompetitionByPlayer:o,getCompletedChallengesByCompetition:a,deleteActiveChallengeByCompetitionByPlayer:l,getPlayerResultsByCompetition:c};return s}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/footer.html"};return e}function t(e,t){function n(){t.logout()}var r=this;r.indentity=e,r.logout=n}t.$inject=["identityService","authService"],angular.module("app").directive("kpFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"headerCtrl",restrict:"A",templateUrl:"/common/components/header.html"};return e}function t(e,t,n){function r(){o.sidebarStatus.left=!o.sidebarStatus.left,e.setSidebarStatus(o.sidebarStatus.left)}function i(){n.logout()}var o=this;o.indentity=t,o.logout=i,o.sidebarStatus=e.getSidebarStatus(),o.toggleSidebar=r}t.$inject=["sidebarService","identityService","authService"],angular.module("app").directive("kpHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"/common/components/sidebar.html"};return e}function t(e,t,n){function r(){t.logout()}var i=this;i.indentity=e,i.logout=r,i.sidebarStatus=n.getSidebarStatus()}t.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("kpSidebar",e)}(),function(){"use strict";function e(){return function(e,t){if(!angular.isObject(e))return e;var n=[];for(var r in e)n.push(e[r]);return n.sort(function(e,n){return e=parseInt(e[t]),n=parseInt(n[t]),e-n}),n}}angular.module("app").filter("orderObjectBy",e)}(),function(){"use strict";function e(e){function t(){return!!this.currentUser}function n(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var r;null!==e.bootstrappedUserObject&&(r=e.bootstrappedUserObject);var i={currentUser:r,isAuthenticated:t,isAuthorized:n};return i}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,t,n){$.notify({message:e,url:t,target:n},{type:"info"})}function t(e,t,n){$.notify({message:e,url:t,target:n},{type:"success"})}function n(e,t,n){$.notify({message:e,url:t,target:n},{type:"warning"})}function r(e,t,n){$.notify({message:e,url:t,target:n},{type:"danger"})}function i(e,t,n){$.notify({message:e,url:t,target:n},{type:"inverse"})}var o={info:e,success:t,warning:n,error:r,inverse:i};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85}}),o}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(e,t,n,r){$(e).mCustomScrollbar({theme:t,scrollInertia:100,axis:n,mouseWheel:{enable:!0,axis:r,preventDefault:!0}})}var t={malihuScroll:e};return t}angular.module("app").factory("scrollbarService",e)}(),function(){"use strict";function e(){function e(){return n}function t(e){n.left=e}var n={left:!1,right:!1},r={getSidebarStatus:e,setSidebarStatus:t};return r}angular.module("app").factory("sidebarService",e)}(),angular.module("app").service("websocketService",["$rootScope","$window",function(e,t){function n(){return"https:"===t.location.protocol?"wss://"+t.location.host:"ws://"+t.location.host}var r;this.connect=function(){r=new WebSocket(n()),r.onmessage=function(t){var n=JSON.parse(t.data);e.$broadcast("ws:"+n.topic,n.data)}},this.send=function(e,t){var n=JSON.stringify({topic:e,data:t});r.send(n)}}]).run(["websocketService",function(e){e.connect()}]),function(){"use strict";function e(){function e(){}e()}angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/pyramids/components/pending-players.html"};return e}function t(e,t){function n(){}function r(e){e.position=o.pyramid.players.length+1,t.approvePendingPlayer(o.pyramid._id,e)}function i(e){t.denyPendingPlayer(o.pyramid._id,e)}var o=this;o.pendingPlayers=[],o.approvePendingPlayer=r,o.denyPendingPlayer=i,n()}t.$inject=["$scope","pyramidsService"],angular.module("app").directive("kpPendingPlayers",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{type:"@"},templateUrl:"/pyramids/components/pyramid-compact.html"};return e}function t(e,t){function n(){"user"===r.type?e.getPyramidsForUser(t.currentUser._id).then(function(e){r.pyramids=e.data}):e.getPyramids().then(function(e){r.pyramids=e.data})}var r=this;r.pyramids=null,n()}t.$inject=["pyramidsService","identityService"],angular.module("app").directive("kpPyramidCompact",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/pyramids/components/pyramid.html",replace:!0,scope:{competitionId:"@"},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,n,r,i,o,a){function l(){n.getPyramid($.competitionId).then(function(e){for(var t=I;t>0;--t)$.maxPlayers+=t;e.data&&($.pyramid=e.data,c(),s(),d(),p(),m())})}function c(){$.pyramid.players=r("orderBy")($.pyramid.players,"position")}function s(){o.isAuthenticated()&&($.currentUserIsOwner=_.some($.pyramid.owners,["_id",o.currentUser._id])),$.currentUserIsOnPyramid=!1,$.hasActiveChallenge=!1,_.forEach($.pyramid.players,function(e){o.isAuthenticated()&&e._id===o.currentUser._id&&($.currentUserIsOnPyramid=!0,e.class="current-user",$.currentUserPlayer=e,a.getActiveChallengeByCompetitionByPlayer($.competitionId,e._id).then(function(e){e.data&&($.hasActiveChallenge=!0)}))}),$.currentUserIsPending=!1,_.forEach($.pyramid.pendingPlayers,function(e){o.isAuthenticated()&&e._id===o.currentUser._id&&($.currentUserIsPending=!0)}),a.getActiveChallengesByCompetition($.competitionId).then(function(e){_.forEach(e.data,function(e){var t=_.find($.pyramid.players,{_id:e.challenger._id});t.class="unavailable",t.challenge={position:"challenger"};var n=_.find($.pyramid.players,{_id:e.opponent._id});if(n.class="unavailable",n.challenge={position:"opponent"},0!==e.timeLimit){var r=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1;r>0?n.challenge.expires=r:r<=0&&v(null,!0,n)}}),f()})}function u(){$.breakPoints=[];for(var e=0;e<I;e++)$.breakPoints.push(e*(e+1)/2+1)}function d(){var e=0;$.levels=[],u();for(var t=0;t<$.pyramid.players.length;t++)$.breakPoints.indexOf(t+1)>-1&&(e+=1,$.levels.push(e)),$.pyramid.players[t].level=e}function p(){$.numberOfBlocks=0;for(var e=_.last($.levels);e>0;e--)$.numberOfBlocks+=e}function m(){$.numberOfRealPlayers=$.pyramid.players.length;for(var e=$.pyramid.players.length;e<$.numberOfBlocks;e++)$.pyramid.players.push({firstName:"Empty",lastName:"Spot",position:99,class:"empty"});d()}function f(){var e=$.currentUserPlayer.level>1?$.currentUserPlayer.level-1:null;_.forEach($.pyramid.players,function(t){t.level===e&&99!==t.position&&"unavailable"!==t.class&&($.availableChallenges=!0,t.available=!0)})}function y(e){if(e.available){$.hasActiveChallenge=!0;var t={competitionName:$.pyramid.name,competitionId:$.competitionId,complete:!1,forfeit:!1,timeLimit:$.pyramid.forfeitDays,challenger:{_id:$.currentUserPlayer._id,email:$.currentUserPlayer.email,firstName:$.currentUserPlayer.firstName,lastName:$.currentUserPlayer.lastName,position:$.currentUserPlayer.position},opponent:{_id:e._id,email:e.email,firstName:e.firstName,lastName:e.lastName,position:e.position}};a.createChallenge(t).then(function(){$.pyramidMenuToggle=!1})}else i.error("Sorry, that is not a valid challenge.")}function v(e,t,r){var i=r||$.currentUserPlayer;a.getActiveChallengeByCompetitionByPlayer($.competitionId,i._id).then(function(i){$.hasActiveChallenge=!1;var o=!1;t?(i.data.forfeit=!0,"opponent"===r.challenge.position?(i.data.winner="challenger",o=!0):i.data.winner="opponent"):e?i.data.challenger._id===$.currentUserPlayer._id?(i.data.winner="challenger",o=!0):i.data.winner="opponent":i.data.challenger._id===$.currentUserPlayer._id?i.data.winner="opponent":(i.data.winner="challenger",o=!0),o?n.swapPositions($.competitionId,i.data.opponent,i.data.challenger).then(function(){a.completeChallenge(i.data).then(function(){S&&w()})}):a.completeChallenge(i.data).then(function(){S&&w()}),$.pyramidMenuToggle=!1})}function g(e){v(null,!0,e)}function h(){if(o.isAuthenticated())if($.numberOfRealPlayers<$.maxPlayers){var e={_id:o.currentUser._id,firstName:o.currentUser.firstName,lastName:o.currentUser.lastName,email:o.currentUser.username,position:$.numberOfRealPlayers+1};$.pyramid.open?swal({title:"Join Competition?",text:"You'll be added to the bottom",type:"warning",showCancelButton:!0,confirmButtonText:"Join",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToPyramid($.competitionId,e),swal("Welcome Aboard!","Now start fighting your way to the top","success")}):swal({title:"Send Join Request?",text:"This is a closed competition so the owner must approve your request",type:"warning",showCancelButton:!0,confirmButtonText:"Send Request",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToPyramidRequest($.pyramid,e).then(function(){$.currentUserIsPending=!0}),swal("Request Sent","You will receive an email once the owner processes the request.","success")})}else i.warning("Sorry, this pyramid is full");else t.go("login")}function P(){swal({title:"Leave Pyramid?",text:"You will lose your spot and forfeit any active challenges.",type:"error",showCancelButton:!0,confirmButtonText:"Yes, leave",confirmButtonClass:"btn-danger",cancelButtonText:"No, stay",closeOnConfirm:!1,closeOnCancel:!0},function(){w(),swal("OK, you'r out!","You've been removed from the pyramid.","success")})}function w(){o.isAuthenticated()&&$.currentUserIsOnPyramid&&(S=!0,$.hasActiveChallenge?v(null,!0,$.currentUserPlayer):($.currentUserIsOnPyramid=!1,$.hasActiveChallenge=!1,n.getPyramid($.competitionId).then(function(e){var t=e.data,r=$.currentUserPlayer.position;_.forEach(t.players,function(e){e.position>=r&&(e.position-=1)});for(var i=_.remove(t.players,function(e){return e._id===$.currentUserPlayer._id}),o=[],a=0;a<$.numberOfRealPlayers-1;++a){var l={_id:t.players[a]._id,firstName:t.players[a].firstName,lastName:t.players[a].lastName,position:t.players[a].position};o.push(l)}n.removedPlayerFromPyramid($.competitionId,i[0],o).then(function(){S=!1})})))}function C(){n.getPyramid($.competitionId).then(function(e){$.pyramid=e.data,c(),s(),d(),p(),m()})}var I=10,$=this;$.pyramid={},$.breakPoints=[],$.levels=[],$.numberOfBlocks=0,$.currentUserIsOnPyramid=!1,$.currentUserIsPending=!1,$.currentUserIsOwner=!1,$.hasActiveChallenge=!1,$.availableChallenges=!1,$.createChallenge=y,$.completeChallenge=v,$.challengeExpired=g,$.currentUserPlayer={},$.pyramidMenuToggle=!1,$.addCurrentUserToPyramid=h,$.confirmRemoveCurrentUserFromPyramid=P,$.numberOfRealPlayers=0,$.maxPlayers=0,l();var S=!1;e.$on("ws:challenge_created",function(e,t){$.competitionId===t.competitionId&&(i.info(t.description),C())}),e.$on("ws:challenge_completed",function(e,t){$.competitionId===t.competitionId&&(i.info(t.description),S||C())}),e.$on("ws:player_added",function(e,t){$.competitionId===t.competitionId&&(i.info(t.description),C())}),e.$on("ws:player_removed",function(e,t){$.competitionId===t.competitionId&&(i.info(t.description),C())}),e.$on("ws:pyramid_updated",function(e,t){$.competitionId===t.competitionId&&(i.info(t.description),C())})}t.$inject=["$scope","$state","pyramidsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("kpPyramid",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{pyramid:"="},templateUrl:"/pyramids/components/update-players.html"};return e}function t(e,t,n,r,i){function o(){d.pyramid&&(d.pyramid.players=n("orderBy")(d.pyramid.players,"position"))}function a(){_.forEach(u,function(e){i.deleteActiveChallengeByCompetitionByPlayer(d.pyramid._id,e._id)}),r.updatePyramid(d.pyramid)}function l(){r.getPyramid(d.pyramid._id).then(function(e){d.pyramid=e.data})}function c(){var e=1;_.forEach(d.pyramid.players,function(t){t.position=e,++e})}function s(e,t){u.push(e),d.pyramid.players.splice(t,1),c()}var u=[],d=this;d.updatePyramid=a,d.cancelUpdate=l,d.reorderPlayers=c,d.removePlayer=s,o()}t.$inject=["$scope","$state","$filter","pyramidsService","challengesService"],angular.module("app").directive("kpUpdatePlayers",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/pyramid",{params:{competitionId:t}})}function n(t){return e.get("/api/pyramids/user",{params:{userId:t}})}function r(){return e.get("/api/pyramids")}function i(t){return e.post("/api/pyramids/create",{pyramid:t})}function o(t){return e.post("/api/pyramids/update",{pyramid:t})}function a(t,n,r){return e.post("/api/pyramids/swapPositions",{competitionId:t,challenger:n,opponent:r})}function l(t,n){return e.post("/api/pyramids/addPlayer",{competitionId:t,player:n})}function c(t,n){return e.post("/api/pyramids/addPlayerRequest",{competition:t,player:n})}function s(t,n,r){return e.post("/api/pyramids/removePlayer",{competitionId:t,removedPlayer:n,players:r})}function u(t,n){return e.post("/api/pyramids/approvePlayer",{competitionId:t,player:n})}function d(t,n){return e.post("/api/pyramids/denyPlayer",{competitionId:t,player:n})}var p={getPyramid:t,getPyramidsForUser:n,getPyramids:r,createPyramid:i,updatePyramid:o,swapPositions:a,addPlayerToPyramid:l,addPlayerToPyramidRequest:c,removedPlayerFromPyramid:s,approvePendingPlayer:u,denyPendingPlayer:d};return p}e.$inject=["$http"],angular.module("app").factory("pyramidsService",e)}(),function(){"use strict";function e(e,t,n,r,i,o,a,l){function c(){n.competitionId?(d.competitionId=n.competitionId,s()):t.go("pyramids.myPyramids")}function s(){i.getPyramid(d.competitionId).then(function(e){e.data&&_.some(e.data.owners,["_id",a.currentUser._id])?d.pyramid=e.data:t.go("pyramids.myPyramids")})}function u(){i.getPyramid(d.competitionId).then(function(e){var t=e.data;t.open=d.pyramid.open,i.updatePyramid(t)})}var d=this;d.competitionId=null,d.updatePyramidOpenStatus=u,c(),e.$on("ws:challenge_completed",function(e,t){d.competitionId===t.competitionId&&(l.info(t.description),s())}),e.$on("ws:player_added",function(e,t){d.competitionId===t.competitionId&&(l.info(t.description),s())}),e.$on("ws:player_removed",function(e,t){d.competitionId===t.competitionId&&(l.info(t.description),s())}),e.$on("ws:pyramid_updated",function(e,t){d.competitionId===t.competitionId&&(l.info(t.description),s())}),e.$on("ws:add_player_request",function(e,t){d.competitionId===t.competitionId&&(l.info(t.description),s())}),e.$on("ws:add_player_request_denied",function(e,t){d.competitionId===t.competitionId&&(l.info(t.description),s())})}e.$inject=["$scope","$state","$stateParams","$filter","pyramidsService","challengesService","identityService","notifyService"],angular.module("app").controller("AdminCtrl",e)}(),function(){"use strict";function e(e,t,n,r,i){function o(){t.getAllUsers().then(function(e){p.availablePlayers=e.data});for(var e=0;e<d;e++)u.push(e*(e+1)/2+1)}function a(e){e.position=p.addedPlayers.length+1,p.addedPlayers.push(_.remove(p.availablePlayers,{_id:e._id})[0])}function l(e){p.availablePlayers.push(_.remove(p.addedPlayers,{_id:e._id})[0])}function c(){var e=1;_.forEach(p.addedPlayers,function(t){t.position=e,++e})}function s(t){angular.forEach(p.addedPlayers,function(e){m+=1;var n={position:m,_id:e._id,email:e.username,firstName:e.firstName,lastName:e.lastName};t.players.push(n)}),t.owners=[{_id:i.currentUser._id,email:i.currentUser.username,firstName:i.currentUser.firstName,lastName:i.currentUser.lastName}];for(var r=0;r<u.length;r++)if(t.players.length<u[r]){t.levels=r;break}n.createPyramid(t).then(function(t){e.go("pyramids.view",{competitionId:t.data._id})})}var u=[],d=10,p=this;p.newPyramid={players:[],open:!1},p.availablePlayers=[],p.addedPlayers=[],p.createPyramid=s,p.addPlayer=a,p.removePlayer=l,p.reorderPlayers=c,p.newPyramid.forfeitDays=1,o();var m=0}e.$inject=["$state","userService","pyramidsService","notifyService","identityService"],angular.module("app").controller("CreatePyramidCtrl",e)}(),function(){"use strict";function e(){function e(){}e()}angular.module("app").controller("MyPyramidsCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){t.competitionId&&(i.competitionId=t.competitionId,n.getPyramid(i.competitionId).then(function(t){t.data?i.pyramid=t.data:e.go("pyramids.myPyramids")}))}var i=this;i.competitionId=null,i.pyramid=null,r()}e.$inject=["$state","$stateParams","pyramidsService"],angular.module("app").controller("PyramidCtrl",e)}(),function(){"use strict";function e(){function e(){}e()}angular.module("app").controller("PyramidsCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){e.competitionId&&(i.competitionId=e.competitionId,n.getPyramid(i.competitionId).then(function(e){e.data?i.pyramid=e.data:t.go("pyramids.myPyramids")}))}var i=this;i.competitionId=null,i.pyramid=null,r()}e.$inject=["$stateParams","$state","pyramidsService"],angular.module("app").controller("StatsCtrl",e)}(),function(){"use strict";function e(e){function t(t,n,r){var i=r.scrollaxis||"y",o=r.theme||"minimal-dark",a=r.mousewheelaxis||"y";$("html").hasClass("ismobile")||e.malihuScroll(n,o,i,a)}var n={restrict:"C",link:t};return n}e.$inject=["scrollbarService"],angular.module("app").directive("cOverflow",e)}(),function(){"use strict";function e(){function e(e,t){t.click(function(){t.next().slideToggle(200),t.parent().toggleClass("toggled")})}var t={restrict:"A",link:e};return t}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,t){t.hasClass("btn-icon")||t.hasClass("btn-float")?Waves.attach(t,["waves-circle"]):t.hasClass("btn-light")?Waves.attach(t,["waves-light"]):Waves.attach(t),Waves.init()}var t={restrict:"C",link:e};return t}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,t){var n=t.children().first(),r=t.parent().hasClass("fg-float");n.focus(function(){t.addClass("fg-toggled")}),n.blur(function(){(!r||r&&0===n.val().length)&&t.removeClass("fg-toggled")})}var t={restrict:"C",link:e};return t}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;base64,
