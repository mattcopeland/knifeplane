angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","LocalStorageModule","angular-sortable-view","angular.vertilize","ngTable"]),function(){"use strict ";function e(e,n,i){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache",n.options({appendToBody:!0}),i.errorOnUnhandledRejections(!1)}e.$inject=["$httpProvider","$uibTooltipProvider","$qProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e,n){function i(e){n.set("sidebarLocked",e)}var t=this;t.$state=e,t.lockSidebar=n.get("sidebarLocked"),t.toggleSidebarLocked=i}e.$inject=["$state","localStorageService"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,a,o){var l={superAdmin:i,admin:n,user:t};o.html5Mode(!0),a.otherwise("/"),a.when("/competitions/","/competitions"),a.when("/admin/","/admin"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("competitions",{url:"/competitions",views:{content:{controller:"CompetitionsCtrl",controllerAs:"vm",templateUrl:"competitions/views/competitions.html"}}}).state("competitions.myCompetitions",{url:"/my-competitions",views:{"content@":{controller:"MyCompetitionsCtrl",controllerAs:"vm",templateUrl:"competitions/views/my-competitions.html"}},resolve:{auth:l.user}}).state("competitions.view",{url:"/view/:competitionId",views:{"content@":{controller:"CompetitionCtrl",controllerAs:"vm",templateUrl:"competitions/views/competition.html"}}}).state("competitions.stats",{url:"/stats/:competitionId",views:{"content@":{controller:"CompetitionStatsCtrl",controllerAs:"vm",templateUrl:"competitions/views/competition-stats.html"}}}).state("competitions.admin",{url:"/admin/:competitionId",views:{"content@":{controller:"CompetitionAdminCtrl",controllerAs:"vm",templateUrl:"competitions/views/competition-admin.html"}},resolve:{auth:l.user}}).state("competitions.create",{url:"/create",views:{"content@":{controller:"CreateCompetitionCtrl",controllerAs:"vm",templateUrl:"competitions/views/create-competition.html"}},resolve:{auth:l.user}}).state("user",{url:"/user",views:{content:{controller:"UserCtrl",controllerAs:"vm",templateUrl:"users/views/user.html"}},resolve:{auth:l.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}}).state("verify",{url:"/verification",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("verification",{url:"/verification/:userId/:verificationToken",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("password-reset-request",{url:"/password-reset",views:{content:{controller:"PasswordResetCtrl",controllerAs:"vm",templateUrl:"authentication/views/password-reset.html"}}}).state("password-reset",{url:"/password-reset/:userId/:verificationToken",views:{content:{controller:"PasswordResetCtrl",controllerAs:"vm",templateUrl:"authentication/views/password-reset.html"}}}).state("admin",{url:"/admin",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("admin.users",{url:"/users",views:{"content@":{controller:"EditUserAdminCtrl",controllerAs:"vm",templateUrl:"admin/views/edit-user-admin.html"}},resolve:{auth:l.superAdmin}})}function n(e){return e.authorizeCurrentUserForRoute("admin")}function i(e){return e.authorizeCurrentUserForRoute("super-admin")}function t(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),n.$inject=["authService"],i.$inject=["authService"],t.$inject=["authService"]}(),function(){"use strict";function e(e,n,i,t){e.$on("$stateChangeError",function(e,i,t,a,o,l){"not authorized"===l&&(n.go("login"),n.previous=i,n.prevParams=t)}),e.$on("$stateChangeStart",function(){t.setSidebarStatus(!1),i[0].body.scrollTop=i[0].documentElement.scrollTop=0})}e.$inject=["$rootScope","$state","$document","sidebarService"],angular.module("app").run(e)}(),angular.module("app").run(["$templateCache",function(e){e.put("authentication/views/login.html",'<div class="container login-page">\n    <div class="row">\n        <div class="col-md-6 col-md-offset-3">\n            <div class="block-header">\n                <h2>Welcome to WannaPlayMe</h2>\n            </div>\n            <div class="card">\n                <div class="card-header">\n                    <h2>Login</h2>\n                </div>\n                <div class="card-body card-padding">\n                    <form role="form" name="loginForm" ng-submit="vm.login(vm.username, vm.password)" novalidate>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="email" class="form-control fg-input" ng-model="vm.username" placeholder="Email">\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="password" class="form-control fg-input" ng-model="vm.password" placeholder="Password">\n                            </div>\n                        </div>\n                        <div class="text-center">\n                            <button type="submit" class="btn btn-primary waves-effect">Sign In</button>\n                        </div>\n                        <div class="row">\n                            <div class="col-xs-6">\n                                <a ui-sref="register">New User</a>\n                            </div>\n                            <div class="col-xs-6 text-right">\n                                <a ui-sref="password-reset-request">Forgot Password</a>\n                            </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("authentication/views/password-reset.html",'<div class="container">\n    <div class="row">\n        <div class="col-md-6 col-md-offset-3">\n            <div class="block-header">\n                <h2>Password Reset</h2>\n            </div>\n            <div class="card" ng-if="!vm.verified">\n                <div class="card-body card-padding">\n                    <p>Enter your email address</p>\n                    <form role="form" name="generatePasswordResetLinkForm" ng-submit="vm.generatePasswordResetLink(vm.username)" novalidate>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="email" class="form-control fg-input" ng-model="vm.username" placeholder="Email" required>\n                            </div>\n                        </div>\n                        <div class="text-center">\n                            <button type="submit" class="btn btn-primary waves-effect" ng-disabled="generatePasswordResetLinkForm.$invalid">Submit</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <div class="card" ng-if="vm.verified">\n                <div class="card-body card-padding">\n                    <p>Enter a new password</p>\n                    <form role="form" name="resetPasswordForm" ng-submit="vm.resetPassword(vm.resetPasswordForm)" novalidate>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="password" class="form-control fg-input" ng-model="vm.resetPasswordForm.password" placeholder="New Password" required>\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="password" class="form-control fg-input" ng-model="vm.resetPasswordForm.confirmPassword" placeholder="New Password again" required>\n                            </div>\n                        </div>\n                        <div class="text-center">\n                            <button type="submit" class="btn btn-primary waves-effect" ng-disabled="resetPasswordForm.$invalid">Submit</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("authentication/views/register.html",'<div class="container">\n    <div class="row">\n        <div class="col-md-6 col-md-offset-3">\n            <div class="block-header">\n                <h2>Register for WannaPlayMe</h2>\n            </div>\n            <div class="card">\n                <div class="card-header">\n                    <h2>Register</h2>\n                </div>\n                <div class="card-body card-padding">\n                    <form role="form" name="newUserForm" ng-submit="vm.register(vm.newUser)" novalidate>\n                        <div class="form-group fg-float m-b-30">\n                            <div class="fg-line">\n                                <input class="form-control" type="email" name="username" ng-model="vm.newUser.username" required>\n                                <label class="fg-label">Email</label>\n                            </div>\n                        </div>\n                        <div class="form-group fg-float m-b-30">\n                            <div class="fg-line">\n                                <input class="form-control" type="password" ng-model="vm.newUser.password" required>\n                                <label class="fg-label">Password</label>\n                            </div>\n                        </div>\n                        <div class="form-group fg-float m-b-30">\n                            <div class="fg-line">\n                                <input class="form-control" type="password" ng-model="vm.newUser.confirmPassword" required>\n                                <label class="fg-label">Confirm Password</label>\n                            </div>\n                        </div>\n                        <div class="form-group fg-float m-b-30">\n                            <div class="fg-line">\n                                <input class="form-control" type="text" ng-model="vm.newUser.firstName" required>\n                                <label class="fg-label">First Name</label>\n                            </div>\n                        </div>\n                        <div class="form-group fg-float m-b-30">\n                            <div class="fg-line">\n                                <input class="form-control" type="text" ng-model="vm.newUser.lastName" required>\n                                <label class="fg-label">Last Name</label>\n                            </div>\n                        </div>\n                        <div class="form-group fg-float m-b-30">\n                            <div class="fg-line">\n                                <input class="form-control" type="text" ng-model="vm.newUser.displayName">\n                                <label class="fg-label">Display Name</label>\n                            </div>\n                        </div>\n                        <div class="text-center">\n                            <button type="submit" class="btn btn-primary waves-effect" ng-disabled="newUserForm.$invalid">Register</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("authentication/views/verification.html",'<div class="container">\n    <div class="block-header">\n        <h2>Welcome to WannaPlayMe</h2>\n    </div>\n    <div class="card">\n        <div class="card-header">\n            <h2>Verification Status</h2>\n        </div>\n        <div class="card-body card-padding">\n            <p ng-if="!vm.verifying">Please check your email for the verification link</p>\n            <div ng-if="vm.verifying">\n                <p ng-if="vm.verified === null">We are checking on your account.  Hold tight...</p>\n                <div ng-if="vm.verified"> \n                    <p>Your email address has been verified!</p>\n                    <p>You may now <a ui-sref="login">log in</a> and start competing.</p>\n                </div>\n                <p ng-if="vm.verified === false">Sorry.  We were unable to verify your information.  Please check your verification email from WannaPlayMe and try again.</p>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("challenges/components/active-challenges.html",'<div class="card active-challenges">\n    <div class="card-header">\n        <h2>Active Challenges</h2>\n    </div>\n    <div class="card-body card-padding" ng-if="vm.challenges === null">Getting active challenges...</div>\n    <div class="card-body card-padding" ng-if="vm.challenges.length === 0">No challenges at this time</div>\n    <div class="card-body table-responsive hidden-xs" ng-if="vm.challenges.length > 0">\n        <table ng-table="vm.tableData" class="table table-striped table-vmiddle">\n            <tr ng-repeat="challenge in $data">\n                <td data-title="\'Challenger\'">\n                    {{challenge.challenger.displayName}}\n                </td>\n                <td data-title="\'Opponent\'">\n                    {{challenge.opponent.displayName}}\n                </td>\n                <td data-title="\'Forfeit\'">\n                    <i class="zmdi zmdi-time"></i>\n                    <span ng-if="challenge.expires >= .5">{{challenge.expires | number: 0}}hrs</span>\n                    <span ng-if="challenge.expires < .5">Soon</span>\n                    <i class="zmdi zmdi-close-circle-o delete-challenge-control" ng-click="vm.deleteChallenge(challenge._id, $index)" ng-if="vm.allowDelete"></i>\n                </td>\n            </tr>\n        </table>\n    </div>\n\n    <div class="card-body table-responsive visible-xs" ng-if="vm.challenges.length > 0">\n        <table ng-table="vm.tableData" class="table table-striped table-vmiddle">\n            <tr ng-repeat="challenge in $data">\n                <td data-title="\'Challenger\'">\n                    {{challenge.challenger.displayName}}\n                </td>\n                <td data-title="\'Opponent\'">\n                    {{challenge.opponent.displayName}}\n                    <i class="zmdi zmdi-close-circle-o delete-challenge-control" ng-click="vm.deleteChallenge(challenge._id, $index)" ng-if="vm.allowDelete"></i>\n                </td>\n            </tr>\n        </table>\n    </div>\n</div>'),e.put("challenges/components/completed-challenges.html",'<div class="card completed-challenges">\n    <div class="card-header">\n        <h2>Completed Challenges</h2>\n    </div>\n    <div class="card-body card-padding" ng-if="vm.challenges === null">Getting completed challenges...</div>\n    <div class="card-body card-padding" ng-if="vm.challenges.length === 0">No completed challenges</div>\n    <div class="card-body table-responsive hidden-xs" ng-if="vm.challenges.length > 0">\n        <table ng-table="vm.tableData" class="table table-striped table-vmiddle">\n            <tr ng-repeat="challenge in $data">\n                <td data-title="\'Winner\'">\n                    {{challenge[challenge.winner].displayName}}\n                </td>\n                <td data-title="\'Loser\'">\n                    {{challenge[challenge.loser].displayName}}\n                </td>\n                <td data-title="\'Date\'">\n                    {{challenge.whenCompleted}}\n                    <i class="zmdi zmdi-close-circle-o delete-challenge-control" ng-click="vm.deleteChallenge(challenge._id, $index)" ng-if="vm.allowDelete"></i>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class="card-body table-responsive visible-xs" ng-if="vm.challenges.length > 0">\n        <table ng-table="vm.tableData" class="table table-striped table-vmiddle">\n            <tr ng-repeat="challenge in $data">\n                <td data-title="\'Winner\'">\n                    {{challenge[challenge.winner].displayName}}\n                </td>\n                <td data-title="\'Loser\'">\n                    {{challenge[challenge.loser].displayName}}\n                    <i class="zmdi zmdi-close-circle-o delete-challenge-control" ng-click="vm.deleteChallenge(challenge._id, $index)" ng-if="vm.allowDelete"></i>\n                </td>\n            </tr>\n        </table>\n    </div>\n</div>'),e.put("challenges/components/player-overall-results.html",'<div class="card player-statistics">\n    <div class="card-header ch-alt">\n        <h2>\n            <button class="btn btn-primary btn-icon waves-circle">\n                {{vm.player.level}}\n            </button>\n            <span class="player-name">{{vm.player.displayName}}</span>\n            <small ng-if="vm.player.displayName !== vm.player.firstName + \' \' + vm.player.lastName" class="player-name">{{vm.player.firstName}} {{vm.player.lastName}}</small>\n        </h2>\n    </div>\n    <div class="card-body card-padding-sm">\n        <div class="row">\n            <div class="col-sm-4 col-md-2">\n                <div class="p-15 text-center" ng-class="vm.streak.type === \'winning\' ? \'bgm-green\' : \'bgm-red\'">\n                    <div class="c-white m-b-5"><span class="text-capitalize">{{vm.streak.type}}</span> Streak</div>\n                    <h2 class="m-0 c-white f-300">{{vm.streak.value}}</h2>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2">\n                <div class="bg-app-gray p-15 text-center">\n                    <div class="c-green m-b-5">Total Wins</div>\n                    <h2 class="m-0 c-green f-300">{{vm.wins.total}}</h2>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2">\n                <div class="bg-app-gray p-15 text-center">\n                    <div class="c-red m-b-5">Total Loses</div>\n                    <h2 class="m-0 c-red f-300">{{vm.loses.total}}</h2>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2 text-center">\n                <div class="bg-app-gray p-10 text-center">\n                    <h5>Move Up</h5>\n                    <div>Wins: {{vm.wins.asChallenger}}</div>\n                    <div>Loses: {{vm.loses.asChallenger}}</div>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2 text-center">\n                <div class="bg-app-gray p-10 text-center">\n                    <h5>Defend</h5>\n                    <div>Wins: {{vm.wins.asOpponent}}</div>\n                    <div>Loses: {{vm.loses.asOpponent}}</div>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2 text-center">\n                <div class="bg-app-gray p-10 text-center">\n                    <h5>Forfeit</h5>\n                    <div>Wins: {{vm.wins.byForfeit}}</div>\n                    <div>Loses: {{vm.loses.byForfeit}}</div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("challenges/components/team-overall-results.html",'<div class="card player-statistics">\n    <div class="card-header ch-alt">\n        <h2 ng-if="!vm.singlePlayerTeams">Team {{vm.team}}</h2>\n        <h2 ng-if="vm.singlePlayerTeams">\n            <span class="player-name">{{vm.displayName}}</span>\n            <small ng-if="vm.displayName !== vm.playerName" class="player-name">{{vm.playerName}}</small>\n        </h2>\n    </div>\n    <div class="card-body card-padding-sm">\n        <div class="row">\n            <div class="col-sm-4 col-md-2">\n                <div class="p-15 text-center" ng-class="vm.streak.type === \'winning\' ? \'bgm-green\' : \'bgm-red\'">\n                    <div class="c-white m-b-5"><span class="text-capitalize">{{vm.streak.type}}</span> Streak</div>\n                    <h2 class="m-0 c-white f-300">{{vm.streak.value}}</h2>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2">\n                <div class="bg-app-gray p-15 text-center">\n                    <div class="c-green m-b-5">Total Wins</div>\n                    <h2 class="m-0 c-green f-300">{{vm.wins.total}}</h2>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2">\n                <div class="bg-app-gray p-15 text-center">\n                    <div class="c-red m-b-5">Total Loses</div>\n                    <h2 class="m-0 c-red f-300">{{vm.loses.total}}</h2>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2 text-center">\n                <div class="bg-app-gray p-10 text-center">\n                    <h5>As Challenger</h5>\n                    <div>Wins: {{vm.wins.asChallenger}}</div>\n                    <div>Loses: {{vm.loses.asChallenger}}</div>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2 text-center">\n                <div class="bg-app-gray p-10 text-center">\n                    <h5>As Opponent</h5>\n                    <div>Wins: {{vm.wins.asOpponent}}</div>\n                    <div>Loses: {{vm.loses.asOpponent}}</div>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2 text-center">\n                <div class="bg-app-gray p-10 text-center">\n                    <h5>Forfeit</h5>\n                    <div>Wins: {{vm.wins.byForfeit}}</div>\n                    <div>Loses: {{vm.loses.byForfeit}}</div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("competitions/components/competition-compact.html",'<div class="card">\n    <div class="card-header ch-alt">\n        <h2>{{vm.competition.name}}</h2>\n        <a ui-sref="competitions.view({competitionId: vm.competition._id})" class="btn bgm-blue btn-float waves-effect">\n            <i ng-if="vm.competition.type===\'pyramid\'" class="zmdi zmdi-triangle-up"></i>\n            <i ng-if="vm.competition.type===\'versus\'" class="zmdi zmdi-graphic-eq"></i>\n        </a>\n    </div>\n    <div class="card-body card-padding-sm">\n        <div><i class="zmdi zmdi-play-circle-outline"></i> {{vm.competition.activity}}</div>\n        <div><i class="zmdi zmdi-accounts"></i> {{vm.competition.players.length}}</div>\n        <div ng-if="vm.competition.activeChallenge">\n            <i class="zmdi zmdi-notifications-active c-red"></i>\n            <div class="badge pull-right" ng-if="vm.competition.activeChallenge.expires > 0">\n                <i class="zmdi zmdi-time"></i>\n                <timer interval="1000" countdown="vm.competition.activeChallenge.expires" max-time-unit="\'hour\'">{{hours}}:{{mminutes}}:{{sseconds}}</timer>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("competitions/components/pending-players.html",'<div class="card pending-players" ng-if="vm.competition.pendingPlayers.length > 0">\n    <div class="card-header ch-alt">\n        <h2>Pending Players</h2>\n    </div>\n    <div class="card-body c-overflow" scrollaxis="x">\n        <div class="pending-player bg-app-gray" ng-repeat="player in vm.competition.pendingPlayers">\n            <div class="player-name">{{player.displayName}}</div>\n            <div ng-if="player.displayName !== player.firstName + \' \' + player.lastName" class="player-name">{{player.firstName}} {{player.lastName}}</div>\n            <div class="btns-group text-center">\n                <button class="btn btn-primary" ng-click="vm.approvePendingPlayer(player)">Approve</button>\n                <button class="btn btn-danger" ng-click="vm.denyPendingPlayer(player)">Deny</button>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("competitions/components/pyramid.html",'<div class="container pyramid-container">\n    <div class="card">\n        <!-- Competition -->\n        <div class="ms-body">\n            <div class="listview lv-message">\n                <div class="lv-header-alt clearfix">\n                    <div class="lvh-label hidden-xs">{{vm.competition.activity}}</div>\n                    <ul class="lv-actions actions">\n                        <li ng-if="vm.currentUserIsAdmin">\n                            <a ui-sref="competitions.admin({competitionId: vm.competitionId})">\n                                <i class="zmdi zmdi-edit"></i>\n                            </a>\n                        </li>\n                        <li>\n                            <a ui-sref="competitions.stats({competitionId: vm.competitionId})">\n                                <i class="zmdi zmdi-trending-up"></i>\n                            </a>\n                        </li>\n                        <li ng-if="vm.currentUserIsOnCompetition">\n                            <a href="" ng-click="vm.confirmRemoveCurrentUserFromCompetition()">\n                                <i class="zmdi zmdi-close-circle-o"></i>\n                            </a>\n                        </li>\n                        <li ng-if="!vm.currentUserIsOnCompetition && !vm.currentUserIsPending && vm.numberOfRealPlayers < vm.maxPlayers">\n                            <a href="" ng-click="vm.addCurrentUserToCompetition()">\n                                <i class="zmdi zmdi-account-add"></i>\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n                <div class="lv-body pyramid">\n                    <div ng-repeat="level in vm.levels" class="level level-{{level}}">\n                        <div class="level-marker">{{level}}</div>\n                        <div ng-repeat="player in vm.competition.players" ng-if="player.level === level" class="pyramid-block" ng-class="player.class">\n                            <!-- Player info -->\n                            <div class="player-name">{{player.displayName}}</div>\n                            <div ng-if="player.displayName !== player.firstName + \' \' + player.lastName" class="player-name">{{player.firstName}} {{player.lastName}}</div>\n\n                            <!-- Info tray -->\n                            <div class="tray"\n                                ng-class="{\'open\': player.expandTray}"\n                                ng-if="player.available || player.waitUntil || (player._id === vm.currentUserPlayer._id && vm.hasActiveChallenge) || player.challenge || (!vm.currentUserIsOnCompetition && player.position === 99)">\n                                <!-- Tray expand icon -->\n                                <i class="zmdi zmdi-chevron-up cur-pointer tray-expander"\n                                    ng-class="player.expandTray ? \'zmdi-chevron-down\' : \'zmdi-chevron-up\'"\n                                    ng-click="player.expandTray = !player.expandTray"\n                                    ng-if="player._id === vm.currentUserPlayer._id && vm.hasActiveChallenge"></i>\n                                <!-- Active challenge time -->\n                                <div ng-if="player.challenge && player.challenge.position === \'opponent\' && player.challenge.expires" ng-class="{\'c-red\': player.challenge.expires < .5}">\n                                    <i class="zmdi zmdi-time"></i>\n                                    <span ng-if="player.challenge.expires >= .5">{{player.challenge.expires | number: 0}}hrs</span>\n                                    <span ng-if="player.challenge.expires < .5">Forfeit Soon</span>\n                                </div>\n                                <!-- Show create challenge modal -->\n                                <div class="c-green cur-pointer"\n                                    ng-if="player.available"\n                                    ng-click="vm.confirmCreateChallenge(player)">Challenge Player</div>\n                                <!-- Display who this person has challenged -->\n                                <div\n                                    ng-if="player.challenge && player.challenge.position === \'challenger\'">\n                                    <i class="zmdi zmdi-triangle-up"></i> {{player.challenge.opponent}}</div>\n                                <!-- Show complete challenge modal -->\n                                <button class="btn btn-primary btn-xs"\n                                    ng-if="vm.hasActiveChallenge && player._id === vm.currentUserPlayer._id"\n                                    ng-click="vm.playerClick(player)">Match Result</button>\n                                <!-- Show cancel active challenge modal -->\n                                <div class="cur-pointer c-blue"\n                                    ng-if="vm.hasActiveChallenge && player._id === vm.currentUserPlayer._id && player.challenge.position === \'challenger\'"\n                                    ng-click="vm.confirmCancelChallenge()">Cancel Challenge</div>\n                                <!-- Show forfeit active challenge modal -->\n                                <div class="cur-pointer c-red"\n                                    ng-if="player._id === vm.currentUserPlayer._id && vm.hasActiveChallenge && player.challenge.position === \'opponent\'"\n                                    ng-click="vm.confirmForfeitChallenge(player)">Forfeit Match</div>\n                                <!-- Join the competition -->\n                                <div class="cur-pointer"\n                                    ng-if="!vm.currentUserIsOnCompetition && player.position === 99"\n                                    ng-click="vm.playerClick(player)">Join</div>\n                                <!-- Show waiting period -->\n                                <div class="c-orange"\n                                    ng-if="player.waitUntil">\n                                    <i class="zmdi zmdi-alert-octagon"></i> {{player.waitUntil}}</div>\n                            </div>\n                            <!-- Complete a challenge modal -->\n                            <div class="complete-challenge-modal" ng-if="player._id === vm.currentUserPlayer._id && player.showChallengeModal">\n                                <i class="zmdi zmdi-close" ng-click="vm.playerClick(player)"></i>\n                                <p class="m-b-5 m-t-5">Your Result</p>\n                                <div class="btn-container">\n                                    <button class="btn btn-success waves-effect" ng-click="vm.completeChallenge(true)">Won</button>\n                                    <button class="btn btn-danger waves-effect" ng-click="vm.completeChallenge(false)">Lost</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("competitions/components/update-admins.html",'<div class="card">\n    <div class="card-header ch-alt">\n        <h2>Update Admins</h2>\n    </div>\n    <div class="card-body card-padding-sm">\n        <div class="row swapper">\n            <div class="col-sm-5 m-b-30">            \n                <label>Available Admins</label>\n                <ul>\n                    <li ng-repeat="admin in vm.availableAdmins" ng-click="vm.addAdmin(admin)">\n                        <span class="name">{{admin.firstName}} {{admin.lastName}}</span>\n                    </li>\n                </ul>\n            </div>\n            <span class="col-sm-1">\n                <i class="zmdi zmdi-swap hidden-xs"></i>\n                <i class="zmdi zmdi-swap-vertical visible-xs"></i>\n            </span>\n            <div class="col-sm-6 m-b-30">\n                <label>Competition Admins</label>\n                <ul>\n                    <li ng-repeat="admin in vm.addedAdmins">\n                        <span class="position"><i class="zmdi zmdi-star" ng-if="admin.primary"></i></span>\n                        <span class="name">{{admin.firstName}} {{admin.lastName}}</span>\n                        <i class="zmdi zmdi-close-circle-o" ng-click="vm.removeAdmin(admin, $index)" ng-if="!admin.primary && vm.userIsPrimaryAdmin"></i>\n                    </li>\n                </ul>\n            </div>\n            <div class="btns-group text-center">\n                <button type="submit" class="btn btn-primary" ng-click="vm.updateCompetition()" ng-disabled="vm.disableSubmit">\n                    <i class="zmdi zmdi-check"></i> Update Admins\n                </button>\n                <button class="btn btn-default" ng-click="vm.cancelUpdate()" ng-disabled="vm.disableSubmit">\n                    <i class="zmdi zmdi-close"></i> Cancel\n                </button>\n            </div>\n        </div>       \n    </div> \n</div>'),
e.put("competitions/components/update-players.html",'<div class="card">\n    <div class="card-header ch-alt">\n        <h2>Update Palyers</h2>\n    </div>\n    <div class="card-body card-padding-sm">\n        <div class="row swapper {{vm.competition.type}}swap">\n            <div class="col-sm-5 m-b-30">            \n                <label>Available Players</label>\n                <ul>\n                    <li ng-repeat="player in vm.availablePlayers" ng-click="vm.addPlayer(player)">\n                        <span class="name">{{player.firstName}} {{player.lastName}}</span>\n                    </li>\n                </ul>\n            </div>\n            <span class="col-sm-1">\n                <i class="zmdi zmdi-swap hidden-xs"></i>\n                <i class="zmdi zmdi-swap-vertical visible-xs"></i>\n            </span>\n            <div class="col-sm-6 m-b-30">\n                <label>Competition Players</label>\n                <ul sv-root sv-part="vm.addedPlayers" sv-on-sort="vm.reorderPlayers()">\n                    <li ng-repeat="player in vm.addedPlayers" class="sortable added-player" ng-class="\'added-player\' + ($index + 1)" sv-element>\n                        <span class="position">{{player.position}}</span>\n                        <span class="name" sv-handle>{{player.firstName}} {{player.lastName}}</span>\n                        <i class="zmdi zmdi-close-circle-o" ng-click="vm.removePlayer(player, $index)"></i>\n                    </li>\n                </ul>\n            </div>\n            <div class="btns-group text-center">\n                <button type="submit" class="btn btn-primary" ng-click="vm.updateCompetition()" ng-disabled="vm.disableSubmit">\n                    <i class="zmdi zmdi-check"></i> Update Players\n                </button>\n                <button class="btn btn-default" ng-click="vm.cancelUpdate()" ng-disabled="vm.disableSubmit">\n                    <i class="zmdi zmdi-close"></i> Cancel\n                </button>\n            </div>\n        </div>\n    </div> \n</div>'),e.put("competitions/components/versus.html",'<div class="container versus-container">\n    <div class="card">\n        <!-- Competition -->\n        <div class="ms-body">\n            <div class="listview lv-message">\n                <div class="lv-header-alt clearfix">\n                    <div class="lvh-label hidden-xs">{{vm.competition.activity}}</div>\n                    <ul class="lv-actions actions">\n                        <li ng-if="vm.currentUserIsAdmin">\n                            <a ui-sref="competitions.admin({competitionId: vm.competitionId})">\n                                <i class="zmdi zmdi-edit"></i>\n                            </a>\n                        </li>\n                        <li>\n                            <a ui-sref="competitions.stats({competitionId: vm.competitionId})">\n                                <i class="zmdi zmdi-trending-up"></i>\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n                <div class="lv-body versus" vertilize-container>\n                    <div class="complete-challenege-modal {{vm.competition.class}}" ng-if="vm.hasActiveChallenge" ng-click="vm.toggleControls()" ng-class="{\'show-controls\': vm.showControls}">\n                        <i class="zmdi zmdi-close-circle-o" ng-if="vm.showControls"></i>\n                        <div class="expire-countdown" ng-if="vm.challengeExpireTime && !vm.showControls">\n                            <i class="zmdi zmdi-time" ng-if="vm.activeChallenge.opponent.team === 1"></i>\n                            <span>{{vm.challengeExpireTime | number: 0}}hrs</span>\n                            <i class="zmdi zmdi-time" ng-if="vm.activeChallenge.opponent.team === 2"></i>\n                        </div>\n                        <div class="complete-challenge-controls" ng-if="vm.showControls">\n                            <p>Who won?</p>\n                            <div class="btn-container">\n                                <button class="btn btn-primary btn-lg" type="button" ng-click="vm.completeChallenge(1)">Team 1</button>\n                                <button class="btn btn-primary btn-lg" type="button" ng-click="vm.completeChallenge(2)">Team 2</button>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="versus-team {{team.class}}" ng-repeat="team in vm.competition.teams" ng-click="vm.showChallengeModal = !vm.showChallengeModal" ng-class="{\'available\': !vm.hasActiveChallenge && vm.currentUserIsOnCompetition && vm.currentUserPlayer.position !== $index + 1}" vertilize>\n                        <div ng-if="!vm.singlePlayerTeams" class="team-name">Team {{$index + 1}}</div>\n                        <div ng-repeat="player in team.players" class="versus-player" ng-class="player.class">\n                            <div class="player-name">{{player.displayName}}</div>\n                            <div ng-if="player.displayName !== player.firstName + \' \' + player.lastName" class="player-name">{{player.firstName}} {{player.lastName}}</div>\n                        </div>\n                        <div class="create-challenge-modal" ng-if="!vm.hasActiveChallenge && vm.currentUserIsOnCompetition && vm.currentUserPlayer.position !== $index+1 && vm.showChallengeModal">\n                            <i class="zmdi zmdi-close-circle-o"></i>\n                            <button class="btn btn-success btn-lg waves-effect" ng-click="vm.createChallenge($index + 1)">Challenge?</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("admin/views/edit-user-admin.html",'<div class="container">\n    <div class="row">\n        <div class="col-md-6">\n            <ul>\n                <li ng-repeat="user in vm.users" ng-click="vm.selectUser(user)">\n                    {{user.firstName}} {{user.lastName}}</span>\n                </li>\n            </ul>\n        </div>\n        <div class="col-md-6">\n            <div class="block-header">\n                <h2>User Information</h2>\n            </div>\n            <div class="card">\n                <div class="card-header">\n                    <h2>Update User Info</h2>\n                </div>\n                <div class="card-body card-padding">\n                    <form role="form" name="vm.userForm" ng-submit="vm.updateUser(vm.selectedUser)" novalidate>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control fg-input" ng-model="vm.selectedUser.firstName" placeholder="First Name">\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control fg-input" ng-model="vm.selectedUser.lastName" placeholder="Last Name">\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control fg-input" ng-model="vm.selectedUser.displayName" placeholder="Display Name">\n                            </div>\n                        </div>\n                        <div class="text-center">\n                            <button type="submit" class="btn btn-primary waves-effect" ng-disabled="vm.userForm.$invalid || !vm.userForm.$dirty">Update</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("competitions/views/competition-admin.html",'<div class="container">\n    <div class="block-header">\n        <h2>{{vm.competition.name}} Admin</h2>\n        <ul class="actions">\n            <li>\n                <a ui-sref="competitions.view({competitionId: vm.competitionId})">\n                    <i ng-if="vm.competition.type===\'pyramid\'" class="zmdi zmdi-triangle-up"></i>\n                    <i ng-if="vm.competition.type===\'versus\'" class="zmdi zmdi-graphic-eq"></i>\n                </a>\n            </li>\n            <li>\n                <a ui-sref="competitions.stats({competitionId: vm.competitionId})">\n                    <i class="zmdi zmdi-trending-up"></i>\n                </a>\n            </li>\n        </ul>\n    </div>\n    <div wpm-active-challeneges competition="vm.competition" allow-delete="vm.isAdmin"></div>\n    <div wpm-completed-challeneges competition="vm.competition" allow-delete="vm.isAdmin"></div>\n    <div wpm-pending-players competition="vm.competition"></div>\n    <div class="row">\n        <div class="col-sm-4">\n            <div class="card">\n                <div class="card-header ch-alt">\n                    <h2>Delete Competition</h2>\n                </div>\n                <div class="card-body card-padding-sm text-center">\n                    <button class="btn btn-danger" ng-click="vm.deleteCompetition()">Delete</button>\n                </div>\n            </div>\n        </div>\n        <div class="col-sm-4">\n            <div class="card">\n                <div class="card-header ch-alt">\n                    <h2>Player Joins</h2>\n                </div>\n                <div class="card-body card-padding-sm">\n                    <div class="checkbox player-joins-checkbox">\n                        <label>\n                            <input type="checkbox" value="" ng-model="vm.competition.restrictJoins" ng-change="vm.updateCompetitionRestrictJoins()">\n                            <i class="input-helper"></i>\n                            Admins must approve join requets\n                        </label>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="col-sm-4">\n            <div class="card">\n                <div class="card-header ch-alt">\n                    <h2>Private Status</h2>\n                </div>\n                <div class="card-body card-padding-sm">\n                    <div class="checkbox player-joins-checkbox">\n                        <label>\n                            <input type="checkbox" value="" ng-model="vm.competition.private" ng-change="vm.updateCompetitionPrivate()">\n                            <i class="input-helper"></i>\n                            Make this competition private\n                        </label>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div wpm-update-players competition="vm.competition"></div>\n    <div wpm-update-admins competition="vm.competition"></div>\n</div>'),e.put("competitions/views/competition-stats.html",'<div class="container">\n    <div class="block-header">\n        <h2>{{vm.competition.name}}</h2>\n        <ul class="actions">\n            <li>\n                <a ui-sref="competitions.view({competitionId: vm.competitionId})">\n                    <i ng-if="vm.competition.type===\'pyramid\'" class="zmdi zmdi-triangle-up"></i>\n                    <i ng-if="vm.competition.type===\'versus\'" class="zmdi zmdi-graphic-eq"></i>\n                </a>\n            </li>\n        </ul>\n    </div>\n    <div wpm-completed-challeneges competition="vm.competition" challenges-per-page="10"></div>\n    <div ng-if="vm.competition.type === \'pyramid\'" ng-repeat="player in vm.competition.players | orderObjectBy: \'position\'" wpm-player-overall-results player="player"></div>\n    <div ng-if="vm.competition.type === \'versus\'" ng-repeat="team in vm.teams | orderObjectBy: \'number\'" wpm-team-overall-results competition="vm.competition" challenges="vm.challenges" team="team.number"></div>\n</div>'),e.put("competitions/views/competition.html",'<div class="container">\n    <div class="block-header">\n        <h2>{{vm.competition.name}}</h2>\n    </div>\n</div>\n<div wpm-pyramid ng-if="vm.competitionId && vm.competition.type === \'pyramid\'" competition="vm.competition"></div>\n<div wpm-versus ng-if="vm.competitionId && vm.competition.type === \'versus\'" competition="vm.competition"></div>\n<div class="container">\n    <div class="row">\n        <div class="col-md-6">\n            <div wpm-active-challeneges competition="vm.competition" challenges-per-page="5"></div>\n        </div>\n        <div class="col-md-6">\n            <div wpm-completed-challeneges competition="vm.competition" challenges-per-page="5"></div>\n        </div>\n    </div>\n</div>'),e.put("competitions/views/competitions.html",'<div class="container">\n    <div class="block-header">\n        <h2>Active Competitions</h2>\n    </div>\n    <div class="row" ng-if="vm.competitions.length > 0">\n        <div class="col-sm-4" ng-repeat="competition in vm.competitions" wpm-competition-compact competition="competition"></div>\n    </div>\n    <div class="card" ng-if="vm.competitions.length === 0">\n        <div class="card-body card-padding-sm">\n            <p>No competitions yet :(</p>\n        </div> \n    </div>\n</div>'),e.put("competitions/views/create-competition.html",'<div class="container">\n    <div class="block-header">\n        <h2>Create a New Competition</h2>\n    </div>\n    <div class="card">\n        <div class="card-header">\n            <h2>Competition Details</h2>\n        </div>\n        <div class="card-body card-padding">\n            <form name="createCompetitionForm" class="create-competition-form" ng-submit="vm.createCompetition(vm.newCompetition)" novalidate>\n                <div class="row">\n                    <div class="col-sm-4">\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control" ng-model="vm.newCompetition.name" placeholder="Competition Name" required>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-sm-4">\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control" ng-model="vm.newCompetition.activity" placeholder="Competition Activity" required>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-sm-4">\n                        <div class="form-group">\n\t\t\t\t\t\t\t<select class="w-100" chosen data-placeholder-text-single="\'Competition Type\'" disable-search="true" ng-model="vm.newCompetition.type" ng-options="competitionType as competitionType for competitionType in vm.competitionTypes" ng-change="vm.reorderPlayers()" required>\n\t\t\t\t\t\t\t\t<option value=""></option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="col-sm-5 m-t-5">\n                        <label class="m-b-10">Forfeit Days:\n                            <span ng-if="vm.newCompetition.forfeitDays === 0"> No Limit</span>\n                            <span ng-if="vm.newCompetition.forfeitDays > 0">{{ vm.newCompetition.forfeitDays }}</span>\n                        </label>\n                        <div class="input-slider m-b-30" slider ng-model="vm.newCompetition.forfeitDays" start="0" end="5" step="1" data-is-color="blue"></div>\n                    </div>\n                    <div class="col-sm-6 col-sm-offset-1 m-t-5" ng-if="vm.newCompetition.type !== \'versus\'">\n                        <label class="m-b-10">Rechallenge Wait Days:\n                            <span ng-if="vm.newCompetition.waitingPeriodDays === 0"> No Limit</span>\n                            <span ng-if="vm.newCompetition.waitingPeriodDays > 0">{{ vm.newCompetition.waitingPeriodDays }}</span>\n                        </label>\n                        <div class="input-slider m-b-30" slider ng-model="vm.newCompetition.waitingPeriodDays" start="0" end="5" step="1" data-is-color="blue"></div>\n                    </div>\n                </div>\n                <div class="row swapper {{vm.newCompetition.type}}swap">\n                    <div class="col-sm-5 m-b-30">\n                        <label>Available Players</label>\n                        <ul>\n                            <li ng-repeat="player in vm.availablePlayers" ng-click="vm.addPlayer(player)">\n                                <span class="name">{{player.firstName}} {{player.lastName}}</span>\n                            </li>\n                        </ul>\n                    </div>\n                    <span class="col-sm-1">\n                        <i class="zmdi zmdi-swap hidden-xs"></i>\n                        <i class="zmdi zmdi-swap-vertical visible-xs"></i>\n                    </span>\n                    <div class="col-sm-6 m-b-30">\n                        <label>Competition Players</label>\n                        <ul sv-root sv-part="vm.addedPlayers" sv-on-sort="vm.reorderPlayers()">\n                            <li ng-repeat="player in vm.addedPlayers" class="sortable added-player" ng-class="\'added-player\' + ($index + 1)" sv-element>\n                                <span class="position">{{player.position}}</span>\n                                <span class="name" sv-handle>{{player.firstName}} {{player.lastName}}</span>\n                                <i class="zmdi zmdi-close-circle-o" ng-click="vm.removePlayer(player, $index)"></i>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="col-md-6">\n                        <div class="m-b-30">\n                            <div class="checkbox m-b-15">\n                                <label>\n                                    <input type="checkbox" value="" ng-model="vm.newCompetition.restrictJoins">\n                                    <i class="input-helper"></i>\n                                    Admins must approve join requets\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-md-6">\n                        <div class="m-b-30">\n                            <div class="checkbox m-b-15">\n                                <label>\n                                    <input type="checkbox" value="" ng-model="vm.newCompetition.private">\n                                    <i class="input-helper"></i>\n                                    Make this competitions private\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class="btns-group text-center">\n                    <button type="submit" class="btn btn-primary" ng-disabled="createCompetitionForm.$invalid">\n                        <i class="zmdi zmdi-check"></i> Create Competition\n                    </button>\n                    <a class="btn" ui-sref="competitions">\n                        <i class="zmdi zmdi-close"></i> Cancel\n                    </a>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>'),e.put("competitions/views/my-competitions.html",'<div class="container">\n    <div class="block-header">\n        <h2>My Competitions</h2>\n    </div>\n    <div class="card" ng-if="vm.competitions.length === 0">\n        <div class="card-header">\n            <h2>Sorry, you don\'t have any competitions!</h2>\n        </div>\n        <div class="card-body card-padding">\n            <p>Create a new competition or add yourself to an existing one.</p>\n        </div>\n    </div>\n    <div class="row" vertilize-container>\n        <div class="col-sm-4" ng-repeat="competition in vm.competitions" wpm-competition-compact competition="competition" vertilize></div>\n    </div>\n</div>'),e.put("common/components/footer.html",'Copyright &copy; 2017 The Maestro\n\n<ul class="f-menu">\n    <li><a ui-sref="home">Home</a></li>\n    <li ng-if="!vm.indentity.isAuthenticated()"><a ui-sref="login">Login</a></li>\n    <li ng-if="vm.indentity.isAuthenticated()"><a href="" ng-click="vm.logout()">Logout</a></li>\n</ul>\n'),e.put("common/components/header.html",'<ul class="header-inner clearfix">\n    <li id="menu-trigger" target="mainmenu" ng-click="headerCtrl.toggleSidebar()" ng-class="{ \'open\': headerCtrl.sidebarStatus.left === true }">\n        <div class="line-wrap">\n            <div class="line top"></div>\n            <div class="line center"></div>\n            <div class="line bottom"></div>\n        </div>\n    </li>\n    <li class="logo hidden-xs">\n        <a data-ui-sref="home">\n            <img src="/images/wpm-logo-white.png" alt="WannaPlayMe" />\n        </a>\n    </li>\n    <li class="logo visible-xs">\n        <a data-ui-sref="home">\n            <img src="/images/wpm-logo-white-xs.png" alt="WannaPlayMe" />\n        </a>\n    </li>\n    <li class="pull-right">\n        <ul class="top-menu">\n            <li class="dropdown" uib-dropdown ng-if="headerCtrl.indentity.isAuthenticated()">\n                <a href="" uib-dropdown-toggle>\n                    <i class="tm-icon zmdi zmdi-notifications"></i>\n                    <i class="tmn-counts animate-zoom" ng-if="headerCtrl.alerts.length > 0">{{headerCtrl.alerts.length}}</i>\n                </a>\n                <div class="dropdown-menu dropdown-menu-lg pull-right">\n                    <div class="listview" id="notifications">\n                        <div class="lv-header">Alerts\n                            <ul class="actions">\n                                <li><a href="" ng-click="headerCtrl.clearAllAlerts()" ng-if="headerCtrl.alerts.length > 0"><i class="zmdi zmdi-check-all"></i></a></li>\n                            </ul>\n                        </div>\n                        <div class="lv-body">\n                            <a ui-sref="{{alert.details.state}}({{alert.details.stateParams}})" class="lv-item" ng-repeat="alert in headerCtrl.alerts" ng-click="headerCtrl.clearAlert(alert._id, $index)">\n                                <div class="media">\n                                    <div class="media-body">\n                                        <div class="lv-title">{{alert.details.title}}</div><small class="lv-small">{{alert.details.description}}</small>\n                                    </div>\n                                </div>\n                            </a> \n                            <div class="p-20" ng-if="headerCtrl.alerts.length === 0">Nothing to see here...</div>                           \n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li class="dropdown" uib-dropdown ng-if="headerCtrl.indentity.isAuthenticated()">\n                <a uib-dropdown-toggle href="">\n                    <i class="tm-icon zmdi zmdi-account"></i>\n                </a>\n                <ul class="dropdown-menu dm-icon pull-right">\n                    <li>\n                        <a ui-sref="user"><i class="zmdi zmdi-account-circle"></i> {{headerCtrl.indentity.currentUser.firstName}} {{headerCtrl.indentity.currentUser.lastName}}</a>\n                    </li>\n                    <li>\n                        <a ng-click="headerCtrl.logout()" href=""><i class="fa fa-sign-out"></i> Logout</a>\n                    </li>\n                </ul>\n            </li>\n            <li ng-if="!headerCtrl.indentity.isAuthenticated()">\n                <a ui-sref="login">\n                    <i class="tm-icon zmdi zmdi-sign-in"></i>\n                </a>\n            </li>\n        </ul>\n    </li>\n</ul>'),e.put("common/components/sidebar.html",'<div class="sidebar-inner">\n    <ul class="main-menu">\n        <li ui-sref-active="active">\n            <a ui-sref="home"><i class="zmdi zmdi-home"></i> Home</a>\n        </li>\n        <li ui-sref-active="active" ng-if="!vm.indentity.isAuthenticated()">\n            <a ui-sref="login"><i class="zmdi zmdi-sign-in"></i> Login</a>\n        </li>\n        <li ui-sref-active="active" ng-if="!vm.indentity.isAuthenticated()">\n            <a ui-sref="register"><i class="zmdi zmdi-account-add"></i> Register</a>\n        </li>\n        <li ui-sref-active="active">\n            <a ui-sref="competitions.myCompetitions"><i class="zmdi zmdi-triangle-up"></i> My Competitions</a>\n        </li>\n        <li ui-sref-active="active">\n            <a ui-sref="competitions.create"><i class="zmdi zmdi-plus"></i> Create Competition</a>\n        </li>\n    </ul>\n</div>\n<div class="lock-sidebar">\n    <div class="toggle-switch" id="toggle-width" data-ts-color="blue">\n        <label for="lock-sidebar" class="ts-label">unlock</label>\n        <input id="lock-sidebar" type="checkbox" hidden="hidden" ng-model="appCtrl.lockSidebar" ng-change="appCtrl.toggleSidebarLocked(appCtrl.lockSidebar)">\n        <label for="lock-sidebar" class="ts-helper"></label>\n        <label for="lock-sidebar" class="ts-label">lock</label>\n    </div>\n</div>'),e.put("users/views/user.html",'<div class="container">\n    <div class="row">\n        <div class="col-md-6 col-md-offset-3">\n            <div class="block-header">\n                <h2>User Information</h2>\n            </div>\n            <div class="card">\n                <div class="card-header">\n                    <h2>Update User Info</h2>\n                </div>\n                <div class="card-body card-padding">\n                    <form role="form" name="vm.userForm" ng-submit="vm.updateUser(vm.user)" novalidate>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control fg-input" ng-model="vm.user.firstName" placeholder="First Name">\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control fg-input" ng-model="vm.user.lastName" placeholder="Last Name">\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control fg-input" ng-model="vm.user.displayName" placeholder="Display Name">\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="password" class="form-control fg-input" ng-model="vm.user.password" placeholder="Password">\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="password" class="form-control fg-input" ng-model="vm.user.confirmPassword" placeholder="Confirm Password">\n                            </div>\n                        </div>\n                        <div class="text-center">\n                            <button type="submit" class="btn btn-primary waves-effect" ng-disabled="vm.userForm.$invalid || !vm.userForm.$dirty">Update</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("common/views/home.html",'<div class="container">\n    <div class="block-header">\n        <h2>Welcome to Wanna<b>Play</b>Me</h2>\n    </div>\n    <div class="card">\n        <div class="card-header ch-alt">\n            <h2>What is Wanna<b>Play</b>Me?</h2>\n        </div>\n        <div class="card-body card-padding-sm">\n            <p>Wanna<b>Play</b>Me is a competition tracking app.  It allows you to set up a competition between you and others, challenge them to a match in whatever your competition is and track the results of the competition.</p>\n        </div> \n    </div>\n    <div class="block-header">\n        <h2>Active Public Competitions</h2>\n    </div>\n    <div class="row" ng-if="vm.publicCompetitions.length > 0">\n        <div class="col-sm-4" ng-repeat="competition in vm.publicCompetitions" wpm-competition-compact competition="competition"></div>\n    </div>\n    <div class="card" ng-if="vm.publicCompetitions.length === 0">\n        <div class="card-body card-padding-sm">\n            <p>No competitions yet :(</p>\n        </div> \n    </div>\n    <div class="block-header" ng-if="vm.privateCompetitions.length > 0">\n        <h2>Private Competitions</h2>\n    </div>\n    <div class="row">\n        <div class="col-sm-4" ng-repeat="competition in vm.privateCompetitions" wpm-competition-compact competition="competition"></div>\n    </div>\n</div>')}]),function(){"use strict";function e(e,n,i){function t(){a()}function a(){n.getAllUsers().then(function(e){c.users=e.data,s=_.cloneDeep(c.users)})}function o(e){c.selectedUser=e,r=_.cloneDeep(e)}function l(e){var t=[];if(_.forEach(s,function(e){t.push(e.displayName.toLowerCase())}),e.firstName.length<1||e.lastName.length<1||e.displayName.length<1)i.error("Don't leave names blank!  How will people know who you are?");else if(e.displayName!==r.displayName&&_.indexOf(t,e.displayName.toLowerCase())>-1)i.error("Sorry, someone else is already using that display name");else{var l={_id:e._id,firstName:e.firstName,lastName:e.lastName,displayName:e.displayName};n.updateUser(l).then(function(){i.success("User information has been updated"),o(),a()})}}var s=[],r=null,c=this;c.users=null,c.selectedUser=null,c.selectUser=o,c.updateUser=l,c.userForm={},t()}e.$inject=["identityService","userService","notifyService"],angular.module("app").controller("EditUserAdminCtrl",e)}(),function(){"use strict";function e(e,n,i,t,a,o){function l(e,t){var o=i.defer();return n.post("/login",{username:e,password:t}).then(function(e){e.data.success?(a.currentUser=e.data.user,o.resolve(!0)):"unverified"===e.data.message?o.resolve("unverified"):o.resolve(!1)}),o.promise}function s(e){var t=i.defer();return n.post("/api/users",{userData:e}).then(function(e){e.data?t.resolve(!0):t.resolve(!1)},function(e){"Error: Email already in use"===e.data.reason&&o.error("Sorry, an account already exists with that email address.")}),t.promise}function r(){var t=i.defer();return n.post("/logout",{logout:!0}).then(function(){a.currentUser=void 0,t.resolve(),e.go("home")}),t.promise}function c(e){return!!a.isAuthorized(e)||i.reject("not authorized")}function d(){return!!a.isAuthenticated()||i.reject("not authorized")}var m={authenticateUser:l,createUser:s,logout:r,authorizeCurrentUserForRoute:c,authenticatedUserForRoute:d};return m}e.$inject=["$state","$http","$q","userService","identityService","notifyService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e){function n(){return e.get("/api/users").then(function(e){return e})}function i(){return e.get("/api/users/verified").then(function(e){return _.forEach(e.data,function(e){e.displayName||(e.displayName=e.firstName+" "+e.lastName)}),e})}function t(n,i){return e.get("/api/user/verification",{params:{userId:n,verificationToken:i}})}function a(n){return e.get("/api/user/password/link",{params:{username:n}})}function o(n,i,t){return e.put("/api/user/password/reset",{userId:n,verificationToken:i,password:t})}function l(n){return e.put("/api/user",{
user:n})}var s={getAllUsers:n,getVerifiedUsers:i,verifyUser:t,generatePasswordResetLink:a,resetPassword:o,updateUser:l};return s}e.$inject=["$http"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(e,n,i){function t(){}function a(t,a){n.authenticateUser(t,a).then(function(n){n?"unverified"===n?i.error("You must verify your email before you can login"):e.previous?(e.go(e.previous,e.prevParams),e.previous=null,e.prevParams=null):e.go("competitions.myCompetitions"):i.error("Username / password combinaiton incorrect")})}var o=this;o.login=a,t()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,n,i,t,a,o){function l(){o.isAuthenticated()?e.go("home"):n.userId&&n.verificationToken&&i.verifyUser(n.userId,n.verificationToken).then(function(e){e.data&&(c.verified=!0)})}function s(n){i.generatePasswordResetLink(n).then(function(n){n.data?(t.success("Please check your email for a password reset link"),e.go("home")):t.error("Could not find that email address")})}function r(o){o.password!==o.confirmPassword?t.error("Passwords don't match!"):i.resetPassword(n.userId,n.verificationToken,o.password).then(function(n){n.data&&a.authenticateUser(n.data.username,o.password).then(function(n){e.go("home")})})}var c=this;c.username="",c.verified=!1,c.resetPasswordForm={},c.generatePasswordResetLink=s,c.resetPassword=r,l()}e.$inject=["$state","$stateParams","userService","notifyService","authService","identityService"],angular.module("app").controller("PasswordResetCtrl",e)}(),function(){"use strict";function e(e,n,i){function t(){}function a(t){t.password!==t.confirmPassword?i.error("Passwords don't match!"):(t.displayName||(t.displayName=t.firstName+" "+t.lastName),n.createUser(t).then(function(){e.go("verify")}))}var o=this;o.register=a,t()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(e,n,i){function t(){n.userId&&n.verificationToken&&(a.verifying=!0,a.verified=null,i.verifyUser(n.userId,n.verificationToken).then(function(e){e.data?a.verified=!0:a.verified=!1}))}var a=this;a.verified=void 0,a.verifying=!1,t()}e.$inject=["$state","$stateParams","userService"],angular.module("app").controller("VerificationCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{competition:"=",allowDelete:"=",numberOfChallenges:"@",challengesPerPage:"@"},templateUrl:"challenges/components/active-challenges.html"};return e}function n(e,n,i){function t(){e.$watch("vm.competition",function(){l.competition&&a()})}function a(){n.getActiveChallengesByCompetition(l.competition._id).then(function(e){l.challenges=e.data,e.data.length>0&&(l.tableData=new i({page:1,count:l.challengesPerPage||5},{counts:[],total:l.challenges.length,getData:function(e,n){e.resolve(l.challenges.slice((n.page()-1)*n.count(),n.page()*n.count()))}}),_.forEach(l.challenges,function(e){if("versus"===e.type&&(l.competition.players.length>2?(e.challenger.displayName="Team "+e.challenger.team,e.opponent.displayName="Team "+e.opponent.team):(e.challenger.displayName=_.find(l.competition.players,{position:e.challenger.team}).displayName,e.opponent.displayName=_.find(l.competition.players,{position:e.opponent.team}).displayName)),0!==e.timeLimit){var n=moment().diff(moment(e.created).add(e.timeLimit,"d"))*-1;e.expires=moment.duration(n).asHours()}}))})}function o(e,i){swal({title:"Delete Challenge Result?",text:"It'll be like it never happened",type:"error",showCancelButton:!0,confirmButtonText:"Delete",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){n.deleteChallenge(l.competition._id,e).then(function(){l.challenges.splice(i,1)})})}var l=this;l.challenges=null,l.deleteChallenge=o,t()}n.$inject=["$scope","challengesService","ngTableParams"],angular.module("app").directive("wpmActiveChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{competition:"=",allowDelete:"=",numberOfChallenges:"@",challengesPerPage:"@"},templateUrl:"challenges/components/completed-challenges.html"};return e}function n(e,n,i,t){function a(){e.$watch("vm.competition",function(){s.competition&&o()})}function o(){i.getCompletedChallengesByCompetition(s.competition._id,s.numberOfChallenges).then(function(e){s.challenges=e.data,e.data.length>0&&(s.tableData=new t({page:1,count:s.challengesPerPage||5},{counts:[],total:s.challenges.length,getData:function(e,n){e.resolve(s.challenges.slice((n.page()-1)*n.count(),n.page()*n.count()))}}),_.forEach(s.challenges,function(e){e.loser="challenger"===e.winner?"opponent":"challenger","versus"===e.type&&(s.competition.players.length>2?(e.challenger.displayName="Team "+e.challenger.team,e.opponent.displayName="Team "+e.opponent.team):(e.challenger.displayName=_.find(s.competition.players,{position:e.challenger.team}).displayName,e.opponent.displayName=_.find(s.competition.players,{position:e.opponent.team}).displayName)),e.whenCompleted=moment(e.completed).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd",sameElse:"MMM DD, YYYY"})}))})}function l(e,n){swal({title:"Delete Challenge Result?",text:"You'll still need to reorder the players on your own",type:"error",showCancelButton:!0,confirmButtonText:"Delete",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){i.deleteChallenge(s.competition._id,e).then(function(){s.challenges.splice(n,1)})})}var s=this;s.challenges=null,s.deleteChallenge=l,a()}n.$inject=["$scope","$state","challengesService","ngTableParams"],angular.module("app").directive("wpmCompletedChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{player:"="},templateUrl:"challenges/components/player-overall-results.html"};return e}function n(e){function n(){e.$watch("vm.player.results",function(){o.player&&(i(o.player),t(o.player),a(o.player))})}function i(e){for(var n=[],i=0;i<o.maxLevels;i++)n.push(i*(i+1)/2+1);e.level=n.length;for(var t=0;t<n.length;t++)if(e.position<n[t+1]){e.level=n.indexOf(n[t])+1;break}}function t(e){var n,i=0,t=!0;_.forEach(e.results,function(a){t&&("challenger"===a.winner&&a.challenger._id===e._id||"opponent"===a.winner&&a.opponent._id===e._id?"losing"!==n?(i+=1,n="winning"):t=!1:("opponent"===a.winner&&a.challenger._id===e._id||"challenger"===a.winner&&a.opponent._id===e._id)&&("winning"!==n?(i+=1,n="losing"):t=!1)),o.streak={type:n,value:i}})}function a(e){o.wins.asOpponent=_.size(_.filter(e.results,function(n){return n.opponent._id===e._id&&"opponent"===n.winner})),o.wins.asChallenger=_.size(_.filter(e.results,function(n){return n.challenger._id===e._id&&"challenger"===n.winner})),o.wins.total=o.wins.asChallenger+o.wins.asOpponent,o.wins.byForfeit=_.size(_.filter(e.results,function(n){return n.forfeit&&(n.challenger._id===e._id&&"challenger"===n.winner||n.opponent._id===e._id&&"opponent"===n.winner)})),o.loses.asOpponent=_.size(_.filter(e.results,function(n){return n.opponent._id===e._id&&"challenger"===n.winner})),o.loses.asChallenger=_.size(_.filter(e.results,function(n){return n.challenger._id===e._id&&"opponent"===n.winner})),o.loses.total=o.loses.asChallenger+o.loses.asOpponent,o.loses.byForfeit=_.size(_.filter(e.results,function(n){return n.forfeit&&(n.challenger._id===e._id&&"opponent"===n.winner||n.opponent._id===e._id&&"challenger"===n.winner)}))}var o=this;o.maxLevels=7,o.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},o.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},o.streak={type:null,value:0},n()}n.$inject=["$scope"],angular.module("app").directive("wpmPlayerOverallResults",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{competition:"=",team:"=",challenges:"="},templateUrl:"challenges/components/team-overall-results.html"};return e}function n(e){function n(){e.$watch("vm.challenges",function(){a.challenges&&a.challenges.length>0&&a.competition&&(i(a.team,a.challenges),t(a.team,a.challenges),2===a.competition.players.length&&(a.singlePlayerTeams=!0,a.displayName=_.find(a.competition.players,{position:a.team}).displayName,a.playerName=_.find(a.competition.players,{position:a.team}).firstName+" "+_.find(a.competition.players,{position:a.team}).lastName))})}function i(e,n){var i,t=0,o=!0;_.forEach(n,function(n){o&&("challenger"===n.winner&&n.challenger.team===e||"opponent"===n.winner&&n.opponent.team===e?"losing"!==i?(t+=1,i="winning"):o=!1:("opponent"===n.winner&&n.challenger.team===e||"challenger"===n.winner&&n.opponent.team===e)&&("winning"!==i?(t+=1,i="losing"):o=!1)),a.streak={type:i,value:t}})}function t(e,n){a.wins.asOpponent=_.size(_.filter(n,function(n){return n.opponent.team===e&&"opponent"===n.winner})),a.wins.asChallenger=_.size(_.filter(n,function(n){return n.challenger.team===e&&"challenger"===n.winner})),a.wins.total=a.wins.asChallenger+a.wins.asOpponent,a.wins.byForfeit=_.size(_.filter(n,function(n){return n.forfeit&&(n.challenger.team===e&&"challenger"===n.winner||n.opponent.team===e&&"opponent"===n.winner)})),a.loses.asOpponent=_.size(_.filter(n,function(n){return n.opponent.team===e&&"challenger"===n.winner})),a.loses.asChallenger=_.size(_.filter(n,function(n){return n.challenger.team===e&&"opponent"===n.winner})),a.loses.total=a.loses.asChallenger+a.loses.asOpponent,a.loses.byForfeit=_.size(_.filter(n,function(n){return n.forfeit&&(n.challenger.team===e&&"opponent"===n.winner||n.opponent.team===e&&"challenger"===n.winner)}))}var a=this;a.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},a.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},a.streak={type:null,value:0},a.singlePlayerTeams=!1,n()}n.$inject=["$scope"],angular.module("app").directive("wpmTeamOverallResults",e)}(),function(){"use strict";function e(e){function n(n){return e.post("/api/challenges/pyramid/create",{challenge:n})}function i(n){return e.put("/api/challenges/pyramid/cancel",{challenge:n})}function t(n){return e.post("/api/challenges/versus/create",{challenge:n})}function a(n){return e.post("/api/challenges/pyramid/complete",{challenge:n})}function o(n){return e.post("/api/challenges/versus/complete",{challenge:n})}function l(n){return e.get("/api/challenges/competition",{params:{competitionId:n}})}function s(n){return e.get("/api/challenges/active/competition",{params:{competitionId:n}})}function r(n,i){return e.get("/api/challenges/active/competition/player",{params:{competitionId:n,playerId:i}})}function c(n,i){return e.get("/api/challenges/completed/competition",{params:{competitionId:n,limit:i}})}function d(n,i){return e.delete("/api/challenges/active/competition/player/delete",{params:{competitionId:n,playerId:i}})}function m(n,i){return e.delete("/api/challenges/delete",{params:{competitionId:n,challengeId:i}})}function p(n,i){return e.get("/api/challenges/results/competition/player",{params:{competitionId:n,playerId:i}})}var v={createPyramidChallenge:n,createVersusChallenge:t,cancelPyramidChallenge:i,completePyramidChallenge:a,completeVersusChallenge:o,getChallengesByCompetition:l,getActiveChallengesByCompetition:s,getActiveChallengeByCompetitionByPlayer:r,getCompletedChallengesByCompetition:c,deleteActiveChallengeByCompetitionByPlayer:d,deleteChallenge:m,getPlayerResultsByCompetition:p};return v}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",templateUrl:"common/components/footer.html"};return e}function n(e,n){function i(){n.logout()}var t=this;t.indentity=e,t.logout=i}n.$inject=["identityService","authService"],angular.module("app").directive("wpmFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"headerCtrl",restrict:"A",templateUrl:"common/components/header.html"};return e}function n(e,n,i,t,a){function o(){l(),e.$watch("headerCtrl.indentity.currentUser",function(){i.isAuthenticated()&&l()})}function l(){m.alerts=[],i.isAuthenticated()&&a.getActiveAlertsByPlayer(i.currentUser._id).then(function(e){m.alerts=e.data})}function s(e,n){a.clearAlert(e).then(function(){m.alerts.splice(n,1)})}function r(){a.clearAllAlertsByPlayer(i.currentUser._id).then(function(){m.alerts=[]})}function c(){n.setSidebarStatus(!m.sidebarStatus.left)}function d(){t.logout()}var m=this;m.indentity=i,m.logout=d,m.sidebarStatus=n.getSidebarStatus(),m.toggleSidebar=c,m.clearAlert=s,m.clearAllAlerts=r,m.alerts=[],o(),e.$on("ws:update_alerts",function(e,n){i.isAuthenticated()&&_.some(n,["userId",i.currentUser._id])&&l()})}n.$inject=["$scope","sidebarService","identityService","authService","alertsService"],angular.module("app").directive("wpmHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"common/components/sidebar.html"};return e}function n(e,n,i){function t(){n.logout()}var a=this;a.indentity=e,a.logout=t,a.sidebarStatus=i.getSidebarStatus()}n.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("wpmSidebar",e)}(),function(){"use strict";function e(){return function(e,n){if(!angular.isObject(e))return e;var i=[];for(var t in e)i.push(e[t]);return i.sort(function(e,i){return e=parseInt(e[n]),i=parseInt(i[n]),e-i}),i}}angular.module("app").filter("orderObjectBy",e)}(),function(){"use strict";function e(e){function n(n){return e.get("/api/alerts/",{params:{userId:n}})}function i(n){return e.put("/api/alert/clear",{alertId:n})}function t(n){return e.put("/api/alerts/clear",{userId:n})}var a={getActiveAlertsByPlayer:n,clearAlert:i,clearAllAlertsByPlayer:t};return a}e.$inject=["$http"],angular.module("app").factory("alertsService",e)}(),function(){"use strict";function e(e){function n(){return!!this.currentUser}function i(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var t;null!==e.bootstrappedUserObject&&(t=e.bootstrappedUserObject);var a={currentUser:t,isAuthenticated:n,isAuthorized:i};return a}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,n,i){$.notify({message:e,url:n,target:i},{type:"info"})}function n(e,n,i){$.notify({message:e,url:n,target:i},{type:"success"})}function i(e,n,i){$.notify({message:e,url:n,target:i},{type:"warning"})}function t(e,n,i){$.notify({message:e,url:n,target:i},{type:"danger"})}function a(e,n,i){$.notify({message:e,url:n,target:i},{type:"inverse"})}var o={info:e,success:n,warning:i,error:t,inverse:a};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85},delay:5e3}),o}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(e,n,i,t){$(e).mCustomScrollbar({theme:n,scrollInertia:100,axis:i,mouseWheel:{enable:!0,axis:t,preventDefault:!0}})}var n={malihuScroll:e};return n}angular.module("app").factory("scrollbarService",e)}(),function(){"use strict";function e(){function e(){return i}function n(e){i.left=e}var i={left:!1,right:!1},t={getSidebarStatus:e,setSidebarStatus:n};return t}angular.module("app").factory("sidebarService",e)}(),function(){"use strict";function e(e,n,i){function t(){return"https:"===n.location.protocol?"wss://"+n.location.host:"ws://"+n.location.host}function a(){l=new WebSocket(t()),l.onmessage=function(n){r=0;var i=JSON.parse(n.data);e.$broadcast("ws:"+i.topic,i.data)},l.onclose=function(){r<s.length?(console.log("WebSocket closed. Reconnecting..."),i(a,1e3*s[r]),r+=1):console.log("Giving up on WebSocket")}}function o(e,n){var i=JSON.stringify({topic:e,data:n});l.send(i)}var l,s=[3,10,100,1e3],r=0,c={connect:a,send:o};return c}e.$inject=["$rootScope","$window","$timeout"],angular.module("app").factory("websocketService",e).run(["websocketService",function(e){e.connect()}])}(),function(){"use strict";function e(e,n){function i(){e.getPublicCompetitions().then(function(e){t.publicCompetitions=e.data}),n.isAuthorized("super-admin")&&e.getPrivateCompetitions().then(function(e){t.privateCompetitions=e.data})}var t=this;t.publicCompetitions=[],t.privateCompetitions=[],i()}e.$inject=["competitionsService","identityService"],angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"competitions/components/competition-compact.html"};return e}function n(){function e(){}e()}angular.module("app").directive("wpmCompetitionCompact",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"competitions/components/pending-players.html"};return e}function n(e){function n(){}function i(n){n.position=a.competition.players.length+1,e.approvePendingPlayer(a.competition._id,n)}function t(n){e.denyPendingPlayer(a.competition._id,n)}var a=this;a.pendingPlayers=[],a.approvePendingPlayer=i,a.denyPendingPlayer=t,n()}n.$inject=["competitionsService"],angular.module("app").directive("wpmPendingPlayers",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"competitions/components/pyramid.html",replace:!0,scope:{competition:"="},controller:n,controllerAs:"vm",bindToController:!0};return e}function n(e,n,i,t,a,o,l){function s(){for(var n=S;n>0;--n)I.maxPlayers+=n;e.$watch("vm.competition",function(){I.competition&&(I.competitionId=I.competition._id,r(),c(),m(),p(),v())})}function r(){I.competition.players=t("orderBy")(I.competition.players,"position")}function c(){l.getActiveChallengesByCompetition(I.competitionId).then(function(e){_.forEach(e.data,function(e){var n=_.find(I.competition.players,{_id:e.challenger._id});n.class="unavailable",n.available=!1,n.challenge={position:"challenger",opponent:_.find(I.competition.players,{_id:e.opponent._id}).displayName};var i=_.find(I.competition.players,{_id:e.opponent._id});if(i.class="unavailable",i.available=!1,i.challenge={position:"opponent"},0!==e.timeLimit){var t=moment().diff(moment(e.created).add(e.timeLimit,"d"))*-1,a=moment.duration(t).asHours();t>0?i.challenge.expires=a:t<=0&&b(null,!0,i)}}),I.currentUserIsAdmin=!1,I.currentUserIsPending=!1,o.isAuthenticated()&&(I.currentUserIsAdmin=_.some(I.competition.admins,["_id",o.currentUser._id]),I.currentUserIsPending=_.some(I.competition.pendingPlayers,["_id",o.currentUser._id])),I.currentUserIsOnCompetition=!1,I.hasActiveChallenge=!1,_.forEach(I.competition.players,function(e){o.isAuthenticated()&&e._id===o.currentUser._id&&(I.currentUserIsOnCompetition=!0,e.class=e.class?e.class+" current-user":"current-user",I.currentUserPlayer=e,l.getActiveChallengeByCompetitionByPlayer(I.competitionId,e._id).then(function(n){if(n.data){I.hasActiveChallenge=!0,I.activeChallengeOpponent=n.data.challenger._id===e._id?n.data.opponent:n.data.challenger;var i=_.find(I.competition.players,{_id:I.activeChallengeOpponent._id});i.class=i.class?i.class+" current-opponent":"current-opponent"}else u()}))})})}function d(){I.breakPoints=[];for(var e=0;e<S;e++)I.breakPoints.push(e*(e+1)/2+1)}function m(){var e=0;I.levels=[],d();for(var n=0;n<I.competition.players.length;n++)I.breakPoints.indexOf(n+1)>-1&&(e+=1,I.levels.push(e)),I.competition.players[n].level=e}function p(){I.numberOfBlocks=0;for(var e=_.last(I.levels);e>0;e--)I.numberOfBlocks+=e}function v(){I.numberOfRealPlayers=I.competition.players.length;for(var e=I.competition.players.length;e<I.numberOfBlocks;e++)I.competition.players.push({firstName:"Empty",lastName:"Spot",displayName:"Empty Spot",position:99,class:"empty"});m()}function u(){if(I.availableChallenges=!1,I.currentUserIsOnCompetition&&!I.hasActiveChallenge){var e=I.currentUserPlayer.level>1?I.currentUserPlayer.level-1:null;_.forEach(I.competition.players,function(n){var i=null;n.level===e&&99!==n.position&&"unavailable"!==n.class&&n.available!==!1&&(i=_.find(I.currentUserPlayer.waitingPeriods,{player:n._id}),i&&moment().isBefore(i.expires)?(n.class="waiting",n.waitUntil=moment(i.expires).format("MMM Do  LT")):(I.availableChallenges=!0,n.available=!0,n.class="available"))})}}function g(e){swal({title:"Challenge "+e.displayName+"?",text:"You can do it!",showCancelButton:!0,confirmButtonClass:"btn-success",confirmButtonText:"Yes, challenge!",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){f(e)})}function f(e){if(e.available){I.hasActiveChallenge=!0;var n={type:I.competition.type,competitionName:I.competition.name,competitionId:I.competitionId,complete:!1,forfeit:!1,timeLimit:I.competition.forfeitDays,challenger:{_id:I.currentUserPlayer._id,email:I.currentUserPlayer.email,firstName:I.currentUserPlayer.firstName,lastName:I.currentUserPlayer.lastName,displayName:I.currentUserPlayer.displayName,position:I.currentUserPlayer.position},opponent:{_id:e._id,email:e.email,firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,position:e.position}};l.createPyramidChallenge(n).then(function(){I.competitionMenuToggle=!1})}else a.error("Sorry, that is not a valid challenge.")}function h(){swal({title:"Cancel challenge?",text:"Are you sure you want to cancel this challenge?",showCancelButton:!0,confirmButtonClass:"btn-warning",confirmButtonText:"Yes, cancel it",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){y()})}function y(){l.getActiveChallengeByCompetitionByPlayer(I.competitionId,I.currentUserPlayer._id).then(function(e){e.data&&e.data.challenger._id===I.currentUserPlayer._id&&l.cancelPyramidChallenge(e.data).then(function(){I.hasActiveChallenge=!1})})}function b(e,n,t){var a=t||I.currentUserPlayer;l.getActiveChallengeByCompetitionByPlayer(I.competitionId,a._id).then(function(a){I.hasActiveChallenge=!1;var o=!1;n?(a.data.forfeit=!0,"opponent"===t.challenge.position?(a.data.winner="challenger",o=!0):a.data.winner="opponent"):e?a.data.challenger._id===I.currentUserPlayer._id?(a.data.winner="challenger",o=!0):a.data.winner="opponent":a.data.challenger._id===I.currentUserPlayer._id?a.data.winner="opponent":(a.data.winner="challenger",o=!0);var s,r=null;"opponent"===a.data.winner?(r=a.data.opponent,s=a.data.challenger):(r=a.data.challenger,s=a.data.opponent),i.createWaitingPeriod(I.competitionId,s._id,r._id,I.competition.waitingPeriodDays),o?i.swapPositions(I.competitionId,a.data.opponent,a.data.challenger).then(function(){l.completePyramidChallenge(a.data).then(function(){k&&U()})}):l.completePyramidChallenge(a.data).then(function(){k&&U()}),I.competitionMenuToggle=!1})}function C(e){swal({title:"Forfeit challenge?",text:"Are you sure you want to forfeit this challenge?",showCancelButton:!0,confirmButtonClass:"btn-danger",confirmButtonText:"Yes, forfeit",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){w(e)})}function w(e){b(null,!0,e)}function P(){if(o.isAuthenticated())if(I.numberOfRealPlayers<I.maxPlayers){var e={_id:o.currentUser._id,firstName:o.currentUser.firstName,lastName:o.currentUser.lastName,displayName:o.currentUser.displayName,email:o.currentUser.username,position:I.numberOfRealPlayers+1};I.competition.restrictJoins?swal({title:"Send Join Request?",text:"This is a closed competition so an admin must approve your request",type:"warning",showCancelButton:!0,confirmButtonText:"Send Request",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){i.addPlayerToCompetitionRequest(I.competition,e).then(function(){I.currentUserIsPending=!0}),swal("Request Sent","You will receive an email once an admin processes the request.","success")}):swal({title:"Join Competition?",text:"You'll be added to the bottom",type:"warning",showCancelButton:!0,confirmButtonText:"Join",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){i.addPlayerToCompetition(I.competitionId,e),swal("Welcome Aboard!","Now start fighting your way to the top","success")})}else a.warning("Sorry, this competition is full");else a.warning("Please login to join a competition"),n.previous="competitions.view",n.prevParams={competitionId:I.competitionId},n.go("login")}function N(){swal({title:"Leave Competition?",text:"You will lose your spot and forfeit any active challenges.",type:"error",showCancelButton:!0,confirmButtonText:"Yes, leave",confirmButtonClass:"btn-danger",cancelButtonText:"No, stay",closeOnConfirm:!1,closeOnCancel:!0},function(){U(),swal("OK, you'r out!","You've been removed from the competition.","success")})}function U(){o.isAuthenticated()&&I.currentUserIsOnCompetition&&(k=!0,I.hasActiveChallenge?b(null,!0,I.currentUserPlayer):(I.currentUserIsOnCompetition=!1,I.hasActiveChallenge=!1,i.getCompetition(I.competitionId).then(function(e){var n=e.data,t=I.currentUserPlayer.position;_.forEach(n.players,function(e){e.position>=t&&(e.position-=1)});for(var a=_.remove(n.players,function(e){return e._id===I.currentUserPlayer._id}),o=[],l=0;l<I.numberOfRealPlayers-1;++l){var s={_id:n.players[l]._id,firstName:n.players[l].firstName,lastName:n.players[l].lastName,displayName:n.players[l].displayName,position:n.players[l].position};o.push(s)}i.removedPlayerFromCompetition(I.competitionId,a[0],o).then(function(){k=!1})})))}function A(e){99!==e.position||I.currentUserIsOnCompetition?e.showChallengeModal=!e.showChallengeModal:P()}function x(){i.getCompetition(I.competitionId).then(function(e){I.competition=e.data})}var S=7,I=this;I.competitionId=null,I.breakPoints=[],I.levels=[],I.numberOfBlocks=0,I.currentUserIsOnCompetition=!1,I.currentUserIsPending=!1,I.currentUserIsAdmin=!1,I.hasActiveChallenge=!1,I.activeChallengeOpponent=null,I.availableChallenges=!1,I.confirmCreateChallenge=g,I.createChallenge=f,I.confirmCancelChallenge=h,I.cancelChallenge=y,I.completeChallenge=b,I.confirmForfeitChallenge=C,I.forfeitChallenge=w,I.currentUserPlayer={},I.competitionMenuToggle=!1,I.addCurrentUserToCompetition=P,I.confirmRemoveCurrentUserFromCompetition=N,I.playerClick=A,I.numberOfRealPlayers=0,I.maxPlayers=0,s();var k=!1;e.$on("ws:competition_updated",function(e,n){I.competitionId===n.competitionId&&(a.info(n.description),x())})}n.$inject=["$scope","$state","competitionsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("wpmPyramid",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"competitions/components/update-admins.html"};return e}function n(e,n,i,t,a){function o(){e.$watch("vm.competition",function(){v.competition&&(v.addedAdmins=_.cloneDeep(v.competition.admins),v.disableSubmit=!0,v.userIsPrimaryAdmin=_.find(v.competition.admins,{primary:!0})._id===a.currentUser._id,l())})}function l(){v.availableAdmins=[],m=[],t.getVerifiedUsers().then(function(e){_.forEach(v.competition.admins,function(n){_.remove(e.data,function(e){return n._id===e._id})}),_.forEach(e.data,function(e){v.availableAdmins.push({firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,email:e.username,_id:e._id})}),p=_.cloneDeep(v.availableAdmins)})}function s(){v.competition.admins=v.addedAdmins,n.updateCompetition(v.competition).then(function(){v.disableSubmit=!0})}function r(){m=[],v.addedAdmins=_.cloneDeep(v.competition.admins),v.availableAdmins=_.cloneDeep(p)}function c(e){m.push(e),v.availableAdmins.push(_.remove(v.addedAdmins,{_id:e._id})[0]),v.disableSubmit=!1}function d(e){v.addedAdmins.push(_.remove(v.availableAdmins,{_id:e._id})[0]),v.disableSubmit=!1}var m=[],p=[],v=this;v.availableAdmins=[],v.addedAdmins=[],v.userIsPrimaryAdmin=!1,v.updateCompetition=s,v.cancelUpdate=r,v.removeAdmin=c,v.addAdmin=d,v.disableSubmit=!0,o()}n.$inject=["$scope","competitionsService","challengesService","userService","identityService"],angular.module("app").directive("wpmUpdateAdmins",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"competitions/components/update-players.html"};return e}function n(e,n,i,t,a){function o(){for(var n=f;n>0;--n)h+=n;e.$watch("vm.competition",function(){y.competition&&(y.addedPlayers=_.cloneDeep(y.competition.players),y.disableSubmit=!0,l())})}function l(){y.availablePlayers=[],u=[],t.getVerifiedUsers().then(function(e){_.forEach(y.competition.players,function(n){_.remove(e.data,function(e){return n._id===e._id})}),_.forEach(e.data,function(e){y.availablePlayers.push({firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,email:e.username,_id:e._id})}),g=_.cloneDeep(y.availablePlayers)})}function s(){"versus"===y.competition.type&&y.addedPlayers.length%2>0?a.error("A Versus competition must have an even number of players"):y.addedPlayers.length>h?a.error("A competition can have a maximum of "+h+" players"):(_.forEach(u,function(e){i.deleteActiveChallengeByCompetitionByPlayer(y.competition._id,e._id)}),y.competition.players=y.addedPlayers,n.updateCompetition(y.competition).then(function(){y.disableSubmit=!0}))}function r(){u=[],y.addedPlayers=_.cloneDeep(y.competition.players),y.availablePlayers=_.cloneDeep(g)}function c(){"versus"===y.competition.type?m():"pyramid"===y.competition.type&&d(),y.disableSubmit=!1}function d(){var e=1;_.forEach(y.addedPlayers,function(n){n.position=e,++e})}function m(){_.forEach(y.addedPlayers,function(e){e.position=2});for(var e=0;e<y.addedPlayers.length/2;e++)y.addedPlayers[e].position=1}function p(e){u.push(e),y.availablePlayers.push(_.remove(y.addedPlayers,{_id:e._id})[0]),c()}function v(e){y.addedPlayers.push(_.remove(y.availablePlayers,{_id:e._id})[0]),c(),y.disableSubmit=!1}var u=[],g=[],f=7,h=null,y=this;y.availablePlayers=[],y.addedPlayers=[],y.updateCompetition=s,y.cancelUpdate=r,y.reorderPlayers=c,y.removePlayer=p,y.addPlayer=v,y.disableSubmit=!0,o()}n.$inject=["$scope","competitionsService","challengesService","userService","notifyService"],angular.module("app").directive("wpmUpdatePlayers",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"competitions/components/versus.html",replace:!0,scope:{competition:"="},controller:n,controllerAs:"vm",bindToController:!0};return e}function n(e,n,i,t,a){function o(){e.$watch("vm.competition",function(){p.competition&&(p.competitionId=p.competition._id,p.showControls=!1,p.showChallengeModal=!1,l(),s())})}function l(){p.competition.teams=[{players:_.filter(p.competition.players,["position",1])},{players:_.filter(p.competition.players,["position",2])}],2===p.competition.players.length&&(p.singlePlayerTeams=!0)}function s(){p.currentUserIsAdmin=!1,p.currentUserIsPending=!1,i.isAuthenticated()&&(p.currentUserIsAdmin=_.some(p.competition.admins,["_id",i.currentUser._id]),p.currentUserIsPending=_.some(p.competition.pendingPlayers,["_id",i.currentUser._id])),p.currentUserIsOnCompetition=!1,p.hasActiveChallenge=!1,_.forEach(p.competition.players,function(e){i.isAuthenticated()&&e._id===i.currentUser._id&&(p.currentUserIsOnCompetition=!0,e.class="current-user",p.currentUserPlayer=e,p.competition.teams[e.position-1].class="current-user-team",p.competition.class="current-user-on-competition")}),t.getActiveChallengesByCompetition(p.competitionId).then(function(e){if(e.data.length>0&&(p.activeChallenge=e.data[0],p.hasActiveChallenge=!0,0!==p.activeChallenge.timeLimit)){var n=moment().diff(moment(p.activeChallenge.created).add(p.activeChallenge.timeLimit,"d"))*-1,i=moment.duration(n).asHours();n>0?p.challengeExpireTime=i:n<=0&&d(null,!0)}})}function r(){p.hasActiveChallenge&&p.currentUserIsOnCompetition&&(p.showControls=!p.showControls)}function c(e){if(p.showChallengeModal=!1,p.hasActiveChallenge)a.error("Sorry, you are already in an active challenge.");else{p.hasActiveChallenge=!0;var n={type:p.competition.type,competitionName:p.competition.name,competitionId:p.competitionId,
complete:!1,forfeit:!1,timeLimit:p.competition.forfeitDays,challenger:{team:p.currentUserPlayer.position,_id:p.currentUserPlayer._id},opponent:{team:e}};t.createVersusChallenge(n).then(function(){p.competitionMenuToggle=!1})}}function d(e,n){p.hasActiveChallenge=!1;var i=p.activeChallenge;n?(i.forfeit=!0,i.winner="challenger"):p.activeChallenge.challenger.team===e?i.winner="challenger":i.winner="opponent",t.completeVersusChallenge(i),p.competitionMenuToggle=!1}function m(){n.getCompetition(p.competitionId).then(function(e){p.competition=e.data})}var p=this;p.competitionId=null,p.currentUserIsAdmin=!1,p.currentUserIsPending=!1,p.currentUserIsOnCompetition=!1,p.activeChallenge=null,p.hasActiveChallenge=!1,p.currentUserPlayer=null,p.createChallenge=c,p.completeChallenge=d,p.challengeExpireTime=null,p.showControls=!1,p.showChallengeModal=!1,p.toggleControls=r,p.singlePlayerTeams=!1,o(),e.$on("ws:competition_updated",function(e,n){p.competitionId===n.competitionId&&(a.info(n.description),m())})}n.$inject=["$scope","competitionsService","identityService","challengesService","notifyService"],angular.module("app").directive("wpmVersus",e)}(),function(){"use strict";function e(e){function n(n){return e.get("/api/competition",{params:{competitionId:n}})}function i(n){return e.get("/api/competitions/user",{params:{userId:n}})}function t(){return e.get("/api/competitions/public")}function a(){return e.get("/api/competitions/private")}function o(n){return e.post("/api/competitions/create",{competition:n})}function l(n){return e.post("/api/competitions/update",{competition:n})}function s(n){return e.delete("/api/competitions/delete",{params:{competitionId:n}})}function r(n,i,t,a){return e.put("/api/competitions/createWaitingPeriod",{competitionId:n,loserId:i,winnerId:t,waitingPeriod:a})}function c(n,i,t){return e.post("/api/competitions/swapPositions",{competitionId:n,challenger:i,opponent:t})}function d(n,i){return e.post("/api/competitions/addPlayer",{competitionId:n,player:i})}function m(n,i){return e.post("/api/competitions/addPlayerRequest",{competition:n,player:i})}function p(n,i,t){return e.post("/api/competitions/removePlayer",{competitionId:n,removedPlayer:i,players:t})}function v(n,i){return e.post("/api/competitions/approvePlayer",{competitionId:n,player:i})}function u(n,i){return e.post("/api/competitions/denyPlayer",{competitionId:n,player:i})}var g={getCompetition:n,getCompetitionsForUser:i,getPublicCompetitions:t,getPrivateCompetitions:a,createCompetition:o,updateCompetition:l,deleteCompetition:s,createWaitingPeriod:r,swapPositions:c,addPlayerToCompetition:d,addPlayerToCompetitionRequest:m,removedPlayerFromCompetition:p,approvePendingPlayer:v,denyPendingPlayer:u};return g}e.$inject=["$http"],angular.module("app").factory("competitionsService",e)}(),function(){"use strict";function e(e,n,i,t,a,o,l,s){function r(){i.competitionId?(v.competitionId=i.competitionId,c()):n.go("competitions.myCompetitions")}function c(){a.getCompetition(v.competitionId).then(function(e){e.data&&_.some(e.data.admins,["_id",o.currentUser._id])?(v.isAdmin=!0,e.data.players=t("orderBy")(e.data.players,"position"),v.competition=e.data):n.go("competitions.myCompetitions")}),s.getCompletedChallengesByCompetition(v.competitionId).then(function(e){v.challenges=e.data})}function d(){a.getCompetition(v.competitionId).then(function(e){var n=e.data;n.restrictJoins=v.competition.restrictJoins,a.updateCompetition(n)})}function m(){a.getCompetition(v.competitionId).then(function(e){var n=e.data;n.private=v.competition.private,a.updateCompetition(n)})}function p(){swal({title:"Delete Competition?",text:"This can not be undone",type:"error",showCancelButton:!0,confirmButtonText:"Delete",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){a.deleteCompetition(v.competitionId).then(function(){n.go("competitions.myCompetitions")})})}var v=this;v.competitionId=null,v.updateCompetitionRestrictJoins=d,v.updateCompetitionPrivate=m,v.deleteCompetition=p,r(),e.$on("ws:competition_updated",function(e,n){v.competitionId===n.competitionId&&(l.info(n.description),c())}),e.$on("ws:competition_deleted",function(e,i){v.competitionId===i.competitionId&&(l.info(i.description),n.go("competitions.myCompetitions"))})}e.$inject=["$scope","$state","$stateParams","$filter","competitionsService","identityService","notifyService","challengesService"],angular.module("app").controller("CompetitionAdminCtrl",e)}(),function(){"use strict";function e(e,n,i,t,a,o){function l(){n.competitionId&&(r.competitionId=n.competitionId,s())}function s(){t.getCompetition(r.competitionId).then(function(e){e.data?(r.competition=e.data,"pyramid"===r.competition.type?_.forEach(r.competition.players,function(e){o.getPlayerResultsByCompetition(r.competitionId,e._id).then(function(n){e.results=n.data})}):"versus"===r.competition.type&&(r.teams=[{number:1},{number:2}])):i.go("competitions.myCompetitions")}),o.getCompletedChallengesByCompetition(r.competitionId).then(function(e){r.challenges=e.data})}var r=this;r.competitionId=null,r.competition={},r.playersResults=[],r.challenges=[],l(),e.$on("ws:competition_updated",function(e,n){r.competitionId===n.competitionId&&(a.info(n.description),s())}),e.$on("ws:competition_deleted",function(e,n){r.competitionId===n.competitionId&&(a.info(n.description),i.go("competitions.myCompetitions"))})}e.$inject=["$scope","$stateParams","$state","competitionsService","notifyService","challengesService"],angular.module("app").controller("CompetitionStatsCtrl",e)}(),function(){"use strict";function e(e,n,i,t,a,o){function l(){i.competitionId&&(r.competitionId=i.competitionId,s())}function s(){t.getCompetition(r.competitionId).then(function(e){e.data?r.competition=e.data:n.go("competitions.myCompetitions")})}var r=this;r.competitionId=null,r.competition=null,l(),e.$on("ws:competition_deleted",function(e,i){r.competitionId===i.competitionId&&(o.info(i.description),n.go("competitions.myCompetitions"))})}e.$inject=["$scope","$state","$stateParams","competitionsService","challengesService","notifyService"],angular.module("app").controller("CompetitionCtrl",e)}(),function(){"use strict";function e(e){function n(){e.getPublicCompetitions().then(function(e){i.competitions=e.data})}var i=this;i.competitions=[],n()}e.$inject=["competitionsService"],angular.module("app").controller("CompetitionsCtrl",e)}(),function(){"use strict";function e(e,n,i,t,a){function o(){n.getVerifiedUsers().then(function(e){g.availablePlayers=e.data});for(var e=v;e>0;--e)u+=e;for(e=0;e<v;e++)p.push(e*(e+1)/2+1)}function l(e){g.addedPlayers.push(_.remove(g.availablePlayers,{_id:e._id})[0]),r()}function s(e){g.availablePlayers.push(_.remove(g.addedPlayers,{_id:e._id})[0]),r()}function r(){"versus"===g.newCompetition.type?d():"pyramid"===g.newCompetition.type&&c()}function c(){var e=1;_.forEach(g.addedPlayers,function(n){n.position=e,++e})}function d(){_.forEach(g.addedPlayers,function(e){e.position=2});for(var e=0;e<g.addedPlayers.length/2;e++)g.addedPlayers[e].position=1}function m(n){if("versus"===n.type&&g.addedPlayers.length%2>0)a.error("A Versus competition must have an even number of players");else if(g.addedPlayers.length>u)a.error("A competition can have a maximum of "+u+" players");else{angular.forEach(g.addedPlayers,function(e){var i={_id:e._id,email:e.username,firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,position:e.position};n.players.push(i)}),n.admins=[{_id:t.currentUser._id,email:t.currentUser.username,firstName:t.currentUser.firstName,lastName:t.currentUser.lastName,displayName:t.currentUser.displayName,primary:!0}];for(var o=0;o<p.length;o++)if(n.players.length<p[o]){n.levels=o;break}i.createCompetition(n).then(function(n){e.go("competitions.view",{competitionId:n.data._id})})}}var p=[],v=7,u=null,g=this;g.newCompetition={players:[],restrictJoins:!1,private:!1},g.availablePlayers=[],g.addedPlayers=[],g.createCompetition=m,g.addPlayer=l,g.removePlayer=s,g.reorderPlayers=r,g.newCompetition.forfeitDays=1,g.newCompetition.waitingPeriodDays=1,g.competitionTypes=["pyramid","versus"],o()}e.$inject=["$state","userService","competitionsService","identityService","notifyService"],angular.module("app").controller("CreateCompetitionCtrl",e)}(),function(){"use strict";function e(e,n,i,t,a){function o(){l()}function l(){s=[],r.activeChallenge=null,t.isAuthenticated()&&n.getCompetitionsForUser(t.currentUser._id).then(function(e){r.competitions=e.data,_.forEach(r.competitions,function(e){s.push(e._id),"pyramid"===e.type?i.getActiveChallengeByCompetitionByPlayer(e._id,t.currentUser._id).then(function(n){n.data&&(e.activeChallenge=n.data,0!==e.activeChallenge.timeLimit&&(e.activeChallenge.expires=moment().diff(moment(e.activeChallenge.created).add(e.activeChallenge.timeLimit,"d"),"s")*-1))}):"versus"===e.type&&i.getActiveChallengesByCompetition(e._id).then(function(n){n.data.length>0&&(e.activeChallenge=n.data[0],0!==e.activeChallenge.timeLimit&&(e.activeChallenge.expires=moment().diff(moment(e.activeChallenge.created).add(e.activeChallenge.timeLimit,"d"),"s")*-1))})})})}var s=[],r=this;r.activeChallenge=null,o(),e.$on("ws:competition_updated",function(e,n){s.indexOf(n.competitionId)>=0&&(a.info(n.description),l())})}e.$inject=["$scope","competitionsService","challengesService","identityService","notifyService"],angular.module("app").controller("MyCompetitionsCtrl",e)}(),function(){"use strict";function e(e,n,i){function t(){e.currentUser.displayName||(l.user.displayName=e.currentUser.firstName+" "+e.currentUser.lastName),o=_.cloneDeep(l.user)}function a(t){var a=[];n.getAllUsers().then(function(s){if(_.forEach(s.data,function(e){a.push(e.displayName.toLowerCase())}),t.password!==t.confirmPassword)i.error("Passwords don't match!");else if(t.firstName.length<1||t.lastName.length<1||t.displayName.length<1)i.error("Don't leave names blank!  How will people know who you are?");else if(o.displayName!==t.displayName&&_.indexOf(a,t.displayName.toLowerCase())>-1)i.error("Sorry, someone else is already using that display name");else if(!e.isAuthorized("super-admin")&&t.displayName.toLowerCase().indexOf("maestro")>-1)i.error("Sorry, there's only one Maestro");else{var r={_id:t._id};(t.firstName!==e.currentUser.firstName&&t.firstName.length>0||t.lastName!==e.currentUser.lastName&&t.lastName.length>0||t.displayName!==e.currentUser.displayName&&t.displayName.length>0)&&(r.firstName=t.firstName,r.lastName=t.lastName,r.displayName=t.displayName),t.password&&t.password.lentgh>0&&(r.password=t.password),n.updateUser(r).then(function(){i.success("Your information has been updated"),l.userForm.$setPristine();var n=angular.copy(e.currentUser);angular.extend(n,r),e.currentUser=n,l.user.confirmPassword=l.user.password=""})}})}var o=null,l=this;l.user={_id:e.currentUser._id,firstName:e.currentUser.firstName,lastName:e.currentUser.lastName,displayName:e.currentUser.displayName},l.updateUser=a,l.userForm={},t()}e.$inject=["identityService","userService","notifyService"],angular.module("app").controller("UserCtrl",e)}(),function(){"use strict";function e(e){function n(n,i,t){var a=t.scrollaxis||"y",o=t.theme||"minimal-dark",l=t.mousewheelaxis||"y";$("html").hasClass("ismobile")||e.malihuScroll(i,o,a,l)}var i={restrict:"C",link:n};return i}e.$inject=["scrollbarService"],angular.module("app").directive("cOverflow",e)}(),function(){"use strict";function e(){function e(e,n){n.click(function(){n.next().slideToggle(200),n.parent().toggleClass("toggled")})}var n={restrict:"A",link:e};return n}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,n){n.hasClass("btn-icon")||n.hasClass("btn-float")?Waves.attach(n,["waves-circle"]):n.hasClass("btn-light")?Waves.attach(n,["waves-light"]):Waves.attach(n),Waves.init()}var n={restrict:"C",link:e};return n}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,n){var i=n.children().first(),t=n.parent().hasClass("fg-float");i.focus(function(){n.addClass("fg-toggled")}),i.blur(function(){(!t||t&&0===i.val().length)&&n.removeClass("fg-toggled")})}var n={restrict:"C",link:e};return n}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;base64,
