angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","luegg.directives"]),function(){"use strict ";function e(e){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache"}e.$inject=["$httpProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e){var t=this;t.$state=e}e.$inject=["$state"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,i,a){var o={superAdmin:r,admin:t,user:n};a.html5Mode(!0),i.otherwise("/"),i.when("/pyramids/","/pyramids"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("pyramids",{url:"/pyramids",views:{content:{controller:"PyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramids.html"}}}).state("pyramids.myPyramids",{url:"/my-pyramids",views:{"content@":{controller:"MyPyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/my-pyramids.html"}},resolve:{auth:o.user}}).state("pyramids.view",{url:"/view/:pyramidId",views:{"content@":{controller:"PyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramid.html"}}}).state("pyramids.create",{url:"/create",views:{"content@":{controller:"CreatePyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/create-pyramid.html"}},resolve:{auth:o.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}})}function t(e){return e.authorizeCurrentUserForRoute("admin")}function r(e){return e.authorizeCurrentUserForRoute("super-admin")}function n(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),t.$inject=["authService"],r.$inject=["authService"],n.$inject=["authService"]}(),function(){"use strict";function e(e,t,r){e.$on("$stateChangeError",function(e,r,n,i,a,o){"not authorized"===o&&(t.go("login"),t.previous=r)}),e.$on("$stateChangeStart",function(){r.setSidebarStatus(!1)})}e.$inject=["$rootScope","$state","sidebarService"],angular.module("app").run(e)}(),function(){"use strict";function e(e,t,r,n,i){function a(e,n){var a=r.defer();return t.post("/login",{username:e,password:n}).then(function(e){e.data.success?(i.currentUser=e.data.user,a.resolve(!0)):a.resolve(!1)}),a.promise}function o(e){var n=r.defer();return t.post("/api/users",{userData:e}).then(function(t){t.data?(a(e.username,e.password),n.resolve(!0)):n.resolve(!1)}),n.promise}function l(){var n=r.defer();return t.post("/logout",{logout:!0}).then(function(){i.currentUser=void 0,n.resolve(),e.go("home")}),n.promise}function s(e){return!!i.isAuthorized(e)||r.reject("not authorized")}function c(){return!!i.isAuthenticated()||r.reject("not authorized")}var u={authenticateUser:a,createUser:o,logout:l,authorizeCurrentUserForRoute:s,authenticatedUserForRoute:c};return u}e.$inject=["$state","$http","$q","userService","identityService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e,t){function r(){return e.get("/api/users").then(function(e){return e})}var n={getAllUsers:r};return n}e.$inject=["$http","identityService"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(e,t,r){function n(){}function i(n,i){t.authenticateUser(n,i).then(function(t){t?e.previous?e.go(e.previous):e.go("home"):r.error("Username / password combinaiton incorrect")})}var a=this;a.login=i,n()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,t,r,n){function i(){}function a(e){e.password!==e.confirmPassword?n.error("Passwords don't match!"):r.createUser(e).then(function(){t.go("home")})}var o=this;o.register=a,i()}e.$inject=["$scope","$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@"},templateUrl:"/challenges/components/active-challenges.html"};return e}function t(e,t){function r(){n()}function n(){i.challenges=[],t.getActiveChallengesByCompetition(i.competitionId).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){0!==e.timeLimit&&(e.expires=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1)}))})}var i=this;i.challenges=[],r(),e.$on("ws:challenge_created",function(e,t){i.competitionId===t.competitionId&&n()}),e.$on("ws:challenge_completed",function(e,t){i.competitionId===t.competitionId&&n()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpActiveChalleneges",e)}(),function(){"use strict";function e(e){function t(t){return e.post("/api/challenges/create",{challenge:t})}function r(t){return e.post("/api/challenges/complete",{challenge:t})}function n(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function i(t){return e.get("/api/challenges/active/competition",{params:{competitionId:t}})}function a(t,r){return e.get("/api/challenges/active/competition/player",{params:{competitionId:t,playerId:r}})}var o={createChallenge:t,completeChallenge:r,getChallengesByCompetition:n,getActiveChallengesByCompetition:i,getActiveChallengeByCompetitionByPlayer:a};return o}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/footer.html"};return e}function t(e,t){function r(){t.logout()}var n=this;n.indentity=e,n.logout=r}t.$inject=["identityService","authService"],angular.module("app").directive("kpFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"headerCtrl",restrict:"A",templateUrl:"/common/components/header.html"};return e}function t(e,t,r){function n(){a.sidebarStatus.left=!a.sidebarStatus.left,e.setSidebarStatus(a.sidebarStatus.left)}function i(){r.logout()}var a=this;a.indentity=t,a.logout=i,a.sidebarStatus=e.getSidebarStatus(),a.toggleSidebar=n}t.$inject=["sidebarService","identityService","authService"],angular.module("app").directive("kpHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"/common/components/sidebar.html"};return e}function t(e,t,r){function n(){t.logout()}var i=this;i.indentity=e,i.logout=n,i.sidebarStatus=r.getSidebarStatus()}t.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("kpSidebar",e)}(),function(){"use strict";function e(e){function t(){return!!this.currentUser}function r(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var n;null!==e.bootstrappedUserObject&&(n=e.bootstrappedUserObject);var i={currentUser:n,isAuthenticated:t,isAuthorized:r};return i}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,t,r){$.notify({message:e,url:t,target:r},{type:"info"})}function t(e,t,r){$.notify({message:e,url:t,target:r},{type:"success"})}function r(e,t,r){$.notify({message:e,url:t,target:r},{type:"warning"})}function n(e,t,r){$.notify({message:e,url:t,target:r},{type:"danger"})}function i(e,t,r){$.notify({message:e,url:t,target:r},{type:"inverse"})}var a={info:e,success:t,warning:r,error:n,inverse:i};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85}}),a}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(){return r}function t(e){r.left=e}var r={left:!1,right:!1},n={getSidebarStatus:e,setSidebarStatus:t};return n}angular.module("app").factory("sidebarService",e)}(),angular.module("app").service("websocketService",["$rootScope","$window",function(e,t){function r(){return"https:"===t.location.protocol?"wss://"+t.location.host:"ws://"+t.location.host}var n;this.connect=function(){n=new WebSocket(r()),n.onmessage=function(t){var r=JSON.parse(t.data);e.$broadcast("ws:"+r.topic,r.data)}},this.send=function(e,t){var r=JSON.stringify({topic:e,data:t});n.send(r)}}]).run(["websocketService",function(e){e.connect()}]),function(){"use strict";function e(){function e(){}e()}angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/pyramids/components/pyramid.html",replace:!0,scope:{competitionId:"@"},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,r,n,i,a,o){function l(){r.getPyramid(C.competitionId).then(function(e){if(e.data){C.pyramid=e.data,C.levels=[];for(var r=1;r<=e.data.levels;++r)C.levels.push(r);s(),c(),d(),p(),m()}else t.go("pyramids.myPyramids")})}function s(){C.pyramid.players=n("orderBy")(C.pyramid.players,"position")}function c(){_.forEach(C.pyramid.players,function(e){a.isAuthenticated()&&e._id===a.currentUser._id&&(C.currentUserIsOnPyramid=!0,e.class="current-user",C.currentUserPlayer=e,o.getActiveChallengeByCompetitionByPlayer(C.competitionId,e._id).then(function(e){e.data&&(C.hasActiveChallenge=!0)}))}),o.getActiveChallengesByCompetition(C.competitionId).then(function(e){_.forEach(e.data,function(e){var t=_.find(C.pyramid.players,{_id:e.challenger._id});t.class="unavailable",t.challenge={position:"challenger"};var r=_.find(C.pyramid.players,{_id:e.opponent._id});if(r.class="unavailable",r.challenge={position:"opponent"},0!==e.timeLimit){var n=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1;n>0?r.challenge.expires=n:n<=0&&v(null,!0,r)}}),f()})}function u(){C.breakPoints=[];for(var e=0;e<C.pyramid.levels;e++)C.breakPoints.push(e*(e+1)/2+1)}function d(){C.numberOfBlocks=0;for(var e=C.pyramid.levels;e>0;e--)C.numberOfBlocks+=e}function p(){C.numberOfRealPlayers=C.pyramid.players.length;for(var e=C.pyramid.players.length;e<C.numberOfBlocks;e++)C.pyramid.players.push({firstName:"Empty",lastName:"Spot",position:99,class:"empty"})}function m(){var e=0;u();for(var t=0;t<C.pyramid.players.length;t++)C.breakPoints.indexOf(t+1)>-1&&(e+=1),C.pyramid.players[t].level=e}function f(){var e=C.currentUserPlayer.level>1?C.currentUserPlayer.level-1:null;_.forEach(C.pyramid.players,function(t){t.level===e&&99!==t.position&&"unavailable"!==t.class&&(C.availableChallenges=!0,t.available=!0)})}function y(e){if(e.available){C.hasActiveChallenge=!0;var t={competitionId:C.competitionId,complete:!1,forfeit:!1,timeLimit:C.pyramid.forfeitDays,challenger:{_id:C.currentUserPlayer._id,firstName:C.currentUserPlayer.firstName,lastName:C.currentUserPlayer.lastName,nickname:C.currentUserPlayer.nickname,position:C.currentUserPlayer.position},opponent:{_id:e._id,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname,position:e.position}};o.createChallenge(t).then(function(){C.pyramidMenuToggle=!1})}else i.error("Sorry, that is not a valid challenge.")}function v(e,t,n){var i=n||C.currentUserPlayer;o.getActiveChallengeByCompetitionByPlayer(C.competitionId,i._id).then(function(i){C.hasActiveChallenge=!1;var a=!1;t?(i.data.forfeit=!0,"opponent"===n.challenge.position?(i.data.challenger.winner=!0,a=!0):i.data.opponent.winner=!0):e?i.data.challenger._id===C.currentUserPlayer._id?(i.data.challenger.winner=!0,a=!0):i.data.opponent.winner=!0:i.data.challenger._id===C.currentUserPlayer._id?i.data.opponent.winner=!0:(i.data.challenger.winner=!0,a=!0),a?r.swapPositions(C.competitionId,i.data.opponent,i.data.challenger).then(function(){o.completeChallenge(i.data).then(function(){b&&P()})}):o.completeChallenge(i.data).then(function(){b&&P()}),C.pyramidMenuToggle=!1})}function h(e){v(null,!0,e)}function g(){if(a.isAuthenticated())if(C.numberOfRealPlayers<C.numberOfBlocks){var e={_id:a.currentUser._id,firstName:a.currentUser.firstName,lastName:a.currentUser.lastName,position:C.numberOfRealPlayers+1};r.addPlayerToPyramid(C.competitionId,e)}else i.warning("Sorry, this pyramid is full");else t.go("login")}function P(){a.isAuthenticated()&&C.currentUserIsOnPyramid&&(b=!0,C.hasActiveChallenge?v(null,!0,C.currentUserPlayer):(C.currentUserIsOnPyramid=!1,C.hasActiveChallenge=!1,r.getPyramid(C.competitionId).then(function(e){var t=e.data,n=C.currentUserPlayer.position;_.forEach(t.players,function(e){e.position>=n&&(e.position-=1)});for(var i=_.remove(t.players,function(e){return e._id===C.currentUserPlayer._id}),a=[],o=0;o<C.numberOfRealPlayers-1;++o){var l={_id:t.players[o]._id,firstName:t.players[o].firstName,lastName:t.players[o].lastName,position:t.players[o].position};a.push(l)}r.removedPlayerFromPyramid(C.competitionId,i[0],a).then(function(){b=!1})})))}function w(){r.getPyramid(C.competitionId).then(function(e){C.pyramid=e.data,s(),c(),p(),m()})}var C=this;C.pyramid={},C.breakPoints=[],C.numberOfBlocks=0,C.currentUserIsOnPyramid=!1,C.hasActiveChallenge=!1,C.availableChallenges=!1,C.createChallenge=y,C.completeChallenge=v,C.challengeExpired=h,C.currentUserPlayer={},C.pyramidMenuToggle=!1,C.addCurrentUserToPyramid=g,C.removeCurrentUserFromPyramid=P,C.numberOfRealPlayers=0,l();var b=!1;e.$on("ws:challenge_created",function(e,t){C.competitionId===t.competitionId&&(i.info(t.description),w())}),e.$on("ws:challenge_completed",function(e,t){C.competitionId===t.competitionId&&(i.info(t.description),b||w())}),e.$on("ws:player_added",function(e,t){C.competitionId===t.competitionId&&(i.info(t.description),w())}),e.$on("ws:player_removed",function(e,t){C.competitionId===t.competitionId&&(i.info(t.description),w())})}t.$inject=["$scope","$state","pyramidsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("kpPyramid",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/pyramid",{params:{pyramidId:t}})}function r(t){return e.get("/api/pyramids/user",{params:{userId:t}})}function n(t){return e.post("/api/pyramids/create",{pyramid:t})}function i(t,r,n){return e.post("/api/pyramids/swapPositions",{pyramidId:t,challenger:r,opponent:n})}function a(t,r){return e.post("/api/pyramids/addPlayer",{pyramidId:t,player:r})}function o(t,r,n){return e.post("/api/pyramids/removePlayer",{pyramidId:t,removedPlayer:r,players:n})}var l={getPyramid:t,getPyramidsForUser:r,createPyramid:n,swapPositions:i,addPlayerToPyramid:a,removedPlayerFromPyramid:o};return l}e.$inject=["$http"],angular.module("app").factory("pyramidsService",e)}(),function(){"use strict";function e(e,t,r,n,i){function a(){r.getAllUsers().then(function(e){u.availablePlayers=e.data})}function o(e){u.addedPlayers.length<u.allowedPlayers?(u.addedPlayerAdded=!0,u.addedPlayers.push(_.remove(u.availablePlayers,{_id:e._id})[0])):i.error("All spots have been filled.<br />If you want to add more people please increase the levels.")}function l(e){u.addedPlayerAdded=!1,u.availablePlayers.push(_.remove(u.addedPlayers,{_id:e._id})[0])}function s(e){u.allowedPlayers=0;for(var t=e;t>0;t--)u.allowedPlayers+=t;if(u.addedPlayers.length>u.allowedPlayers){var r=u.addedPlayers.splice(u.allowedPlayers);u.availablePlayers=u.availablePlayers.concat(r),i.warning("Players were removed becasue there are not enough spots on the pyramid.")}}function c(e){angular.forEach(u.addedPlayers,function(e){d+=1;var t={position:d,_id:e._id,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname};u.newPyramid.players.push(t)}),n.createPyramid(e).then(function(e){t.go("pyramids.view",{pyramidId:e.data._id})})}var u=this;u.newPyramid={players:[]},u.availablePlayers=[],u.addedPlayers=[],u.createPyramid=c,u.addPlayer=o,u.removePlayer=l,u.allowedPlayers=10,u.newPyramid.levels=4,u.newPyramid.forfeitDays=1,a(),e.$watch("vm.newPyramid.levels",function(e,t){e!==t&&s(e)});var d=0}e.$inject=["$scope","$state","userService","pyramidsService","notifyService"],angular.module("app").controller("CreatePyramidCtrl",e)}(),function(){"use strict";function e(e,t,r){function n(){t.getPyramidsForUser(r.currentUser._id).then(function(e){i.pyramids=e.data})}var i=this;i.pyramids=null,n()}e.$inject=["$state","pyramidsService","identityService"],angular.module("app").controller("MyPyramidsCtrl",e)}(),function(){"use strict";function e(e){function t(){e.pyramidId&&(r.pyramidId=e.pyramidId)}var r=this;r.pyramidId=null,t()}e.$inject=["$stateParams"],angular.module("app").controller("PyramidCtrl",e)}(),function(){"use strict";function e(){function e(){}var t=this;t.pyramids=null,e()}angular.module("app").controller("PyramidsCtrl",e)}(),function(){"use strict";function e(){function e(e,t){t.click(function(){t.next().slideToggle(200),t.parent().toggleClass("toggled")})}var t={restrict:"A",link:e};return t}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,t){t.hasClass("btn-icon")||t.hasClass("btn-float")?Waves.attach(t,["waves-circle"]):t.hasClass("btn-light")?Waves.attach(t,["waves-light"]):Waves.attach(t),Waves.init()}var t={restrict:"C",link:e};return t}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,t){var r=t.children().first(),n=t.parent().hasClass("fg-float");r.focus(function(){t.addClass("fg-toggled")}),r.blur(function(){(!n||n&&0===r.val().length)&&t.removeClass("fg-toggled")})}var t={restrict:"C",link:e};return t}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAuY29uZmlnLmpzIiwiYXBwLmNvbnRyb2xsZXIuanMiLCJhcHAucm91dGVzLmpzIiwiYXBwLnJ1bi5qcyIsImF1dGhlbnRpY2F0aW9uL3NlcnZpY2VzL2F1dGguc2VydmljZS5qcyIsImF1dGhlbnRpY2F0aW9uL3NlcnZpY2VzL3VzZXIuc2VydmljZS5qcyIsImF1dGhlbnRpY2F0aW9uL3ZpZXdzL2xvZ2luLmNvbnRyb2xsZXIuanMiLCJhdXRoZW50aWNhdGlvbi92aWV3cy9yZWdpc3Rlci5jb250cm9sbGVyLmpzIiwiY2hhbGxlbmdlcy9jb21wb25lbnRzL2FjdGl2ZS1jaGFsbGVuZ2VzLmRpcmVjdGl2ZS5qcyIsImNoYWxsZW5nZXMvc2VydmljZXMvY2hhbGxlbmdlcy5zZXJ2aWNlLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvZm9vdGVyLmRpcmVjdGl2ZS5qcyIsImNvbW1vbi9jb21wb25lbnRzL2hlYWRlci5kaXJlY3RpdmUuanMiLCJjb21tb24vY29tcG9uZW50cy9zaWRlYmFyLmRpcmVjdGl2ZS5qcyIsImNvbW1vbi9zZXJ2aWNlcy9pbmRlbnRpdHkuc2VydmljZS5qcyIsImNvbW1vbi9zZXJ2aWNlcy9ub3RpZnkuc2VydmljZS5qcyIsImNvbW1vbi9zZXJ2aWNlcy9zaWRlYmFyLnNlcnZpY2UuanMiLCJjb21tb24vc2VydmljZXMvd2Vic29ja2V0LnNlcnZpY2UuanMiLCJjb21tb24vdmlld3MvaG9tZS5jb250cm9sbGVyLmpzIiwicHlyYW1pZHMvY29tcG9uZW50cy9weXJhbWlkLmRpcmVjdGl2ZS5qcyIsInB5cmFtaWRzL3NlcnZpY2VzL3B5cmFtaWRzLnNlcnZpY2UuanMiLCJweXJhbWlkcy92aWV3cy9jcmVhdGUtcHlyYW1pZC5jb250cm9sbGVyLmpzIiwicHlyYW1pZHMvdmlld3MvbXktcHlyYW1pZHMuY29udHJvbGxlci5qcyIsInB5cmFtaWRzL3ZpZXdzL3B5cmFtaWQuY29udHJvbGxlci5qcyIsInB5cmFtaWRzL3ZpZXdzL3B5cmFtaWRzLmNvbnRyb2xsZXIuanMiLCJjb21tb24vY29tcG9uZW50cy91aS90b2dnbGUtc3VibWVudS5kaXJlY3RpdmUuanMiLCJjb21tb24vY29tcG9uZW50cy91aS93YXZlcy5kaXJlY3RpdmUuanMiLCJjb21tb24vY29tcG9uZW50cy91aS9mb3Jtcy9mZy1saW5lLmRpcmVjdGl2ZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlndXJhdGlvbiIsIiRodHRwUHJvdmlkZXIiLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJnZXQiLCJjb25maWciLCJBcHBDdHJsIiwiJHN0YXRlIiwiYXBwQ3RybCIsInRoaXMiLCJjb250cm9sbGVyIiwiY29uZmlndXJlUm91dGVzIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsInJvdXRlUm9sZUNoZWNrcyIsInN1cGVyQWRtaW4iLCJyZXF1aXJlU3VwZXJBZG1pbiIsImFkbWluIiwicmVxdWlyZUFkbWluIiwidXNlciIsInJlcXVpcmVBdXRoIiwiaHRtbDVNb2RlIiwib3RoZXJ3aXNlIiwid2hlbiIsInN0YXRlIiwidXJsIiwidmlld3MiLCJjb250ZW50IiwiY29udHJvbGxlckFzIiwidGVtcGxhdGVVcmwiLCJjb250ZW50QCIsInJlc29sdmUiLCJhdXRoIiwiYXV0aFNlcnZpY2UiLCJhdXRob3JpemVDdXJyZW50VXNlckZvclJvdXRlIiwiYXV0aGVudGljYXRlZFVzZXJGb3JSb3V0ZSIsIiRpbmplY3QiLCJhcHBSdW4iLCIkcm9vdFNjb3BlIiwic2lkZWJhclNlcnZpY2UiLCIkb24iLCJldmVudCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiLCJlcnJvciIsImdvIiwicHJldmlvdXMiLCJzZXRTaWRlYmFyU3RhdHVzIiwicnVuIiwiJGh0dHAiLCIkcSIsInVzZXJTZXJ2aWNlIiwiaWRlbnRpdHlTZXJ2aWNlIiwiYXV0aGVudGljYXRlVXNlciIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJkZmQiLCJkZWZlciIsInBvc3QiLCJ0aGVuIiwicmVzcG9uc2UiLCJkYXRhIiwic3VjY2VzcyIsImN1cnJlbnRVc2VyIiwicHJvbWlzZSIsImNyZWF0ZVVzZXIiLCJ1c2VyRGF0YSIsImxvZ291dCIsInVuZGVmaW5lZCIsInJvbGUiLCJpc0F1dGhvcml6ZWQiLCJyZWplY3QiLCJpc0F1dGhlbnRpY2F0ZWQiLCJzZXJ2aWNlIiwiZmFjdG9yeSIsImdldEFsbFVzZXJzIiwidXNlcnMiLCJMb2dpbkN0cmwiLCJub3RpZnlTZXJ2aWNlIiwiYWN0aXZhdGUiLCJsb2dpbiIsInZtIiwiUmVnaXN0ZXJDdHJsIiwiJHNjb3BlIiwicmVnaXN0ZXIiLCJuZXdVc2VyIiwiY29uZmlybVBhc3N3b3JkIiwia3BBY3RpdmVDaGFsbGVuZWdlcyIsImRpcmVjdGl2ZSIsImJpbmRUb0NvbnRyb2xsZXIiLCJjdHJsRnVuYyIsInJlc3RyaWN0Iiwic2NvcGUiLCJjb21wZXRpdGlvbklkIiwiY2hhbGxlbmdlc1NlcnZpY2UiLCJnZXRBY3RpdmVDaGFsbGVuZ2VzIiwiY2hhbGxlbmdlcyIsImdldEFjdGl2ZUNoYWxsZW5nZXNCeUNvbXBldGl0aW9uIiwibGVuZ3RoIiwiXyIsImZvckVhY2giLCJjaGFsbGVuZ2UiLCJ0aW1lTGltaXQiLCJleHBpcmVzIiwibW9tZW50IiwiZGlmZiIsImNyZWF0ZWQiLCJhZGQiLCJjaGFsbGVuZ2VEZXRhaWxzIiwiY3JlYXRlQ2hhbGxlbmdlIiwiY29tcGxldGVDaGFsbGVuZ2UiLCJnZXRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbiIsInBhcmFtcyIsImdldEFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllciIsInBsYXllcklkIiwia3BGb290ZXIiLCJpbmRlbnRpdHkiLCJrcEhlYWRlciIsInRvZ2dsZVNpZGViYXIiLCJzaWRlYmFyU3RhdHVzIiwibGVmdCIsImdldFNpZGViYXJTdGF0dXMiLCJrcFNpZGViYXIiLCIkd2luZG93Iiwicm9sZXMiLCJpbmRleE9mIiwiYm9vdHN0cmFwcGVkVXNlck9iamVjdCIsImluZm8iLCJtZXNzYWdlIiwidGFyZ2V0IiwiJCIsIm5vdGlmeSIsInR5cGUiLCJ3YXJuaW5nIiwiaW52ZXJzZSIsIm5vdGlmeURlZmF1bHRzIiwibmV3ZXN0X29uX3RvcCIsIm9mZnNldCIsIngiLCJ5Iiwic3RhdHVzIiwicmlnaHQiLCJ3ZWJzb2NrZXRIb3N0IiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3QiLCJjb25uZWN0aW9uIiwiY29ubmVjdCIsIldlYlNvY2tldCIsIm9ubWVzc2FnZSIsImUiLCJwYXlsb2FkIiwiSlNPTiIsInBhcnNlIiwiJGJyb2FkY2FzdCIsInRvcGljIiwic2VuZCIsImpzb24iLCJzdHJpbmdpZnkiLCJ3ZWJzb2NrZXRTZXJ2aWNlIiwiSG9tZUN0cmwiLCJrcFB5cmFtaWQiLCJyZXBsYWNlIiwicHlyYW1pZHNTZXJ2aWNlIiwiJGZpbHRlciIsImdldFB5cmFtaWQiLCJweXJhbWlkIiwibGV2ZWxzIiwiaSIsInB1c2giLCJvcmRlclBsYXllcnMiLCJnZXRQbGF5ZXJzU3RhdHVzIiwiY2FsY3VsYXRlUHlyYW1pZEJsb2NrcyIsImZpbGxJbkVtcHR5QmxvY2tzIiwiYXNzaWduTGV2ZWxzVG9QbGF5ZXJzIiwicGxheWVycyIsInBsYXllciIsIl9pZCIsImN1cnJlbnRVc2VySXNPblB5cmFtaWQiLCJjbGFzcyIsImN1cnJlbnRVc2VyUGxheWVyIiwiaGFzQWN0aXZlQ2hhbGxlbmdlIiwiY2hhbGxlbmdlciIsImZpbmQiLCJwb3NpdGlvbiIsIm9wcG9uZW50IiwidGltZVRvRXhwaXJlIiwiZmluZEF2YWlsYWJsZUNoYWxsZW5nZXMiLCJjcmVhdGVCcmVha1BvaW50cyIsImJyZWFrUG9pbnRzIiwibnVtYmVyT2ZCbG9ja3MiLCJudW1iZXJPZlJlYWxQbGF5ZXJzIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJsZXZlbCIsImxldmVsQWJvdmUiLCJhdmFpbGFibGVDaGFsbGVuZ2VzIiwiYXZhaWxhYmxlIiwiY29tcGxldGUiLCJmb3JmZWl0IiwiZm9yZmVpdERheXMiLCJuaWNrbmFtZSIsInB5cmFtaWRNZW51VG9nZ2xlIiwid2lubmVySXNDdXJyZW50VXNlciIsImZvcmZlaXRMb3NlciIsInN3YXBQb3NpdGlvbnMiLCJ3aW5uZXIiLCJyZW1vdmluZ0N1cnJlbnRVc2VyIiwicmVtb3ZlQ3VycmVudFVzZXJGcm9tUHlyYW1pZCIsImNoYWxsZW5nZUV4cGlyZWQiLCJhZGRDdXJyZW50VXNlclRvUHlyYW1pZCIsImFkZFBsYXllclRvUHlyYW1pZCIsInAiLCJvcGVuUG9zaXRpb24iLCJyZW1vdmVkUGxheWVyIiwicmVtb3ZlIiwidXBkYXRlZFBsYXllcnMiLCJ1cGRhdGVkUGxheWVyIiwicmVtb3ZlZFBsYXllckZyb21QeXJhbWlkIiwicmVmcmVzaFB5cmFtaWQiLCJkZXNjcmlwdGlvbiIsImRldGFpbHMiLCJweXJhbWlkSWQiLCJnZXRQeXJhbWlkc0ZvclVzZXIiLCJ1c2VySWQiLCJjcmVhdGVQeXJhbWlkIiwiQ3JlYXRlUHlyYW1pZEN0cmwiLCJhdmFpbGFibGVQbGF5ZXJzIiwiYWRkUGxheWVyIiwiYWRkZWRQbGF5ZXJzIiwiYWxsb3dlZFBsYXllcnMiLCJhZGRlZFBsYXllckFkZGVkIiwicmVtb3ZlUGxheWVyIiwidXBkYXRlQWxsb3dlZFBsYXllcnMiLCJyZW1vdmVkUGxheWVycyIsInNwbGljZSIsImNvbmNhdCIsIm5ld1B5cmFtaWQiLCIkd2F0Y2giLCJuZXdWYWwiLCJvbGRWYWwiLCJNeVB5cmFtaWRzQ3RybCIsInB5cmFtaWRzIiwiUHlyYW1pZEN0cmwiLCIkc3RhdGVQYXJhbXMiLCJQeXJhbWlkc0N0cmwiLCJ0b2dnbGVTdWJtZW51IiwibGlua0Z1bmMiLCJlbCIsImNsaWNrIiwibmV4dCIsInNsaWRlVG9nZ2xlIiwicGFyZW50IiwidG9nZ2xlQ2xhc3MiLCJsaW5rIiwid2F2ZXNFZmZlY3QiLCJlbGVtZW50IiwiaGFzQ2xhc3MiLCJXYXZlcyIsImF0dGFjaCIsImluaXQiLCJmZ0xpbmUiLCJpbnB1dCIsImNoaWxkcmVuIiwiZmlyc3QiLCJpc0Zsb2F0TGFiZWwiLCJmb2N1cyIsImFkZENsYXNzIiwiYmx1ciIsInZhbCIsInJlbW92ZUNsYXNzIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSxPQUNBLFlBQ0EsZUFDQSxZQUNBLHNCQUNBLGFBQ0Esd0JBQ0EsUUFDQSxxQkNSQSx3QkFJQSxTQUFBQyxHQUFBQyxHQUVBQSxFQUFBQyxTQUFBQyxRQUFBQyxNQUNBSCxFQUFBQyxTQUFBQyxRQUFBQyxRQUdBSCxFQUFBQyxTQUFBQyxRQUFBQyxJQUFBLHFCQUFBLGdDQUVBSCxFQUFBQyxTQUFBQyxRQUFBQyxJQUFBLGlCQUFBLFdBQ0FILEVBQUFDLFNBQUFDLFFBQUFDLElBQUEsT0FBQSx1Q0FYQU4sUUFBQUMsT0FBQSxPQUFBTSxPQUFBTCxNQ0ZBLHVCQUlBLFNBQUFNLEdBQUFDLEdBQ0EsR0FBQUMsR0FBQUMsSUFDQUQsR0FBQUQsT0FBQUEsdUJBSkFULFFBQUFDLE9BQUEsT0FBQVcsV0FBQSxVQUFBSixNQ0ZBLHVCQUlBLFNBQUFLLEdBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsR0FBQUMsSUFDQUMsV0FBQUMsRUFDQUMsTUFBQUMsRUFDQUMsS0FBQUMsRUFHQVAsR0FBQVEsV0FBQSxHQUdBVCxFQUFBVSxVQUFBLEtBRUFWLEVBQUFXLEtBQUEsYUFBQSxhQUVBWixFQUNBYSxNQUFBLFFBQ0FDLElBQUEsSUFDQUMsT0FDQUMsU0FDQWxCLFdBQUEsV0FDQW1CLGFBQUEsS0FDQUMsWUFBQSw2QkFHQUwsTUFBQSxZQUNBQyxJQUFBLFlBQ0FDLE9BQ0FDLFNBQ0FsQixXQUFBLGVBQ0FtQixhQUFBLEtBQ0FDLFlBQUEsbUNBR0FMLE1BQUEsdUJBQ0FDLElBQUEsZUFDQUMsT0FDQUksWUFDQXJCLFdBQUEsaUJBQ0FtQixhQUFBLEtBQ0FDLFlBQUEsb0NBR0FFLFNBQ0FDLEtBQUFsQixFQUFBSyxRQUVBSyxNQUFBLGlCQUNBQyxJQUFBLG1CQUNBQyxPQUNBSSxZQUNBckIsV0FBQSxjQUNBbUIsYUFB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QUFBQyxHQUFBM0osRUFBQTRKLEdBQ0FBLEVBQUFDLE1BQUEsV0FDQUQsRUFBQUUsT0FBQUMsWUFBQSxLQUNBSCxFQUFBSSxTQUFBQyxZQUFBLGFBVkEsR0FBQXJLLElBQ0FHLFNBQUEsSUFDQW1LLEtBQUFQLEVBR0EsT0FBQS9KLEdBVkE3RixRQUNBQyxPQUFBLE9BQ0E0RixVQUFBLGdCQUFBOEosTUNKQSxXQUNBLFlBS0EsU0FBQVMsS0FRQSxRQUFBUixHQUFBM0osRUFBQW9LLEdBQ0FBLEVBQUFDLFNBQUEsYUFBQUQsRUFBQUMsU0FBQSxhQUNBQyxNQUFBQyxPQUFBSCxHQUFBLGlCQUNBQSxFQUFBQyxTQUFBLGFBQ0FDLE1BQUFDLE9BQUFILEdBQUEsZ0JBRUFFLE1BQUFDLE9BQUFILEdBR0FFLE1BQUFFLE9BaEJBLEdBQUE1SyxJQUNBRyxTQUFBLElBQ0FtSyxLQUFBUCxFQUdBLE9BQUEvSixHQVZBN0YsUUFDQUMsT0FBQSxPQUNBNEYsVUFBQSxjQUFBdUssTUNKQSxXQUNBLFlBS0EsU0FBQU0sS0FRQSxRQUFBZCxHQUFBM0osRUFBQW9LLEdBQ0EsR0FBQU0sR0FBQU4sRUFBQU8sV0FBQUMsUUFDQUMsRUFBQVQsRUFBQUosU0FBQUssU0FBQSxXQUNBSyxHQUFBSSxNQUFBLFdBQ0FWLEVBQUFXLFNBQUEsZ0JBR0FMLEVBQUFNLEtBQUEsYUFDQUgsR0FBQUEsR0FBQSxJQUFBSCxFQUFBTyxNQUFBM0ssU0FDQThKLEVBQUFjLFlBQUEsZ0JBaEJBLEdBQUF0TCxJQUNBRyxTQUFBLElBQ0FtSyxLQUFBUCxFQUdBLE9BQUEvSixHQVZBN0YsUUFDQUMsT0FBQSxPQUNBNEYsVUFBQSxTQUFBNksiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcbiAgJ3VpLnJvdXRlcicsXG4gICd1aS5ib290c3RyYXAnLFxuICAnbmdBbmltYXRlJyxcbiAgJ2FuZ3VsYXItbG9hZGluZy1iYXInLFxuICAnbm91aXNsaWRlcicsXG4gICdsb2NhbHl0aWNzLmRpcmVjdGl2ZXMnLFxuICAndGltZXInLFxuICAnbHVlZ2cuZGlyZWN0aXZlcydcbl0pOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0ICc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb25maWcoY29uZmlndXJhdGlvbik7XG5cbiAgZnVuY3Rpb24gY29uZmlndXJhdGlvbigkaHR0cFByb3ZpZGVyKSB7XG4gICAgLy9pbml0aWFsaXplIGdldCBpZiBub3QgdGhlcmVcbiAgICBpZiAoISRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXQpIHtcbiAgICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXQgPSB7fTsgICAgXG4gICAgfSAgICBcbiAgICAvL2Rpc2FibGUgSUUgYWpheCByZXF1ZXN0IGNhY2hpbmdcbiAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0WydJZi1Nb2RpZmllZC1TaW5jZSddID0gJ0ZyaSwgMDEgSmFuIDIwMTYgMDU6MDA6MDAgR01UJztcbiAgICAvLyBleHRyYVxuICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXRbJ0NhY2hlLUNvbnRyb2wnXSA9ICduby1jYWNoZSc7XG4gICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldFsnUHJhZ21hJ10gPSAnbm8tY2FjaGUnO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0FwcEN0cmwnLCBBcHBDdHJsKTtcblxuICBmdW5jdGlvbiBBcHBDdHJsKCRzdGF0ZSkge1xuICAgIHZhciBhcHBDdHJsID0gdGhpcztcbiAgICBhcHBDdHJsLiRzdGF0ZSA9ICRzdGF0ZTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb25maWcoY29uZmlndXJlUm91dGVzKTtcblxuICBmdW5jdGlvbiBjb25maWd1cmVSb3V0ZXMoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcbiAgICB2YXIgcm91dGVSb2xlQ2hlY2tzID0ge1xuICAgICAgc3VwZXJBZG1pbjogcmVxdWlyZVN1cGVyQWRtaW4sXG4gICAgICBhZG1pbjogcmVxdWlyZUFkbWluLFxuICAgICAgdXNlcjogcmVxdWlyZUF1dGhcbiAgICB9O1xuXG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuXG4gICAgLy8gZm9yIGFueSB1bm1hdGNoZWQgdXJsXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLndoZW4oJy9weXJhbWlkcy8nLCAnL3B5cmFtaWRzJyk7XG5cbiAgICAkc3RhdGVQcm92aWRlclxuICAgICAgLnN0YXRlKCdob21lJywge1xuICAgICAgICB1cmw6ICcvJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdIb21lQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbW1vbi92aWV3cy9ob21lLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncHlyYW1pZHMnLCB7XG4gICAgICAgIHVybDogJy9weXJhbWlkcycsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnQnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUHlyYW1pZHNDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHlyYW1pZHMvdmlld3MvcHlyYW1pZHMuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdweXJhbWlkcy5teVB5cmFtaWRzJywge1xuICAgICAgICB1cmw6ICcvbXktcHlyYW1pZHMnLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50QCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNeVB5cmFtaWRzQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3B5cmFtaWRzL3ZpZXdzL215LXB5cmFtaWRzLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgYXV0aDogcm91dGVSb2xlQ2hlY2tzLnVzZXJcbiAgICAgICAgfVxuICAgICAgfSkuc3RhdGUoJ3B5cmFtaWRzLnZpZXcnLCB7XG4gICAgICAgIHVybDogJy92aWV3LzpweXJhbWlkSWQnLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50QCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdQeXJhbWlkQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3B5cmFtaWRzL3ZpZXdzL3B5cmFtaWQuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdweXJhbWlkcy5jcmVhdGUnLCB7XG4gICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50QCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDcmVhdGVQeXJhbWlkQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3B5cmFtaWRzL3ZpZXdzL2NyZWF0ZS1weXJhbWlkLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgYXV0aDogcm91dGVSb2xlQ2hlY2tzLnVzZXJcbiAgICAgICAgfVxuICAgICAgfSkuc3RhdGUoJ2xvZ2luJywge1xuICAgICAgICB1cmw6ICcvbG9naW4nLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ0xvZ2luQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2F1dGhlbnRpY2F0aW9uL3ZpZXdzL2xvZ2luLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncmVnaXN0ZXInLCB7XG4gICAgICAgIHVybDogJy9yZWdpc3RlcicsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnQnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXV0aGVudGljYXRpb24vdmlld3MvcmVnaXN0ZXIuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgcmVxdWlyZUFkbWluLiRpbmplY3QgPSBbJ2F1dGhTZXJ2aWNlJ107XG5cbiAgZnVuY3Rpb24gcmVxdWlyZUFkbWluKGF1dGhTZXJ2aWNlKSB7XG4gICAgcmV0dXJuIGF1dGhTZXJ2aWNlLmF1dGhvcml6ZUN1cnJlbnRVc2VyRm9yUm91dGUoJ2FkbWluJyk7XG4gIH1cblxuICByZXF1aXJlU3VwZXJBZG1pbi4kaW5qZWN0ID0gWydhdXRoU2VydmljZSddO1xuXG4gIGZ1bmN0aW9uIHJlcXVpcmVTdXBlckFkbWluKGF1dGhTZXJ2aWNlKSB7XG4gICAgcmV0dXJuIGF1dGhTZXJ2aWNlLmF1dGhvcml6ZUN1cnJlbnRVc2VyRm9yUm91dGUoJ3N1cGVyLWFkbWluJyk7XG4gIH1cblxuICByZXF1aXJlQXV0aC4kaW5qZWN0ID0gWydhdXRoU2VydmljZSddO1xuXG4gIGZ1bmN0aW9uIHJlcXVpcmVBdXRoKGF1dGhTZXJ2aWNlKSB7XG4gICAgcmV0dXJuIGF1dGhTZXJ2aWNlLmF1dGhlbnRpY2F0ZWRVc2VyRm9yUm91dGUoKTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5ydW4oYXBwUnVuKTtcblxuICBmdW5jdGlvbiBhcHBSdW4oJHJvb3RTY29wZSwgJHN0YXRlLCBzaWRlYmFyU2VydmljZSkge1xuICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VFcnJvcicsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcywgZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciA9PT0gJ25vdCBhdXRob3JpemVkJykge1xuICAgICAgICAkc3RhdGUuZ28oJ2xvZ2luJyk7XG4gICAgICAgICRzdGF0ZS5wcmV2aW91cyA9IHRvU3RhdGU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzaWRlYmFyU2VydmljZS5zZXRTaWRlYmFyU3RhdHVzKGZhbHNlKTtcbiAgICB9KTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5mYWN0b3J5KCdhdXRoU2VydmljZScsIGF1dGhTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBhdXRoU2VydmljZSgkc3RhdGUsICRodHRwLCAkcSwgdXNlclNlcnZpY2UsIGlkZW50aXR5U2VydmljZSkge1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgYXV0aGVudGljYXRlVXNlcjogYXV0aGVudGljYXRlVXNlcixcbiAgICAgIGNyZWF0ZVVzZXI6IGNyZWF0ZVVzZXIsXG4gICAgICBsb2dvdXQ6IGxvZ291dCxcbiAgICAgIGF1dGhvcml6ZUN1cnJlbnRVc2VyRm9yUm91dGU6IGF1dGhvcml6ZUN1cnJlbnRVc2VyRm9yUm91dGUsXG4gICAgICBhdXRoZW50aWNhdGVkVXNlckZvclJvdXRlOiBhdXRoZW50aWNhdGVkVXNlckZvclJvdXRlXG4gICAgfTtcbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZVVzZXIodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICB2YXIgZGZkID0gJHEuZGVmZXIoKTtcbiAgICAgICRodHRwLnBvc3QoJy9sb2dpbicsIHtcbiAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIgPSByZXNwb25zZS5kYXRhLnVzZXI7XG4gICAgICAgICAgZGZkLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGZkLnJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZmQucHJvbWlzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVc2VyKHVzZXJEYXRhKSB7XG4gICAgICB2YXIgZGZkID0gJHEuZGVmZXIoKTtcbiAgICAgICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XG4gICAgICAgIHVzZXJEYXRhOiB1c2VyRGF0YVxuICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICBhdXRoZW50aWNhdGVVc2VyKHVzZXJEYXRhLnVzZXJuYW1lLCB1c2VyRGF0YS5wYXNzd29yZCk7XG4gICAgICAgICAgZGZkLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGZkLnJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZmQucHJvbWlzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gICAgICB2YXIgZGZkID0gJHEuZGVmZXIoKTtcbiAgICAgICRodHRwLnBvc3QoJy9sb2dvdXQnLCB7XG4gICAgICAgIGxvZ291dDogdHJ1ZVxuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgZGZkLnJlc29sdmUoKTtcbiAgICAgICAgJHN0YXRlLmdvKCdob21lJyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZmQucHJvbWlzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdXRob3JpemVDdXJyZW50VXNlckZvclJvdXRlKHJvbGUpIHtcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRob3JpemVkKHJvbGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICRxLnJlamVjdCgnbm90IGF1dGhvcml6ZWQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdXRoZW50aWNhdGVkVXNlckZvclJvdXRlKCkge1xuICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAkcS5yZWplY3QoJ25vdCBhdXRob3JpemVkJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmZhY3RvcnkoJ3VzZXJTZXJ2aWNlJywgdXNlclNlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIHVzZXJTZXJ2aWNlKCRodHRwLCBpZGVudGl0eVNlcnZpY2UpIHtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGdldEFsbFVzZXJzOiBnZXRBbGxVc2Vyc1xuICAgIH07XG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICBmdW5jdGlvbiBnZXRBbGxVc2VycygpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKS50aGVuKGZ1bmN0aW9uICh1c2Vycykge1xuICAgICAgICByZXR1cm4gdXNlcnM7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignTG9naW5DdHJsJywgTG9naW5DdHJsKTtcblxuICBmdW5jdGlvbiBMb2dpbkN0cmwoJHN0YXRlLCBhdXRoU2VydmljZSwgbm90aWZ5U2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0ubG9naW4gPSBsb2dpbjtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgIGF1dGhTZXJ2aWNlLmF1dGhlbnRpY2F0ZVVzZXIodXNlcm5hbWUsIHBhc3N3b3JkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICAgICAgbm90aWZ5U2VydmljZS5lcnJvcignVXNlcm5hbWUgLyBwYXNzd29yZCBjb21iaW5haXRvbiBpbmNvcnJlY3QnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoJHN0YXRlLnByZXZpb3VzKSB7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJHN0YXRlLnByZXZpb3VzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCdob21lJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgUmVnaXN0ZXJDdHJsKTtcblxuICBmdW5jdGlvbiBSZWdpc3RlckN0cmwoJHNjb3BlLCAkc3RhdGUsIGF1dGhTZXJ2aWNlLCBub3RpZnlTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5yZWdpc3RlciA9IHJlZ2lzdGVyO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge31cblxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyKG5ld1VzZXIpIHtcbiAgICAgIGlmIChuZXdVc2VyLnBhc3N3b3JkICE9PSBuZXdVc2VyLmNvbmZpcm1QYXNzd29yZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdQYXNzd29yZHMgZG9uXFwndCBtYXRjaCEnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF1dGhTZXJ2aWNlLmNyZWF0ZVVzZXIobmV3VXNlcikudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJHN0YXRlLmdvKCdob21lJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BBY3RpdmVDaGFsbGVuZWdlcycsIGtwQWN0aXZlQ2hhbGxlbmVnZXMpO1xuXG4gIGZ1bmN0aW9uIGtwQWN0aXZlQ2hhbGxlbmVnZXMoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBzY29wZToge1xuICAgICAgICBjb21wZXRpdGlvbklkOiAnQCdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jaGFsbGVuZ2VzL2NvbXBvbmVudHMvYWN0aXZlLWNoYWxsZW5nZXMuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoJHNjb3BlLCBjaGFsbGVuZ2VzU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uY2hhbGxlbmdlcyA9IFtdO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgZ2V0QWN0aXZlQ2hhbGxlbmdlcygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFjdGl2ZUNoYWxsZW5nZXMoKSB7XG4gICAgICB2bS5jaGFsbGVuZ2VzID0gW107XG4gICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRBY3RpdmVDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChjaGFsbGVuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFsbGVuZ2VzLmRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZtLmNoYWxsZW5nZXMgPSBjaGFsbGVuZ2VzLmRhdGE7XG4gICAgICAgICAgXy5mb3JFYWNoKHZtLmNoYWxsZW5nZXMsIGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgICAgIGlmIChjaGFsbGVuZ2UudGltZUxpbWl0ICE9PSAwKSB7XG4gICAgICAgICAgICAgIGNoYWxsZW5nZS5leHBpcmVzID0gKG1vbWVudCgpLmRpZmYobW9tZW50KGNoYWxsZW5nZS5jcmVhdGVkKS5hZGQoY2hhbGxlbmdlLnRpbWVMaW1pdCwgJ2QnKSwncycpKSAqIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6Y2hhbGxlbmdlX2NyZWF0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNoYWxsZW5nZURldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBnZXRBY3RpdmVDaGFsbGVuZ2VzKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6Y2hhbGxlbmdlX2NvbXBsZXRlZCcsIGZ1bmN0aW9uIChfLCBjaGFsbGVuZ2VEZXRhaWxzKSB7XG4gICAgICBpZiAodm0uY29tcGV0aXRpb25JZCA9PT0gY2hhbGxlbmdlRGV0YWlscy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIGdldEFjdGl2ZUNoYWxsZW5nZXMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5mYWN0b3J5KCdjaGFsbGVuZ2VzU2VydmljZScsIGNoYWxsZW5nZXNTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBjaGFsbGVuZ2VzU2VydmljZSgkaHR0cCkge1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgY3JlYXRlQ2hhbGxlbmdlOiBjcmVhdGVDaGFsbGVuZ2UsXG4gICAgICBjb21wbGV0ZUNoYWxsZW5nZTogY29tcGxldGVDaGFsbGVuZ2UsXG4gICAgICBnZXRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbjogZ2V0Q2hhbGxlbmdlc0J5Q29tcGV0aXRpb24sXG4gICAgICBnZXRBY3RpdmVDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbjogZ2V0QWN0aXZlQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24sXG4gICAgICBnZXRBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXI6IGdldEFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllclxuICAgIH07XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoYWxsZW5nZShjaGFsbGVuZ2UpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2NoYWxsZW5nZXMvY3JlYXRlJywge1xuICAgICAgICBjaGFsbGVuZ2U6IGNoYWxsZW5nZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGxldGVDaGFsbGVuZ2UoY2hhbGxlbmdlKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jaGFsbGVuZ2VzL2NvbXBsZXRlJywgIHtcbiAgICAgICAgY2hhbGxlbmdlOiBjaGFsbGVuZ2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENoYWxsZW5nZXNCeUNvbXBldGl0aW9uKGNvbXBldGl0aW9uSWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY2hhbGxlbmdlcy9jb21wZXRpdGlvbicsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QWN0aXZlQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24oY29tcGV0aXRpb25JZCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jaGFsbGVuZ2VzL2FjdGl2ZS9jb21wZXRpdGlvbicsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyKGNvbXBldGl0aW9uSWQsIHBsYXllcklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2NoYWxsZW5nZXMvYWN0aXZlL2NvbXBldGl0aW9uL3BsYXllcicsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgICAgcGxheWVySWQ6IHBsYXllcklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BGb290ZXInLCBrcEZvb3Rlcik7XG5cbiAgZnVuY3Rpb24ga3BGb290ZXIoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jb21tb24vY29tcG9uZW50cy9mb290ZXIuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoaWRlbnRpdHlTZXJ2aWNlLCBhdXRoU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uaW5kZW50aXR5ID0gaWRlbnRpdHlTZXJ2aWNlO1xuICAgIHZtLmxvZ291dCA9IGxvZ291dDtcblxuICAgIGZ1bmN0aW9uIGxvZ291dCgpIHtcbiAgICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BIZWFkZXInLCBrcEhlYWRlcik7XG5cbiAgZnVuY3Rpb24ga3BIZWFkZXIoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ2hlYWRlckN0cmwnLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NvbW1vbi9jb21wb25lbnRzL2hlYWRlci5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYyhzaWRlYmFyU2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlLCBhdXRoU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uaW5kZW50aXR5ID0gaWRlbnRpdHlTZXJ2aWNlO1xuICAgIHZtLmxvZ291dCA9IGxvZ291dDtcbiAgICB2bS5zaWRlYmFyU3RhdHVzID0gc2lkZWJhclNlcnZpY2UuZ2V0U2lkZWJhclN0YXR1cygpO1xuICAgIHZtLnRvZ2dsZVNpZGViYXIgPSB0b2dnbGVTaWRlYmFyO1xuXG4gICAgZnVuY3Rpb24gdG9nZ2xlU2lkZWJhcigpIHtcbiAgICAgIHZtLnNpZGViYXJTdGF0dXMubGVmdCA9ICF2bS5zaWRlYmFyU3RhdHVzLmxlZnQ7XG4gICAgICBzaWRlYmFyU2VydmljZS5zZXRTaWRlYmFyU3RhdHVzKHZtLnNpZGViYXJTdGF0dXMubGVmdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9nb3V0KCkge1xuICAgICAgYXV0aFNlcnZpY2UubG9nb3V0KCk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdrcFNpZGViYXInLCBrcFNpZGViYXIpO1xuXG4gIGZ1bmN0aW9uIGtwU2lkZWJhcigpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAnc2lkZWJhckN0cmwnLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NvbW1vbi9jb21wb25lbnRzL3NpZGViYXIuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoaWRlbnRpdHlTZXJ2aWNlLCBhdXRoU2VydmljZSwgc2lkZWJhclNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmluZGVudGl0eSA9IGlkZW50aXR5U2VydmljZTtcbiAgICB2bS5sb2dvdXQgPSBsb2dvdXQ7XG4gICAgdm0uc2lkZWJhclN0YXR1cyA9IHNpZGViYXJTZXJ2aWNlLmdldFNpZGViYXJTdGF0dXMoKTtcblxuICAgIGZ1bmN0aW9uIGxvZ291dCgpIHtcbiAgICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5mYWN0b3J5KCdpZGVudGl0eVNlcnZpY2UnLCBpZGVudGl0eVNlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIGlkZW50aXR5U2VydmljZSgkd2luZG93KSB7XG4gICAgdmFyIGN1cnJlbnRVc2VyO1xuICAgIGlmICgkd2luZG93LmJvb3RzdHJhcHBlZFVzZXJPYmplY3QgIT09IG51bGwpIHtcbiAgICAgIGN1cnJlbnRVc2VyID0gJHdpbmRvdy5ib290c3RyYXBwZWRVc2VyT2JqZWN0O1xuICAgIH1cbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGN1cnJlbnRVc2VyOiBjdXJyZW50VXNlcixcbiAgICAgIGlzQXV0aGVudGljYXRlZDogaXNBdXRoZW50aWNhdGVkLFxuICAgICAgaXNBdXRob3JpemVkOiBpc0F1dGhvcml6ZWRcbiAgICB9O1xuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gaXNBdXRoZW50aWNhdGVkKCkge1xuICAgICAgcmV0dXJuICEhdGhpcy5jdXJyZW50VXNlcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0F1dGhvcml6ZWQocm9sZSkge1xuICAgICAgcmV0dXJuICEhdGhpcy5jdXJyZW50VXNlciAmJiB0aGlzLmN1cnJlbnRVc2VyLnJvbGVzLmluZGV4T2Yocm9sZSkgPiAtMTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZmFjdG9yeSgnbm90aWZ5U2VydmljZScsIG5vdGlmeVNlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIG5vdGlmeVNlcnZpY2UoKSB7XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBpbmZvOiBpbmZvLFxuICAgICAgc3VjY2Vzczogc3VjY2VzcyxcbiAgICAgIHdhcm5pbmc6IHdhcm5pbmcsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBpbnZlcnNlOiBpbnZlcnNlXG4gICAgfTtcblxuICAgICQubm90aWZ5RGVmYXVsdHMoe1xuICAgICAgbmV3ZXN0X29uX3RvcDogdHJ1ZSxcbiAgICAgIG9mZnNldDoge1xuICAgICAgICB4OiAyMCxcbiAgICAgICAgeTogODVcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gaW5mbyhtZXNzYWdlLCB1cmwsIHRhcmdldCkge1xuICAgICAgJC5ub3RpZnkoe1xuICAgICAgICAvLyBvcHRpb25zXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgfSwge1xuICAgICAgICAvLyBzZXR0aW5nc1xuICAgICAgICB0eXBlOiAnaW5mbydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN1Y2Nlc3MobWVzc2FnZSwgdXJsLCB0YXJnZXQpIHtcbiAgICAgICQubm90aWZ5KHtcbiAgICAgICAgLy8gb3B0aW9uc1xuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0sIHtcbiAgICAgICAgLy8gc2V0dGluZ3NcbiAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UsIHVybCwgdGFyZ2V0KSB7XG4gICAgICAkLm5vdGlmeSh7XG4gICAgICAgIC8vIG9wdGlvbnNcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgICB9LCB7XG4gICAgICAgIC8vIHNldHRpbmdzXG4gICAgICAgIHR5cGU6ICd3YXJuaW5nJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJyb3IobWVzc2FnZSwgdXJsLCB0YXJnZXQpIHtcbiAgICAgICQubm90aWZ5KHtcbiAgICAgICAgLy8gb3B0aW9uc1xuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0sIHtcbiAgICAgICAgLy8gc2V0dGluZ3NcbiAgICAgICAgdHlwZTogJ2RhbmdlcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmVyc2UobWVzc2FnZSwgdXJsLCB0YXJnZXQpIHtcbiAgICAgICQubm90aWZ5KHtcbiAgICAgICAgLy8gb3B0aW9uc1xuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0sIHtcbiAgICAgICAgLy8gc2V0dGluZ3NcbiAgICAgICAgdHlwZTogJ2ludmVyc2UnXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZmFjdG9yeSgnc2lkZWJhclNlcnZpY2UnLCBzaWRlYmFyU2VydmljZSk7XG5cbiAgZnVuY3Rpb24gc2lkZWJhclNlcnZpY2UoKSB7XG4gICAgdmFyIHNpZGViYXJTdGF0dXMgPSB7XG4gICAgICBsZWZ0OiBmYWxzZSxcbiAgICAgIHJpZ2h0OiBmYWxzZVxuICAgIH07XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBnZXRTaWRlYmFyU3RhdHVzOiBnZXRTaWRlYmFyU3RhdHVzLFxuICAgICAgc2V0U2lkZWJhclN0YXR1czogc2V0U2lkZWJhclN0YXR1c1xuICAgIH07XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGdldFNpZGViYXJTdGF0dXMoKSB7XG4gICAgICByZXR1cm4gc2lkZWJhclN0YXR1cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRTaWRlYmFyU3RhdHVzKHN0YXR1cykge1xuICAgICAgc2lkZWJhclN0YXR1cy5sZWZ0ID0gc3RhdHVzO1xuICAgIH1cbiAgfVxufSkoKTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgLnNlcnZpY2UoJ3dlYnNvY2tldFNlcnZpY2UnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHdpbmRvdykge1xuICAgIGZ1bmN0aW9uIHdlYnNvY2tldEhvc3QoKSB7XG4gICAgICBpZiAoJHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicpIHtcbiAgICAgICAgcmV0dXJuICd3c3M6Ly8nICsgJHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICd3czovLycgKyAkd2luZG93LmxvY2F0aW9uLmhvc3Q7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNvbm5lY3Rpb247XG4gICAgdGhpcy5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgY29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXQod2Vic29ja2V0SG9zdCgpKTtcblxuICAgICAgY29ubmVjdGlvbi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgcGF5bG9hZCA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd3czonICsgcGF5bG9hZC50b3BpYywgcGF5bG9hZC5kYXRhKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHRoaXMuc2VuZCA9IGZ1bmN0aW9uICh0b3BpYywgZGF0YSkge1xuICAgICAgdmFyIGpzb24gPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHRvcGljOiB0b3BpYyxcbiAgICAgICAgZGF0YTogZGF0YVxuICAgICAgfSk7XG4gICAgICBjb25uZWN0aW9uLnNlbmQoanNvbik7XG4gICAgfTtcbiAgfSkucnVuKGZ1bmN0aW9uICh3ZWJzb2NrZXRTZXJ2aWNlKSB7XG4gICAgd2Vic29ja2V0U2VydmljZS5jb25uZWN0KCk7XG4gIH0pOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0hvbWVDdHJsJywgSG9tZUN0cmwpO1xuXG4gIGZ1bmN0aW9uIEhvbWVDdHJsKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7fVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgna3BQeXJhbWlkJywga3BQeXJhbWlkKTtcblxuICBmdW5jdGlvbiBrcFB5cmFtaWQoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICB0ZW1wbGF0ZVVybDogJy9weXJhbWlkcy9jb21wb25lbnRzL3B5cmFtaWQuaHRtbCcsXG4gICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgY29tcGV0aXRpb25JZDogJ0AnXG4gICAgICB9LFxuICAgICAgY29udHJvbGxlcjogY3RybEZ1bmMsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlXG4gICAgfTtcblxuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoJHNjb3BlLCAkc3RhdGUsIHB5cmFtaWRzU2VydmljZSwgJGZpbHRlciwgbm90aWZ5U2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlLCBjaGFsbGVuZ2VzU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0ucHlyYW1pZCA9IHt9O1xuICAgIHZtLmJyZWFrUG9pbnRzID0gW107XG4gICAgdm0ubnVtYmVyT2ZCbG9ja3MgPSAwO1xuICAgIHZtLmN1cnJlbnRVc2VySXNPblB5cmFtaWQgPSBmYWxzZTtcbiAgICB2bS5oYXNBY3RpdmVDaGFsbGVuZ2UgPSBmYWxzZTtcbiAgICB2bS5hdmFpbGFibGVDaGFsbGVuZ2VzID0gZmFsc2U7XG4gICAgdm0uY3JlYXRlQ2hhbGxlbmdlID0gY3JlYXRlQ2hhbGxlbmdlO1xuICAgIHZtLmNvbXBsZXRlQ2hhbGxlbmdlID0gY29tcGxldGVDaGFsbGVuZ2U7XG4gICAgdm0uY2hhbGxlbmdlRXhwaXJlZCA9IGNoYWxsZW5nZUV4cGlyZWQ7XG4gICAgdm0uY3VycmVudFVzZXJQbGF5ZXIgPSB7fTtcbiAgICB2bS5weXJhbWlkTWVudVRvZ2dsZSA9IGZhbHNlO1xuICAgIHZtLmFkZEN1cnJlbnRVc2VyVG9QeXJhbWlkID0gYWRkQ3VycmVudFVzZXJUb1B5cmFtaWQ7XG4gICAgdm0ucmVtb3ZlQ3VycmVudFVzZXJGcm9tUHlyYW1pZCA9IHJlbW92ZUN1cnJlbnRVc2VyRnJvbVB5cmFtaWQ7XG4gICAgdm0ubnVtYmVyT2ZSZWFsUGxheWVycyA9IDA7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBweXJhbWlkc1NlcnZpY2UuZ2V0UHlyYW1pZCh2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChweXJhbWlkKSB7XG4gICAgICAgIGlmIChweXJhbWlkLmRhdGEpIHtcbiAgICAgICAgICB2bS5weXJhbWlkID0gcHlyYW1pZC5kYXRhO1xuXG4gICAgICAgICAgLy8gVGhpcyBkb2Vzbid0IGNoYW5nZSBvbiByZWZyZXNoJ1xuICAgICAgICAgIHZtLmxldmVscyA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHB5cmFtaWQuZGF0YS5sZXZlbHM7ICsraSkge1xuICAgICAgICAgICAgdm0ubGV2ZWxzLnB1c2goaSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb3JkZXJQbGF5ZXJzKCk7XG4gICAgICAgICAgZ2V0UGxheWVyc1N0YXR1cygpO1xuICAgICAgICAgIGNhbGN1bGF0ZVB5cmFtaWRCbG9ja3MoKTtcbiAgICAgICAgICBmaWxsSW5FbXB0eUJsb2NrcygpO1xuICAgICAgICAgIGFzc2lnbkxldmVsc1RvUGxheWVycygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRzdGF0ZS5nbygncHlyYW1pZHMubXlQeXJhbWlkcycpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcmRlciB0aGUgcGxheWVycyBieSB0aGUgcG9zaXRpb24gcHJvcGVydHkgb2YgdGhlIHBsYXllcnMgYXJyYXkgaW4gdGhlIHB5cmFtaWQgb2JqZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gb3JkZXJQbGF5ZXJzKCkge1xuICAgICAgdm0ucHlyYW1pZC5wbGF5ZXJzID0gJGZpbHRlcignb3JkZXJCeScpKHZtLnB5cmFtaWQucGxheWVycywgJ3Bvc2l0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlndXJlIG91dCBpZiBlYWNoIHBsYXllciBpcyBhbHJlYWR5IGNoYWxsZW5nZWQgYW5kIHNldCBzb21lIHN0dWZmXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UGxheWVyc1N0YXR1cygpIHtcbiAgICAgIF8uZm9yRWFjaCh2bS5weXJhbWlkLnBsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcblxuICAgICAgICAvLyBGaW5kIHRoZSBjdXJyZW50IHVzZXIgaWYgdGhleSBhcmUgb24gdGhpcyBweXJhbWlkIGFuZCBzZXQgc29tZSBwcm9wZXJ0aWVzXG4gICAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkgJiYgcGxheWVyLl9pZCA9PT0gaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZCkge1xuICAgICAgICAgIHZtLmN1cnJlbnRVc2VySXNPblB5cmFtaWQgPSB0cnVlO1xuICAgICAgICAgIHBsYXllci5jbGFzcyA9ICdjdXJyZW50LXVzZXInO1xuICAgICAgICAgIHZtLmN1cnJlbnRVc2VyUGxheWVyID0gcGxheWVyO1xuXG4gICAgICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyKHZtLmNvbXBldGl0aW9uSWQsIHBsYXllci5faWQpLnRoZW4oZnVuY3Rpb24gKGNoYWxsZW5nZSkge1xuICAgICAgICAgICAgaWYgKGNoYWxsZW5nZS5kYXRhKSB7XG4gICAgICAgICAgICAgIHZtLmhhc0FjdGl2ZUNoYWxsZW5nZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRBY3RpdmVDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChjaGFsbGVuZ2VzKSB7XG4gICAgICAgIF8uZm9yRWFjaChjaGFsbGVuZ2VzLmRhdGEsIGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcblxuICAgICAgICAgIHZhciBjaGFsbGVuZ2VyID0gXy5maW5kKHZtLnB5cmFtaWQucGxheWVycywgeyAnX2lkJzogY2hhbGxlbmdlLmNoYWxsZW5nZXIuX2lkIH0pO1xuICAgICAgICAgIGNoYWxsZW5nZXIuY2xhc3MgPSAndW5hdmFpbGFibGUnO1xuICAgICAgICAgIGNoYWxsZW5nZXIuY2hhbGxlbmdlID0ge1xuICAgICAgICAgICAgcG9zaXRpb246ICdjaGFsbGVuZ2VyJ1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICB2YXIgb3Bwb25lbnQgPSBfLmZpbmQodm0ucHlyYW1pZC5wbGF5ZXJzLCB7ICdfaWQnOiBjaGFsbGVuZ2Uub3Bwb25lbnQuX2lkIH0pO1xuICAgICAgICAgIG9wcG9uZW50LmNsYXNzID0gJ3VuYXZhaWxhYmxlJztcbiAgICAgICAgICBvcHBvbmVudC5jaGFsbGVuZ2UgPSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ29wcG9uZW50J1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICAvLyBUcmFjayB3aGVuIHRoZSBjaGFsbGVuZ2Ugd2lsbCBleHBpcmVcbiAgICAgICAgICBpZiAoY2hhbGxlbmdlLnRpbWVMaW1pdCAhPT0gMCkge1xuICAgICAgICAgICAgdmFyIHRpbWVUb0V4cGlyZSA9IG1vbWVudCgpLmRpZmYobW9tZW50KGNoYWxsZW5nZS5jcmVhdGVkKS5hZGQoY2hhbGxlbmdlLnRpbWVMaW1pdCwgJ2QnKSwgJ3MnKSAqIC0xO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGNoYWxsZW5nZSBoYXMgbm90IHlldCBleHBpcmVkIGRpc3BsYXkgYSBjb3VudGRvd24gb24gdGhlIG9wcG9uZW50XG4gICAgICAgICAgICBpZiAodGltZVRvRXhwaXJlID4gMCkge1xuICAgICAgICAgICAgICBvcHBvbmVudC5jaGFsbGVuZ2UuZXhwaXJlcyA9IHRpbWVUb0V4cGlyZTtcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIGNoYWxsZW5nZSBleHBpcmVkIHdoaWxlIG5vIG9uZSB3YXMgdmlld2luZyB0aGlzIHB5cmFtaWQgY29tcGxldGUgdGhlIGNoYWxsZW5nZSBieSBmb3JmZWl0XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRpbWVUb0V4cGlyZSA8PSAwKSB7XG4gICAgICAgICAgICAgIGNvbXBsZXRlQ2hhbGxlbmdlKG51bGwsIHRydWUsIG9wcG9uZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBOb3cgdGhhdCB3ZSBrbm93IHdoaWNoIHBsYXllcnMgYXJlIGluIGNoYWxsZW5nZXMgYW5kIHdoaWNoIGFyZW4ndFxuICAgICAgICAvLyBmaW5kIHRoZSBhdmFpbGFibGUgY2hhbGxlbmdlcyBmb3IgdGhpcyB1c2VyXG4gICAgICAgIGZpbmRBdmFpbGFibGVDaGFsbGVuZ2VzKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWd1cmUgb3V0IHdoZXJlIHRvIHN0YXJ0IGVhY2ggbmV3IHJvdyBvbiB0aGUgcHlyYW1pZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJyZWFrUG9pbnRzKCkge1xuICAgICAgdm0uYnJlYWtQb2ludHMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0ucHlyYW1pZC5sZXZlbHM7IGkrKykge1xuICAgICAgICB2bS5icmVha1BvaW50cy5wdXNoKCgoKGkgKiAoaSArIDEpKSAvIDIpKSArIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhvdyBtYW55IHRvdGFsIGJsb2NrcyBpbiB0aGlzIHB5cmFtaWRcbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVQeXJhbWlkQmxvY2tzKCkge1xuICAgICAgdm0ubnVtYmVyT2ZCbG9ja3MgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IHZtLnB5cmFtaWQubGV2ZWxzOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIHZtLm51bWJlck9mQmxvY2tzICs9IGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRmlsbCBvdXQgdGhlIHJlbWFpbmluZyBibG9ja3Mgb2YgdGhlIHB5cmFtaWQgd2l0aCBlbXB0eSBibG9ja3NcbiAgICBmdW5jdGlvbiBmaWxsSW5FbXB0eUJsb2NrcygpIHtcbiAgICAgIHZtLm51bWJlck9mUmVhbFBsYXllcnMgPSB2bS5weXJhbWlkLnBsYXllcnMubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IHZtLnB5cmFtaWQucGxheWVycy5sZW5ndGg7IGkgPCB2bS5udW1iZXJPZkJsb2NrczsgaSsrKSB7XG4gICAgICAgIHZtLnB5cmFtaWQucGxheWVycy5wdXNoKHtcbiAgICAgICAgICBmaXJzdE5hbWU6ICdFbXB0eScsXG4gICAgICAgICAgbGFzdE5hbWU6ICdTcG90JyxcbiAgICAgICAgICBwb3NpdGlvbjogOTksXG4gICAgICAgICAgY2xhc3M6ICdlbXB0eSdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gR2l2ZSBlYWNoIHBsYXllciBhIGxldmVsIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBicmVhayBwb2ludHNcbiAgICAvLyBUaGlzIHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgd2hvIG90aGVyIHBsYXllcnMgY2FuIGNoYWxsZW5nZVxuICAgIGZ1bmN0aW9uIGFzc2lnbkxldmVsc1RvUGxheWVycygpIHtcbiAgICAgIHZhciBsZXZlbCA9IDA7XG4gICAgICBjcmVhdGVCcmVha1BvaW50cygpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS5weXJhbWlkLnBsYXllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHZtLmJyZWFrUG9pbnRzLmluZGV4T2YoaSArIDEpID4gLTEpIHtcbiAgICAgICAgICBsZXZlbCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIHZtLnB5cmFtaWQucGxheWVyc1tpXS5sZXZlbCA9IGxldmVsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmQgYWxsIHRoZSBwbGF5ZXJzIHRoYXQgYXJlIGF2YWlsYWJsZSB0byBiZSBjaGFsbGVuZ2VkIGJ5IHRoaXMgdXNlclxuICAgIGZ1bmN0aW9uIGZpbmRBdmFpbGFibGVDaGFsbGVuZ2VzKCkge1xuICAgICAgdmFyIGxldmVsQWJvdmUgPSB2bS5jdXJyZW50VXNlclBsYXllci5sZXZlbCA+IDEgPyB2bS5jdXJyZW50VXNlclBsYXllci5sZXZlbCAtIDEgOiBudWxsO1xuICAgICAgXy5mb3JFYWNoKHZtLnB5cmFtaWQucGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICBpZiAocGxheWVyLmxldmVsID09PSBsZXZlbEFib3ZlICYmIHBsYXllci5wb3NpdGlvbiAhPT0gOTkgJiYgcGxheWVyLmNsYXNzICE9PSAndW5hdmFpbGFibGUnKSB7XG4gICAgICAgICAgdm0uYXZhaWxhYmxlQ2hhbGxlbmdlcyA9IHRydWU7XG4gICAgICAgICAgcGxheWVyLmF2YWlsYWJsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoYWxsZW5nZShwbGF5ZXIpIHtcbiAgICAgIGlmICghcGxheWVyLmF2YWlsYWJsZSkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdTb3JyeSwgdGhhdCBpcyBub3QgYSB2YWxpZCBjaGFsbGVuZ2UuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bS5oYXNBY3RpdmVDaGFsbGVuZ2UgPSB0cnVlO1xuICAgICAgICB2YXIgY2hhbGxlbmdlID0ge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IHZtLmNvbXBldGl0aW9uSWQsXG4gICAgICAgICAgY29tcGxldGU6IGZhbHNlLFxuICAgICAgICAgIGZvcmZlaXQ6IGZhbHNlLFxuICAgICAgICAgIHRpbWVMaW1pdDogdm0ucHlyYW1pZC5mb3JmZWl0RGF5cyxcbiAgICAgICAgICBjaGFsbGVuZ2VyOiB7XG4gICAgICAgICAgICBfaWQ6IHZtLmN1cnJlbnRVc2VyUGxheWVyLl9pZCxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogdm0uY3VycmVudFVzZXJQbGF5ZXIuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IHZtLmN1cnJlbnRVc2VyUGxheWVyLmxhc3ROYW1lLFxuICAgICAgICAgICAgbmlja25hbWU6IHZtLmN1cnJlbnRVc2VyUGxheWVyLm5pY2tuYW1lLFxuICAgICAgICAgICAgcG9zaXRpb246IHZtLmN1cnJlbnRVc2VyUGxheWVyLnBvc2l0aW9uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHBvbmVudDoge1xuICAgICAgICAgICAgX2lkOiBwbGF5ZXIuX2lkLFxuICAgICAgICAgICAgZmlyc3ROYW1lOiBwbGF5ZXIuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IHBsYXllci5sYXN0TmFtZSxcbiAgICAgICAgICAgIG5pY2tuYW1lOiBwbGF5ZXIubmlja25hbWUsXG4gICAgICAgICAgICBwb3NpdGlvbjogcGxheWVyLnBvc2l0aW9uXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBDcmVhdGUgdGhlIGNoYWxsZW5nZVxuICAgICAgICAvLyBXZWJzb2NrZXQgZXZlbnQgd2lsbCByZWZyZXNoIHRoZSBweXJhbWlkXG4gICAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmNyZWF0ZUNoYWxsZW5nZShjaGFsbGVuZ2UpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZtLnB5cmFtaWRNZW51VG9nZ2xlID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wbGV0ZSBhIGNoYWxsZW5nZSBieSBhIHVzZXIgaW50ZXJhY3Rpb24gb3IgYSBmb3JmZWl0XG4gICAgICogXG4gICAgICogQHBhcmFtICB7Ym9vbGVhbn0gd2lubmVySXNDdXJyZW50VXNlclxuICAgICAqIEBwYXJhbSAge2Jvb2xlYW59IGZvcmZlaXRcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IGZvcmZlaXRMb3NlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBsZXRlQ2hhbGxlbmdlKHdpbm5lcklzQ3VycmVudFVzZXIsIGZvcmZlaXQsIGZvcmZlaXRMb3Nlcikge1xuICAgICAgdmFyIHBsYXllciA9IGZvcmZlaXRMb3NlciB8fCB2bS5jdXJyZW50VXNlclBsYXllcjtcbiAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmdldEFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllcih2bS5jb21wZXRpdGlvbklkLCBwbGF5ZXIuX2lkKS50aGVuKGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIHN3YXBQb3NpdGlvbnMgPSBmYWxzZTtcblxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIGZvcmZlaXRcbiAgICAgICAgaWYgKGZvcmZlaXQpIHtcbiAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS5mb3JmZWl0ID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZm9yZmVpdExvc2VyLmNoYWxsZW5nZS5wb3NpdGlvbiA9PT0gJ29wcG9uZW50Jykge1xuICAgICAgICAgICAgY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlci53aW5uZXIgPSB0cnVlO1xuICAgICAgICAgICAgc3dhcFBvc2l0aW9ucyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5kYXRhLm9wcG9uZW50Lndpbm5lciA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEZpZ3VyZSBvdXQgd2hvIHRoZSB3aW5uZXIgd2FzIHRvIHN0b3JlIGluIHRoZSBjaGFsbGVuZ2UgcmVjb3JkXG4gICAgICAgIH0gZWxzZSBpZiAod2lubmVySXNDdXJyZW50VXNlcikge1xuICAgICAgICAgIGlmIChjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2VyLl9pZCA9PT0gdm0uY3VycmVudFVzZXJQbGF5ZXIuX2lkKSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2VyLndpbm5lciA9IHRydWU7XG4gICAgICAgICAgICBzd2FwUG9zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hhbGxlbmdlLmRhdGEub3Bwb25lbnQud2lubmVyID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNoYWxsZW5nZS5kYXRhLmNoYWxsZW5nZXIuX2lkID09PSB2bS5jdXJyZW50VXNlclBsYXllci5faWQpIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5kYXRhLm9wcG9uZW50Lndpbm5lciA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5kYXRhLmNoYWxsZW5nZXIud2lubmVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHN3YXBQb3NpdGlvbnMgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN3YXAgcG9zaXRpb25zIGFuZCB0aGVuIGNvbXBsZXRlIHRoZSBjaGFsbGVuZ2Ugb3IganVzdCBjb21wbGV0ZSB0aGUgY2hhbGxlbmdlXG4gICAgICAgIC8vIFdlYnNvY2tldCBldmVudCB3aWxsIHJlZnJlc2ggdGhlIHB5cmFtaWRcbiAgICAgICAgaWYgKHN3YXBQb3NpdGlvbnMpIHtcbiAgICAgICAgICBweXJhbWlkc1NlcnZpY2Uuc3dhcFBvc2l0aW9ucyh2bS5jb21wZXRpdGlvbklkLCBjaGFsbGVuZ2UuZGF0YS5vcHBvbmVudCwgY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlcikudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2VzU2VydmljZS5jb21wbGV0ZUNoYWxsZW5nZShjaGFsbGVuZ2UuZGF0YSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmIChyZW1vdmluZ0N1cnJlbnRVc2VyKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ3VycmVudFVzZXJGcm9tUHlyYW1pZCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFsbGVuZ2VzU2VydmljZS5jb21wbGV0ZUNoYWxsZW5nZShjaGFsbGVuZ2UuZGF0YSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAocmVtb3ZpbmdDdXJyZW50VXNlcikge1xuICAgICAgICAgICAgICByZW1vdmVDdXJyZW50VXNlckZyb21QeXJhbWlkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2bS5weXJhbWlkTWVudVRvZ2dsZSA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxzIHRoZSBjb21wbGV0ZSBjaGFsbG5nZSBmdW5jdGlvbiB3aXRoIHRoZSBmb3JmZWl0aW5nIHBsYXllclxuICAgICAqIEBwYXJhbSAge29iamVjdH0gcGxheWVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhbGxlbmdlRXhwaXJlZChwbGF5ZXIpIHtcbiAgICAgIGNvbXBsZXRlQ2hhbGxlbmdlKG51bGwsIHRydWUsIHBsYXllcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIGN1cnJlbnQgdXNlciB0aGUgcHlyYW1pZCBcbiAgICAgKiBpZiB0aGV5J3JlIG5vdCBhbHJlYWR5IG9uIGl0IGFuZCB0aGVyZSdzIHNwYWNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkQ3VycmVudFVzZXJUb1B5cmFtaWQoKSB7XG4gICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgIGlmICh2bS5udW1iZXJPZlJlYWxQbGF5ZXJzIDwgdm0ubnVtYmVyT2ZCbG9ja3MpIHtcbiAgICAgICAgICB2YXIgcGxheWVyID0ge1xuICAgICAgICAgICAgX2lkOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuX2lkLFxuICAgICAgICAgICAgZmlyc3ROYW1lOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5sYXN0TmFtZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB2bS5udW1iZXJPZlJlYWxQbGF5ZXJzICsgMVxuICAgICAgICAgIH07XG4gICAgICAgICAgcHlyYW1pZHNTZXJ2aWNlLmFkZFBsYXllclRvUHlyYW1pZCh2bS5jb21wZXRpdGlvbklkLCBwbGF5ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vdGlmeVNlcnZpY2Uud2FybmluZygnU29ycnksIHRoaXMgcHlyYW1pZCBpcyBmdWxsJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRzdGF0ZS5nbygnbG9naW4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVc2UgdGhpcyB0byBlbmZvcmNlIG9yZGVyIG9mIG9wZXJhdGlvbnMgd2hlbiB0aGUgcGxheWVyIHRvIGJlIHJlbW92ZWQgaGFkIGFuIGFjdGl2ZSBjaGFsbGVuZ2VcbiAgICB2YXIgcmVtb3ZpbmdDdXJyZW50VXNlciA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gcmVtb3ZlQ3VycmVudFVzZXJGcm9tUHlyYW1pZCgpIHtcbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgdXNlciBpcyBsb2dnZWQgaW4gYW5kIGlzIG9uIHRoaXMgcHlyYW1pZFxuICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSAmJiB2bS5jdXJyZW50VXNlcklzT25QeXJhbWlkKSB7XG4gICAgICAgIHJlbW92aW5nQ3VycmVudFVzZXIgPSB0cnVlO1xuICAgICAgICAvLyBGb3JmZWl0IGlmIHRoZXkgaGF2ZSBhbiBhY3RpdmUgY2hhbGxlbmdlXG4gICAgICAgIGlmICh2bS5oYXNBY3RpdmVDaGFsbGVuZ2UpIHtcbiAgICAgICAgICBjb21wbGV0ZUNoYWxsZW5nZShudWxsLCB0cnVlLCB2bS5jdXJyZW50VXNlclBsYXllcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU2luY2Ugd2UgYXJlIHJlbW92aW5nIHRoZW0gLi4uXG4gICAgICAgICAgdm0uY3VycmVudFVzZXJJc09uUHlyYW1pZCA9IGZhbHNlO1xuICAgICAgICAgIHZtLmhhc0FjdGl2ZUNoYWxsZW5nZSA9IGZhbHNlO1xuXG4gICAgICAgICAgLy8gR2V0IGFuIHVwZGF0ZWQgY29weSBvZiB0aGUgcHlyYW1pZCBpbmNhc2UgYSBmb3JmZWl0IGhhcHBlbmVkXG4gICAgICAgICAgcHlyYW1pZHNTZXJ2aWNlLmdldFB5cmFtaWQodm0uY29tcGV0aXRpb25JZCkudGhlbihmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgLy8gU3RvcmUgdGhlIHVwZGF0ZWQgY29weSBsb2NhbGx5IHNvIGFzIG5vdCB0byBkaXN0cnVwdCB0aGUgcHlyYW1pZFxuICAgICAgICAgICAgLy8gdW50aWwgdGhlIHBsYXllciBoYXMgYmVlbiByZW1vdmVkXG4gICAgICAgICAgICB2YXIgcHlyYW1pZCA9IHAuZGF0YTtcblxuICAgICAgICAgICAgLy8gS2VlcCB0cmFjayBvZiB0aGUgc3BvdCB0aGV5IHdlcmUgaW4gb24gdGhlIHB5cmFtaWRcbiAgICAgICAgICAgIHZhciBvcGVuUG9zaXRpb24gPSB2bS5jdXJyZW50VXNlclBsYXllci5wb3NpdGlvbjtcblxuICAgICAgICAgICAgLy8gTW92ZSBhbGwgdGhlIHBsYXllcnMgdXAgMSBwb3NpdGlvbiB0aGF0IHdlcmUgYmVoaW5kIHRoZSByZW1vdmVkIHBsYXllclxuICAgICAgICAgICAgXy5mb3JFYWNoKHB5cmFtaWQucGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICAgICAgICBpZiAocGxheWVyLnBvc2l0aW9uID49IG9wZW5Qb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHBsYXllci5wb3NpdGlvbiAtPSAxO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gUmVtb3ZlZCB0aGUgcGxheWVyIGZyb20gdGhlIHB5cmFtaWRcbiAgICAgICAgICAgIHZhciByZW1vdmVkUGxheWVyID0gXy5yZW1vdmUocHlyYW1pZC5wbGF5ZXJzLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwbGF5ZXIuX2lkID09PSB2bS5jdXJyZW50VXNlclBsYXllci5faWQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gTWFrZSBhIG5ldyBhcnJheSBvZiBhbGwgdGhlIHBsYXllcnMgc3RpbGwgb24gdGhlIHB5cmFtaWRcbiAgICAgICAgICAgIC8vIG9ubHkgdXNlIHRoZSBwcm9wZXJ0aWVzIHdlIHdhbnQgdG8gc3RvcmUgaW4gdGhlIHB5cmFtaWQgZG9jdW1lbnRcbiAgICAgICAgICAgIHZhciB1cGRhdGVkUGxheWVycyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS5udW1iZXJPZlJlYWxQbGF5ZXJzIC0gMTsgKytpKSB7XG4gICAgICAgICAgICAgIHZhciB1cGRhdGVkUGxheWVyID0ge1xuICAgICAgICAgICAgICAgIF9pZDogcHlyYW1pZC5wbGF5ZXJzW2ldLl9pZCxcbiAgICAgICAgICAgICAgICBmaXJzdE5hbWU6IHB5cmFtaWQucGxheWVyc1tpXS5maXJzdE5hbWUsXG4gICAgICAgICAgICAgICAgbGFzdE5hbWU6IHB5cmFtaWQucGxheWVyc1tpXS5sYXN0TmFtZSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcHlyYW1pZC5wbGF5ZXJzW2ldLnBvc2l0aW9uXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgdXBkYXRlZFBsYXllcnMucHVzaCh1cGRhdGVkUGxheWVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2FsbCBzZXJ2aWNlIHRvIHJlbW92ZSB0aGUgcGxheWVyXG4gICAgICAgICAgICBweXJhbWlkc1NlcnZpY2UucmVtb3ZlZFBsYXllckZyb21QeXJhbWlkKHZtLmNvbXBldGl0aW9uSWQsIHJlbW92ZWRQbGF5ZXJbMF0sIHVwZGF0ZWRQbGF5ZXJzKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmVtb3ZpbmdDdXJyZW50VXNlciA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWZyZXNoIHRoZSBweXJhbWlkIGJlY2FzdWUgb2YgYW4gdXBkYXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVmcmVzaFB5cmFtaWQoKSB7XG4gICAgICBweXJhbWlkc1NlcnZpY2UuZ2V0UHlyYW1pZCh2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChweXJhbWlkKSB7XG4gICAgICAgIHZtLnB5cmFtaWQgPSBweXJhbWlkLmRhdGE7XG4gICAgICAgIG9yZGVyUGxheWVycygpO1xuICAgICAgICBnZXRQbGF5ZXJzU3RhdHVzKCk7XG4gICAgICAgIGZpbGxJbkVtcHR5QmxvY2tzKCk7XG4gICAgICAgIGFzc2lnbkxldmVsc1RvUGxheWVycygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNoYWxsZW5nZV9jcmVhdGVkJywgZnVuY3Rpb24gKF8sIGNoYWxsZW5nZURldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5pbmZvKGNoYWxsZW5nZURldGFpbHMuZGVzY3JpcHRpb24pO1xuICAgICAgICByZWZyZXNoUHlyYW1pZCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gV2F0Y2ggZm9yIHdlYnNvY2tldCBldmVudFxuICAgICRzY29wZS4kb24oJ3dzOmNoYWxsZW5nZV9jb21wbGV0ZWQnLCBmdW5jdGlvbiAoXywgY2hhbGxlbmdlRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNoYWxsZW5nZURldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oY2hhbGxlbmdlRGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgIGlmICghcmVtb3ZpbmdDdXJyZW50VXNlcikge1xuICAgICAgICAgIHJlZnJlc2hQeXJhbWlkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czpwbGF5ZXJfYWRkZWQnLCBmdW5jdGlvbiAoXywgZGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGRldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oZGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgIHJlZnJlc2hQeXJhbWlkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6cGxheWVyX3JlbW92ZWQnLCBmdW5jdGlvbiAoXywgZGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGRldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oZGV0YWlscy5kZXNjcmlwdGlvbik7XG4gICAgICAgIHJlZnJlc2hQeXJhbWlkKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuZmFjdG9yeSgncHlyYW1pZHNTZXJ2aWNlJywgcHlyYW1pZHNTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBweXJhbWlkc1NlcnZpY2UoJGh0dHApIHtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGdldFB5cmFtaWQ6IGdldFB5cmFtaWQsXG4gICAgICBnZXRQeXJhbWlkc0ZvclVzZXI6IGdldFB5cmFtaWRzRm9yVXNlcixcbiAgICAgIGNyZWF0ZVB5cmFtaWQ6IGNyZWF0ZVB5cmFtaWQsXG4gICAgICBzd2FwUG9zaXRpb25zOiBzd2FwUG9zaXRpb25zLFxuICAgICAgYWRkUGxheWVyVG9QeXJhbWlkOiBhZGRQbGF5ZXJUb1B5cmFtaWQsXG4gICAgICByZW1vdmVkUGxheWVyRnJvbVB5cmFtaWQ6IHJlbW92ZWRQbGF5ZXJGcm9tUHlyYW1pZFxuICAgIH07XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgYSBweXJhbWlkIGZyb20gdGhlIGRhdGFiYXNlIChvciBtZW1vcnkpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcHlyYW1pZCBpZCBmb3IgdGhlIHJlcXVlc3RlZCBweXJhbWlkXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBweXJhbWlkXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UHlyYW1pZChweXJhbWlkSWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcHlyYW1pZCcsIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgcHlyYW1pZElkOiBweXJhbWlkSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgcHlyYW1pZHMgZnJvbSB0aGUgZGF0YWJhc2UgdGhlIGEgcGFydGljdWxhciB1c2VyIGlzIGluY2x1ZGVkIGluXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3VzZXJJZH0gdGhlIHVzZXIgaWQgZm9yIHRoZSByZXF1ZXN0ZWQgdXNlclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gcHlyYW1pZHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRQeXJhbWlkc0ZvclVzZXIodXNlcklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3B5cmFtaWRzL3VzZXInLCB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIHVzZXJJZDogdXNlcklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVB5cmFtaWQocHlyYW1pZCkge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcHlyYW1pZHMvY3JlYXRlJywge1xuICAgICAgICBweXJhbWlkOiBweXJhbWlkXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzd2FwUG9zaXRpb25zKHB5cmFtaWRJZCwgY2hhbGxlbmdlciwgb3Bwb25lbnQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3B5cmFtaWRzL3N3YXBQb3NpdGlvbnMnLCB7XG4gICAgICAgIHB5cmFtaWRJZDogcHlyYW1pZElkLFxuICAgICAgICBjaGFsbGVuZ2VyOiBjaGFsbGVuZ2VyLFxuICAgICAgICBvcHBvbmVudDogb3Bwb25lbnRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFBsYXllclRvUHlyYW1pZChweXJhbWlkSWQsIHBsYXllcikge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcHlyYW1pZHMvYWRkUGxheWVyJywge1xuICAgICAgICBweXJhbWlkSWQ6IHB5cmFtaWRJZCxcbiAgICAgICAgcGxheWVyOiBwbGF5ZXJcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZWRQbGF5ZXJGcm9tUHlyYW1pZChweXJhbWlkSWQsIHJlbW92ZWRQbGF5ZXIsIHBsYXllcnMpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3B5cmFtaWRzL3JlbW92ZVBsYXllcicsIHtcbiAgICAgICAgcHlyYW1pZElkOiBweXJhbWlkSWQsXG4gICAgICAgIHJlbW92ZWRQbGF5ZXI6IHJlbW92ZWRQbGF5ZXIsXG4gICAgICAgIHBsYXllcnM6IHBsYXllcnNcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIvKipcbiAqIENyZWF0ZXMgYSBweXJhbWlkXG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0NyZWF0ZVB5cmFtaWRDdHJsJywgQ3JlYXRlUHlyYW1pZEN0cmwpO1xuXG4gIGZ1bmN0aW9uIENyZWF0ZVB5cmFtaWRDdHJsKCRzY29wZSwgJHN0YXRlLCB1c2VyU2VydmljZSwgcHlyYW1pZHNTZXJ2aWNlLCBub3RpZnlTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5uZXdQeXJhbWlkID0ge1xuICAgICAgcGxheWVyczogW11cbiAgICB9O1xuICAgIHZtLmF2YWlsYWJsZVBsYXllcnMgPSBbXTtcbiAgICB2bS5hZGRlZFBsYXllcnMgPSBbXTtcbiAgICB2bS5jcmVhdGVQeXJhbWlkID0gY3JlYXRlUHlyYW1pZDtcbiAgICB2bS5hZGRQbGF5ZXIgPSBhZGRQbGF5ZXI7XG4gICAgdm0ucmVtb3ZlUGxheWVyID0gcmVtb3ZlUGxheWVyO1xuICAgIHZtLmFsbG93ZWRQbGF5ZXJzID0gMTA7XG4gICAgdm0ubmV3UHlyYW1pZC5sZXZlbHMgPSA0O1xuICAgIHZtLm5ld1B5cmFtaWQuZm9yZmVpdERheXMgPSAxO1xuXG4gICAgYWN0aXZhdGUoKTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBSdW5zIG9uIGNvbnRyb2xsZXIgaW5zdGFudGlhdGlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgdXNlclNlcnZpY2UuZ2V0QWxsVXNlcnMoKS50aGVuKGZ1bmN0aW9uICh1c2Vycykge1xuICAgICAgICB2bS5hdmFpbGFibGVQbGF5ZXJzID0gdXNlcnMuZGF0YTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBwbGF5ZXIgdG8gdGhlIG5ldyBweXJhbWlkXG4gICAgICogQ2hlY2tzIHRvIG1ha2Ugc3VyZSB5b3UgYXJlIG5vdCBhZGRpbmcgdG9vIG1hbnkgcGxheWVyc1xuICAgICAqIEBwYXJhbSAge29iamVjdH0gcGxheWVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkUGxheWVyKHBsYXllcikge1xuICAgICAgaWYodm0uYWRkZWRQbGF5ZXJzLmxlbmd0aCA8IHZtLmFsbG93ZWRQbGF5ZXJzKSB7XG4gICAgICAgIHZtLmFkZGVkUGxheWVyQWRkZWQgPSB0cnVlO1xuICAgICAgICB2bS5hZGRlZFBsYXllcnMucHVzaChfLnJlbW92ZSh2bS5hdmFpbGFibGVQbGF5ZXJzLCB7X2lkOiBwbGF5ZXIuX2lkfSlbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5lcnJvcignQWxsIHNwb3RzIGhhdmUgYmVlbiBmaWxsZWQuPGJyIC8+SWYgeW91IHdhbnQgdG8gYWRkIG1vcmUgcGVvcGxlIHBsZWFzZSBpbmNyZWFzZSB0aGUgbGV2ZWxzLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBwcmV2aXVvc2x5IGFkZGVkIHBsYXllciBmcm9tIHRoZSBweXJhbWlkXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBwbGF5ZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVQbGF5ZXIocGxheWVyKSB7XG4gICAgICB2bS5hZGRlZFBsYXllckFkZGVkID0gZmFsc2U7XG4gICAgICB2bS5hdmFpbGFibGVQbGF5ZXJzLnB1c2goXy5yZW1vdmUodm0uYWRkZWRQbGF5ZXJzLCB7X2lkOiBwbGF5ZXIuX2lkfSlbMF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIG51bWJlciBvZiBhbGxvd2VkIHBsYXllcnMgZm9yIHRoZSBweXJhbWlkXG4gICAgICogYmFzZWQgb24gdGhlIG51bWJlciBvZiBsZXZlbHMgY2hvc2VuXG4gICAgICogUmVtb3ZlcyBleHRyYSBwbGF5ZXJzIGFuZCBtYWtlcyB0aGVtIGF2YWlsYWJsZSBhZ2FpblxuICAgICAqIEBwYXJhbSAge251bWJlcn0gbGV2ZWxzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlQWxsb3dlZFBsYXllcnMobGV2ZWxzKSB7XG4gICAgICB2bS5hbGxvd2VkUGxheWVycyA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gbGV2ZWxzOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIHZtLmFsbG93ZWRQbGF5ZXJzICs9IGk7XG4gICAgICB9XG4gICAgICBpZiAodm0uYWRkZWRQbGF5ZXJzLmxlbmd0aCA+IHZtLmFsbG93ZWRQbGF5ZXJzKSB7XG4gICAgICAgIHZhciByZW1vdmVkUGxheWVycyA9IHZtLmFkZGVkUGxheWVycy5zcGxpY2Uodm0uYWxsb3dlZFBsYXllcnMpO1xuICAgICAgICB2bS5hdmFpbGFibGVQbGF5ZXJzID0gdm0uYXZhaWxhYmxlUGxheWVycy5jb25jYXQocmVtb3ZlZFBsYXllcnMpO1xuICAgICAgICBub3RpZnlTZXJ2aWNlLndhcm5pbmcoJ1BsYXllcnMgd2VyZSByZW1vdmVkIGJlY2FzdWUgdGhlcmUgYXJlIG5vdCBlbm91Z2ggc3BvdHMgb24gdGhlIHB5cmFtaWQuJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXYWN0aCBmb3IgY2hhbmdlcyB0byB0aGUgcHlyYW1pZCBsZXZlbHMgbW9kZWwgYW5kIHVwZGF0ZSB0aGUgbnVtYmVyIG9mIGFsbG93ZWQgcGxheWVyc1xuICAgICRzY29wZS4kd2F0Y2goJ3ZtLm5ld1B5cmFtaWQubGV2ZWxzJywgZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwpIHtcbiAgICAgIGlmIChuZXdWYWwgIT09IG9sZFZhbCkge1xuICAgICAgICB1cGRhdGVBbGxvd2VkUGxheWVycyhuZXdWYWwpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVXNlZCB0byBrZWVwIHRyYWNrIG9mIHBvc2l0aW9uIG9uIHRoZSBweXJhbWlkIGJhc2VkIG9uIHdoZW4gdGhlIHBsYXllciB3YXMgYWRkZWRcbiAgICB2YXIgcG9zaXRpb24gPSAwO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSBweXJhbWlkXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBweXJhbWlkXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUHlyYW1pZChweXJhbWlkKSB7XG4gICAgICBhbmd1bGFyLmZvckVhY2godm0uYWRkZWRQbGF5ZXJzLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgIHBvc2l0aW9uICs9IDE7XG4gICAgICAgIHZhciBhZGRQbGF5ZXIgPSB7XG4gICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICAgIF9pZDogcGxheWVyLl9pZCxcbiAgICAgICAgICBmaXJzdE5hbWU6IHBsYXllci5maXJzdE5hbWUsXG4gICAgICAgICAgbGFzdE5hbWU6IHBsYXllci5sYXN0TmFtZSxcbiAgICAgICAgICBuaWNrbmFtZTogcGxheWVyLm5pY2tuYW1lXG4gICAgICAgIH07XG4gICAgICAgIHZtLm5ld1B5cmFtaWQucGxheWVycy5wdXNoKGFkZFBsYXllcik7XG4gICAgICB9KTtcbiAgICAgIHB5cmFtaWRzU2VydmljZS5jcmVhdGVQeXJhbWlkKHB5cmFtaWQpLnRoZW4oZnVuY3Rpb24gKG5ld1B5cmFtaWQpIHtcbiAgICAgICAgJHN0YXRlLmdvKCdweXJhbWlkcy52aWV3Jywge1xuICAgICAgICAgIHB5cmFtaWRJZDogbmV3UHlyYW1pZC5kYXRhLl9pZFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdNeVB5cmFtaWRzQ3RybCcsIE15UHlyYW1pZHNDdHJsKTtcblxuICBmdW5jdGlvbiBNeVB5cmFtaWRzQ3RybCgkc3RhdGUsIHB5cmFtaWRzU2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5weXJhbWlkcyA9IG51bGw7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBweXJhbWlkc1NlcnZpY2UuZ2V0UHlyYW1pZHNGb3JVc2VyKGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWQpLnRoZW4oZnVuY3Rpb24gKHB5cmFtaWRzKSB7XG4gICAgICAgIHZtLnB5cmFtaWRzID0gcHlyYW1pZHMuZGF0YTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdQeXJhbWlkQ3RybCcsIFB5cmFtaWRDdHJsKTtcblxuICBmdW5jdGlvbiBQeXJhbWlkQ3RybCgkc3RhdGVQYXJhbXMpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnB5cmFtaWRJZCA9IG51bGw7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBpZiAoJHN0YXRlUGFyYW1zLnB5cmFtaWRJZCkge1xuICAgICAgICB2bS5weXJhbWlkSWQgPSAkc3RhdGVQYXJhbXMucHlyYW1pZElkO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdQeXJhbWlkc0N0cmwnLCBQeXJhbWlkc0N0cmwpO1xuXG4gIGZ1bmN0aW9uIFB5cmFtaWRzQ3RybCgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnB5cmFtaWRzID0gbnVsbDtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIFxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ3RvZ2dsZVN1Ym1lbnUnLCB0b2dnbGVTdWJtZW51KTtcblxuICBmdW5jdGlvbiB0b2dnbGVTdWJtZW51KCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgbGluazogbGlua0Z1bmMsXG4gICAgfTtcblxuICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwpIHtcbiAgICAgIGVsLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwubmV4dCgpLnNsaWRlVG9nZ2xlKDIwMCk7XG4gICAgICAgIGVsLnBhcmVudCgpLnRvZ2dsZUNsYXNzKCd0b2dnbGVkJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd3YXZlc0VmZmVjdCcsIHdhdmVzRWZmZWN0KTtcblxuICBmdW5jdGlvbiB3YXZlc0VmZmVjdCgpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdDJyxcbiAgICAgIGxpbms6IGxpbmtGdW5jLFxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50Lmhhc0NsYXNzKCdidG4taWNvbicpIHx8IGVsZW1lbnQuaGFzQ2xhc3MoJ2J0bi1mbG9hdCcpKSB7XG4gICAgICAgIFdhdmVzLmF0dGFjaChlbGVtZW50LCBbJ3dhdmVzLWNpcmNsZSddKTtcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5oYXNDbGFzcygnYnRuLWxpZ2h0JykpIHtcbiAgICAgICAgV2F2ZXMuYXR0YWNoKGVsZW1lbnQsIFsnd2F2ZXMtbGlnaHQnXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBXYXZlcy5hdHRhY2goZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIFdhdmVzLmluaXQoKTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdmZ0xpbmUnLCBmZ0xpbmUpO1xuXG4gIGZ1bmN0aW9uIGZnTGluZSgpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdDJyxcbiAgICAgIGxpbms6IGxpbmtGdW5jLFxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQuY2hpbGRyZW4oKS5maXJzdCgpO1xuICAgICAgdmFyIGlzRmxvYXRMYWJlbCA9IGVsZW1lbnQucGFyZW50KCkuaGFzQ2xhc3MoJ2ZnLWZsb2F0Jyk7XG4gICAgICBpbnB1dC5mb2N1cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2ZnLXRvZ2dsZWQnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpbnB1dC5ibHVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc0Zsb2F0TGFiZWwgfHwgKGlzRmxvYXRMYWJlbCAmJiBpbnB1dC52YWwoKS5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZmctdG9nZ2xlZCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
