angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","LocalStorageModule","angular-sortable-view","angular.vertilize"]),function(){"use strict ";function e(e,t,n){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache",t.options({appendToBody:!0}),n.errorOnUnhandledRejections(!1)}e.$inject=["$httpProvider","$uibTooltipProvider","$qProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e,t){function n(e){t.set("sidebarLocked",e)}var i=this;i.$state=e,i.lockSidebar=t.get("sidebarLocked"),i.toggleSidebarLocked=n}e.$inject=["$state","localStorageService"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,o,r){var a={superAdmin:n,admin:t,user:i};r.html5Mode(!0),o.otherwise("/"),o.when("/competitions/","/competitions"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("competitions",{url:"/competitions",views:{content:{controller:"CompetitionsCtrl",controllerAs:"vm",templateUrl:"competitions/views/competitions.html"}}}).state("competitions.myCompetitions",{url:"/my-competitions",views:{"content@":{controller:"MyCompetitionsCtrl",controllerAs:"vm",templateUrl:"competitions/views/my-competitions.html"}},resolve:{auth:a.user}}).state("competitions.view",{url:"/view/:competitionId",views:{"content@":{controller:"CompetitionCtrl",controllerAs:"vm",templateUrl:"competitions/views/competition.html"}}}).state("competitions.stats",{url:"/stats/:competitionId",views:{"content@":{controller:"CompetitionStatsCtrl",controllerAs:"vm",templateUrl:"competitions/views/competition-stats.html"}}}).state("competitions.admin",{url:"/admin/:competitionId",views:{"content@":{controller:"CompetitionAdminCtrl",controllerAs:"vm",templateUrl:"competitions/views/competition-admin.html"}},resolve:{auth:a.user}}).state("competitions.create",{url:"/create",views:{"content@":{controller:"CreateCompetitionCtrl",controllerAs:"vm",templateUrl:"competitions/views/create-competition.html"}},resolve:{auth:a.user}}).state("user",{url:"/user",views:{content:{controller:"UserCtrl",controllerAs:"vm",templateUrl:"users/views/user.html"}},resolve:{auth:a.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}}).state("verify",{url:"/verification",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("verification",{url:"/verification/:userId/:verificationToken",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("password-reset-request",{url:"/password-reset",views:{content:{controller:"PasswordResetCtrl",controllerAs:"vm",templateUrl:"authentication/views/password-reset.html"}}}).state("password-reset",{url:"/password-reset/:userId/:verificationToken",views:{content:{controller:"PasswordResetCtrl",controllerAs:"vm",templateUrl:"authentication/views/password-reset.html"}}})}function t(e){return e.authorizeCurrentUserForRoute("admin")}function n(e){return e.authorizeCurrentUserForRoute("super-admin")}function i(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),t.$inject=["authService"],n.$inject=["authService"],i.$inject=["authService"]}(),function(){"use strict";function e(e,t,n){e.$on("$stateChangeError",function(e,n,i,o,r,a){"not authorized"===a&&(t.go("login"),t.previous=n,t.prevParams=i)}),e.$on("$stateChangeStart",function(){n.setSidebarStatus(!1)})}e.$inject=["$rootScope","$state","sidebarService"],angular.module("app").run(e)}(),function(){"use strict";function e(e,t,n,i,o,r){function a(e,i){var r=n.defer();return t.post("/login",{username:e,password:i}).then(function(e){e.data.success?(o.currentUser=e.data.user,r.resolve(!0)):"unverified"===e.data.message?r.resolve("unverified"):r.resolve(!1)}),r.promise}function s(e){var i=n.defer();return t.post("/api/users",{userData:e}).then(function(e){e.data?i.resolve(!0):i.resolve(!1)},function(e){"Error: Email already in use"===e.data.reason&&r.error("Sorry, an account already exists with that email address.")}),i.promise}function l(){var i=n.defer();return t.post("/logout",{logout:!0}).then(function(){o.currentUser=void 0,i.resolve(),e.go("home")}),i.promise}function c(e){return!!o.isAuthorized(e)||n.reject("not authorized")}function u(){return!!o.isAuthenticated()||n.reject("not authorized")}var p={authenticateUser:a,createUser:s,logout:l,authorizeCurrentUserForRoute:c,authenticatedUserForRoute:u};return p}e.$inject=["$state","$http","$q","userService","identityService","notifyService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e){function t(){return e.get("/api/users").then(function(e){return _.forEach(e.data,function(e){e.displayName||(e.displayName=e.firstName+" "+e.lastName)}),e.data=_.sortBy(e.data,"displayName"),e})}function n(t,n){return e.get("/api/user/verification",{params:{userId:t,verificationToken:n}})}function i(t){return e.get("/api/user/password/link",{params:{username:t}})}function o(t,n,i){return e.put("/api/user/password/reset",{userId:t,verificationToken:n,password:i})}function r(t){return e.put("/api/user",{user:t})}var a={getAllUsers:t,verifyUser:n,generatePasswordResetLink:i,resetPassword:o,updateUser:r};return a}e.$inject=["$http"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(e,t,n){function i(){}function o(i,o){t.authenticateUser(i,o).then(function(t){t?"unverified"===t?n.error("You must verify your email before you can login"):e.previous?(e.go(e.previous,e.prevParams),e.previous=null,e.prevParams=null):e.go("competitions.myCompetitions"):n.error("Username / password combinaiton incorrect")})}var r=this;r.login=o,i()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o,r){function a(){r.isAuthenticated()?e.go("home"):t.userId&&t.verificationToken&&n.verifyUser(t.userId,t.verificationToken).then(function(e){e.data&&(c.verified=!0)})}function s(t){n.generatePasswordResetLink(t).then(function(t){t.data?(i.success("Please check your email for a password reset link"),e.go("home")):i.error("Could not find that email address")})}function l(r){r.password!==r.confirmPassword?i.error("Passwords don't match!"):n.resetPassword(t.userId,t.verificationToken,r.password).then(function(t){t.data&&o.authenticateUser(t.data.username,r.password).then(function(t){e.go("home")})})}var c=this;c.username="",c.verified=!1,c.resetPasswordForm={},c.generatePasswordResetLink=s,c.resetPassword=l,a()}e.$inject=["$state","$stateParams","userService","notifyService","authService","identityService"],angular.module("app").controller("PasswordResetCtrl",e)}(),function(){"use strict";function e(e,t,n){function i(){}function o(i){i.password!==i.confirmPassword?n.error("Passwords don't match!"):(i.displayName||(i.displayName=i.firstName+" "+i.lastName),t.createUser(i).then(function(){e.go("verify")}))}var r=this;r.register=o,i()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(e,t,n){function i(){t.userId&&t.verificationToken&&(o.verifying=!0,o.verified=null,n.verifyUser(t.userId,t.verificationToken).then(function(e){e.data?o.verified=!0:o.verified=!1}))}var o=this;o.verified=void 0,o.verifying=!1,i()}e.$inject=["$state","$stateParams","userService"],angular.module("app").controller("VerificationCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"/challenges/components/active-challenges.html"};return e}function t(e,t){function n(){e.$watch("vm.competition",function(){o.competition&&i()})}function i(){o.challenges=[],t.getActiveChallengesByCompetition(o.competition._id).then(function(e){e.data.length>0&&(o.challenges=e.data,_.forEach(o.challenges,function(e){"versus"===e.type&&(e.challenger.displayName="Team "+e.challenger.team,e.opponent.displayName="Team "+e.opponent.team),0!==e.timeLimit&&(e.expires=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1)}))})}var o=this;o.challenges=[],n()}t.$inject=["$scope","challengesService"],angular.module("app").directive("wpmActiveChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@",allowDelete:"=",challenges:"="},templateUrl:"/challenges/components/completed-challenges.html"};return e}function t(e,t,n){function i(){e.$watch("vm.challenges",function(){a.challenges&&a.challenges.length>0&&o()})}function o(){_.forEach(a.challenges,function(e){e.loser="challenger"===e.winner?"opponent":"challenger","versus"===e.type&&(e.challenger.displayName="Team "+e.challenger.team,e.opponent.displayName="Team "+e.opponent.team),e.whenCompleted=moment(e.completed).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd",sameElse:"DD/MM/YYYY"})})}function r(e,t){n.deleteChallenge(a.competitionId,e).then(function(){a.challenges.splice(t,1)})}var a=this;a.challenges=[],a.deleteChallenge=r,i()}t.$inject=["$scope","$state","challengesService"],angular.module("app").directive("wpmCompletedChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{player:"="},templateUrl:"/challenges/components/player-overall-results.html"};return e}function t(e){function t(){e.$watch("vm.player.results",function(){r.player&&(n(r.player),i(r.player),o(r.player))})}function n(e){for(var t=[],n=0;n<r.maxLevels;n++)t.push(n*(n+1)/2+1);e.level=t.length;for(var i=0;i<t.length;i++)if(e.position<t[i+1]){e.level=t.indexOf(t[i])+1;break}}function i(e){var t,n=0,i=!0;_.forEach(e.results,function(o){i&&("challenger"===o.winner&&o.challenger._id===e._id||"opponent"===o.winner&&o.opponent._id===e._id?"losing"!==t?(n+=1,t="winning"):i=!1:("opponent"===o.winner&&o.challenger._id===e._id||"challenger"===o.winner&&o.opponent._id===e._id)&&("winning"!==t?(n+=1,t="losing"):i=!1)),r.streak={type:t,value:n}})}function o(e){r.wins.asOpponent=_.size(_.filter(e.results,function(t){return t.opponent._id===e._id&&"opponent"===t.winner})),r.wins.asChallenger=_.size(_.filter(e.results,function(t){return t.challenger._id===e._id&&"challenger"===t.winner})),r.wins.total=r.wins.asChallenger+r.wins.asOpponent,r.wins.byForfeit=_.size(_.filter(e.results,function(t){return t.forfeit&&(t.challenger._id===e._id&&"challenger"===t.winner||t.opponent._id===e._id&&"opponent"===t.winner)})),r.loses.asOpponent=_.size(_.filter(e.results,function(t){return t.opponent._id===e._id&&"challenger"===t.winner})),r.loses.asChallenger=_.size(_.filter(e.results,function(t){return t.challenger._id===e._id&&"opponent"===t.winner})),r.loses.total=r.loses.asChallenger+r.loses.asOpponent,r.loses.byForfeit=_.size(_.filter(e.results,function(t){return t.forfeit&&(t.challenger._id===e._id&&"opponent"===t.winner||t.opponent._id===e._id&&"challenger"===t.winner)}))}var r=this;r.maxLevels=7,r.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},r.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},r.streak={type:null,value:0},t()}t.$inject=["$scope"],angular.module("app").directive("wpmPlayerOverallResults",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{team:"=",challenges:"="},templateUrl:"/challenges/components/team-overall-results.html"};return e}function t(e){function t(){e.$watch("vm.challenges",function(){o.challenges&&o.challenges.length>0&&(n(o.team,o.challenges),i(o.team,o.challenges))})}function n(e,t){var n,i=0,r=!0;_.forEach(t,function(t){r&&("challenger"===t.winner&&t.challenger.team===e||"opponent"===t.winner&&t.opponent.team===e?"losing"!==n?(i+=1,n="winning"):r=!1:("opponent"===t.winner&&t.challenger.team===e||"challenger"===t.winner&&t.opponent.team===e)&&("winning"!==n?(i+=1,n="losing"):r=!1)),o.streak={type:n,value:i}})}function i(e,t){o.wins.asOpponent=_.size(_.filter(t,function(t){return t.opponent.team===e&&"opponent"===t.winner})),o.wins.asChallenger=_.size(_.filter(t,function(t){return t.challenger.team===e&&"challenger"===t.winner})),o.wins.total=o.wins.asChallenger+o.wins.asOpponent,o.wins.byForfeit=_.size(_.filter(t,function(t){return t.forfeit&&(t.challenger.team===e&&"challenger"===t.winner||t.opponent.team===e&&"opponent"===t.winner)})),o.loses.asOpponent=_.size(_.filter(t,function(t){return t.opponent.team===e&&"challenger"===t.winner})),o.loses.asChallenger=_.size(_.filter(t,function(t){return t.challenger.team===e&&"opponent"===t.winner})),o.loses.total=o.loses.asChallenger+o.loses.asOpponent,o.loses.byForfeit=_.size(_.filter(t,function(t){return t.forfeit&&(t.challenger.team===e&&"opponent"===t.winner||t.opponent.team===e&&"challenger"===t.winner)}))}var o=this;o.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},o.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},o.streak={type:null,value:0},t()}t.$inject=["$scope"],angular.module("app").directive("wpmTeamOverallResults",e)}(),function(){"use strict";function e(e){function t(t){return e.post("/api/challenges/pyramid/create",{challenge:t})}function n(t){return e.post("/api/challenges/versus/create",{challenge:t})}function i(t){return e.post("/api/challenges/pyramid/complete",{challenge:t})}function o(t){return e.post("/api/challenges/versus/complete",{challenge:t})}function r(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function a(t){return e.get("/api/challenges/active/competition",{params:{competitionId:t}})}function s(t,n){return e.get("/api/challenges/active/competition/player",{params:{competitionId:t,playerId:n}})}function l(t,n){return e.get("/api/challenges/completed/competition",{params:{competitionId:t,limit:n}})}function c(t,n){return e.delete("/api/challenges/active/competition/player/delete",{params:{competitionId:t,playerId:n}})}function u(t,n){return e.delete("/api/challenges/delete",{params:{competitionId:t,challengeId:n}})}function p(t,n){return e.get("/api/challenges/results/competition/player",{params:{competitionId:t,playerId:n}})}var m={createPyramidChallenge:t,createVersusChallenge:n,completePyramidChallenge:i,completeVersusChallenge:o,getChallengesByCompetition:r,getActiveChallengesByCompetition:a,getActiveChallengeByCompetitionByPlayer:s,getCompletedChallengesByCompetition:l,deleteActiveChallengeByCompetitionByPlayer:c,deleteChallenge:u,getPlayerResultsByCompetition:p};return m}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/footer.html"};return e}function t(e,t){function n(){t.logout()}var i=this;i.indentity=e,i.logout=n}t.$inject=["identityService","authService"],angular.module("app").directive("wpmFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"headerCtrl",restrict:"A",templateUrl:"/common/components/header.html"};return e}function t(e,t,n,i,o){function r(){a(),e.$watch("headerCtrl.indentity.currentUser",function(){n.isAuthenticated()&&a()})}function a(){p.alerts=[],n.isAuthenticated()&&o.getActiveAlertsByPlayer(n.currentUser._id).then(function(e){p.alerts=e.data})}function s(e,t){o.clearAlert(e).then(function(){p.alerts.splice(t,1)})}function l(){o.clearAllAlertsByPlayer(n.currentUser._id).then(function(){p.alerts=[]})}function c(){t.setSidebarStatus(!p.sidebarStatus.left)}function u(){i.logout()}var p=this;p.indentity=n,p.logout=u,p.sidebarStatus=t.getSidebarStatus(),p.toggleSidebar=c,p.clearAlert=s,p.clearAllAlerts=l,p.alerts=[],r(),e.$on("ws:update_alerts",function(e,t){n.isAuthenticated()&&_.some(t,["userId",n.currentUser._id])&&a()})}t.$inject=["$scope","sidebarService","identityService","authService","alertsService"],angular.module("app").directive("wpmHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"/common/components/sidebar.html"};return e}function t(e,t,n){function i(){t.logout()}var o=this;o.indentity=e,o.logout=i,o.sidebarStatus=n.getSidebarStatus()}t.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("wpmSidebar",e)}(),function(){"use strict";function e(){return function(e,t){if(!angular.isObject(e))return e;var n=[];for(var i in e)n.push(e[i]);return n.sort(function(e,n){return e=parseInt(e[t]),n=parseInt(n[t]),e-n}),n}}angular.module("app").filter("orderObjectBy",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/alerts/",{params:{userId:t}})}function n(t){return e.put("/api/alert/clear",{alertId:t})}function i(t){return e.put("/api/alerts/clear",{userId:t})}var o={getActiveAlertsByPlayer:t,clearAlert:n,clearAllAlertsByPlayer:i};return o}e.$inject=["$http"],angular.module("app").factory("alertsService",e)}(),function(){"use strict";function e(e){function t(){return!!this.currentUser}function n(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var i;null!==e.bootstrappedUserObject&&(i=e.bootstrappedUserObject);var o={currentUser:i,isAuthenticated:t,isAuthorized:n};return o}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,t,n){$.notify({message:e,url:t,target:n},{type:"info"})}function t(e,t,n){$.notify({message:e,url:t,target:n},{type:"success"})}function n(e,t,n){$.notify({message:e,url:t,target:n},{type:"warning"})}function i(e,t,n){$.notify({message:e,url:t,target:n},{type:"danger"})}function o(e,t,n){$.notify({message:e,url:t,target:n},{type:"inverse"})}var r={info:e,success:t,warning:n,error:i,inverse:o};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85},delay:5e3}),r}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(e,t,n,i){$(e).mCustomScrollbar({theme:t,scrollInertia:100,axis:n,mouseWheel:{enable:!0,axis:i,preventDefault:!0}})}var t={malihuScroll:e};return t}angular.module("app").factory("scrollbarService",e)}(),function(){"use strict";function e(){function e(){return n}function t(e){n.left=e}var n={left:!1,right:!1},i={getSidebarStatus:e,setSidebarStatus:t};return i}angular.module("app").factory("sidebarService",e)}(),function(){"use strict";function e(e,t,n){function i(){return"https:"===t.location.protocol?"wss://"+t.location.host:"ws://"+t.location.host}function o(){a=new WebSocket(i()),a.onmessage=function(t){l=0;var n=JSON.parse(t.data);e.$broadcast("ws:"+n.topic,n.data)},a.onclose=function(){l<s.length?(console.log("WebSocket closed. Reconnecting..."),n(o,1e3*s[l]),l+=1):console.log("Giving up on WebSocket")}}function r(e,t){var n=JSON.stringify({topic:e,data:t});a.send(n)}var a,s=[3,10,100,1e3],l=0,c={connect:o,send:r};return c}e.$inject=["$rootScope","$window","$timeout"],angular.module("app").factory("websocketService",e).run(["websocketService",function(e){e.connect()}])}(),function(){"use strict";function e(e,t){function n(){e.getPublicCompetitions().then(function(e){i.publicCompetitions=e.data}),t.isAuthorized("super-admin")&&e.getPrivateCompetitions().then(function(e){i.privateCompetitions=e.data})}var i=this;i.publicCompetitions=[],i.privateCompetitions=[],n()}e.$inject=["competitionsService","identityService"],angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"/competitions/components/competition-compact.html"};return e}function t(){function e(){}e()}angular.module("app").directive("wpmCompetitionCompact",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"/competitions/components/pending-players.html"};return e}function t(e){function t(){}function n(t){t.position=o.competition.players.length+1,e.approvePendingPlayer(o.competition._id,t)}function i(t){e.denyPendingPlayer(o.competition._id,t)}var o=this;o.pendingPlayers=[],o.approvePendingPlayer=n,o.denyPendingPlayer=i,t()}t.$inject=["competitionsService"],angular.module("app").directive("wpmPendingPlayers",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/competitions/components/pyramid.html",replace:!0,scope:{competition:"="},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,n,i,o,r,a){function s(){for(var t=U;t>0;--t)A.maxPlayers+=t;e.$watch("vm.competition",function(){A.competition&&(A.competitionId=A.competition._id,l(),c(),p(),m(),d())})}function l(){A.competition.players=i("orderBy")(A.competition.players,"position")}function c(){A.currentUserIsAdmin=!1,A.currentUserIsPending=!1,r.isAuthenticated()&&(A.currentUserIsAdmin=_.some(A.competition.admins,["_id",r.currentUser._id]),A.currentUserIsPending=_.some(A.competition.pendingPlayers,["_id",r.currentUser._id])),A.currentUserIsOnCompetition=!1,A.hasActiveChallenge=!1,_.forEach(A.competition.players,function(e){r.isAuthenticated()&&e._id===r.currentUser._id&&(A.currentUserIsOnCompetition=!0,e.class="current-user",A.currentUserPlayer=e,a.getActiveChallengeByCompetitionByPlayer(A.competitionId,e._id).then(function(t){if(t.data){A.hasActiveChallenge=!0,A.activeChallengeOpponent=t.data.challenger._id===e._id?t.data.opponent:t.data.challenger;var n=_.find(A.competition.players,{_id:A.activeChallengeOpponent._id});n.class=n.class?n.class+" current-opponent":"current-opponent"}else f()}))}),a.getActiveChallengesByCompetition(A.competitionId).then(function(e){_.forEach(e.data,function(e){var t=_.find(A.competition.players,{_id:e.challenger._id});"available"===t.class&&(t.class=""),t.class=t.class?t.class+" unavailable":"unavailable",t.available=!1,t.challenge={position:"challenger"};var n=_.find(A.competition.players,{_id:e.opponent._id});if("available"===n.class&&(n.class=""),n.class=n.class?n.class+" unavailable":"unavailable",n.available=!1,n.challenge={position:"opponent"},0!==e.timeLimit){var i=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1;i>0?n.challenge.expires=i:i<=0&&v(null,!0,n)}})})}function u(){A.breakPoints=[];for(var e=0;e<U;e++)A.breakPoints.push(e*(e+1)/2+1)}function p(){var e=0;A.levels=[],u();for(var t=0;t<A.competition.players.length;t++)A.breakPoints.indexOf(t+1)>-1&&(e+=1,A.levels.push(e)),A.competition.players[t].level=e}function m(){A.numberOfBlocks=0;for(var e=_.last(A.levels);e>0;e--)A.numberOfBlocks+=e}function d(){A.numberOfRealPlayers=A.competition.players.length;for(var e=A.competition.players.length;e<A.numberOfBlocks;e++)A.competition.players.push({firstName:"Empty",lastName:"Spot",displayName:"Empty Spot",position:99,class:A.currentUserIsOnCompetition?"empty":"joinable empty"});p()}function f(){if(A.currentUserIsOnCompetition&&!A.hasActiveChallenge){var e=A.currentUserPlayer.level>1?A.currentUserPlayer.level-1:null;_.forEach(A.competition.players,function(t){t.level===e&&99!==t.position&&"unavailable"!==t.class&&t.available!==!1&&(A.availableChallenges=!0,t.available=!0,t.class="available")})}}function h(e){if(e.available){A.hasActiveChallenge=!0;var t={type:A.competition.type,competitionName:A.competition.name,competitionId:A.competitionId,complete:!1,forfeit:!1,timeLimit:A.competition.forfeitDays,challenger:{_id:A.currentUserPlayer._id,email:A.currentUserPlayer.email,firstName:A.currentUserPlayer.firstName,lastName:A.currentUserPlayer.lastName,displayName:A.currentUserPlayer.displayName,position:A.currentUserPlayer.position},opponent:{_id:e._id,email:e.email,firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,position:e.position}};a.createPyramidChallenge(t).then(function(){A.competitionMenuToggle=!1})}else o.error("Sorry, that is not a valid challenge.")}function v(e,t,i){var o=i||A.currentUserPlayer;a.getActiveChallengeByCompetitionByPlayer(A.competitionId,o._id).then(function(o){A.hasActiveChallenge=!1;var r=!1;t?(o.data.forfeit=!0,"opponent"===i.challenge.position?(o.data.winner="challenger",r=!0):o.data.winner="opponent"):e?o.data.challenger._id===A.currentUserPlayer._id?(o.data.winner="challenger",r=!0):o.data.winner="opponent":o.data.challenger._id===A.currentUserPlayer._id?o.data.winner="opponent":(o.data.winner="challenger",r=!0),r?n.swapPositions(A.competitionId,o.data.opponent,o.data.challenger).then(function(){a.completePyramidChallenge(o.data).then(function(){S&&w()})}):a.completePyramidChallenge(o.data).then(function(){S&&w()}),A.competitionMenuToggle=!1})}function g(e){v(null,!0,e)}function y(){if(r.isAuthenticated())if(A.numberOfRealPlayers<A.maxPlayers){var e={_id:r.currentUser._id,firstName:r.currentUser.firstName,lastName:r.currentUser.lastName,displayName:r.currentUser.displayName,email:r.currentUser.username,position:A.numberOfRealPlayers+1};A.competition.restrictJoins?swal({title:"Send Join Request?",text:"This is a closed competition so an admin must approve your request",type:"warning",showCancelButton:!0,confirmButtonText:"Send Request",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToCompetitionRequest(A.competition,e).then(function(){A.currentUserIsPending=!0}),swal("Request Sent","You will receive an email once an admin processes the request.","success")}):swal({title:"Join Competition?",text:"You'll be added to the bottom",type:"warning",showCancelButton:!0,confirmButtonText:"Join",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){n.addPlayerToCompetition(A.competitionId,e),swal("Welcome Aboard!","Now start fighting your way to the top","success")})}else o.warning("Sorry, this competition is full");else o.warning("Please login to join a competition"),t.previous="competitions.view",t.prevParams={competitionId:A.competitionId},t.go("login")}function C(){swal({title:"Leave Competition?",text:"You will lose your spot and forfeit any active challenges.",type:"error",showCancelButton:!0,confirmButtonText:"Yes, leave",confirmButtonClass:"btn-danger",cancelButtonText:"No, stay",closeOnConfirm:!1,closeOnCancel:!0},function(){w(),swal("OK, you'r out!","You've been removed from the competition.","success")})}function w(){r.isAuthenticated()&&A.currentUserIsOnCompetition&&(S=!0,A.hasActiveChallenge?v(null,!0,A.currentUserPlayer):(A.currentUserIsOnCompetition=!1,A.hasActiveChallenge=!1,n.getCompetition(A.competitionId).then(function(e){var t=e.data,i=A.currentUserPlayer.position;_.forEach(t.players,function(e){e.position>=i&&(e.position-=1)});for(var o=_.remove(t.players,function(e){return e._id===A.currentUserPlayer._id}),r=[],a=0;a<A.numberOfRealPlayers-1;++a){var s={_id:t.players[a]._id,firstName:t.players[a].firstName,lastName:t.players[a].lastName,displayName:t.players[a].displayName,position:t.players[a].position};r.push(s)}n.removedPlayerFromCompetition(A.competitionId,o[0],r).then(function(){S=!1})})))}function P(e){99!==e.position||A.currentUserIsOnCompetition?e.showChallengeModal=!e.showChallengeModal:y()}function b(){n.getCompetition(A.competitionId).then(function(e){A.competition=e.data})}var U=7,A=this;A.competitionId=null,A.breakPoints=[],A.levels=[],A.numberOfBlocks=0,A.currentUserIsOnCompetition=!1,A.currentUserIsPending=!1,A.currentUserIsAdmin=!1,A.hasActiveChallenge=!1,A.activeChallengeOpponent=null,A.availableChallenges=!1,A.createChallenge=h,A.completeChallenge=v,A.challengeExpired=g,A.currentUserPlayer={},A.competitionMenuToggle=!1,A.addCurrentUserToCompetition=y,A.confirmRemoveCurrentUserFromCompetition=C,A.playerClick=P,A.numberOfRealPlayers=0,A.maxPlayers=0,s();var S=!1;e.$on("ws:competition_updated",function(e,t){A.competitionId===t.competitionId&&(o.info(t.description),b())})}t.$inject=["$scope","$state","competitionsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("wpmPyramid",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"/competitions/components/update-admins.html"};return e}function t(e,t,n,i,o){function r(){e.$watch("vm.competition",function(){d.competition&&(d.addedAdmins=_.cloneDeep(d.competition.admins),d.disableSubmit=!0,d.userIsPrimaryAdmin=_.find(d.competition.admins,{primary:!0})._id===o.currentUser._id,a())})}function a(){d.availableAdmins=[],p=[],i.getAllUsers().then(function(e){_.forEach(d.competition.admins,function(t){_.remove(e.data,function(e){return t._id===e._id})}),_.forEach(e.data,function(e){d.availableAdmins.push({firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,email:e.username,_id:e._id})}),m=_.cloneDeep(d.availableAdmins)})}function s(){d.competition.admins=d.addedAdmins,t.updateCompetition(d.competition).then(function(){d.disableSubmit=!0})}function l(){p=[],d.addedAdmins=_.cloneDeep(d.competition.admins),d.availableAdmins=_.cloneDeep(m)}function c(e){p.push(e),d.availableAdmins.push(_.remove(d.addedAdmins,{_id:e._id})[0]),d.disableSubmit=!1}function u(e){d.addedAdmins.push(_.remove(d.availableAdmins,{_id:e._id})[0]),d.disableSubmit=!1}var p=[],m=[],d=this;d.availableAdmins=[],d.addedAdmins=[],d.userIsPrimaryAdmin=!1,d.updateCompetition=s,d.cancelUpdate=l,d.removeAdmin=c,d.addAdmin=u,d.disableSubmit=!0,r()}t.$inject=["$scope","competitionsService","challengesService","userService","identityService"],angular.module("app").directive("wpmUpdateAdmins",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"/competitions/components/update-players.html"};return e}function t(e,t,n,i,o,r){function a(){for(var t=g;t>0;--t)y+=t;e.$watch("vm.competition",function(){C.competition&&(C.addedPlayers=_.cloneDeep(C.competition.players),C.disableSubmit=!0,s())})}function s(){C.availablePlayers=[],h=[],o.getAllUsers().then(function(e){_.forEach(C.competition.players,function(t){_.remove(e.data,function(e){return t._id===e._id})}),_.forEach(e.data,function(e){C.availablePlayers.push({firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,email:e.username,_id:e._id})}),v=_.cloneDeep(C.availablePlayers)})}function l(){"versus"===C.competition.type&&C.addedPlayers.length%2>0?r.error("A Versus competition must have an even number of players"):C.addedPlayers.length>y?r.error("A competition can have a maximum of "+y+" players"):(_.forEach(h,function(e){i.deleteActiveChallengeByCompetitionByPlayer(C.competition._id,e._id)}),C.competition.players=C.addedPlayers,n.updateCompetition(C.competition).then(function(){C.disableSubmit=!0}))}function c(){h=[],C.addedPlayers=_.cloneDeep(C.competition.players),C.availablePlayers=_.cloneDeep(v)}function u(){"versus"===C.competition.type?m():"pyramid"===C.competition.type&&p(),C.disableSubmit=!1}function p(){var e=1;_.forEach(C.addedPlayers,function(t){t.position=e,++e})}function m(){_.forEach(C.addedPlayers,function(e){e.position=2});for(var e=0;e<C.addedPlayers.length/2;e++)C.addedPlayers[e].position=1}function d(e){h.push(e),C.availablePlayers.push(_.remove(C.addedPlayers,{_id:e._id})[0]),u()}function f(e){C.addedPlayers.push(_.remove(C.availablePlayers,{_id:e._id})[0]),u(),C.disableSubmit=!1}var h=[],v=[],g=7,y=null,C=this;C.availablePlayers=[],
C.addedPlayers=[],C.updateCompetition=l,C.cancelUpdate=c,C.reorderPlayers=u,C.removePlayer=d,C.addPlayer=f,C.disableSubmit=!0,a()}t.$inject=["$scope","$filter","competitionsService","challengesService","userService","notifyService"],angular.module("app").directive("wpmUpdatePlayers",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/competitions/components/versus.html",replace:!0,scope:{competition:"="},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,n,i,o){function r(){e.$watch("vm.competition",function(){m.competition&&(m.competitionId=m.competition._id,m.showControls=!1,m.showChallengeModal=!1,a(),s())})}function a(){m.competition.teams=[{players:_.filter(m.competition.players,["position",1])},{players:_.filter(m.competition.players,["position",2])}]}function s(){m.currentUserIsAdmin=!1,m.currentUserIsPending=!1,n.isAuthenticated()&&(m.currentUserIsAdmin=_.some(m.competition.admins,["_id",n.currentUser._id]),m.currentUserIsPending=_.some(m.competition.pendingPlayers,["_id",n.currentUser._id])),m.currentUserIsOnCompetition=!1,m.hasActiveChallenge=!1,_.forEach(m.competition.players,function(e){n.isAuthenticated()&&e._id===n.currentUser._id&&(m.currentUserIsOnCompetition=!0,e.class="current-user",m.currentUserPlayer=e,m.competition.teams[e.position-1].class="current-user-team",m.competition.class="current-user-on-competition")}),i.getActiveChallengesByCompetition(m.competitionId).then(function(e){if(e.data.length>0&&(m.activeChallenge=e.data[0],m.hasActiveChallenge=!0,0!==m.activeChallenge.timeLimit)){var t=moment().diff(moment(m.activeChallenge.created).add(m.activeChallenge.timeLimit,"d"),"s")*-1;t>0?m.challengeExpireTime=t:t<=0&&u(null,!0)}})}function l(){m.hasActiveChallenge&&m.currentUserIsOnCompetition&&(m.showControls=!m.showControls)}function c(e){if(m.showChallengeModal=!1,m.hasActiveChallenge)o.error("Sorry, you are already in an active challenge.");else{m.hasActiveChallenge=!0;var t={type:m.competition.type,competitionName:m.competition.name,competitionId:m.competitionId,complete:!1,forfeit:!1,timeLimit:m.competition.forfeitDays,challenger:{team:m.currentUserPlayer.position,_id:m.currentUserPlayer._id},opponent:{team:e}};i.createVersusChallenge(t).then(function(){m.competitionMenuToggle=!1})}}function u(e,t){m.hasActiveChallenge=!1;var n=m.activeChallenge;t?(n.forfeit=!0,n.winner="challenger"):m.activeChallenge.challenger.team===e?n.winner="challenger":n.winner="opponent",i.completeVersusChallenge(n),m.competitionMenuToggle=!1}function p(){t.getCompetition(m.competitionId).then(function(e){m.competition=e.data})}var m=this;m.competitionId=null,m.currentUserIsAdmin=!1,m.currentUserIsPending=!1,m.currentUserIsOnCompetition=!1,m.activeChallenge=null,m.hasActiveChallenge=!1,m.currentUserPlayer=null,m.createChallenge=c,m.completeChallenge=u,m.challengeExpireTime=null,m.showControls=!1,m.showChallengeModal=!1,m.toggleControls=l,r(),e.$on("ws:competition_updated",function(e,t){m.competitionId===t.competitionId&&(o.info(t.description),p())})}t.$inject=["$scope","competitionsService","identityService","challengesService","notifyService"],angular.module("app").directive("wpmVersus",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/competition",{params:{competitionId:t}})}function n(t){return e.get("/api/competitions/user",{params:{userId:t}})}function i(){return e.get("/api/competitions/public")}function o(){return e.get("/api/competitions/private")}function r(t){return e.post("/api/competitions/create",{competition:t})}function a(t){return e.post("/api/competitions/update",{competition:t})}function s(t){return e.delete("/api/competitions/delete",{params:{competitionId:t}})}function l(t,n,i){return e.post("/api/competitions/swapPositions",{competitionId:t,challenger:n,opponent:i})}function c(t,n){return e.post("/api/competitions/addPlayer",{competitionId:t,player:n})}function u(t,n){return e.post("/api/competitions/addPlayerRequest",{competition:t,player:n})}function p(t,n,i){return e.post("/api/competitions/removePlayer",{competitionId:t,removedPlayer:n,players:i})}function m(t,n){return e.post("/api/competitions/approvePlayer",{competitionId:t,player:n})}function d(t,n){return e.post("/api/competitions/denyPlayer",{competitionId:t,player:n})}var f={getCompetition:t,getCompetitionsForUser:n,getPublicCompetitions:i,getPrivateCompetitions:o,createCompetition:r,updateCompetition:a,deleteCompetition:s,swapPositions:l,addPlayerToCompetition:c,addPlayerToCompetitionRequest:u,removedPlayerFromCompetition:p,approvePendingPlayer:m,denyPendingPlayer:d};return f}e.$inject=["$http"],angular.module("app").factory("competitionsService",e)}(),function(){"use strict";function e(e,t,n,i,o,r,a,s){function l(){n.competitionId?(d.competitionId=n.competitionId,c()):t.go("competitions.myCompetitions")}function c(){o.getCompetition(d.competitionId).then(function(e){e.data&&_.some(e.data.admins,["_id",r.currentUser._id])?(d.isAdmin=!0,e.data.players=i("orderBy")(e.data.players,"position"),d.competition=e.data):t.go("competitions.myCompetitions")}),s.getCompletedChallengesByCompetition(d.competitionId).then(function(e){d.challenges=e.data})}function u(){o.getCompetition(d.competitionId).then(function(e){var t=e.data;t.restrictJoins=d.competition.restrictJoins,o.updateCompetition(t)})}function p(){o.getCompetition(d.competitionId).then(function(e){var t=e.data;t.private=d.competition.private,o.updateCompetition(t)})}function m(){swal({title:"Delete Competition?",text:"This can not be undone",type:"error",showCancelButton:!0,confirmButtonText:"Delete",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){o.deleteCompetition(d.competitionId).then(function(){t.go("competitions.myCompetitions")})})}var d=this;d.competitionId=null,d.updateCompetitionRestrictJoins=u,d.updateCompetitionPrivate=p,d.deleteCompetition=m,l(),e.$on("ws:competition_updated",function(e,t){d.competitionId===t.competitionId&&(a.info(t.description),c())}),e.$on("ws:competition_deleted",function(e,n){d.competitionId===n.competitionId&&(a.info(n.description),t.go("competitions.myCompetitions"))})}e.$inject=["$scope","$state","$stateParams","$filter","competitionsService","identityService","notifyService","challengesService"],angular.module("app").controller("CompetitionAdminCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o,r){function a(){t.competitionId&&(l.competitionId=t.competitionId,s())}function s(){i.getCompetition(l.competitionId).then(function(e){e.data?(l.competition=e.data,"pyramid"===l.competition.type?_.forEach(l.competition.players,function(e){r.getPlayerResultsByCompetition(l.competitionId,e._id).then(function(t){e.results=t.data})}):"versus"===l.competition.type&&(l.teams=[{number:1},{number:2}])):n.go("competitions.myCompetitions")}),r.getCompletedChallengesByCompetition(l.competitionId).then(function(e){l.challenges=e.data})}var l=this;l.competitionId=null,l.competition={},l.playersResults=[],l.challenges=[],a(),e.$on("ws:competition_updated",function(e,t){l.competitionId===t.competitionId&&(o.info(t.description),s())}),e.$on("ws:competition_deleted",function(e,t){l.competitionId===t.competitionId&&(o.info(t.description),n.go("competitions.myCompetitions"))})}e.$inject=["$scope","$stateParams","$state","competitionsService","notifyService","challengesService"],angular.module("app").controller("CompetitionStatsCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o){function r(){n.competitionId&&(a.competitionId=n.competitionId,i.getCompetition(a.competitionId).then(function(e){e.data?a.competition=e.data:t.go("competitions.myCompetitions")}))}var a=this;a.competitionId=null,a.competition=null,r(),e.$on("ws:competition_deleted",function(e,n){a.competitionId===n.competitionId&&(o.info(n.description),t.go("competitions.myCompetitions"))})}e.$inject=["$scope","$state","$stateParams","competitionsService","notifyService"],angular.module("app").controller("CompetitionCtrl",e)}(),function(){"use strict";function e(e){function t(){e.getPublicCompetitions().then(function(e){n.competitions=e.data})}var n=this;n.competitions=[],t()}e.$inject=["competitionsService"],angular.module("app").controller("CompetitionsCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o){function r(){t.getAllUsers().then(function(e){h.availablePlayers=e.data});for(var e=d;e>0;--e)f+=e;for(e=0;e<d;e++)m.push(e*(e+1)/2+1)}function a(e){h.addedPlayers.push(_.remove(h.availablePlayers,{_id:e._id})[0]),l()}function s(e){h.availablePlayers.push(_.remove(h.addedPlayers,{_id:e._id})[0]),l()}function l(){"versus"===h.newCompetition.type?u():"pyramid"===h.newCompetition.type&&c()}function c(){var e=1;_.forEach(h.addedPlayers,function(t){t.position=e,++e})}function u(){_.forEach(h.addedPlayers,function(e){e.position=2});for(var e=0;e<h.addedPlayers.length/2;e++)h.addedPlayers[e].position=1}function p(t){if("versus"===t.type&&h.addedPlayers.length%2>0)o.error("A Versus competition must have an even number of players");else if(h.addedPlayers.length>f)o.error("A competition can have a maximum of "+f+" players");else{angular.forEach(h.addedPlayers,function(e){var n={_id:e._id,email:e.username,firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,position:e.position};t.players.push(n)}),t.admins=[{_id:i.currentUser._id,email:i.currentUser.username,firstName:i.currentUser.firstName,lastName:i.currentUser.lastName,displayName:i.currentUser.displayName,primary:!0}];for(var r=0;r<m.length;r++)if(t.players.length<m[r]){t.levels=r;break}n.createCompetition(t).then(function(t){e.go("competitions.view",{competitionId:t.data._id})})}}var m=[],d=7,f=null,h=this;h.newCompetition={players:[],restrictJoins:!1,private:!1},h.availablePlayers=[],h.addedPlayers=[],h.createCompetition=p,h.addPlayer=a,h.removePlayer=s,h.reorderPlayers=l,h.newCompetition.forfeitDays=1,h.competitionTypes=["pyramid","versus"],r()}e.$inject=["$state","userService","competitionsService","identityService","notifyService"],angular.module("app").controller("CreateCompetitionCtrl",e)}(),function(){"use strict";function e(e,t,n,i,o){function r(){a()}function a(){s=[],l.activeChallenge=null,i.isAuthenticated()&&t.getCompetitionsForUser(i.currentUser._id).then(function(e){l.competitions=e.data,_.forEach(l.competitions,function(e){s.push(e._id),"pyramid"===e.type?n.getActiveChallengeByCompetitionByPlayer(e._id,i.currentUser._id).then(function(t){t.data&&(e.activeChallenge=t.data,0!==e.activeChallenge.timeLimit&&(e.activeChallenge.expires=moment().diff(moment(e.activeChallenge.created).add(e.activeChallenge.timeLimit,"d"),"s")*-1))}):"versus"===e.type&&n.getActiveChallengesByCompetition(e._id).then(function(t){t.data.length>0&&(e.activeChallenge=t.data[0],0!==e.activeChallenge.timeLimit&&(e.activeChallenge.expires=moment().diff(moment(e.activeChallenge.created).add(e.activeChallenge.timeLimit,"d"),"s")*-1))})})})}var s=[],l=this;l.activeChallenge=null,r(),e.$on("ws:competition_updated",function(e,t){s.indexOf(t.competitionId)>=0&&(o.info(t.description),a())})}e.$inject=["$scope","competitionsService","challengesService","identityService","notifyService"],angular.module("app").controller("MyCompetitionsCtrl",e)}(),function(){"use strict";function e(e,t,n){function i(){}function o(i){if(i.password!==i.confirmPassword)n.error("Passwords don't match!");else{var o={_id:i._id};i.firstName===e.currentUser.firstName&&i.lastName===e.currentUser.lastName&&i.displayName===e.currentUser.displayName||(o.firstName=i.firstName,o.lastName=i.lastName,o.displayName=i.displayName),i.password&&i.password.lentgh>0&&(o.password=i.password),t.updateUser(o).then(function(){n.success("Your information has been updated"),r.userForm.$setPristine();var t=angular.copy(e.currentUser);angular.extend(t,o),e.currentUser=t,r.user.confirmPassword=r.user.password=""})}}var r=this;r.user={_id:e.currentUser._id,firstName:e.currentUser.firstName,lastName:e.currentUser.lastName,displayName:e.currentUser.displayName},r.updateUser=o,r.userForm={},i()}e.$inject=["identityService","userService","notifyService"],angular.module("app").controller("UserCtrl",e)}(),function(){"use strict";function e(e){function t(t,n,i){var o=i.scrollaxis||"y",r=i.theme||"minimal-dark",a=i.mousewheelaxis||"y";$("html").hasClass("ismobile")||e.malihuScroll(n,r,o,a)}var n={restrict:"C",link:t};return n}e.$inject=["scrollbarService"],angular.module("app").directive("cOverflow",e)}(),function(){"use strict";function e(){function e(e,t){t.click(function(){t.next().slideToggle(200),t.parent().toggleClass("toggled")})}var t={restrict:"A",link:e};return t}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,t){t.hasClass("btn-icon")||t.hasClass("btn-float")?Waves.attach(t,["waves-circle"]):t.hasClass("btn-light")?Waves.attach(t,["waves-light"]):Waves.attach(t),Waves.init()}var t={restrict:"C",link:e};return t}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,t){var n=t.children().first(),i=t.parent().hasClass("fg-float");n.focus(function(){t.addClass("fg-toggled")}),n.blur(function(){(!i||i&&0===n.val().length)&&t.removeClass("fg-toggled")})}var t={restrict:"C",link:e};return t}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAuY29uZmlnLmpzIiwiYXBwLmNvbnRyb2xsZXIuanMiLCJhcHAucm91dGVzLmpzIiwiYXBwLnJ1bi5qcyIsImF1dGhlbnRpY2F0aW9uL3NlcnZpY2VzL2F1dGguc2VydmljZS5qcyIsImF1dGhlbnRpY2F0aW9uL3NlcnZpY2VzL3VzZXIuc2VydmljZS5qcyIsImF1dGhlbnRpY2F0aW9uL3ZpZXdzL2xvZ2luLmNvbnRyb2xsZXIuanMiLCJhdXRoZW50aWNhdGlvbi92aWV3cy9wYXNzd29yZC1yZXNldC5jb250cm9sbGVyLmpzIiwiYXV0aGVudGljYXRpb24vdmlld3MvcmVnaXN0ZXIuY29udHJvbGxlci5qcyIsImF1dGhlbnRpY2F0aW9uL3ZpZXdzL3ZlcmlmaWNhdGlvbi5jb250cm9sbGVyLmpzIiwiY2hhbGxlbmdlcy9jb21wb25lbnRzL2FjdGl2ZS1jaGFsbGVuZ2VzLmRpcmVjdGl2ZS5qcyIsImNoYWxsZW5nZXMvY29tcG9uZW50cy9jb21wbGV0ZWQtY2hhbGxlbmdlcy5kaXJlY3RpdmUuanMiLCJjaGFsbGVuZ2VzL2NvbXBvbmVudHMvcGxheWVyLW92ZXJhbGwtcmVzdWx0cy5kaXJlY3RpdmUuanMiLCJjaGFsbGVuZ2VzL2NvbXBvbmVudHMvdGVhbS1vdmVyYWxsLXJlc3VsdHMuZGlyZWN0aXZlLmpzIiwiY2hhbGxlbmdlcy9zZXJ2aWNlcy9jaGFsbGVuZ2VzLnNlcnZpY2UuanMiLCJjb21tb24vY29tcG9uZW50cy9mb290ZXIuZGlyZWN0aXZlLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvaGVhZGVyLmRpcmVjdGl2ZS5qcyIsImNvbW1vbi9jb21wb25lbnRzL3NpZGViYXIuZGlyZWN0aXZlLmpzIiwiY29tbW9uL2ZpbHRlcnMvb3JkZXItb2JqZWN0LWJ5LmZpbHRlci5qcyIsImNvbW1vbi9zZXJ2aWNlcy9hbGVydHMuc2VydmljZS5qcyIsImNvbW1vbi9zZXJ2aWNlcy9pbmRlbnRpdHkuc2VydmljZS5qcyIsImNvbW1vbi9zZXJ2aWNlcy9ub3RpZnkuc2VydmljZS5qcyIsImNvbW1vbi9zZXJ2aWNlcy9zY3JvbGxiYXIuc2VydmljZS5qcyIsImNvbW1vbi9zZXJ2aWNlcy9zaWRlYmFyLnNlcnZpY2UuanMiLCJjb21tb24vc2VydmljZXMvd2Vic29ja2V0LnNlcnZpY2UuanMiLCJjb21tb24vdmlld3MvaG9tZS5jb250cm9sbGVyLmpzIiwiY29tcGV0aXRpb25zL2NvbXBvbmVudHMvY29tcGV0aXRpb24tY29tcGFjdC5kaXJlY3RpdmUuanMiLCJjb21wZXRpdGlvbnMvY29tcG9uZW50cy9wZW5kaW5nLXBsYXllcnMuZGlyZWN0aXZlLmpzIiwiY29tcGV0aXRpb25zL2NvbXBvbmVudHMvcHlyYW1pZC5kaXJlY3RpdmUuanMiLCJjb21wZXRpdGlvbnMvY29tcG9uZW50cy91cGRhdGUtYWRtaW5zLmRpcmVjdGl2ZS5qcyIsImNvbXBldGl0aW9ucy9jb21wb25lbnRzL3VwZGF0ZS1wbGF5ZXJzLmRpcmVjdGl2ZS5qcyIsImNvbXBldGl0aW9ucy9jb21wb25lbnRzL3ZlcnN1cy5kaXJlY3RpdmUuanMiLCJjb21wZXRpdGlvbnMvc2VydmljZXMvY29tcGV0aXRpb25zLnNlcnZpY2UuanMiLCJjb21wZXRpdGlvbnMvdmlld3MvY29tcGV0aXRpb24tYWRtaW4uY29udHJvbGxlci5qcyIsImNvbXBldGl0aW9ucy92aWV3cy9jb21wZXRpdGlvbi1zdGF0cy5jb250cm9sbGVyLmpzIiwiY29tcGV0aXRpb25zL3ZpZXdzL2NvbXBldGl0aW9uLmNvbnRyb2xsZXIuanMiLCJjb21wZXRpdGlvbnMvdmlld3MvY29tcGV0aXRpb25zLmNvbnRyb2xsZXIuanMiLCJjb21wZXRpdGlvbnMvdmlld3MvY3JlYXRlLWNvbXBldGl0aW9uLmNvbnRyb2xsZXIuanMiLCJjb21wZXRpdGlvbnMvdmlld3MvbXktY29tcGV0aXRpb25zLmNvbnRyb2xsZXIuanMiLCJ1c2Vycy92aWV3cy91c2VyLmNvbnRyb2xsZXIuanMiLCJjb21tb24vY29tcG9uZW50cy91aS9zY3JvbGxiYXIuZGlyZWN0aXZlLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvdWkvdG9nZ2xlLXN1Ym1lbnUuZGlyZWN0aXZlLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvdWkvd2F2ZXMuZGlyZWN0aXZlLmpzIiwiY29tbW9uL2NvbXBvbmVudHMvdWkvZm9ybXMvZmctbGluZS5kaXJlY3RpdmUuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZ3VyYXRpb24iLCIkaHR0cFByb3ZpZGVyIiwiJHVpYlRvb2x0aXBQcm92aWRlciIsIiRxUHJvdmlkZXIiLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJnZXQiLCJvcHRpb25zIiwiYXBwZW5kVG9Cb2R5IiwiZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMiLCJjb25maWciLCJBcHBDdHJsIiwiJHN0YXRlIiwibG9jYWxTdG9yYWdlU2VydmljZSIsInRvZ2dsZVNpZGViYXJMb2NrZWQiLCJsb2NrZWQiLCJzZXQiLCJhcHBDdHJsIiwidGhpcyIsImxvY2tTaWRlYmFyIiwiY29udHJvbGxlciIsImNvbmZpZ3VyZVJvdXRlcyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJyb3V0ZVJvbGVDaGVja3MiLCJzdXBlckFkbWluIiwicmVxdWlyZVN1cGVyQWRtaW4iLCJhZG1pbiIsInJlcXVpcmVBZG1pbiIsInVzZXIiLCJyZXF1aXJlQXV0aCIsImh0bWw1TW9kZSIsIm90aGVyd2lzZSIsIndoZW4iLCJzdGF0ZSIsInVybCIsInZpZXdzIiwiY29udGVudCIsImNvbnRyb2xsZXJBcyIsInRlbXBsYXRlVXJsIiwiY29udGVudEAiLCJyZXNvbHZlIiwiYXV0aCIsImF1dGhTZXJ2aWNlIiwiYXV0aG9yaXplQ3VycmVudFVzZXJGb3JSb3V0ZSIsImF1dGhlbnRpY2F0ZWRVc2VyRm9yUm91dGUiLCIkaW5qZWN0IiwiYXBwUnVuIiwiJHJvb3RTY29wZSIsInNpZGViYXJTZXJ2aWNlIiwiJG9uIiwiZXZlbnQiLCJ0b1N0YXRlIiwidG9QYXJhbXMiLCJmcm9tU3RhdGUiLCJmcm9tUGFyYW1zIiwiZXJyb3IiLCJnbyIsInByZXZpb3VzIiwicHJldlBhcmFtcyIsInNldFNpZGViYXJTdGF0dXMiLCJydW4iLCIkaHR0cCIsIiRxIiwidXNlclNlcnZpY2UiLCJpZGVudGl0eVNlcnZpY2UiLCJub3RpZnlTZXJ2aWNlIiwiYXV0aGVudGljYXRlVXNlciIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJkZmQiLCJkZWZlciIsInBvc3QiLCJ0aGVuIiwicmVzcG9uc2UiLCJkYXRhIiwic3VjY2VzcyIsImN1cnJlbnRVc2VyIiwibWVzc2FnZSIsInByb21pc2UiLCJjcmVhdGVVc2VyIiwidXNlckRhdGEiLCJyZWFzb24iLCJsb2dvdXQiLCJ1bmRlZmluZWQiLCJyb2xlIiwiaXNBdXRob3JpemVkIiwicmVqZWN0IiwiaXNBdXRoZW50aWNhdGVkIiwic2VydmljZSIsImZhY3RvcnkiLCJnZXRBbGxVc2VycyIsInVzZXJzIiwiXyIsImZvckVhY2giLCJkaXNwbGF5TmFtZSIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwic29ydEJ5IiwidmVyaWZ5VXNlciIsInVzZXJJZCIsInZlcmlmaWNhdGlvblRva2VuIiwicGFyYW1zIiwiZ2VuZXJhdGVQYXNzd29yZFJlc2V0TGluayIsInJlc2V0UGFzc3dvcmQiLCJwdXQiLCJ1cGRhdGVVc2VyIiwiTG9naW5DdHJsIiwiYWN0aXZhdGUiLCJsb2dpbiIsInZtIiwiUGFzc3dvcmRSZXNldEN0cmwiLCIkc3RhdGVQYXJhbXMiLCJ2ZXJpZmllZCIsInJlc2V0UGFzc3dvcmRGb3JtIiwiY29uZmlybVBhc3N3b3JkIiwiUmVnaXN0ZXJDdHJsIiwicmVnaXN0ZXIiLCJuZXdVc2VyIiwiVmVyaWZpY2F0aW9uQ3RybCIsInZlcmlmeWluZyIsIndwbUFjdGl2ZUNoYWxsZW5lZ2VzIiwiZGlyZWN0aXZlIiwiYmluZFRvQ29udHJvbGxlciIsImN0cmxGdW5jIiwicmVzdHJpY3QiLCJzY29wZSIsImNvbXBldGl0aW9uIiwiJHNjb3BlIiwiY2hhbGxlbmdlc1NlcnZpY2UiLCIkd2F0Y2giLCJnZXRBY3RpdmVDaGFsbGVuZ2VzIiwiY2hhbGxlbmdlcyIsImdldEFjdGl2ZUNoYWxsZW5nZXNCeUNvbXBldGl0aW9uIiwiX2lkIiwibGVuZ3RoIiwiY2hhbGxlbmdlIiwidHlwZSIsImNoYWxsZW5nZXIiLCJ0ZWFtIiwib3Bwb25lbnQiLCJ0aW1lTGltaXQiLCJleHBpcmVzIiwibW9tZW50IiwiZGlmZiIsImNyZWF0ZWQiLCJhZGQiLCJ3cG1Db21wbGV0ZWRDaGFsbGVuZWdlcyIsImNvbXBldGl0aW9uSWQiLCJhbGxvd0RlbGV0ZSIsImRpc3BsYXlDb21wbGV0ZWRDaGFsbGVuZ2VzIiwibG9zZXIiLCJ3aW5uZXIiLCJ3aGVuQ29tcGxldGVkIiwiY29tcGxldGVkIiwiY2FsZW5kYXIiLCJzYW1lRGF5IiwibmV4dERheSIsIm5leHRXZWVrIiwibGFzdERheSIsImxhc3RXZWVrIiwic2FtZUVsc2UiLCJkZWxldGVDaGFsbGVuZ2UiLCJjaGFsbGVuZ2VJZCIsIiRpbmRleCIsInNwbGljZSIsIndwbVBsYXllck92ZXJhbGxSZXN1bHRzIiwicGxheWVyIiwiYXNzaWducGxheWVyc1RvTGV2ZWxzIiwiY2FsY3VsYXRlU3RyZWFrIiwiY2FsY3VhdGVXaW5BbmRMb3NlcyIsImJyZWFrUG9pbnRzIiwiaSIsIm1heExldmVscyIsInB1c2giLCJsZXZlbCIsImoiLCJwb3NpdGlvbiIsImluZGV4T2YiLCJzdHJlYWtUeXBlIiwic3RyZWFrIiwiY29udGludWVTdHJlYWsiLCJyZXN1bHRzIiwidmFsdWUiLCJ3aW5zIiwiYXNPcHBvbmVudCIsInNpemUiLCJmaWx0ZXIiLCJhc0NoYWxsZW5nZXIiLCJ0b3RhbCIsImJ5Rm9yZmVpdCIsImZvcmZlaXQiLCJsb3NlcyIsIndwbVRlYW1PdmVyYWxsUmVzdWx0cyIsImNyZWF0ZVB5cmFtaWRDaGFsbGVuZ2UiLCJjcmVhdGVWZXJzdXNDaGFsbGVuZ2UiLCJjb21wbGV0ZVB5cmFtaWRDaGFsbGVuZ2UiLCJjb21wbGV0ZVZlcnN1c0NoYWxsZW5nZSIsImdldENoYWxsZW5nZXNCeUNvbXBldGl0aW9uIiwiZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyIiwicGxheWVySWQiLCJnZXRDb21wbGV0ZWRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbiIsImxpbWl0IiwiZGVsZXRlQWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyIiwiZGVsZXRlIiwiZ2V0UGxheWVyUmVzdWx0c0J5Q29tcGV0aXRpb24iLCJ3cG1Gb290ZXIiLCJpbmRlbnRpdHkiLCJ3cG1IZWFkZXIiLCJhbGVydHNTZXJ2aWNlIiwiZ2V0QWN0aXZlQWxlcnRzIiwiaGVhZGVyQ3RybCIsImFsZXJ0cyIsImdldEFjdGl2ZUFsZXJ0c0J5UGxheWVyIiwiY2xlYXJBbGVydCIsImluZGV4IiwiY2xlYXJBbGxBbGVydHMiLCJjbGVhckFsbEFsZXJ0c0J5UGxheWVyIiwidG9nZ2xlU2lkZWJhciIsInNpZGViYXJTdGF0dXMiLCJsZWZ0IiwiZ2V0U2lkZWJhclN0YXR1cyIsImUiLCJzb21lIiwid3BtU2lkZWJhciIsIm9yZGVyT2JqZWN0QnkiLCJpbnB1dCIsImF0dHJpYnV0ZSIsImlzT2JqZWN0IiwiYXJyYXkiLCJvYmplY3RLZXkiLCJzb3J0IiwiYSIsImIiLCJwYXJzZUludCIsImFsZXJ0SWQiLCIkd2luZG93Iiwicm9sZXMiLCJib290c3RyYXBwZWRVc2VyT2JqZWN0IiwiaW5mbyIsInRhcmdldCIsIiQiLCJub3RpZnkiLCJ3YXJuaW5nIiwiaW52ZXJzZSIsIm5vdGlmeURlZmF1bHRzIiwibmV3ZXN0X29uX3RvcCIsIm9mZnNldCIsIngiLCJ5IiwiZGVsYXkiLCJzY3JvbGxiYXJTZXJ2aWNlIiwibWFsaWh1U2Nyb2xsIiwic2VsZWN0b3IiLCJ0aGVtZSIsInNjcm9sbGF4aXMiLCJtb3VzZXdoZWVsYXhpcyIsIm1DdXN0b21TY3JvbGxiYXIiLCJzY3JvbGxJbmVydGlhIiwiYXhpcyIsIm1vdXNlV2hlZWwiLCJlbmFibGUiLCJwcmV2ZW50RGVmYXVsdCIsInN0YXR1cyIsInJpZ2h0Iiwid2Vic29ja2V0U2VydmljZSIsIiR0aW1lb3V0Iiwid2Vic29ja2V0SG9zdCIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJob3N0IiwiY29ubmVjdCIsImNvbm5lY3Rpb24iLCJXZWJTb2NrZXQiLCJvbm1lc3NhZ2UiLCJyZXRyeSIsInBheWxvYWQiLCJKU09OIiwicGFyc2UiLCIkYnJvYWRjYXN0IiwidG9waWMiLCJvbmNsb3NlIiwicmV0cnlTZWNvbmRzIiwiY29uc29sZSIsImxvZyIsInNlbmQiLCJqc29uIiwic3RyaW5naWZ5IiwiSG9tZUN0cmwiLCJjb21wZXRpdGlvbnNTZXJ2aWNlIiwiZ2V0UHVibGljQ29tcGV0aXRpb25zIiwiY29tcGV0aXRpb25zIiwicHVibGljQ29tcGV0aXRpb25zIiwiZ2V0UHJpdmF0ZUNvbXBldGl0aW9ucyIsInByaXZhdGVDb21wZXRpdGlvbnMiLCJ3cG1Db21wZXRpdGlvbkNvbXBhY3QiLCJ3cG1QZW5kaW5nUGxheWVycyIsImFwcHJvdmVQZW5kaW5nUGxheWVyIiwicGxheWVycyIsImRlbnlQZW5kaW5nUGxheWVyIiwicGVuZGluZ1BsYXllcnMiLCJ3cG1QeXJhbWlkIiwicmVwbGFjZSIsIiRmaWx0ZXIiLCJtYXhQbGF5ZXJzIiwib3JkZXJQbGF5ZXJzIiwiZ2V0UGxheWVyc1N0YXR1cyIsImFzc2lnbkxldmVsc1RvUGxheWVycyIsImNhbGN1bGF0ZUNvbXBldGl0aW9uQmxvY2tzIiwiZmlsbEluRW1wdHlCbG9ja3MiLCJjdXJyZW50VXNlcklzQWRtaW4iLCJjdXJyZW50VXNlcklzUGVuZGluZyIsImFkbWlucyIsImN1cnJlbnRVc2VySXNPbkNvbXBldGl0aW9uIiwiaGFzQWN0aXZlQ2hhbGxlbmdlIiwiY2xhc3MiLCJjdXJyZW50VXNlclBsYXllciIsImFjdGl2ZUNoYWxsZW5nZU9wcG9uZW50IiwiY3VycmVudE9wcG9uZW50IiwiZmluZCIsImZpbmRBdmFpbGFibGVDaGFsbGVuZ2VzIiwiYXZhaWxhYmxlIiwidGltZVRvRXhwaXJlIiwiY29tcGxldGVDaGFsbGVuZ2UiLCJjcmVhdGVCcmVha1BvaW50cyIsImxldmVscyIsIm51bWJlck9mQmxvY2tzIiwibGFzdCIsIm51bWJlck9mUmVhbFBsYXllcnMiLCJsZXZlbEFib3ZlIiwiYXZhaWxhYmxlQ2hhbGxlbmdlcyIsImNyZWF0ZUNoYWxsZW5nZSIsImNvbXBldGl0aW9uTmFtZSIsIm5hbWUiLCJjb21wbGV0ZSIsImZvcmZlaXREYXlzIiwiZW1haWwiLCJjb21wZXRpdGlvbk1lbnVUb2dnbGUiLCJ3aW5uZXJJc0N1cnJlbnRVc2VyIiwiZm9yZmVpdExvc2VyIiwic3dhcFBvc2l0aW9ucyIsInJlbW92aW5nQ3VycmVudFVzZXIiLCJyZW1vdmVDdXJyZW50VXNlckZyb21Db21wZXRpdGlvbiIsImNoYWxsZW5nZUV4cGlyZWQiLCJhZGRDdXJyZW50VXNlclRvQ29tcGV0aXRpb24iLCJyZXN0cmljdEpvaW5zIiwic3dhbCIsInRpdGxlIiwidGV4dCIsInNob3dDYW5jZWxCdXR0b24iLCJjb25maXJtQnV0dG9uVGV4dCIsImNhbmNlbEJ1dHRvblRleHQiLCJjbG9zZU9uQ29uZmlybSIsImNsb3NlT25DYW5jZWwiLCJhZGRQbGF5ZXJUb0NvbXBldGl0aW9uUmVxdWVzdCIsImFkZFBsYXllclRvQ29tcGV0aXRpb24iLCJjb25maXJtUmVtb3ZlQ3VycmVudFVzZXJGcm9tQ29tcGV0aXRpb24iLCJjb25maXJtQnV0dG9uQ2xhc3MiLCJnZXRDb21wZXRpdGlvbiIsInAiLCJvcGVuUG9zaXRpb24iLCJyZW1vdmVkUGxheWVyIiwicmVtb3ZlIiwidXBkYXRlZFBsYXllcnMiLCJ1cGRhdGVkUGxheWVyIiwicmVtb3ZlZFBsYXllckZyb21Db21wZXRpdGlvbiIsInBsYXllckNsaWNrIiwic2hvd0NoYWxsZW5nZU1vZGFsIiwicmVmcmVzaENvbXBldGl0aW9uIiwiY2hhbGxlbmdlRGV0YWlscyIsImRlc2NyaXB0aW9uIiwid3BtVXBkYXRlQWRtaW5zIiwiYWRkZWRBZG1pbnMiLCJjbG9uZURlZXAiLCJkaXNhYmxlU3VibWl0IiwidXNlcklzUHJpbWFyeUFkbWluIiwicHJpbWFyeSIsImdldEF2YWlsYWJsZUFkbWlucyIsImF2YWlsYWJsZUFkbWlucyIsInJlbW92ZWRBZG1pbnMiLCJjb21wZXRpdGlvbkFkbWluIiwiYXZhaWxhYmxlQWRtaW4iLCJvcmlnaW5hbEF2YWlsYWJsZUFkbWlucyIsInVwZGF0ZUNvbXBldGl0aW9uIiwiY2FuY2VsVXBkYXRlIiwicmVtb3ZlQWRtaW4iLCJhZGRBZG1pbiIsIndwbVVwZGF0ZVBsYXllcnMiLCJhZGRlZFBsYXllcnMiLCJnZXRBdmFpbGFibGVQbGF5ZXJzIiwiYXZhaWxhYmxlUGxheWVycyIsInJlbW92ZWRQbGF5ZXJzIiwiY29tcGV0aXRpb25QbGF5ZXIiLCJhdmFpbGFibGVQbGF5ZXIiLCJvcmlnaW5hbEF2YWlsYWJsZVBsYXllcnMiLCJyZW9yZGVyUGxheWVycyIsInJlb3JkZXJWZXJzdXNQbGF5ZXJzIiwicmVvcmRlclB5cmFtaWRQbGF5ZXJzIiwicmVtb3ZlUGxheWVyIiwiYWRkUGxheWVyIiwid3BtVmVyc3VzIiwic2hvd0NvbnRyb2xzIiwiZ3JvdXBQbGF5ZXJzIiwiZ2V0Q3VycmVudFVzZXJTdGF0dXMiLCJ0ZWFtcyIsImFjdGl2ZUNoYWxsZW5nZSIsImNoYWxsZW5nZUV4cGlyZVRpbWUiLCJ0b2dnbGVDb250cm9scyIsIndpbm5pbmdUZWFtIiwiZ2V0Q29tcGV0aXRpb25zRm9yVXNlciIsImNyZWF0ZUNvbXBldGl0aW9uIiwiZGVsZXRlQ29tcGV0aXRpb24iLCJDb21wZXRpdGlvbkFkbWluQ3RybCIsImlzQWRtaW4iLCJ1cGRhdGVDb21wZXRpdGlvblJlc3RyaWN0Sm9pbnMiLCJ1cGRhdGVkQ29tcGV0aXRpb24iLCJ1cGRhdGVDb21wZXRpdGlvblByaXZhdGUiLCJwcml2YXRlIiwiY29tcGV0aXRpb25EZXRhaWxzIiwiQ29tcGV0aXRpb25TdGF0c0N0cmwiLCJudW1iZXIiLCJwbGF5ZXJzUmVzdWx0cyIsIkNvbXBldGl0aW9uQ3RybCIsIkNvbXBldGl0aW9uc0N0cmwiLCJDcmVhdGVDb21wZXRpdGlvbkN0cmwiLCJuZXdDb21wZXRpdGlvbiIsImNvbXBldGl0aW9uVHlwZXMiLCJNeUNvbXBldGl0aW9uc0N0cmwiLCJteUNvbXBldGl0aW9ucyIsIlVzZXJDdHJsIiwidXNlclVwZGF0ZXMiLCJsZW50Z2giLCJ1c2VyRm9ybSIsIiRzZXRQcmlzdGluZSIsImN1cnJlbnRVc2VyQ2xvbmUiLCJjb3B5IiwiZXh0ZW5kIiwiY092ZXJmbG93IiwibGlua0Z1bmMiLCJlbGVtZW50IiwiYXR0cnMiLCJoYXNDbGFzcyIsImxpbmsiLCJ0b2dnbGVTdWJtZW51IiwiZWwiLCJjbGljayIsIm5leHQiLCJzbGlkZVRvZ2dsZSIsInBhcmVudCIsInRvZ2dsZUNsYXNzIiwid2F2ZXNFZmZlY3QiLCJXYXZlcyIsImF0dGFjaCIsImluaXQiLCJmZ0xpbmUiLCJjaGlsZHJlbiIsImZpcnN0IiwiaXNGbG9hdExhYmVsIiwiZm9jdXMiLCJhZGRDbGFzcyIsImJsdXIiLCJ2YWwiLCJyZW1vdmVDbGFzcyJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQUFDLE9BQUEsT0FDQSxZQUNBLGVBQ0EsWUFDQSxzQkFDQSxhQUNBLHdCQUNBLFFBQ0EscUJBQ0Esd0JBQ0Esc0JDVkEsd0JBSUEsU0FBQUMsR0FBQUMsRUFBQUMsRUFBQUMsR0FFQUYsRUFBQUcsU0FBQUMsUUFBQUMsTUFDQUwsRUFBQUcsU0FBQUMsUUFBQUMsUUFHQUwsRUFBQUcsU0FBQUMsUUFBQUMsSUFBQSxxQkFBQSxnQ0FFQUwsRUFBQUcsU0FBQUMsUUFBQUMsSUFBQSxpQkFBQSxXQUNBTCxFQUFBRyxTQUFBQyxRQUFBQyxJQUFBLE9BQUEsV0FFQUosRUFBQUssU0FBQUMsY0FBQSxJQUNBTCxFQUFBTSw0QkFBQSxrRUFkQVgsUUFBQUMsT0FBQSxPQUFBVyxPQUFBVixNQ0ZBLHVCQUlBLFNBQUFXLEdBQUFDLEVBQUFDLEdBUUEsUUFBQUMsR0FBQUMsR0FDQUYsRUFBQUcsSUFBQSxnQkFBQUQs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QUNBNEgsVUFBQSxZQUFBMlQsTUNKQSxXQUNBLFlBS0EsU0FBQU0sS0FRQSxRQUFBTCxHQUFBeFQsRUFBQThULEdBQ0FBLEVBQUFDLE1BQUEsV0FDQUQsRUFBQUUsT0FBQUMsWUFBQSxLQUNBSCxFQUFBSSxTQUFBQyxZQUFBLGFBVkEsR0FBQXZVLElBQ0FHLFNBQUEsSUFDQTZULEtBQUFKLEVBR0EsT0FBQTVULEdBVkE3SCxRQUNBQyxPQUFBLE9BQ0E0SCxVQUFBLGdCQUFBaVUsTUNKQSxXQUNBLFlBS0EsU0FBQU8sS0FRQSxRQUFBWixHQUFBeFQsRUFBQXlULEdBQ0FBLEVBQUFFLFNBQUEsYUFBQUYsRUFBQUUsU0FBQSxhQUNBVSxNQUFBQyxPQUFBYixHQUFBLGlCQUNBQSxFQUFBRSxTQUFBLGFBQ0FVLE1BQUFDLE9BQUFiLEdBQUEsZ0JBRUFZLE1BQUFDLE9BQUFiLEdBR0FZLE1BQUFFLE9BaEJBLEdBQUEzVSxJQUNBRyxTQUFBLElBQ0E2VCxLQUFBSixFQUdBLE9BQUE1VCxHQVZBN0gsUUFDQUMsT0FBQSxPQUNBNEgsVUFBQSxjQUFBd1UsTUNKQSxXQUNBLFlBS0EsU0FBQUksS0FRQSxRQUFBaEIsR0FBQXhULEVBQUF5VCxHQUNBLEdBQUFyTixHQUFBcU4sRUFBQWdCLFdBQUFDLFFBQ0FDLEVBQUFsQixFQUFBUyxTQUFBUCxTQUFBLFdBQ0F2TixHQUFBd08sTUFBQSxXQUNBbkIsRUFBQW9CLFNBQUEsZ0JBR0F6TyxFQUFBME8sS0FBQSxhQUNBSCxHQUFBQSxHQUFBLElBQUF2TyxFQUFBMk8sTUFBQXRVLFNBQ0FnVCxFQUFBdUIsWUFBQSxnQkFoQkEsR0FBQXBWLElBQ0FHLFNBQUEsSUFDQTZULEtBQUFKLEVBR0EsT0FBQTVULEdBVkE3SCxRQUNBQyxPQUFBLE9BQ0E0SCxVQUFBLFNBQUE0VSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnYXBwJywgW1xuICAndWkucm91dGVyJyxcbiAgJ3VpLmJvb3RzdHJhcCcsXG4gICduZ0FuaW1hdGUnLFxuICAnYW5ndWxhci1sb2FkaW5nLWJhcicsXG4gICdub3Vpc2xpZGVyJyxcbiAgJ2xvY2FseXRpY3MuZGlyZWN0aXZlcycsXG4gICd0aW1lcicsXG4gICdMb2NhbFN0b3JhZ2VNb2R1bGUnLFxuICAnYW5ndWxhci1zb3J0YWJsZS12aWV3JyxcbiAgJ2FuZ3VsYXIudmVydGlsaXplJ1xuXSk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QgJztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbmZpZyhjb25maWd1cmF0aW9uKTtcblxuICBmdW5jdGlvbiBjb25maWd1cmF0aW9uKCRodHRwUHJvdmlkZXIsICR1aWJUb29sdGlwUHJvdmlkZXIsICRxUHJvdmlkZXIpIHtcbiAgICAvL2luaXRpYWxpemUgZ2V0IGlmIG5vdCB0aGVyZVxuICAgIGlmICghJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldCkge1xuICAgICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldCA9IHt9OyAgICBcbiAgICB9ICAgIFxuICAgIC8vZGlzYWJsZSBJRSBhamF4IHJlcXVlc3QgY2FjaGluZ1xuICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXRbJ0lmLU1vZGlmaWVkLVNpbmNlJ10gPSAnRnJpLCAwMSBKYW4gMjAxNiAwNTowMDowMCBHTVQnO1xuICAgIC8vIGV4dHJhXG4gICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldFsnQ2FjaGUtQ29udHJvbCddID0gJ25vLWNhY2hlJztcbiAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0WydQcmFnbWEnXSA9ICduby1jYWNoZSc7XG5cbiAgICAkdWliVG9vbHRpcFByb3ZpZGVyLm9wdGlvbnMoeyBhcHBlbmRUb0JvZHk6IHRydWUgfSk7XG4gICAgJHFQcm92aWRlci5lcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyhmYWxzZSk7XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignQXBwQ3RybCcsIEFwcEN0cmwpO1xuXG4gIGZ1bmN0aW9uIEFwcEN0cmwoJHN0YXRlLCBsb2NhbFN0b3JhZ2VTZXJ2aWNlKSB7XG4gICAgdmFyIGFwcEN0cmwgPSB0aGlzO1xuICAgIC8vIFVzZSB0aGlzIGZvciBTaWRlYmFyIG1lbnVcbiAgICBhcHBDdHJsLiRzdGF0ZSA9ICRzdGF0ZTtcbiAgICAvLyBMb2NrIHRoZSBzaWRlYmFyIGluIHZpZXdcbiAgICBhcHBDdHJsLmxvY2tTaWRlYmFyID0gbG9jYWxTdG9yYWdlU2VydmljZS5nZXQoJ3NpZGViYXJMb2NrZWQnKTtcbiAgICBhcHBDdHJsLnRvZ2dsZVNpZGViYXJMb2NrZWQgPSB0b2dnbGVTaWRlYmFyTG9ja2VkO1xuXG4gICAgZnVuY3Rpb24gdG9nZ2xlU2lkZWJhckxvY2tlZChsb2NrZWQpIHtcbiAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2Uuc2V0KCdzaWRlYmFyTG9ja2VkJywgbG9ja2VkKTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29uZmlnKGNvbmZpZ3VyZVJvdXRlcyk7XG5cbiAgZnVuY3Rpb24gY29uZmlndXJlUm91dGVzKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSB7XG4gICAgdmFyIHJvdXRlUm9sZUNoZWNrcyA9IHtcbiAgICAgIHN1cGVyQWRtaW46IHJlcXVpcmVTdXBlckFkbWluLFxuICAgICAgYWRtaW46IHJlcXVpcmVBZG1pbixcbiAgICAgIHVzZXI6IHJlcXVpcmVBdXRoXG4gICAgfTtcblxuICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcblxuICAgIC8vIGZvciBhbnkgdW5tYXRjaGVkIHVybFxuICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcblxuICAgICR1cmxSb3V0ZXJQcm92aWRlci53aGVuKCcvY29tcGV0aXRpb25zLycsICcvY29tcGV0aXRpb25zJyk7XG5cbiAgICAkc3RhdGVQcm92aWRlclxuICAgICAgLnN0YXRlKCdob21lJywge1xuICAgICAgICB1cmw6ICcvJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdIb21lQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbW1vbi92aWV3cy9ob21lLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgnY29tcGV0aXRpb25zJywge1xuICAgICAgICB1cmw6ICcvY29tcGV0aXRpb25zJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb21wZXRpdGlvbnNDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcGV0aXRpb25zL3ZpZXdzL2NvbXBldGl0aW9ucy5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkuc3RhdGUoJ2NvbXBldGl0aW9ucy5teUNvbXBldGl0aW9ucycsIHtcbiAgICAgICAgdXJsOiAnL215LWNvbXBldGl0aW9ucycsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnRAJzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ015Q29tcGV0aXRpb25zQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBldGl0aW9ucy92aWV3cy9teS1jb21wZXRpdGlvbnMuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICBhdXRoOiByb3V0ZVJvbGVDaGVja3MudXNlclxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgnY29tcGV0aXRpb25zLnZpZXcnLCB7XG4gICAgICAgIHVybDogJy92aWV3Lzpjb21wZXRpdGlvbklkJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudEAnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQ29tcGV0aXRpb25DdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcGV0aXRpb25zL3ZpZXdzL2NvbXBldGl0aW9uLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgnY29tcGV0aXRpb25zLnN0YXRzJywge1xuICAgICAgICB1cmw6ICcvc3RhdHMvOmNvbXBldGl0aW9uSWQnLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50QCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb21wZXRpdGlvblN0YXRzQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBldGl0aW9ucy92aWV3cy9jb21wZXRpdGlvbi1zdGF0cy5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkuc3RhdGUoJ2NvbXBldGl0aW9ucy5hZG1pbicsIHtcbiAgICAgICAgdXJsOiAnL2FkbWluLzpjb21wZXRpdGlvbklkJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudEAnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQ29tcGV0aXRpb25BZG1pbkN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wZXRpdGlvbnMvdmlld3MvY29tcGV0aXRpb24tYWRtaW4uaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICBhdXRoOiByb3V0ZVJvbGVDaGVja3MudXNlclxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgnY29tcGV0aXRpb25zLmNyZWF0ZScsIHtcbiAgICAgICAgdXJsOiAnL2NyZWF0ZScsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnRAJzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ0NyZWF0ZUNvbXBldGl0aW9uQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBldGl0aW9ucy92aWV3cy9jcmVhdGUtY29tcGV0aXRpb24uaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICBhdXRoOiByb3V0ZVJvbGVDaGVja3MudXNlclxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgndXNlcicsIHtcbiAgICAgICAgdXJsOiAnL3VzZXInLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ1VzZXJDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndXNlcnMvdmlld3MvdXNlci5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgIGF1dGg6IHJvdXRlUm9sZUNoZWNrcy51c2VyXG4gICAgICAgIH1cbiAgICAgIH0pLnN0YXRlKCdsb2dpbicsIHtcbiAgICAgICAgdXJsOiAnL2xvZ2luJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhdXRoZW50aWNhdGlvbi92aWV3cy9sb2dpbi5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkuc3RhdGUoJ3JlZ2lzdGVyJywge1xuICAgICAgICB1cmw6ICcvcmVnaXN0ZXInLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2F1dGhlbnRpY2F0aW9uL3ZpZXdzL3JlZ2lzdGVyLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgndmVyaWZ5Jywge1xuICAgICAgICB1cmw6ICcvdmVyaWZpY2F0aW9uJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdWZXJpZmljYXRpb25DdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXV0aGVudGljYXRpb24vdmlld3MvdmVyaWZpY2F0aW9uLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgndmVyaWZpY2F0aW9uJywge1xuICAgICAgICB1cmw6ICcvdmVyaWZpY2F0aW9uLzp1c2VySWQvOnZlcmlmaWNhdGlvblRva2VuJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdWZXJpZmljYXRpb25DdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXV0aGVudGljYXRpb24vdmlld3MvdmVyaWZpY2F0aW9uLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncGFzc3dvcmQtcmVzZXQtcmVxdWVzdCcsIHtcbiAgICAgICAgdXJsOiAnL3Bhc3N3b3JkLXJlc2V0JyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdQYXNzd29yZFJlc2V0Q3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2F1dGhlbnRpY2F0aW9uL3ZpZXdzL3Bhc3N3b3JkLXJlc2V0Lmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS5zdGF0ZSgncGFzc3dvcmQtcmVzZXQnLCB7XG4gICAgICAgIHVybDogJy9wYXNzd29yZC1yZXNldC86dXNlcklkLzp2ZXJpZmljYXRpb25Ub2tlbicsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2NvbnRlbnQnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUGFzc3dvcmRSZXNldEN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhdXRoZW50aWNhdGlvbi92aWV3cy9wYXNzd29yZC1yZXNldC5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICByZXF1aXJlQWRtaW4uJGluamVjdCA9IFsnYXV0aFNlcnZpY2UnXTtcblxuICBmdW5jdGlvbiByZXF1aXJlQWRtaW4oYXV0aFNlcnZpY2UpIHtcbiAgICByZXR1cm4gYXV0aFNlcnZpY2UuYXV0aG9yaXplQ3VycmVudFVzZXJGb3JSb3V0ZSgnYWRtaW4nKTtcbiAgfVxuXG4gIHJlcXVpcmVTdXBlckFkbWluLiRpbmplY3QgPSBbJ2F1dGhTZXJ2aWNlJ107XG5cbiAgZnVuY3Rpb24gcmVxdWlyZVN1cGVyQWRtaW4oYXV0aFNlcnZpY2UpIHtcbiAgICByZXR1cm4gYXV0aFNlcnZpY2UuYXV0aG9yaXplQ3VycmVudFVzZXJGb3JSb3V0ZSgnc3VwZXItYWRtaW4nKTtcbiAgfVxuXG4gIHJlcXVpcmVBdXRoLiRpbmplY3QgPSBbJ2F1dGhTZXJ2aWNlJ107XG5cbiAgZnVuY3Rpb24gcmVxdWlyZUF1dGgoYXV0aFNlcnZpY2UpIHtcbiAgICByZXR1cm4gYXV0aFNlcnZpY2UuYXV0aGVudGljYXRlZFVzZXJGb3JSb3V0ZSgpO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLnJ1bihhcHBSdW4pO1xuXG4gIGZ1bmN0aW9uIGFwcFJ1bigkcm9vdFNjb3BlLCAkc3RhdGUsIHNpZGViYXJTZXJ2aWNlKSB7XG4gICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZUVycm9yJywgZnVuY3Rpb24gKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zLCBlcnJvcikge1xuICAgICAgaWYgKGVycm9yID09PSAnbm90IGF1dGhvcml6ZWQnKSB7XG4gICAgICAgICRzdGF0ZS5nbygnbG9naW4nKTtcbiAgICAgICAgJHN0YXRlLnByZXZpb3VzID0gdG9TdGF0ZTtcbiAgICAgICAgJHN0YXRlLnByZXZQYXJhbXMgPSB0b1BhcmFtcztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNpZGViYXJTZXJ2aWNlLnNldFNpZGViYXJTdGF0dXMoZmFsc2UpO1xuICAgIH0pO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmZhY3RvcnkoJ2F1dGhTZXJ2aWNlJywgYXV0aFNlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIGF1dGhTZXJ2aWNlKCRzdGF0ZSwgJGh0dHAsICRxLCB1c2VyU2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlLCBub3RpZnlTZXJ2aWNlKSB7XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBhdXRoZW50aWNhdGVVc2VyOiBhdXRoZW50aWNhdGVVc2VyLFxuICAgICAgY3JlYXRlVXNlcjogY3JlYXRlVXNlcixcbiAgICAgIGxvZ291dDogbG9nb3V0LFxuICAgICAgYXV0aG9yaXplQ3VycmVudFVzZXJGb3JSb3V0ZTogYXV0aG9yaXplQ3VycmVudFVzZXJGb3JSb3V0ZSxcbiAgICAgIGF1dGhlbnRpY2F0ZWRVc2VyRm9yUm91dGU6IGF1dGhlbnRpY2F0ZWRVc2VyRm9yUm91dGVcbiAgICB9O1xuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gYXV0aGVudGljYXRlVXNlcih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgIHZhciBkZmQgPSAkcS5kZWZlcigpO1xuICAgICAgJGh0dHAucG9zdCgnL2xvZ2luJywge1xuICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsXG4gICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgIGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlciA9IHJlc3BvbnNlLmRhdGEudXNlcjtcbiAgICAgICAgICBkZmQucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UgPT09ICd1bnZlcmlmaWVkJykge1xuICAgICAgICAgIGRmZC5yZXNvbHZlKCd1bnZlcmlmaWVkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGZkLnJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZmQucHJvbWlzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVc2VyKHVzZXJEYXRhKSB7XG4gICAgICB2YXIgZGZkID0gJHEuZGVmZXIoKTtcbiAgICAgICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XG4gICAgICAgIHVzZXJEYXRhOiB1c2VyRGF0YVxuICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICBkZmQucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZmQucmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5yZWFzb24gPT09ICdFcnJvcjogRW1haWwgYWxyZWFkeSBpbiB1c2UnKSB7XG4gICAgICAgICAgbm90aWZ5U2VydmljZS5lcnJvcignU29ycnksIGFuIGFjY291bnQgYWxyZWFkeSBleGlzdHMgd2l0aCB0aGF0IGVtYWlsIGFkZHJlc3MuJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRmZC5wcm9taXNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvZ291dCgpIHtcbiAgICAgIHZhciBkZmQgPSAkcS5kZWZlcigpO1xuICAgICAgJGh0dHAucG9zdCgnL2xvZ291dCcsIHtcbiAgICAgICAgbG9nb3V0OiB0cnVlXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyID0gdW5kZWZpbmVkO1xuICAgICAgICBkZmQucmVzb2x2ZSgpO1xuICAgICAgICAkc3RhdGUuZ28oJ2hvbWUnKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRmZC5wcm9taXNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGF1dGhvcml6ZUN1cnJlbnRVc2VyRm9yUm91dGUocm9sZSkge1xuICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhvcml6ZWQocm9sZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJHEucmVqZWN0KCdub3QgYXV0aG9yaXplZCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWRVc2VyRm9yUm91dGUoKSB7XG4gICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICRxLnJlamVjdCgnbm90IGF1dGhvcml6ZWQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuZmFjdG9yeSgndXNlclNlcnZpY2UnLCB1c2VyU2VydmljZSk7XG5cbiAgZnVuY3Rpb24gdXNlclNlcnZpY2UoJGh0dHApIHtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGdldEFsbFVzZXJzOiBnZXRBbGxVc2VycyxcbiAgICAgIHZlcmlmeVVzZXI6IHZlcmlmeVVzZXIsXG4gICAgICBnZW5lcmF0ZVBhc3N3b3JkUmVzZXRMaW5rOiBnZW5lcmF0ZVBhc3N3b3JkUmVzZXRMaW5rLFxuICAgICAgcmVzZXRQYXNzd29yZDogcmVzZXRQYXNzd29yZCxcbiAgICAgIHVwZGF0ZVVzZXI6IHVwZGF0ZVVzZXJcbiAgICB9O1xuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gZ2V0QWxsVXNlcnMoKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJykudGhlbihmdW5jdGlvbiAodXNlcnMpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIGV2ZXJ5IHVzZXIgaGFzIGEgZGlzcGxheSBuYW1lXG4gICAgICAgIF8uZm9yRWFjaCh1c2Vycy5kYXRhLCBmdW5jdGlvbiAodXNlcikge1xuICAgICAgICAgIGlmICghdXNlci5kaXNwbGF5TmFtZSkge1xuICAgICAgICAgICAgdXNlci5kaXNwbGF5TmFtZSA9IHVzZXIuZmlyc3ROYW1lICsgJyAnICsgdXNlci5sYXN0TmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB1c2Vycy5kYXRhID0gXy5zb3J0QnkodXNlcnMuZGF0YSwgJ2Rpc3BsYXlOYW1lJyk7XG4gICAgICAgIHJldHVybiB1c2VycztcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZlcmlmeVVzZXIodXNlcklkLCB2ZXJpZmljYXRpb25Ub2tlbikge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VyL3ZlcmlmaWNhdGlvbicsIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgdXNlcklkOiB1c2VySWQsXG4gICAgICAgICAgdmVyaWZpY2F0aW9uVG9rZW46IHZlcmlmaWNhdGlvblRva2VuXG4gICAgICAgIH1cbiAgICAgIH0pOyAgXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVQYXNzd29yZFJlc2V0TGluayh1c2VybmFtZSkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VyL3Bhc3N3b3JkL2xpbmsnLCB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZVxuICAgICAgICB9XG4gICAgICB9KTsgIFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2V0UGFzc3dvcmQodXNlcklkLCB2ZXJpZmljYXRpb25Ub2tlbiwgcGFzc3dvcmQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvdXNlci9wYXNzd29yZC9yZXNldCcsIHtcbiAgICAgICAgdXNlcklkOiB1c2VySWQsXG4gICAgICAgIHZlcmlmaWNhdGlvblRva2VuOiB2ZXJpZmljYXRpb25Ub2tlbixcbiAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICB9KTsgIFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVVzZXIodXNlcikge1xuICAgICAgcmV0dXJuICRodHRwLnB1dCgnL2FwaS91c2VyJywge1xuICAgICAgICB1c2VyOiB1c2VyXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignTG9naW5DdHJsJywgTG9naW5DdHJsKTtcblxuICBmdW5jdGlvbiBMb2dpbkN0cmwoJHN0YXRlLCBhdXRoU2VydmljZSwgbm90aWZ5U2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0ubG9naW4gPSBsb2dpbjtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgIGF1dGhTZXJ2aWNlLmF1dGhlbnRpY2F0ZVVzZXIodXNlcm5hbWUsIHBhc3N3b3JkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICAgICAgbm90aWZ5U2VydmljZS5lcnJvcignVXNlcm5hbWUgLyBwYXNzd29yZCBjb21iaW5haXRvbiBpbmNvcnJlY3QnKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZSA9PT0gJ3VudmVyaWZpZWQnKSB7XG4gICAgICAgICAgbm90aWZ5U2VydmljZS5lcnJvcignWW91IG11c3QgdmVyaWZ5IHlvdXIgZW1haWwgYmVmb3JlIHlvdSBjYW4gbG9naW4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoJHN0YXRlLnByZXZpb3VzKSB7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJHN0YXRlLnByZXZpb3VzLCAkc3RhdGUucHJldlBhcmFtcyk7XG4gICAgICAgICAgICAkc3RhdGUucHJldmlvdXMgPSBudWxsO1xuICAgICAgICAgICAgJHN0YXRlLnByZXZQYXJhbXMgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbXBldGl0aW9ucy5teUNvbXBldGl0aW9ucycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ1Bhc3N3b3JkUmVzZXRDdHJsJywgUGFzc3dvcmRSZXNldEN0cmwpO1xuXG4gIGZ1bmN0aW9uIFBhc3N3b3JkUmVzZXRDdHJsKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCB1c2VyU2VydmljZSwgbm90aWZ5U2VydmljZSwgYXV0aFNlcnZpY2UsIGlkZW50aXR5U2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0udXNlcm5hbWUgPSAnJztcbiAgICB2bS52ZXJpZmllZCA9IGZhbHNlO1xuICAgIHZtLnJlc2V0UGFzc3dvcmRGb3JtID0ge307XG4gICAgdm0uZ2VuZXJhdGVQYXNzd29yZFJlc2V0TGluayA9IGdlbmVyYXRlUGFzc3dvcmRSZXNldExpbms7XG4gICAgdm0ucmVzZXRQYXNzd29yZCA9IHJlc2V0UGFzc3dvcmQ7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgICRzdGF0ZS5nbygnaG9tZScpO1xuICAgICAgfSBlbHNlIGlmICgkc3RhdGVQYXJhbXMudXNlcklkICYmICRzdGF0ZVBhcmFtcy52ZXJpZmljYXRpb25Ub2tlbikge1xuICAgICAgICB1c2VyU2VydmljZS52ZXJpZnlVc2VyKCRzdGF0ZVBhcmFtcy51c2VySWQsICRzdGF0ZVBhcmFtcy52ZXJpZmljYXRpb25Ub2tlbikudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSkge1xuICAgICAgICAgICAgdm0udmVyaWZpZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVQYXNzd29yZFJlc2V0TGluayh1c2VybmFtZSkge1xuICAgICAgdXNlclNlcnZpY2UuZ2VuZXJhdGVQYXNzd29yZFJlc2V0TGluayh1c2VybmFtZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5kYXRhKSB7XG4gICAgICAgICAgbm90aWZ5U2VydmljZS5lcnJvcignQ291bGQgbm90IGZpbmQgdGhhdCBlbWFpbCBhZGRyZXNzJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm90aWZ5U2VydmljZS5zdWNjZXNzKCdQbGVhc2UgY2hlY2sgeW91ciBlbWFpbCBmb3IgYSBwYXNzd29yZCByZXNldCBsaW5rJyk7XG4gICAgICAgICAgJHN0YXRlLmdvKCdob21lJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2V0UGFzc3dvcmQocmVzZXRQYXNzd29yZEZvcm0pIHtcbiAgICAgIGlmIChyZXNldFBhc3N3b3JkRm9ybS5wYXNzd29yZCAhPT0gcmVzZXRQYXNzd29yZEZvcm0uY29uZmlybVBhc3N3b3JkKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ1Bhc3N3b3JkcyBkb25cXCd0IG1hdGNoIScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXNlclNlcnZpY2UucmVzZXRQYXNzd29yZCgkc3RhdGVQYXJhbXMudXNlcklkLCAkc3RhdGVQYXJhbXMudmVyaWZpY2F0aW9uVG9rZW4sIHJlc2V0UGFzc3dvcmRGb3JtLnBhc3N3b3JkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhKSB7XG4gICAgICAgICAgICBhdXRoU2VydmljZS5hdXRoZW50aWNhdGVVc2VyKHJlc3BvbnNlLmRhdGEudXNlcm5hbWUsIHJlc2V0UGFzc3dvcmRGb3JtLnBhc3N3b3JkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2hvbWUnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ1JlZ2lzdGVyQ3RybCcsIFJlZ2lzdGVyQ3RybCk7XG5cbiAgZnVuY3Rpb24gUmVnaXN0ZXJDdHJsKCRzdGF0ZSwgYXV0aFNlcnZpY2UsIG5vdGlmeVNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7fVxuXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXIobmV3VXNlcikge1xuICAgICAgaWYgKG5ld1VzZXIucGFzc3dvcmQgIT09IG5ld1VzZXIuY29uZmlybVBhc3N3b3JkKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ1Bhc3N3b3JkcyBkb25cXCd0IG1hdGNoIScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFuZXdVc2VyLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgICAgbmV3VXNlci5kaXNwbGF5TmFtZSA9IG5ld1VzZXIuZmlyc3ROYW1lICsgJyAnICsgbmV3VXNlci5sYXN0TmFtZTtcbiAgICAgICAgfVxuICAgICAgICBhdXRoU2VydmljZS5jcmVhdGVVc2VyKG5ld1VzZXIpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRzdGF0ZS5nbygndmVyaWZ5Jyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdWZXJpZmljYXRpb25DdHJsJywgVmVyaWZpY2F0aW9uQ3RybCk7XG5cbiAgZnVuY3Rpb24gVmVyaWZpY2F0aW9uQ3RybCgkc3RhdGUsICRzdGF0ZVBhcmFtcywgdXNlclNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnZlcmlmaWVkID0gdW5kZWZpbmVkO1xuICAgIHZtLnZlcmlmeWluZyA9IGZhbHNlO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgaWYgKCRzdGF0ZVBhcmFtcy51c2VySWQgJiYgJHN0YXRlUGFyYW1zLnZlcmlmaWNhdGlvblRva2VuKSB7XG4gICAgICAgIHZtLnZlcmlmeWluZyA9IHRydWU7XG4gICAgICAgIHZtLnZlcmlmaWVkID0gbnVsbDtcbiAgICAgICAgdXNlclNlcnZpY2UudmVyaWZ5VXNlcigkc3RhdGVQYXJhbXMudXNlcklkLCAkc3RhdGVQYXJhbXMudmVyaWZpY2F0aW9uVG9rZW4pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICAgIHZtLnZlcmlmaWVkID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdm0udmVyaWZpZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgnd3BtQWN0aXZlQ2hhbGxlbmVnZXMnLCB3cG1BY3RpdmVDaGFsbGVuZWdlcyk7XG5cbiAgZnVuY3Rpb24gd3BtQWN0aXZlQ2hhbGxlbmVnZXMoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBzY29wZToge1xuICAgICAgICBjb21wZXRpdGlvbjogJz0nXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVVcmw6ICcvY2hhbGxlbmdlcy9jb21wb25lbnRzL2FjdGl2ZS1jaGFsbGVuZ2VzLmh0bWwnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKCRzY29wZSwgY2hhbGxlbmdlc1NlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmNoYWxsZW5nZXMgPSBbXTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICRzY29wZS4kd2F0Y2goJ3ZtLmNvbXBldGl0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodm0uY29tcGV0aXRpb24pIHtcbiAgICAgICAgICBnZXRBY3RpdmVDaGFsbGVuZ2VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFjdGl2ZUNoYWxsZW5nZXMoKSB7XG4gICAgICB2bS5jaGFsbGVuZ2VzID0gW107XG4gICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRBY3RpdmVDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbi5faWQpLnRoZW4oZnVuY3Rpb24gKGNoYWxsZW5nZXMpIHtcbiAgICAgICAgaWYgKGNoYWxsZW5nZXMuZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdm0uY2hhbGxlbmdlcyA9IGNoYWxsZW5nZXMuZGF0YTsgICAgICAgICAgXG4gICAgICAgICAgXy5mb3JFYWNoKHZtLmNoYWxsZW5nZXMsIGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgICAgIGlmIChjaGFsbGVuZ2UudHlwZSA9PT0gJ3ZlcnN1cycpIHtcbiAgICAgICAgICAgICAgY2hhbGxlbmdlLmNoYWxsZW5nZXIuZGlzcGxheU5hbWUgPSAnVGVhbSAnICsgY2hhbGxlbmdlLmNoYWxsZW5nZXIudGVhbTtcbiAgICAgICAgICAgICAgY2hhbGxlbmdlLm9wcG9uZW50LmRpc3BsYXlOYW1lID0gJ1RlYW0gJyArIGNoYWxsZW5nZS5vcHBvbmVudC50ZWFtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoYWxsZW5nZS50aW1lTGltaXQgIT09IDApIHtcbiAgICAgICAgICAgICAgY2hhbGxlbmdlLmV4cGlyZXMgPSAobW9tZW50KCkuZGlmZihtb21lbnQoY2hhbGxlbmdlLmNyZWF0ZWQpLmFkZChjaGFsbGVuZ2UudGltZUxpbWl0LCAnZCcpLCdzJykpICogLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgnd3BtQ29tcGxldGVkQ2hhbGxlbmVnZXMnLCB3cG1Db21wbGV0ZWRDaGFsbGVuZWdlcyk7XG5cbiAgZnVuY3Rpb24gd3BtQ29tcGxldGVkQ2hhbGxlbmVnZXMoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBzY29wZToge1xuICAgICAgICBjb21wZXRpdGlvbklkOiAnQCcsXG4gICAgICAgIGFsbG93RGVsZXRlOiAnPScsXG4gICAgICAgIGNoYWxsZW5nZXM6ICc9J1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NoYWxsZW5nZXMvY29tcG9uZW50cy9jb21wbGV0ZWQtY2hhbGxlbmdlcy5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYygkc2NvcGUsICRzdGF0ZSwgY2hhbGxlbmdlc1NlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmNoYWxsZW5nZXMgPSBbXTtcbiAgICB2bS5kZWxldGVDaGFsbGVuZ2UgPSBkZWxldGVDaGFsbGVuZ2U7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAkc2NvcGUuJHdhdGNoKCd2bS5jaGFsbGVuZ2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh2bS5jaGFsbGVuZ2VzICYmIHZtLmNoYWxsZW5nZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGRpc3BsYXlDb21wbGV0ZWRDaGFsbGVuZ2VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpc3BsYXlDb21wbGV0ZWRDaGFsbGVuZ2VzKCkge1xuICAgICAgXy5mb3JFYWNoKHZtLmNoYWxsZW5nZXMsIGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgY2hhbGxlbmdlLmxvc2VyID0gY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInID8gJ29wcG9uZW50JyA6ICdjaGFsbGVuZ2VyJztcbiAgICAgICAgaWYgKGNoYWxsZW5nZS50eXBlID09PSAndmVyc3VzJykge1xuICAgICAgICAgIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLmRpc3BsYXlOYW1lID0gJ1RlYW0gJyArIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLnRlYW07XG4gICAgICAgICAgY2hhbGxlbmdlLm9wcG9uZW50LmRpc3BsYXlOYW1lID0gJ1RlYW0gJyArIGNoYWxsZW5nZS5vcHBvbmVudC50ZWFtO1xuICAgICAgICB9XG4gICAgICAgIGNoYWxsZW5nZS53aGVuQ29tcGxldGVkID0gbW9tZW50KGNoYWxsZW5nZS5jb21wbGV0ZWQpLmNhbGVuZGFyKG51bGwsIHtcbiAgICAgICAgICBzYW1lRGF5OiAnW1RvZGF5XScsXG4gICAgICAgICAgbmV4dERheTogJ1tUb21vcnJvd10nLFxuICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCcsXG4gICAgICAgICAgbGFzdERheTogJ1tZZXN0ZXJkYXldJyxcbiAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkJyxcbiAgICAgICAgICBzYW1lRWxzZTogJ0REL01NL1lZWVknXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVsZXRlQ2hhbGxlbmdlKGNoYWxsZW5nZUlkLCAkaW5kZXgpIHtcbiAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmRlbGV0ZUNoYWxsZW5nZSh2bS5jb21wZXRpdGlvbklkLCBjaGFsbGVuZ2VJZCkudGhlbiAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2bS5jaGFsbGVuZ2VzLnNwbGljZSgkaW5kZXgsIDEpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd3cG1QbGF5ZXJPdmVyYWxsUmVzdWx0cycsIHdwbVBsYXllck92ZXJhbGxSZXN1bHRzKTtcblxuICBmdW5jdGlvbiB3cG1QbGF5ZXJPdmVyYWxsUmVzdWx0cygpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIHBsYXllcjogJz0nXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVVcmw6ICcvY2hhbGxlbmdlcy9jb21wb25lbnRzL3BsYXllci1vdmVyYWxsLXJlc3VsdHMuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoJHNjb3BlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5tYXhMZXZlbHMgPSA3O1xuICAgIHZtLndpbnMgPSB7XG4gICAgICB0b3RhbDogMCxcbiAgICAgIGFzQ2hhbGxlbmdlcjogMCxcbiAgICAgIGFzT3Bwb25lbnQ6IDAsXG4gICAgICBieUZvcmZlaXQ6IDBcbiAgICB9O1xuICAgIHZtLmxvc2VzID0ge1xuICAgICAgdG90YWw6IDAsXG4gICAgICBhc0NoYWxsZW5nZXI6IDAsXG4gICAgICBhc09wcG9uZW50OiAwLFxuICAgICAgYnlGb3JmZWl0OiAwXG4gICAgfTtcbiAgICB2bS5zdHJlYWsgPSB7XG4gICAgICB0eXBlOiBudWxsLFxuICAgICAgdmFsdWU6IDBcbiAgICB9O1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgJHNjb3BlLiR3YXRjaCgndm0ucGxheWVyLnJlc3VsdHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS5wbGF5ZXIpIHtcbiAgICAgICAgICBhc3NpZ25wbGF5ZXJzVG9MZXZlbHModm0ucGxheWVyKTtcbiAgICAgICAgICBjYWxjdWxhdGVTdHJlYWsodm0ucGxheWVyKTtcbiAgICAgICAgICBjYWxjdWF0ZVdpbkFuZExvc2VzKHZtLnBsYXllcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzc2lnbnBsYXllcnNUb0xldmVscyhwbGF5ZXIpIHtcbiAgICAgIC8vIERldGVybWluZSBhbGwgdGhlIGJyZWFrIHBvaW50cyB0byBmaWd1cmUgb3V0IGxldmVsc1xuICAgICAgdmFyIGJyZWFrUG9pbnRzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLm1heExldmVsczsgaSsrKSB7XG4gICAgICAgIGJyZWFrUG9pbnRzLnB1c2goKCgoaSAqIChpICsgMSkpIC8gMikpICsgMSk7XG4gICAgICB9XG5cbiAgICAgIC8vIERlZmF1bHQgYWxsIHBsYXllcnMgdG8gdGhlIGxvd2VzdCBsZXZlbFxuICAgICAgcGxheWVyLmxldmVsID0gYnJlYWtQb2ludHMubGVuZ3RoO1xuICAgICAgLy8gTm93IGNoZWNrIHRvIHNlZSBpZiB0aGUgcGxheWVyIGlzIGF0IGEgaGlnaGVyIGxldmVsXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJyZWFrUG9pbnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChwbGF5ZXIucG9zaXRpb24gPCBicmVha1BvaW50c1tqICsgMV0pIHtcbiAgICAgICAgICBwbGF5ZXIubGV2ZWwgPSBicmVha1BvaW50cy5pbmRleE9mKGJyZWFrUG9pbnRzW2pdKSArIDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVTdHJlYWsocGxheWVyKSB7XG4gICAgICAvLyBGaWd1cmUgb3V0IHRoZSBwbGF5ZXIncyBjdXJyZW50IHN0cmVha1xuICAgICAgdmFyIHN0cmVhayA9IDA7XG4gICAgICB2YXIgY29udGludWVTdHJlYWsgPSB0cnVlO1xuICAgICAgdmFyIHN0cmVha1R5cGU7XG4gICAgICBfLmZvckVhY2gocGxheWVyLnJlc3VsdHMsIGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgaWYgKGNvbnRpbnVlU3RyZWFrKSB7XG4gICAgICAgICAgLy8gV2lubmluZyBTdHJlYWtcbiAgICAgICAgICBpZiAoKGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJyAmJiBjaGFsbGVuZ2UuY2hhbGxlbmdlci5faWQgPT09IHBsYXllci5faWQpIHx8XG4gICAgICAgICAgICAoY2hhbGxlbmdlLndpbm5lciA9PT0gJ29wcG9uZW50JyAmJiBjaGFsbGVuZ2Uub3Bwb25lbnQuX2lkID09PSBwbGF5ZXIuX2lkKSkge1xuICAgICAgICAgICAgLy8gSWYgdGhleSBhcmUgbm90IGFscmVhZHkgb24gYSBsb3Npbmcgc3RyZWFrIGFuZCAxIHRvIHRoZWlyIHdpbm5pbmcgc3RyZWFrXG4gICAgICAgICAgICBpZiAoc3RyZWFrVHlwZSAhPT0gJ2xvc2luZycpIHtcbiAgICAgICAgICAgICAgc3RyZWFrICs9IDE7XG4gICAgICAgICAgICAgIHN0cmVha1R5cGUgPSAnd2lubmluZyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb250aW51ZVN0cmVhayA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIC8vIExvc2luZyBTdHJlYWtcbiAgICAgICAgICB9IGVsc2UgaWYgKChjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnICYmIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLl9pZCA9PT0gcGxheWVyLl9pZCkgfHxcbiAgICAgICAgICAgIChjaGFsbGVuZ2Uud2lubmVyID09PSAnY2hhbGxlbmdlcicgJiYgY2hhbGxlbmdlLm9wcG9uZW50Ll9pZCA9PT0gcGxheWVyLl9pZCkpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXkgYXJlIG5vdCBhbHJlYWR5IG9uIGEgd2lubmluZyBzdHJlYWsgYW5kIDEgdG8gdGhlaXIgbG9zaW5nIHN0cmVha1xuICAgICAgICAgICAgaWYgKHN0cmVha1R5cGUgIT09ICd3aW5uaW5nJykge1xuICAgICAgICAgICAgICBzdHJlYWsgKz0gMTtcbiAgICAgICAgICAgICAgc3RyZWFrVHlwZSA9ICdsb3NpbmcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29udGludWVTdHJlYWsgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdm0uc3RyZWFrID0ge1xuICAgICAgICAgIHR5cGU6IHN0cmVha1R5cGUsXG4gICAgICAgICAgdmFsdWU6IHN0cmVha1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsY3VhdGVXaW5BbmRMb3NlcyhwbGF5ZXIpIHtcbiAgICAgIC8vIEZpZ3VyZSBvdXQgd2lucyBhbmQgbG9zZXNcbiAgICAgIHZtLndpbnMuYXNPcHBvbmVudCA9IF8uc2l6ZShfLmZpbHRlcihwbGF5ZXIucmVzdWx0cywgZnVuY3Rpb24oY2hhbGxlbmdlKSB7IFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGNoYWxsZW5nZS5vcHBvbmVudC5faWQgPT09IHBsYXllci5faWQgJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ29wcG9uZW50J1xuICAgICAgICApO1xuICAgICAgfSkpO1xuXG4gICAgICB2bS53aW5zLmFzQ2hhbGxlbmdlciA9IF8uc2l6ZShfLmZpbHRlcihwbGF5ZXIucmVzdWx0cywgZnVuY3Rpb24oY2hhbGxlbmdlKSB7IFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLl9pZCA9PT0gcGxheWVyLl9pZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnY2hhbGxlbmdlcidcbiAgICAgICAgKTtcbiAgICAgIH0pKTtcblxuICAgICAgdm0ud2lucy50b3RhbCA9IHZtLndpbnMuYXNDaGFsbGVuZ2VyICsgdm0ud2lucy5hc09wcG9uZW50O1xuXG4gICAgICB2bS53aW5zLmJ5Rm9yZmVpdCA9IF8uc2l6ZShfLmZpbHRlcihwbGF5ZXIucmVzdWx0cywgZnVuY3Rpb24oY2hhbGxlbmdlKSB7IFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGNoYWxsZW5nZS5mb3JmZWl0ICYmICgoY2hhbGxlbmdlLmNoYWxsZW5nZXIuX2lkID09PSBwbGF5ZXIuX2lkICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJykgfHxcbiAgICAgICAgICAoY2hhbGxlbmdlLm9wcG9uZW50Ll9pZCA9PT0gcGxheWVyLl9pZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnKSlcbiAgICAgICAgKTtcbiAgICAgIH0pKTtcblxuICAgICAgdm0ubG9zZXMuYXNPcHBvbmVudCA9IF8uc2l6ZShfLmZpbHRlcihwbGF5ZXIucmVzdWx0cywgZnVuY3Rpb24oY2hhbGxlbmdlKSB7IFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGNoYWxsZW5nZS5vcHBvbmVudC5faWQgPT09IHBsYXllci5faWQgJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ2NoYWxsZW5nZXInXG4gICAgICAgICk7XG4gICAgICB9KSk7XG5cbiAgICAgIHZtLmxvc2VzLmFzQ2hhbGxlbmdlciA9IF8uc2l6ZShfLmZpbHRlcihwbGF5ZXIucmVzdWx0cywgZnVuY3Rpb24oY2hhbGxlbmdlKSB7IFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLl9pZCA9PT0gcGxheWVyLl9pZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnb3Bwb25lbnQnXG4gICAgICAgICk7XG4gICAgICB9KSk7XG5cbiAgICAgIHZtLmxvc2VzLnRvdGFsID0gdm0ubG9zZXMuYXNDaGFsbGVuZ2VyICsgdm0ubG9zZXMuYXNPcHBvbmVudDtcblxuICAgICAgdm0ubG9zZXMuYnlGb3JmZWl0ID0gXy5zaXplKF8uZmlsdGVyKHBsYXllci5yZXN1bHRzLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgY2hhbGxlbmdlLmZvcmZlaXQgJiYgKChjaGFsbGVuZ2UuY2hhbGxlbmdlci5faWQgPT09IHBsYXllci5faWQgJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ29wcG9uZW50JykgfHxcbiAgICAgICAgICAoY2hhbGxlbmdlLm9wcG9uZW50Ll9pZCA9PT0gcGxheWVyLl9pZCAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnY2hhbGxlbmdlcicpKVxuICAgICAgICApO1xuICAgICAgfSkpO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgnd3BtVGVhbU92ZXJhbGxSZXN1bHRzJywgd3BtVGVhbU92ZXJhbGxSZXN1bHRzKTtcblxuICBmdW5jdGlvbiB3cG1UZWFtT3ZlcmFsbFJlc3VsdHMoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBzY29wZToge1xuICAgICAgICB0ZWFtOiAnPScsXG4gICAgICAgIGNoYWxsZW5nZXM6ICc9J1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NoYWxsZW5nZXMvY29tcG9uZW50cy90ZWFtLW92ZXJhbGwtcmVzdWx0cy5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYygkc2NvcGUpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLndpbnMgPSB7XG4gICAgICB0b3RhbDogMCxcbiAgICAgIGFzQ2hhbGxlbmdlcjogMCxcbiAgICAgIGFzT3Bwb25lbnQ6IDAsXG4gICAgICBieUZvcmZlaXQ6IDBcbiAgICB9O1xuICAgIHZtLmxvc2VzID0ge1xuICAgICAgdG90YWw6IDAsXG4gICAgICBhc0NoYWxsZW5nZXI6IDAsXG4gICAgICBhc09wcG9uZW50OiAwLFxuICAgICAgYnlGb3JmZWl0OiAwXG4gICAgfTtcbiAgICB2bS5zdHJlYWsgPSB7XG4gICAgICB0eXBlOiBudWxsLFxuICAgICAgdmFsdWU6IDBcbiAgICB9O1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgJHNjb3BlLiR3YXRjaCgndm0uY2hhbGxlbmdlcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHZtLmNoYWxsZW5nZXMgJiYgdm0uY2hhbGxlbmdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY2FsY3VsYXRlU3RyZWFrKHZtLnRlYW0sIHZtLmNoYWxsZW5nZXMpO1xuICAgICAgICAgIGNhbGN1YXRlV2luQW5kTG9zZXModm0udGVhbSwgdm0uY2hhbGxlbmdlcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVN0cmVhayh0ZWFtLCBjaGFsbGVuZ2VzKSB7XG4gICAgICAvLyBGaWd1cmUgb3V0IHRoZSB0ZWFtJ3MgY3VycmVudCBzdHJlYWtcbiAgICAgIHZhciBzdHJlYWsgPSAwO1xuICAgICAgdmFyIGNvbnRpbnVlU3RyZWFrID0gdHJ1ZTtcbiAgICAgIHZhciBzdHJlYWtUeXBlO1xuICAgICAgXy5mb3JFYWNoKGNoYWxsZW5nZXMsIGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgaWYgKGNvbnRpbnVlU3RyZWFrKSB7XG4gICAgICAgICAgLy8gV2lubmluZyBTdHJlYWtcbiAgICAgICAgICBpZiAoKGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJyAmJiBjaGFsbGVuZ2UuY2hhbGxlbmdlci50ZWFtID09PSB0ZWFtKSB8fFxuICAgICAgICAgICAgKGNoYWxsZW5nZS53aW5uZXIgPT09ICdvcHBvbmVudCcgJiYgY2hhbGxlbmdlLm9wcG9uZW50LnRlYW0gPT09IHRlYW0pKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGV5IGFyZSBub3QgYWxyZWFkeSBvbiBhIGxvc2luZyBzdHJlYWsgYW5kIDEgdG8gdGhlaXIgd2lubmluZyBzdHJlYWtcbiAgICAgICAgICAgIGlmIChzdHJlYWtUeXBlICE9PSAnbG9zaW5nJykge1xuICAgICAgICAgICAgICBzdHJlYWsgKz0gMTtcbiAgICAgICAgICAgICAgc3RyZWFrVHlwZSA9ICd3aW5uaW5nJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlU3RyZWFrID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgLy8gTG9zaW5nIFN0cmVha1xuICAgICAgICAgIH0gZWxzZSBpZiAoKGNoYWxsZW5nZS53aW5uZXIgPT09ICdvcHBvbmVudCcgJiYgY2hhbGxlbmdlLmNoYWxsZW5nZXIudGVhbSA9PT0gdGVhbSkgfHxcbiAgICAgICAgICAgIChjaGFsbGVuZ2Uud2lubmVyID09PSAnY2hhbGxlbmdlcicgJiYgY2hhbGxlbmdlLm9wcG9uZW50LnRlYW0gPT09IHRlYW0pKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGV5IGFyZSBub3QgYWxyZWFkeSBvbiBhIHdpbm5pbmcgc3RyZWFrIGFuZCAxIHRvIHRoZWlyIGxvc2luZyBzdHJlYWtcbiAgICAgICAgICAgIGlmIChzdHJlYWtUeXBlICE9PSAnd2lubmluZycpIHtcbiAgICAgICAgICAgICAgc3RyZWFrICs9IDE7XG4gICAgICAgICAgICAgIHN0cmVha1R5cGUgPSAnbG9zaW5nJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlU3RyZWFrID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZtLnN0cmVhayA9IHtcbiAgICAgICAgICB0eXBlOiBzdHJlYWtUeXBlLFxuICAgICAgICAgIHZhbHVlOiBzdHJlYWtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGN1YXRlV2luQW5kTG9zZXModGVhbSAsIGNoYWxsZW5nZXMpIHtcbiAgICAgIC8vIEZpZ3VyZSBvdXQgd2lucyBhbmQgbG9zZXNcbiAgICAgIHZtLndpbnMuYXNPcHBvbmVudCA9IF8uc2l6ZShfLmZpbHRlcihjaGFsbGVuZ2VzLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgY2hhbGxlbmdlLm9wcG9uZW50LnRlYW0gPT09IHRlYW0gJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ29wcG9uZW50J1xuICAgICAgICApO1xuICAgICAgfSkpO1xuXG4gICAgICB2bS53aW5zLmFzQ2hhbGxlbmdlciA9IF8uc2l6ZShfLmZpbHRlcihjaGFsbGVuZ2VzLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgY2hhbGxlbmdlLmNoYWxsZW5nZXIudGVhbSA9PT0gdGVhbSAmJiBjaGFsbGVuZ2Uud2lubmVyID09PSAnY2hhbGxlbmdlcidcbiAgICAgICAgKTtcbiAgICAgIH0pKTtcblxuICAgICAgdm0ud2lucy50b3RhbCA9IHZtLndpbnMuYXNDaGFsbGVuZ2VyICsgdm0ud2lucy5hc09wcG9uZW50O1xuXG4gICAgICB2bS53aW5zLmJ5Rm9yZmVpdCA9IF8uc2l6ZShfLmZpbHRlcihjaGFsbGVuZ2VzLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgY2hhbGxlbmdlLmZvcmZlaXQgJiYgKChjaGFsbGVuZ2UuY2hhbGxlbmdlci50ZWFtID09PSB0ZWFtICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJykgfHxcbiAgICAgICAgICAoY2hhbGxlbmdlLm9wcG9uZW50LnRlYW0gPT09IHRlYW0gJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ29wcG9uZW50JykpXG4gICAgICAgICk7XG4gICAgICB9KSk7XG5cbiAgICAgIHZtLmxvc2VzLmFzT3Bwb25lbnQgPSBfLnNpemUoXy5maWx0ZXIoY2hhbGxlbmdlcywgZnVuY3Rpb24oY2hhbGxlbmdlKSB7IFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGNoYWxsZW5nZS5vcHBvbmVudC50ZWFtID09PSB0ZWFtICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJ1xuICAgICAgICApO1xuICAgICAgfSkpO1xuXG4gICAgICB2bS5sb3Nlcy5hc0NoYWxsZW5nZXIgPSBfLnNpemUoXy5maWx0ZXIoY2hhbGxlbmdlcywgZnVuY3Rpb24oY2hhbGxlbmdlKSB7IFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGNoYWxsZW5nZS5jaGFsbGVuZ2VyLnRlYW0gPT09IHRlYW0gJiYgY2hhbGxlbmdlLndpbm5lciA9PT0gJ29wcG9uZW50J1xuICAgICAgICApO1xuICAgICAgfSkpO1xuXG4gICAgICB2bS5sb3Nlcy50b3RhbCA9IHZtLmxvc2VzLmFzQ2hhbGxlbmdlciArIHZtLmxvc2VzLmFzT3Bwb25lbnQ7XG5cbiAgICAgIHZtLmxvc2VzLmJ5Rm9yZmVpdCA9IF8uc2l6ZShfLmZpbHRlcihjaGFsbGVuZ2VzLCBmdW5jdGlvbihjaGFsbGVuZ2UpIHsgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgY2hhbGxlbmdlLmZvcmZlaXQgJiYgKChjaGFsbGVuZ2UuY2hhbGxlbmdlci50ZWFtID09PSB0ZWFtICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdvcHBvbmVudCcpIHx8XG4gICAgICAgICAgKGNoYWxsZW5nZS5vcHBvbmVudC50ZWFtID09PSB0ZWFtICYmIGNoYWxsZW5nZS53aW5uZXIgPT09ICdjaGFsbGVuZ2VyJykpXG4gICAgICAgICk7XG4gICAgICB9KSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmZhY3RvcnkoJ2NoYWxsZW5nZXNTZXJ2aWNlJywgY2hhbGxlbmdlc1NlcnZpY2UpO1xuXG4gIGZ1bmN0aW9uIGNoYWxsZW5nZXNTZXJ2aWNlKCRodHRwKSB7XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBjcmVhdGVQeXJhbWlkQ2hhbGxlbmdlOiBjcmVhdGVQeXJhbWlkQ2hhbGxlbmdlLFxuICAgICAgY3JlYXRlVmVyc3VzQ2hhbGxlbmdlOiBjcmVhdGVWZXJzdXNDaGFsbGVuZ2UsXG4gICAgICBjb21wbGV0ZVB5cmFtaWRDaGFsbGVuZ2U6IGNvbXBsZXRlUHlyYW1pZENoYWxsZW5nZSxcbiAgICAgIGNvbXBsZXRlVmVyc3VzQ2hhbGxlbmdlOiBjb21wbGV0ZVZlcnN1c0NoYWxsZW5nZSxcbiAgICAgIGdldENoYWxsZW5nZXNCeUNvbXBldGl0aW9uOiBnZXRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbixcbiAgICAgIGdldEFjdGl2ZUNoYWxsZW5nZXNCeUNvbXBldGl0aW9uOiBnZXRBY3RpdmVDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbixcbiAgICAgIGdldEFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllcjogZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyLFxuICAgICAgZ2V0Q29tcGxldGVkQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb246IGdldENvbXBsZXRlZENoYWxsZW5nZXNCeUNvbXBldGl0aW9uLFxuICAgICAgZGVsZXRlQWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyOiBkZWxldGVBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXIsXG4gICAgICBkZWxldGVDaGFsbGVuZ2U6IGRlbGV0ZUNoYWxsZW5nZSxcbiAgICAgIGdldFBsYXllclJlc3VsdHNCeUNvbXBldGl0aW9uOiBnZXRQbGF5ZXJSZXN1bHRzQnlDb21wZXRpdGlvblxuICAgIH07XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVB5cmFtaWRDaGFsbGVuZ2UoY2hhbGxlbmdlKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jaGFsbGVuZ2VzL3B5cmFtaWQvY3JlYXRlJywge1xuICAgICAgICBjaGFsbGVuZ2U6IGNoYWxsZW5nZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVmVyc3VzQ2hhbGxlbmdlKGNoYWxsZW5nZSkge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY2hhbGxlbmdlcy92ZXJzdXMvY3JlYXRlJywge1xuICAgICAgICBjaGFsbGVuZ2U6IGNoYWxsZW5nZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGxldGVQeXJhbWlkQ2hhbGxlbmdlKGNoYWxsZW5nZSkge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY2hhbGxlbmdlcy9weXJhbWlkL2NvbXBsZXRlJywgIHtcbiAgICAgICAgY2hhbGxlbmdlOiBjaGFsbGVuZ2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlVmVyc3VzQ2hhbGxlbmdlKGNoYWxsZW5nZSkge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY2hhbGxlbmdlcy92ZXJzdXMvY29tcGxldGUnLCAge1xuICAgICAgICBjaGFsbGVuZ2U6IGNoYWxsZW5nZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q2hhbGxlbmdlc0J5Q29tcGV0aXRpb24oY29tcGV0aXRpb25JZCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jaGFsbGVuZ2VzL2NvbXBldGl0aW9uJywgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBY3RpdmVDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbihjb21wZXRpdGlvbklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2NoYWxsZW5nZXMvYWN0aXZlL2NvbXBldGl0aW9uJywgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXIoY29tcGV0aXRpb25JZCwgcGxheWVySWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY2hhbGxlbmdlcy9hY3RpdmUvY29tcGV0aXRpb24vcGxheWVyJywgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgICBwbGF5ZXJJZDogcGxheWVySWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcGxldGVkQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24oY29tcGV0aXRpb25JZCwgbGltaXQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY2hhbGxlbmdlcy9jb21wbGV0ZWQvY29tcGV0aXRpb24nLCAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkLFxuICAgICAgICAgIGxpbWl0OiBsaW1pdFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWxldGVBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXIoY29tcGV0aXRpb25JZCwgcGxheWVySWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5kZWxldGUoJy9hcGkvY2hhbGxlbmdlcy9hY3RpdmUvY29tcGV0aXRpb24vcGxheWVyL2RlbGV0ZScsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgICAgcGxheWVySWQ6IHBsYXllcklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUNoYWxsZW5nZShjb21wZXRpdGlvbklkLCBjaGFsbGVuZ2VJZCkge1xuICAgICAgcmV0dXJuICRodHRwLmRlbGV0ZSgnL2FwaS9jaGFsbGVuZ2VzL2RlbGV0ZScsICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgICAgY2hhbGxlbmdlSWQ6IGNoYWxsZW5nZUlkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBsYXllclJlc3VsdHNCeUNvbXBldGl0aW9uKGNvbXBldGl0aW9uSWQsIHBsYXllcklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2NoYWxsZW5nZXMvcmVzdWx0cy9jb21wZXRpdGlvbi9wbGF5ZXInLCAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkLFxuICAgICAgICAgIHBsYXllcklkOiBwbGF5ZXJJZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ3dwbUZvb3RlcicsIHdwbUZvb3Rlcik7XG5cbiAgZnVuY3Rpb24gd3BtRm9vdGVyKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogY3RybEZ1bmMsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgdGVtcGxhdGVVcmw6ICcvY29tbW9uL2NvbXBvbmVudHMvZm9vdGVyLmh0bWwnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKGlkZW50aXR5U2VydmljZSwgYXV0aFNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmluZGVudGl0eSA9IGlkZW50aXR5U2VydmljZTtcbiAgICB2bS5sb2dvdXQgPSBsb2dvdXQ7XG5cbiAgICBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gICAgICBhdXRoU2VydmljZS5sb2dvdXQoKTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ3dwbUhlYWRlcicsIHdwbUhlYWRlcik7XG5cbiAgZnVuY3Rpb24gd3BtSGVhZGVyKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogY3RybEZ1bmMsXG4gICAgICBjb250cm9sbGVyQXM6ICdoZWFkZXJDdHJsJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jb21tb24vY29tcG9uZW50cy9oZWFkZXIuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoJHNjb3BlLCBzaWRlYmFyU2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlLCBhdXRoU2VydmljZSwgYWxlcnRzU2VydmljZSkge1xuICAgIHZhciBoZWFkZXJDdHJsID0gdGhpcztcbiAgICBoZWFkZXJDdHJsLmluZGVudGl0eSA9IGlkZW50aXR5U2VydmljZTtcbiAgICBoZWFkZXJDdHJsLmxvZ291dCA9IGxvZ291dDtcbiAgICBoZWFkZXJDdHJsLnNpZGViYXJTdGF0dXMgPSBzaWRlYmFyU2VydmljZS5nZXRTaWRlYmFyU3RhdHVzKCk7XG4gICAgaGVhZGVyQ3RybC50b2dnbGVTaWRlYmFyID0gdG9nZ2xlU2lkZWJhcjtcbiAgICBoZWFkZXJDdHJsLmNsZWFyQWxlcnQgPSBjbGVhckFsZXJ0O1xuICAgIGhlYWRlckN0cmwuY2xlYXJBbGxBbGVydHMgPSBjbGVhckFsbEFsZXJ0cztcbiAgICBoZWFkZXJDdHJsLmFsZXJ0cyA9IFtdO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgZ2V0QWN0aXZlQWxlcnRzKCk7XG4gICAgICAkc2NvcGUuJHdhdGNoKCdoZWFkZXJDdHJsLmluZGVudGl0eS5jdXJyZW50VXNlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICAgIGdldEFjdGl2ZUFsZXJ0cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBY3RpdmVBbGVydHMoKSB7XG4gICAgICBoZWFkZXJDdHJsLmFsZXJ0cyA9IFtdO1xuICAgICAgaWYgKGlkZW50aXR5U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICBhbGVydHNTZXJ2aWNlLmdldEFjdGl2ZUFsZXJ0c0J5UGxheWVyKGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWQpLnRoZW4oZnVuY3Rpb24gKGFsZXJ0cykge1xuICAgICAgICAgIGhlYWRlckN0cmwuYWxlcnRzID0gYWxlcnRzLmRhdGE7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFyQWxlcnQoY2xlYXJBbGVydCwgaW5kZXgpIHtcbiAgICAgIGFsZXJ0c1NlcnZpY2UuY2xlYXJBbGVydChjbGVhckFsZXJ0KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaGVhZGVyQ3RybC5hbGVydHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFyQWxsQWxlcnRzKCkge1xuICAgICAgYWxlcnRzU2VydmljZS5jbGVhckFsbEFsZXJ0c0J5UGxheWVyKGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWQpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBoZWFkZXJDdHJsLmFsZXJ0cyA9IFtdO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9nZ2xlU2lkZWJhcigpIHtcbiAgICAgIHNpZGViYXJTZXJ2aWNlLnNldFNpZGViYXJTdGF0dXMoIWhlYWRlckN0cmwuc2lkZWJhclN0YXR1cy5sZWZ0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gICAgICBhdXRoU2VydmljZS5sb2dvdXQoKTtcbiAgICB9XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6dXBkYXRlX2FsZXJ0cycsIGZ1bmN0aW9uIChlLCBhbGVydHMpIHtcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkgJiYgXy5zb21lKGFsZXJ0cywgWyd1c2VySWQnLCBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuX2lkXSkpIHtcbiAgICAgICAgZ2V0QWN0aXZlQWxlcnRzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ3dwbVNpZGViYXInLCB3cG1TaWRlYmFyKTtcblxuICBmdW5jdGlvbiB3cG1TaWRlYmFyKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogY3RybEZ1bmMsXG4gICAgICBjb250cm9sbGVyQXM6ICdzaWRlYmFyQ3RybCcsXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgdGVtcGxhdGVVcmw6ICcvY29tbW9uL2NvbXBvbmVudHMvc2lkZWJhci5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYyhpZGVudGl0eVNlcnZpY2UsIGF1dGhTZXJ2aWNlLCBzaWRlYmFyU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uaW5kZW50aXR5ID0gaWRlbnRpdHlTZXJ2aWNlO1xuICAgIHZtLmxvZ291dCA9IGxvZ291dDtcbiAgICB2bS5zaWRlYmFyU3RhdHVzID0gc2lkZWJhclNlcnZpY2UuZ2V0U2lkZWJhclN0YXR1cygpO1xuXG4gICAgZnVuY3Rpb24gbG9nb3V0KCkge1xuICAgICAgYXV0aFNlcnZpY2UubG9nb3V0KCk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmZpbHRlcignb3JkZXJPYmplY3RCeScsIG9yZGVyT2JqZWN0QnkpO1xuXG4gIGZ1bmN0aW9uIG9yZGVyT2JqZWN0QnkoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCwgYXR0cmlidXRlKSB7XG4gICAgICBpZiAoIWFuZ3VsYXIuaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG5cbiAgICAgIHZhciBhcnJheSA9IFtdO1xuICAgICAgZm9yICh2YXIgb2JqZWN0S2V5IGluIGlucHV0KSB7XG4gICAgICAgIGFycmF5LnB1c2goaW5wdXRbb2JqZWN0S2V5XSk7XG4gICAgICB9XG5cbiAgICAgIGFycmF5LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgYSA9IHBhcnNlSW50KGFbYXR0cmlidXRlXSk7XG4gICAgICAgIGIgPSBwYXJzZUludChiW2F0dHJpYnV0ZV0pO1xuICAgICAgICByZXR1cm4gYSAtIGI7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9O1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmZhY3RvcnkoJ2FsZXJ0c1NlcnZpY2UnLCBhbGVydHNTZXJ2aWNlKTtcblxuICBmdW5jdGlvbiBhbGVydHNTZXJ2aWNlKCRodHRwKSB7XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBnZXRBY3RpdmVBbGVydHNCeVBsYXllcjogZ2V0QWN0aXZlQWxlcnRzQnlQbGF5ZXIsXG4gICAgICBjbGVhckFsZXJ0OiBjbGVhckFsZXJ0LFxuICAgICAgY2xlYXJBbGxBbGVydHNCeVBsYXllcjogY2xlYXJBbGxBbGVydHNCeVBsYXllclxuICAgIH07XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdW5jbGVhcmVkIGFsZXJ0cyBmb3IgYSB1c2VyIGZyb20gdGhlIGRhdGFiYXNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXNlcklkIGlkIGZvciB0aGUgdXNlclxuICAgICAqIEByZXR1cm4ge0FycmF5fSBhbGVydHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBY3RpdmVBbGVydHNCeVBsYXllcih1c2VySWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvYWxlcnRzLycsIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgdXNlcklkOiB1c2VySWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWFya3MgYSBhbGVydHMgYXMgY2xlYXJlZFxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGFsZXJ0SWQgaWQgZm9yIHRoZSBhbGVydFxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gU3RhdHVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xlYXJBbGVydChhbGVydElkKSB7XG4gICAgICByZXR1cm4gJGh0dHAucHV0KCcvYXBpL2FsZXJ0L2NsZWFyJywge1xuICAgICAgICBhbGVydElkOiBhbGVydElkXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYXJrcyBhbGwgdW52aWV3ZWQgYWxlcnRzIGFzIHZpZXdlZCBmb3IgYSB1c2VyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXNlcklkIGlkIGZvciB0aGUgdXNlclxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gU3RhdHVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xlYXJBbGxBbGVydHNCeVBsYXllcih1c2VySWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvYWxlcnRzL2NsZWFyJywge1xuICAgICAgICB1c2VySWQ6IHVzZXJJZFxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmZhY3RvcnkoJ2lkZW50aXR5U2VydmljZScsIGlkZW50aXR5U2VydmljZSk7XG5cbiAgZnVuY3Rpb24gaWRlbnRpdHlTZXJ2aWNlKCR3aW5kb3cpIHtcbiAgICB2YXIgY3VycmVudFVzZXI7XG4gICAgaWYgKCR3aW5kb3cuYm9vdHN0cmFwcGVkVXNlck9iamVjdCAhPT0gbnVsbCkge1xuICAgICAgY3VycmVudFVzZXIgPSAkd2luZG93LmJvb3RzdHJhcHBlZFVzZXJPYmplY3Q7XG4gICAgfVxuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyLFxuICAgICAgaXNBdXRoZW50aWNhdGVkOiBpc0F1dGhlbnRpY2F0ZWQsXG4gICAgICBpc0F1dGhvcml6ZWQ6IGlzQXV0aG9yaXplZFxuICAgIH07XG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICBmdW5jdGlvbiBpc0F1dGhlbnRpY2F0ZWQoKSB7XG4gICAgICByZXR1cm4gISF0aGlzLmN1cnJlbnRVc2VyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQXV0aG9yaXplZChyb2xlKSB7XG4gICAgICByZXR1cm4gISF0aGlzLmN1cnJlbnRVc2VyICYmIHRoaXMuY3VycmVudFVzZXIucm9sZXMuaW5kZXhPZihyb2xlKSA+IC0xO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5mYWN0b3J5KCdub3RpZnlTZXJ2aWNlJywgbm90aWZ5U2VydmljZSk7XG5cbiAgZnVuY3Rpb24gbm90aWZ5U2VydmljZSgpIHtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGluZm86IGluZm8sXG4gICAgICBzdWNjZXNzOiBzdWNjZXNzLFxuICAgICAgd2FybmluZzogd2FybmluZyxcbiAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgIGludmVyc2U6IGludmVyc2VcbiAgICB9O1xuXG4gICAgJC5ub3RpZnlEZWZhdWx0cyh7XG4gICAgICBuZXdlc3Rfb25fdG9wOiB0cnVlLFxuICAgICAgb2Zmc2V0OiB7XG4gICAgICAgIHg6IDIwLFxuICAgICAgICB5OiA4NVxuICAgICAgfSxcbiAgICAgIGRlbGF5OiA1MDAwLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICBmdW5jdGlvbiBpbmZvKG1lc3NhZ2UsIHVybCwgdGFyZ2V0KSB7XG4gICAgICAkLm5vdGlmeSh7XG4gICAgICAgIC8vIG9wdGlvbnNcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgICB9LCB7XG4gICAgICAgIC8vIHNldHRpbmdzXG4gICAgICAgIHR5cGU6ICdpbmZvJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3VjY2VzcyhtZXNzYWdlLCB1cmwsIHRhcmdldCkge1xuICAgICAgJC5ub3RpZnkoe1xuICAgICAgICAvLyBvcHRpb25zXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgfSwge1xuICAgICAgICAvLyBzZXR0aW5nc1xuICAgICAgICB0eXBlOiAnc3VjY2VzcydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSwgdXJsLCB0YXJnZXQpIHtcbiAgICAgICQubm90aWZ5KHtcbiAgICAgICAgLy8gb3B0aW9uc1xuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0sIHtcbiAgICAgICAgLy8gc2V0dGluZ3NcbiAgICAgICAgdHlwZTogJ3dhcm5pbmcnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcnJvcihtZXNzYWdlLCB1cmwsIHRhcmdldCkge1xuICAgICAgJC5ub3RpZnkoe1xuICAgICAgICAvLyBvcHRpb25zXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgfSwge1xuICAgICAgICAvLyBzZXR0aW5nc1xuICAgICAgICB0eXBlOiAnZGFuZ2VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52ZXJzZShtZXNzYWdlLCB1cmwsIHRhcmdldCkge1xuICAgICAgJC5ub3RpZnkoe1xuICAgICAgICAvLyBvcHRpb25zXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgfSwge1xuICAgICAgICAvLyBzZXR0aW5nc1xuICAgICAgICB0eXBlOiAnaW52ZXJzZSdcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5mYWN0b3J5KCdzY3JvbGxiYXJTZXJ2aWNlJywgc2Nyb2xsYmFyU2VydmljZSk7XG5cbiAgZnVuY3Rpb24gc2Nyb2xsYmFyU2VydmljZSgpIHtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIG1hbGlodVNjcm9sbDogbWFsaWh1U2Nyb2xsXG4gICAgfTtcblxuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gbWFsaWh1U2Nyb2xsKHNlbGVjdG9yLCB0aGVtZSwgc2Nyb2xsYXhpcywgbW91c2V3aGVlbGF4aXMpIHtcbiAgICAgICQoc2VsZWN0b3IpLm1DdXN0b21TY3JvbGxiYXIoe1xuICAgICAgICB0aGVtZTogdGhlbWUsXG4gICAgICAgIHNjcm9sbEluZXJ0aWE6IDEwMCxcbiAgICAgICAgYXhpczogc2Nyb2xsYXhpcyxcbiAgICAgICAgbW91c2VXaGVlbDoge1xuICAgICAgICAgIGVuYWJsZTogdHJ1ZSxcbiAgICAgICAgICBheGlzOiBtb3VzZXdoZWVsYXhpcyxcbiAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZmFjdG9yeSgnc2lkZWJhclNlcnZpY2UnLCBzaWRlYmFyU2VydmljZSk7XG5cbiAgZnVuY3Rpb24gc2lkZWJhclNlcnZpY2UoKSB7XG4gICAgdmFyIHNpZGViYXJTdGF0dXMgPSB7XG4gICAgICBsZWZ0OiBmYWxzZSxcbiAgICAgIHJpZ2h0OiBmYWxzZVxuICAgIH07XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBnZXRTaWRlYmFyU3RhdHVzOiBnZXRTaWRlYmFyU3RhdHVzLFxuICAgICAgc2V0U2lkZWJhclN0YXR1czogc2V0U2lkZWJhclN0YXR1c1xuICAgIH07XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGdldFNpZGViYXJTdGF0dXMoKSB7XG4gICAgICByZXR1cm4gc2lkZWJhclN0YXR1cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRTaWRlYmFyU3RhdHVzKHN0YXR1cykge1xuICAgICAgc2lkZWJhclN0YXR1cy5sZWZ0ID0gc3RhdHVzO1xuICAgIH1cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5mYWN0b3J5KCd3ZWJzb2NrZXRTZXJ2aWNlJywgd2Vic29ja2V0U2VydmljZSkucnVuKGZ1bmN0aW9uICh3ZWJzb2NrZXRTZXJ2aWNlKSB7XG4gICAgd2Vic29ja2V0U2VydmljZS5jb25uZWN0KCk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHdlYnNvY2tldFNlcnZpY2UoJHJvb3RTY29wZSwgJHdpbmRvdywgJHRpbWVvdXQpIHtcbiAgICB2YXIgY29ubmVjdGlvbjtcbiAgICB2YXIgcmV0cnlTZWNvbmRzID0gWzMsIDEwLCAxMDAsIDEwMDBdO1xuICAgIHZhciByZXRyeSA9IDA7XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBjb25uZWN0OiBjb25uZWN0LFxuICAgICAgc2VuZDogc2VuZFxuICAgIH07XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIHdlYnNvY2tldEhvc3QoKSB7XG4gICAgICBpZiAoJHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicpIHtcbiAgICAgICAgcmV0dXJuICd3c3M6Ly8nICsgJHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICd3czovLycgKyAkd2luZG93LmxvY2F0aW9uLmhvc3Q7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29ubmVjdCgpIHtcbiAgICAgIGNvbm5lY3Rpb24gPSBuZXcgV2ViU29ja2V0KHdlYnNvY2tldEhvc3QoKSk7XG5cbiAgICAgIGNvbm5lY3Rpb24ub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0cnkgPSAwO1xuICAgICAgICB2YXIgcGF5bG9hZCA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd3czonICsgcGF5bG9hZC50b3BpYywgcGF5bG9hZC5kYXRhKTtcbiAgICAgIH07XG5cbiAgICAgIGNvbm5lY3Rpb24ub25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHJldHJ5IDwgcmV0cnlTZWNvbmRzLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdXZWJTb2NrZXQgY2xvc2VkLiBSZWNvbm5lY3RpbmcuLi4nKTtcbiAgICAgICAgICAkdGltZW91dChjb25uZWN0LCByZXRyeVNlY29uZHNbcmV0cnldKjEwMDApO1xuICAgICAgICAgIHJldHJ5ICs9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ0dpdmluZyB1cCBvbiBXZWJTb2NrZXQnKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZW5kKHRvcGljLCBkYXRhKSB7XG4gICAgICB2YXIganNvbiA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICBkYXRhOiBkYXRhXG4gICAgICB9KTtcbiAgICAgIGNvbm5lY3Rpb24uc2VuZChqc29uKTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignSG9tZUN0cmwnLCBIb21lQ3RybCk7XG5cbiAgZnVuY3Rpb24gSG9tZUN0cmwoY29tcGV0aXRpb25zU2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5wdWJsaWNDb21wZXRpdGlvbnMgPSBbXTtcbiAgICB2bS5wcml2YXRlQ29tcGV0aXRpb25zID0gW107XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBjb21wZXRpdGlvbnNTZXJ2aWNlLmdldFB1YmxpY0NvbXBldGl0aW9ucygpLnRoZW4oZnVuY3Rpb24gKGNvbXBldGl0aW9ucykge1xuICAgICAgICB2bS5wdWJsaWNDb21wZXRpdGlvbnMgPSBjb21wZXRpdGlvbnMuZGF0YTtcbiAgICAgIH0pO1xuICAgICAgLy8gR2V0IHByaXZhdGUgY29tcGV0aXRpb25zIGZvciBzdXBlci1hZG1pbnNcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRob3JpemVkKCdzdXBlci1hZG1pbicpKSB7XG4gICAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2UuZ2V0UHJpdmF0ZUNvbXBldGl0aW9ucygpLnRoZW4oZnVuY3Rpb24gKGNvbXBldGl0aW9ucykge1xuICAgICAgICAgIHZtLnByaXZhdGVDb21wZXRpdGlvbnMgPSBjb21wZXRpdGlvbnMuZGF0YTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd3cG1Db21wZXRpdGlvbkNvbXBhY3QnLCB3cG1Db21wZXRpdGlvbkNvbXBhY3QpO1xuXG4gIGZ1bmN0aW9uIHdwbUNvbXBldGl0aW9uQ29tcGFjdCgpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGNvbXBldGl0aW9uOiAnPScsXG5cbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jb21wZXRpdGlvbnMvY29tcG9uZW50cy9jb21wZXRpdGlvbi1jb21wYWN0Lmh0bWwnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKCkge1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge31cbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgnd3BtUGVuZGluZ1BsYXllcnMnLCB3cG1QZW5kaW5nUGxheWVycyk7XG5cbiAgZnVuY3Rpb24gd3BtUGVuZGluZ1BsYXllcnMoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBjdHJsRnVuYyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBzY29wZToge1xuICAgICAgICBjb21wZXRpdGlvbjogJz0nXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVVcmw6ICcvY29tcGV0aXRpb25zL2NvbXBvbmVudHMvcGVuZGluZy1wbGF5ZXJzLmh0bWwnXG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKGNvbXBldGl0aW9uc1NlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnBlbmRpbmdQbGF5ZXJzID0gW107XG4gICAgdm0uYXBwcm92ZVBlbmRpbmdQbGF5ZXIgPSBhcHByb3ZlUGVuZGluZ1BsYXllcjtcbiAgICB2bS5kZW55UGVuZGluZ1BsYXllciA9IGRlbnlQZW5kaW5nUGxheWVyO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge31cblxuICAgIGZ1bmN0aW9uIGFwcHJvdmVQZW5kaW5nUGxheWVyKHBsYXllcikge1xuICAgICAgcGxheWVyLnBvc2l0aW9uID0gdm0uY29tcGV0aXRpb24ucGxheWVycy5sZW5ndGggKyAxO1xuICAgICAgY29tcGV0aXRpb25zU2VydmljZS5hcHByb3ZlUGVuZGluZ1BsYXllcih2bS5jb21wZXRpdGlvbi5faWQsIHBsYXllcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVueVBlbmRpbmdQbGF5ZXIocGxheWVyKSB7XG4gICAgICBjb21wZXRpdGlvbnNTZXJ2aWNlLmRlbnlQZW5kaW5nUGxheWVyKHZtLmNvbXBldGl0aW9uLl9pZCwgcGxheWVyKTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd3cG1QeXJhbWlkJywgd3BtUHlyYW1pZCk7XG5cbiAgZnVuY3Rpb24gd3BtUHlyYW1pZCgpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NvbXBldGl0aW9ucy9jb21wb25lbnRzL3B5cmFtaWQuaHRtbCcsXG4gICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgY29tcGV0aXRpb246ICc9J1xuICAgICAgfSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGN0cmxGdW5jKCRzY29wZSwgJHN0YXRlLCBjb21wZXRpdGlvbnNTZXJ2aWNlLCAkZmlsdGVyLCBub3RpZnlTZXJ2aWNlLCBpZGVudGl0eVNlcnZpY2UsIGNoYWxsZW5nZXNTZXJ2aWNlKSB7XG4gICAgdmFyIG1heExldmVscyA9IDc7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5jb21wZXRpdGlvbklkID0gbnVsbDtcbiAgICB2bS5icmVha1BvaW50cyA9IFtdO1xuICAgIHZtLmxldmVscyA9IFtdO1xuICAgIHZtLm51bWJlck9mQmxvY2tzID0gMDtcbiAgICB2bS5jdXJyZW50VXNlcklzT25Db21wZXRpdGlvbiA9IGZhbHNlO1xuICAgIHZtLmN1cnJlbnRVc2VySXNQZW5kaW5nID0gZmFsc2U7XG4gICAgdm0uY3VycmVudFVzZXJJc0FkbWluID0gZmFsc2U7XG4gICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gZmFsc2U7XG4gICAgdm0uYWN0aXZlQ2hhbGxlbmdlT3Bwb25lbnQgPSBudWxsO1xuICAgIHZtLmF2YWlsYWJsZUNoYWxsZW5nZXMgPSBmYWxzZTtcbiAgICB2bS5jcmVhdGVDaGFsbGVuZ2UgPSBjcmVhdGVDaGFsbGVuZ2U7XG4gICAgdm0uY29tcGxldGVDaGFsbGVuZ2UgPSBjb21wbGV0ZUNoYWxsZW5nZTtcbiAgICB2bS5jaGFsbGVuZ2VFeHBpcmVkID0gY2hhbGxlbmdlRXhwaXJlZDtcbiAgICB2bS5jdXJyZW50VXNlclBsYXllciA9IHt9O1xuICAgIHZtLmNvbXBldGl0aW9uTWVudVRvZ2dsZSA9IGZhbHNlO1xuICAgIHZtLmFkZEN1cnJlbnRVc2VyVG9Db21wZXRpdGlvbiA9IGFkZEN1cnJlbnRVc2VyVG9Db21wZXRpdGlvbjtcbiAgICB2bS5jb25maXJtUmVtb3ZlQ3VycmVudFVzZXJGcm9tQ29tcGV0aXRpb24gPSBjb25maXJtUmVtb3ZlQ3VycmVudFVzZXJGcm9tQ29tcGV0aXRpb247XG4gICAgdm0ucGxheWVyQ2xpY2sgPSBwbGF5ZXJDbGljaztcbiAgICB2bS5udW1iZXJPZlJlYWxQbGF5ZXJzID0gMDtcbiAgICB2bS5tYXhQbGF5ZXJzID0gMDtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIC8vIERldGVybWluZSB0aGUgbWF4aW11bSBudW1iZXIgb2YgcGxheWVycyBiYXNlZCBvbiB0aGUgbWF4aW11bSBudW1iZXIgb2YgbGV2ZWxzXG4gICAgICBmb3IgKHZhciBpID0gbWF4TGV2ZWxzOyBpID4gMDsgLS1pKSB7XG4gICAgICAgIHZtLm1heFBsYXllcnMgKz0gaTtcbiAgICAgIH1cblxuICAgICAgJHNjb3BlLiR3YXRjaCgndm0uY29tcGV0aXRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS5jb21wZXRpdGlvbikge1xuICAgICAgICAgIHZtLmNvbXBldGl0aW9uSWQgPSB2bS5jb21wZXRpdGlvbi5faWQ7XG4gICAgICAgICAgb3JkZXJQbGF5ZXJzKCk7XG4gICAgICAgICAgZ2V0UGxheWVyc1N0YXR1cygpO1xuICAgICAgICAgIGFzc2lnbkxldmVsc1RvUGxheWVycygpO1xuICAgICAgICAgIGNhbGN1bGF0ZUNvbXBldGl0aW9uQmxvY2tzKCk7XG4gICAgICAgICAgZmlsbEluRW1wdHlCbG9ja3MoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3JkZXIgdGhlIHBsYXllcnMgYnkgdGhlIHBvc2l0aW9uIHByb3BlcnR5IG9mIHRoZSBwbGF5ZXJzIGFycmF5IGluIHRoZSBjb21wZXRpdGlvbiBvYmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlclBsYXllcnMoKSB7XG4gICAgICB2bS5jb21wZXRpdGlvbi5wbGF5ZXJzID0gJGZpbHRlcignb3JkZXJCeScpKHZtLmNvbXBldGl0aW9uLnBsYXllcnMsICdwb3NpdGlvbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpZ3VyZSBvdXQgaWYgZWFjaCBwbGF5ZXIgaXMgYWxyZWFkeSBjaGFsbGVuZ2VkIGFuZCBzZXQgc29tZSBzdHVmZlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFBsYXllcnNTdGF0dXMoKSB7XG4gICAgICBcbiAgICAgIHZtLmN1cnJlbnRVc2VySXNBZG1pbiA9IGZhbHNlO1xuICAgICAgdm0uY3VycmVudFVzZXJJc1BlbmRpbmcgPSBmYWxzZTtcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBjdXJyZW50IHVzZXIgaXMgYW4gYWRtaW4gb2YgdGhpcyBjb21wZXRpdGlvblxuICAgICAgICB2bS5jdXJyZW50VXNlcklzQWRtaW4gPSBfLnNvbWUodm0uY29tcGV0aXRpb24uYWRtaW5zLCBbJ19pZCcsIGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWRdKTtcbiAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIGEgcGVuZGluZyByZXF1ZXN0IHRvIGpvaW5cbiAgICAgICAgdm0uY3VycmVudFVzZXJJc1BlbmRpbmcgPSBfLnNvbWUodm0uY29tcGV0aXRpb24ucGVuZGluZ1BsYXllcnMsIFsnX2lkJywgaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZF0pO1xuICAgICAgfVxuXG4gICAgICB2bS5jdXJyZW50VXNlcklzT25Db21wZXRpdGlvbiA9IGZhbHNlO1xuICAgICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gZmFsc2U7XG4gICAgICBfLmZvckVhY2godm0uY29tcGV0aXRpb24ucGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICAvLyBGaW5kIHRoZSBjdXJyZW50IHVzZXIgaWYgdGhleSBhcmUgb24gdGhpcyBjb21wZXRpdGlvbiBhbmQgc2V0IHNvbWUgcHJvcGVydGllc1xuICAgICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpICYmIHBsYXllci5faWQgPT09IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWQpIHtcbiAgICAgICAgICB2bS5jdXJyZW50VXNlcklzT25Db21wZXRpdGlvbiA9IHRydWU7XG4gICAgICAgICAgcGxheWVyLmNsYXNzID0gJ2N1cnJlbnQtdXNlcic7XG4gICAgICAgICAgdm0uY3VycmVudFVzZXJQbGF5ZXIgPSBwbGF5ZXI7XG5cbiAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgY3VycmVudCB1c2VyIGhhcyBhbiBhY3RpdmUgY2hhbGxlbmdlXG4gICAgICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZ2V0QWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyKHZtLmNvbXBldGl0aW9uSWQsIHBsYXllci5faWQpLnRoZW4oZnVuY3Rpb24gKGNoYWxsZW5nZSkge1xuICAgICAgICAgICAgaWYgKGNoYWxsZW5nZS5kYXRhKSB7XG4gICAgICAgICAgICAgIHZtLmhhc0FjdGl2ZUNoYWxsZW5nZSA9IHRydWU7XG4gICAgICAgICAgICAgIHZtLmFjdGl2ZUNoYWxsZW5nZU9wcG9uZW50ID0gY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlci5faWQgPT09IHBsYXllci5faWQgPyBjaGFsbGVuZ2UuZGF0YS5vcHBvbmVudCA6IGNoYWxsZW5nZS5kYXRhLmNoYWxsZW5nZXI7XG4gICAgICAgICAgICAgIC8vIEFkZCBhIGNsYXNzIHRvIHRoZSBjdXJyZW50IHVzZXIncyBvcHBvbmVudCdcbiAgICAgICAgICAgICAgdmFyIGN1cnJlbnRPcHBvbmVudCA9IF8uZmluZCh2bS5jb21wZXRpdGlvbi5wbGF5ZXJzLCB7J19pZCc6IHZtLmFjdGl2ZUNoYWxsZW5nZU9wcG9uZW50Ll9pZH0pO1xuICAgICAgICAgICAgICBjdXJyZW50T3Bwb25lbnQuY2xhc3MgPSBjdXJyZW50T3Bwb25lbnQuY2xhc3MgPyBjdXJyZW50T3Bwb25lbnQuY2xhc3MgKyAnIGN1cnJlbnQtb3Bwb25lbnQnOiAnY3VycmVudC1vcHBvbmVudCc7XG4gICAgICAgICAgICAvLyBUaGUgdXNlciBkb2Vzbid0IGhhdmUgYW4gYWN0aXZlIGNoYWxsZW5nZSwgc28gZmluZCB0aGUgYXZhaWxhYmxlIGNoYWxsZW5nZXMnXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmaW5kQXZhaWxhYmxlQ2hhbGxlbmdlcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZ2V0QWN0aXZlQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24odm0uY29tcGV0aXRpb25JZCkudGhlbihmdW5jdGlvbiAoY2hhbGxlbmdlcykge1xuICAgICAgICBfLmZvckVhY2goY2hhbGxlbmdlcy5kYXRhLCBmdW5jdGlvbiAoY2hhbGxlbmdlKSB7XG5cbiAgICAgICAgICB2YXIgY2hhbGxlbmdlciA9IF8uZmluZCh2bS5jb21wZXRpdGlvbi5wbGF5ZXJzLCB7ICdfaWQnOiBjaGFsbGVuZ2UuY2hhbGxlbmdlci5faWQgfSk7XG4gICAgICAgICAgaWYgKGNoYWxsZW5nZXIuY2xhc3MgPT09ICdhdmFpbGFibGUnKSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2VyLmNsYXNzID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoYWxsZW5nZXIuY2xhc3MgPSBjaGFsbGVuZ2VyLmNsYXNzID8gY2hhbGxlbmdlci5jbGFzcyArICcgdW5hdmFpbGFibGUnOiAndW5hdmFpbGFibGUnO1xuICAgICAgICAgIGNoYWxsZW5nZXIuYXZhaWxhYmxlID0gZmFsc2U7XG4gICAgICAgICAgY2hhbGxlbmdlci5jaGFsbGVuZ2UgPSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2NoYWxsZW5nZXInXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHZhciBvcHBvbmVudCA9IF8uZmluZCh2bS5jb21wZXRpdGlvbi5wbGF5ZXJzLCB7ICdfaWQnOiBjaGFsbGVuZ2Uub3Bwb25lbnQuX2lkIH0pO1xuICAgICAgICAgIGlmIChvcHBvbmVudC5jbGFzcyA9PT0gJ2F2YWlsYWJsZScpIHtcbiAgICAgICAgICAgIG9wcG9uZW50LmNsYXNzID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9wcG9uZW50LmNsYXNzID0gb3Bwb25lbnQuY2xhc3MgPyBvcHBvbmVudC5jbGFzcyArICcgdW5hdmFpbGFibGUnOiAndW5hdmFpbGFibGUnO1xuICAgICAgICAgIG9wcG9uZW50LmF2YWlsYWJsZSA9IGZhbHNlO1xuICAgICAgICAgIG9wcG9uZW50LmNoYWxsZW5nZSA9IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnb3Bwb25lbnQnXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIFRyYWNrIHdoZW4gdGhlIGNoYWxsZW5nZSB3aWxsIGV4cGlyZVxuICAgICAgICAgIGlmIChjaGFsbGVuZ2UudGltZUxpbWl0ICE9PSAwKSB7XG4gICAgICAgICAgICB2YXIgdGltZVRvRXhwaXJlID0gbW9tZW50KCkuZGlmZihtb21lbnQoY2hhbGxlbmdlLmNyZWF0ZWQpLmFkZChjaGFsbGVuZ2UudGltZUxpbWl0LCAnZCcpLCAncycpICogLTE7XG4gICAgICAgICAgICAvLyBJZiB0aGUgY2hhbGxlbmdlIGhhcyBub3QgeWV0IGV4cGlyZWQgZGlzcGxheSBhIGNvdW50ZG93biBvbiB0aGUgb3Bwb25lbnRcbiAgICAgICAgICAgIGlmICh0aW1lVG9FeHBpcmUgPiAwKSB7XG4gICAgICAgICAgICAgIG9wcG9uZW50LmNoYWxsZW5nZS5leHBpcmVzID0gdGltZVRvRXhwaXJlO1xuICAgICAgICAgICAgICAvLyBJZiB0aGUgY2hhbGxlbmdlIGV4cGlyZWQgd2hpbGUgbm8gb25lIHdhcyB2aWV3aW5nIHRoaXMgY29tcGV0aXRpb24gY29tcGxldGUgdGhlIGNoYWxsZW5nZSBieSBmb3JmZWl0XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRpbWVUb0V4cGlyZSA8PSAwKSB7XG4gICAgICAgICAgICAgIGNvbXBsZXRlQ2hhbGxlbmdlKG51bGwsIHRydWUsIG9wcG9uZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlndXJlIG91dCB3aGVyZSB0byBzdGFydCBlYWNoIG5ldyByb3cgb24gdGhlIGNvbXBldGl0aW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQnJlYWtQb2ludHMoKSB7XG4gICAgICB2bS5icmVha1BvaW50cyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXhMZXZlbHM7IGkrKykge1xuICAgICAgICB2bS5icmVha1BvaW50cy5wdXNoKCgoKGkgKiAoaSArIDEpKSAvIDIpKSArIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdpdmUgZWFjaCBwbGF5ZXIgYSBsZXZlbCBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgYnJlYWsgcG9pbnRzXG4gICAgLy8gVGhpcyB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHdobyBvdGhlciBwbGF5ZXJzIGNhbiBjaGFsbGVuZ2VcbiAgICBmdW5jdGlvbiBhc3NpZ25MZXZlbHNUb1BsYXllcnMoKSB7XG4gICAgICB2YXIgbGV2ZWwgPSAwO1xuICAgICAgdm0ubGV2ZWxzID0gW107XG4gICAgICBjcmVhdGVCcmVha1BvaW50cygpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS5jb21wZXRpdGlvbi5wbGF5ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh2bS5icmVha1BvaW50cy5pbmRleE9mKGkgKyAxKSA+IC0xKSB7XG4gICAgICAgICAgbGV2ZWwgKz0gMTtcbiAgICAgICAgICAvLyBTZXQgdGhlIG51bWJlciBvZiB0b3RhbCBsZXZlbHNcbiAgICAgICAgICB2bS5sZXZlbHMucHVzaChsZXZlbCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2l2ZSBlYWNoIHBsYXllciBhIGxldmVsXG4gICAgICAgIHZtLmNvbXBldGl0aW9uLnBsYXllcnNbaV0ubGV2ZWwgPSBsZXZlbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIb3cgbWFueSB0b3RhbCBibG9ja3MgaW4gdGhpcyBjb21wZXRpdGlvblxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUNvbXBldGl0aW9uQmxvY2tzKCkge1xuICAgICAgdm0ubnVtYmVyT2ZCbG9ja3MgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IF8ubGFzdCh2bS5sZXZlbHMpOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIHZtLm51bWJlck9mQmxvY2tzICs9IGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRmlsbCBvdXQgdGhlIHJlbWFpbmluZyBibG9ja3Mgb2YgdGhlIGNvbXBldGl0aW9uIHdpdGggZW1wdHkgYmxvY2tzXG4gICAgZnVuY3Rpb24gZmlsbEluRW1wdHlCbG9ja3MoKSB7XG4gICAgICB2bS5udW1iZXJPZlJlYWxQbGF5ZXJzID0gdm0uY29tcGV0aXRpb24ucGxheWVycy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gdm0uY29tcGV0aXRpb24ucGxheWVycy5sZW5ndGg7IGkgPCB2bS5udW1iZXJPZkJsb2NrczsgaSsrKSB7XG4gICAgICAgIHZtLmNvbXBldGl0aW9uLnBsYXllcnMucHVzaCh7XG4gICAgICAgICAgZmlyc3ROYW1lOiAnRW1wdHknLFxuICAgICAgICAgIGxhc3ROYW1lOiAnU3BvdCcsXG4gICAgICAgICAgZGlzcGxheU5hbWU6ICdFbXB0eSBTcG90JyxcbiAgICAgICAgICBwb3NpdGlvbjogOTksXG4gICAgICAgICAgY2xhc3M6IHZtLmN1cnJlbnRVc2VySXNPbkNvbXBldGl0aW9uID8gJ2VtcHR5JzogJ2pvaW5hYmxlIGVtcHR5J1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vIFdlIGhhdmUgdG8gZ2l2ZSBsZXZlbHMgdG8gdGhlIG5ldyBlbXB0eSBzcG90c1xuICAgICAgYXNzaWduTGV2ZWxzVG9QbGF5ZXJzKCk7XG4gICAgfVxuXG4gICAgLy8gRmluZCBhbGwgdGhlIHBsYXllcnMgdGhhdCBhcmUgYXZhaWxhYmxlIHRvIGJlIGNoYWxsZW5nZWQgYnkgdGhpcyB1c2VyXG4gICAgZnVuY3Rpb24gZmluZEF2YWlsYWJsZUNoYWxsZW5nZXMoKSB7XG4gICAgICBpZiAodm0uY3VycmVudFVzZXJJc09uQ29tcGV0aXRpb24gJiYgIXZtLmhhc0FjdGl2ZUNoYWxsZW5nZSkge1xuICAgICAgICB2YXIgbGV2ZWxBYm92ZSA9IHZtLmN1cnJlbnRVc2VyUGxheWVyLmxldmVsID4gMSA/IHZtLmN1cnJlbnRVc2VyUGxheWVyLmxldmVsIC0gMSA6IG51bGw7XG4gICAgICAgIF8uZm9yRWFjaCh2bS5jb21wZXRpdGlvbi5wbGF5ZXJzLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgICAgaWYgKHBsYXllci5sZXZlbCA9PT0gbGV2ZWxBYm92ZSAmJiBwbGF5ZXIucG9zaXRpb24gIT09IDk5ICYmIHBsYXllci5jbGFzcyAhPT0gJ3VuYXZhaWxhYmxlJyAmJiBwbGF5ZXIuYXZhaWxhYmxlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdm0uYXZhaWxhYmxlQ2hhbGxlbmdlcyA9IHRydWU7XG4gICAgICAgICAgICBwbGF5ZXIuYXZhaWxhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIHBsYXllci5jbGFzcyA9ICdhdmFpbGFibGUnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNoYWxsZW5nZSBiZXR3ZWVuIHRoZSBjdXJyZW50IHVzZXIgYW5kIHRoZSBwbGF5ZXIgc2VsZWN0ZWRcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IHBsYXllciwgdGhlIGNoYWxsZW5nZWQgcGxheWVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hhbGxlbmdlKHBsYXllcikge1xuICAgICAgaWYgKCFwbGF5ZXIuYXZhaWxhYmxlKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ1NvcnJ5LCB0aGF0IGlzIG5vdCBhIHZhbGlkIGNoYWxsZW5nZS4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZtLmhhc0FjdGl2ZUNoYWxsZW5nZSA9IHRydWU7XG4gICAgICAgIHZhciBjaGFsbGVuZ2UgPSB7XG4gICAgICAgICAgdHlwZTogdm0uY29tcGV0aXRpb24udHlwZSxcbiAgICAgICAgICBjb21wZXRpdGlvbk5hbWU6IHZtLmNvbXBldGl0aW9uLm5hbWUsXG4gICAgICAgICAgY29tcGV0aXRpb25JZDogdm0uY29tcGV0aXRpb25JZCxcbiAgICAgICAgICBjb21wbGV0ZTogZmFsc2UsXG4gICAgICAgICAgZm9yZmVpdDogZmFsc2UsXG4gICAgICAgICAgdGltZUxpbWl0OiB2bS5jb21wZXRpdGlvbi5mb3JmZWl0RGF5cyxcbiAgICAgICAgICBjaGFsbGVuZ2VyOiB7XG4gICAgICAgICAgICBfaWQ6IHZtLmN1cnJlbnRVc2VyUGxheWVyLl9pZCxcbiAgICAgICAgICAgIGVtYWlsOiB2bS5jdXJyZW50VXNlclBsYXllci5lbWFpbCxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogdm0uY3VycmVudFVzZXJQbGF5ZXIuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IHZtLmN1cnJlbnRVc2VyUGxheWVyLmxhc3ROYW1lLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IHZtLmN1cnJlbnRVc2VyUGxheWVyLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgcG9zaXRpb246IHZtLmN1cnJlbnRVc2VyUGxheWVyLnBvc2l0aW9uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHBvbmVudDoge1xuICAgICAgICAgICAgX2lkOiBwbGF5ZXIuX2lkLFxuICAgICAgICAgICAgZW1haWw6IHBsYXllci5lbWFpbCxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogcGxheWVyLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBwbGF5ZXIubGFzdE5hbWUsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogcGxheWVyLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgcG9zaXRpb246IHBsYXllci5wb3NpdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBjaGFsbGVuZ2VcbiAgICAgICAgLy8gV2Vic29ja2V0IGV2ZW50IHdpbGwgcmVmcmVzaCB0aGUgY29tcGV0aXRpb25cbiAgICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuY3JlYXRlUHlyYW1pZENoYWxsZW5nZShjaGFsbGVuZ2UpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZtLmNvbXBldGl0aW9uTWVudVRvZ2dsZSA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wbGV0ZSBhIGNoYWxsZW5nZSBieSBhIHVzZXIgaW50ZXJhY3Rpb24gb3IgYSBmb3JmZWl0XG4gICAgICogXG4gICAgICogQHBhcmFtICB7Ym9vbGVhbn0gd2lubmVySXNDdXJyZW50VXNlclxuICAgICAqIEBwYXJhbSAge2Jvb2xlYW59IGZvcmZlaXRcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IGZvcmZlaXRMb3NlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBsZXRlQ2hhbGxlbmdlKHdpbm5lcklzQ3VycmVudFVzZXIsIGZvcmZlaXQsIGZvcmZlaXRMb3Nlcikge1xuICAgICAgdmFyIHBsYXllciA9IGZvcmZlaXRMb3NlciB8fCB2bS5jdXJyZW50VXNlclBsYXllcjtcbiAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmdldEFjdGl2ZUNoYWxsZW5nZUJ5Q29tcGV0aXRpb25CeVBsYXllcih2bS5jb21wZXRpdGlvbklkLCBwbGF5ZXIuX2lkKS50aGVuKGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIHN3YXBQb3NpdGlvbnMgPSBmYWxzZTtcblxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIGZvcmZlaXRcbiAgICAgICAgaWYgKGZvcmZlaXQpIHtcbiAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS5mb3JmZWl0ID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZm9yZmVpdExvc2VyLmNoYWxsZW5nZS5wb3NpdGlvbiA9PT0gJ29wcG9uZW50Jykge1xuICAgICAgICAgICAgY2hhbGxlbmdlLmRhdGEud2lubmVyID0gJ2NoYWxsZW5nZXInO1xuICAgICAgICAgICAgc3dhcFBvc2l0aW9ucyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5kYXRhLndpbm5lciA9ICdvcHBvbmVudCc7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEZpZ3VyZSBvdXQgd2hvIHRoZSB3aW5uZXIgd2FzIHRvIHN0b3JlIGluIHRoZSBjaGFsbGVuZ2UgcmVjb3JkXG4gICAgICAgIH0gZWxzZSBpZiAod2lubmVySXNDdXJyZW50VXNlcikge1xuICAgICAgICAgIGlmIChjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2VyLl9pZCA9PT0gdm0uY3VycmVudFVzZXJQbGF5ZXIuX2lkKSB7XG4gICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS53aW5uZXIgPSAnY2hhbGxlbmdlcic7XG4gICAgICAgICAgICBzd2FwUG9zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hhbGxlbmdlLmRhdGEud2lubmVyID0gJ29wcG9uZW50JztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNoYWxsZW5nZS5kYXRhLmNoYWxsZW5nZXIuX2lkID09PSB2bS5jdXJyZW50VXNlclBsYXllci5faWQpIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5kYXRhLndpbm5lciA9ICdvcHBvbmVudCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZS5kYXRhLndpbm5lciA9ICdjaGFsbGVuZ2VyJztcbiAgICAgICAgICAgIHN3YXBQb3NpdGlvbnMgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN3YXAgcG9zaXRpb25zIGFuZCB0aGVuIGNvbXBsZXRlIHRoZSBjaGFsbGVuZ2Ugb3IganVzdCBjb21wbGV0ZSB0aGUgY2hhbGxlbmdlXG4gICAgICAgIC8vIFdlYnNvY2tldCBldmVudCB3aWxsIHJlZnJlc2ggdGhlIGNvbXBldGl0aW9uXG4gICAgICAgIGlmIChzd2FwUG9zaXRpb25zKSB7XG4gICAgICAgICAgY29tcGV0aXRpb25zU2VydmljZS5zd2FwUG9zaXRpb25zKHZtLmNvbXBldGl0aW9uSWQsIGNoYWxsZW5nZS5kYXRhLm9wcG9uZW50LCBjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2VyKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmNvbXBsZXRlUHlyYW1pZENoYWxsZW5nZShjaGFsbGVuZ2UuZGF0YSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmIChyZW1vdmluZ0N1cnJlbnRVc2VyKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ3VycmVudFVzZXJGcm9tQ29tcGV0aXRpb24oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuY29tcGxldGVQeXJhbWlkQ2hhbGxlbmdlKGNoYWxsZW5nZS5kYXRhKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChyZW1vdmluZ0N1cnJlbnRVc2VyKSB7XG4gICAgICAgICAgICAgIHJlbW92ZUN1cnJlbnRVc2VyRnJvbUNvbXBldGl0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdm0uY29tcGV0aXRpb25NZW51VG9nZ2xlID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxscyB0aGUgY29tcGxldGUgY2hhbGxuZ2UgZnVuY3Rpb24gd2l0aCB0aGUgZm9yZmVpdGluZyBwbGF5ZXJcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IHBsYXllclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWxsZW5nZUV4cGlyZWQocGxheWVyKSB7XG4gICAgICBjb21wbGV0ZUNoYWxsZW5nZShudWxsLCB0cnVlLCBwbGF5ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIGN1cnJlbnQgdXNlciB0aGUgY29tcGV0aXRpb24gXG4gICAgICogaWYgdGhleSdyZSBub3QgYWxyZWFkeSBvbiBpdCBhbmQgdGhlcmUncyBzcGFjZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZEN1cnJlbnRVc2VyVG9Db21wZXRpdGlvbigpIHtcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgaWYgKHZtLm51bWJlck9mUmVhbFBsYXllcnMgPCB2bS5tYXhQbGF5ZXJzKSB7XG4gICAgICAgICAgdmFyIHBsYXllciA9IHtcbiAgICAgICAgICAgIF9pZDogaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZCxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIubGFzdE5hbWUsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgZW1haWw6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci51c2VybmFtZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB2bS5udW1iZXJPZlJlYWxQbGF5ZXJzICsgMVxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKCF2bS5jb21wZXRpdGlvbi5yZXN0cmljdEpvaW5zKSB7XG4gICAgICAgICAgICBzd2FsKHtcbiAgICAgICAgICAgICAgdGl0bGU6ICdKb2luIENvbXBldGl0aW9uPycsXG4gICAgICAgICAgICAgIHRleHQ6ICdZb3VcXCdsbCBiZSBhZGRlZCB0byB0aGUgYm90dG9tJyxcbiAgICAgICAgICAgICAgdHlwZTogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ0pvaW4nLFxuICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAnTmV2ZXJtaW5kJyxcbiAgICAgICAgICAgICAgY2xvc2VPbkNvbmZpcm06IGZhbHNlLFxuICAgICAgICAgICAgICBjbG9zZU9uQ2FuY2VsOiB0cnVlXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2UuYWRkUGxheWVyVG9Db21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkLCBwbGF5ZXIpO1xuICAgICAgICAgICAgICBzd2FsKCdXZWxjb21lIEFib2FyZCEnLCAnTm93IHN0YXJ0IGZpZ2h0aW5nIHlvdXIgd2F5IHRvIHRoZSB0b3AnLCAnc3VjY2VzcycpO1xuICAgICAgICAgICAgfSk7ICBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dhbCh7XG4gICAgICAgICAgICAgIHRpdGxlOiAnU2VuZCBKb2luIFJlcXVlc3Q/JyxcbiAgICAgICAgICAgICAgdGV4dDogJ1RoaXMgaXMgYSBjbG9zZWQgY29tcGV0aXRpb24gc28gYW4gYWRtaW4gbXVzdCBhcHByb3ZlIHlvdXIgcmVxdWVzdCcsXG4gICAgICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJyxcbiAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdTZW5kIFJlcXVlc3QnLFxuICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAnTmV2ZXJtaW5kJyxcbiAgICAgICAgICAgICAgY2xvc2VPbkNvbmZpcm06IGZhbHNlLFxuICAgICAgICAgICAgICBjbG9zZU9uQ2FuY2VsOiB0cnVlXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2UuYWRkUGxheWVyVG9Db21wZXRpdGlvblJlcXVlc3Qodm0uY29tcGV0aXRpb24sIHBsYXllcikudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdm0uY3VycmVudFVzZXJJc1BlbmRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgc3dhbCgnUmVxdWVzdCBTZW50JywgJ1lvdSB3aWxsIHJlY2VpdmUgYW4gZW1haWwgb25jZSBhbiBhZG1pbiBwcm9jZXNzZXMgdGhlIHJlcXVlc3QuJywgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub3RpZnlTZXJ2aWNlLndhcm5pbmcoJ1NvcnJ5LCB0aGlzIGNvbXBldGl0aW9uIGlzIGZ1bGwnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS53YXJuaW5nKCdQbGVhc2UgbG9naW4gdG8gam9pbiBhIGNvbXBldGl0aW9uJyk7XG4gICAgICAgICRzdGF0ZS5wcmV2aW91cyA9ICdjb21wZXRpdGlvbnMudmlldyc7XG4gICAgICAgICRzdGF0ZS5wcmV2UGFyYW1zID0geydjb21wZXRpdGlvbklkJzogdm0uY29tcGV0aXRpb25JZH07XG4gICAgICAgICRzdGF0ZS5nbygnbG9naW4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IGNvbmZpcm1hdGlvbiBtb2RhbCBmb3IgbGVhdmluZyB0aGUgY29tcGV0aXRpb24gXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZmlybVJlbW92ZUN1cnJlbnRVc2VyRnJvbUNvbXBldGl0aW9uKCkge1xuICAgICAgc3dhbCh7XG4gICAgICAgIHRpdGxlOiAnTGVhdmUgQ29tcGV0aXRpb24/JyxcbiAgICAgICAgdGV4dDogJ1lvdSB3aWxsIGxvc2UgeW91ciBzcG90IGFuZCBmb3JmZWl0IGFueSBhY3RpdmUgY2hhbGxlbmdlcy4nLFxuICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ1llcywgbGVhdmUnLFxuICAgICAgICBjb25maXJtQnV0dG9uQ2xhc3M6ICdidG4tZGFuZ2VyJyxcbiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ05vLCBzdGF5JyxcbiAgICAgICAgY2xvc2VPbkNvbmZpcm06IGZhbHNlLFxuICAgICAgICBjbG9zZU9uQ2FuY2VsOiB0cnVlXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZUN1cnJlbnRVc2VyRnJvbUNvbXBldGl0aW9uKCk7XG4gICAgICAgIHN3YWwoJ09LLCB5b3VcXCdyIG91dCEnLCAnWW91XFwndmUgYmVlbiByZW1vdmVkIGZyb20gdGhlIGNvbXBldGl0aW9uLicsICdzdWNjZXNzJyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBVc2UgdGhpcyB0byBlbmZvcmNlIG9yZGVyIG9mIG9wZXJhdGlvbnMgd2hlbiB0aGUgcGxheWVyIHRvIGJlIHJlbW92ZWQgaGFkIGFuIGFjdGl2ZSBjaGFsbGVuZ2VcbiAgICB2YXIgcmVtb3ZpbmdDdXJyZW50VXNlciA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgY3VycmVudCB1c2VyIGZyb20gdGhlIGNvbXBldGl0aW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlQ3VycmVudFVzZXJGcm9tQ29tcGV0aXRpb24oKSB7XG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIHVzZXIgaXMgbG9nZ2VkIGluIGFuZCBpcyBvbiB0aGlzIGNvbXBldGl0aW9uXG4gICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpICYmIHZtLmN1cnJlbnRVc2VySXNPbkNvbXBldGl0aW9uKSB7XG4gICAgICAgIHJlbW92aW5nQ3VycmVudFVzZXIgPSB0cnVlO1xuICAgICAgICAvLyBGb3JmZWl0IGlmIHRoZXkgaGF2ZSBhbiBhY3RpdmUgY2hhbGxlbmdlXG4gICAgICAgIGlmICh2bS5oYXNBY3RpdmVDaGFsbGVuZ2UpIHtcbiAgICAgICAgICBjb21wbGV0ZUNoYWxsZW5nZShudWxsLCB0cnVlLCB2bS5jdXJyZW50VXNlclBsYXllcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU2luY2Ugd2UgYXJlIHJlbW92aW5nIHRoZW0gLi4uXG4gICAgICAgICAgdm0uY3VycmVudFVzZXJJc09uQ29tcGV0aXRpb24gPSBmYWxzZTtcbiAgICAgICAgICB2bS5oYXNBY3RpdmVDaGFsbGVuZ2UgPSBmYWxzZTtcblxuICAgICAgICAgIC8vIEdldCBhbiB1cGRhdGVkIGNvcHkgb2YgdGhlIGNvbXBldGl0aW9uIGluY2FzZSBhIGZvcmZlaXQgaGFwcGVuZWRcbiAgICAgICAgICBjb21wZXRpdGlvbnNTZXJ2aWNlLmdldENvbXBldGl0aW9uKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICAgIC8vIFN0b3JlIHRoZSB1cGRhdGVkIGNvcHkgbG9jYWxseSBzbyBhcyBub3QgdG8gZGlzdHJ1cHQgdGhlIGNvbXBldGl0aW9uXG4gICAgICAgICAgICAvLyB1bnRpbCB0aGUgcGxheWVyIGhhcyBiZWVuIHJlbW92ZWRcbiAgICAgICAgICAgIHZhciBjb21wZXRpdGlvbiA9IHAuZGF0YTtcblxuICAgICAgICAgICAgLy8gS2VlcCB0cmFjayBvZiB0aGUgc3BvdCB0aGV5IHdlcmUgaW4gb24gdGhlIGNvbXBldGl0aW9uXG4gICAgICAgICAgICB2YXIgb3BlblBvc2l0aW9uID0gdm0uY3VycmVudFVzZXJQbGF5ZXIucG9zaXRpb247XG5cbiAgICAgICAgICAgIC8vIE1vdmUgYWxsIHRoZSBwbGF5ZXJzIHVwIDEgcG9zaXRpb24gdGhhdCB3ZXJlIGJlaGluZCB0aGUgcmVtb3ZlZCBwbGF5ZXJcbiAgICAgICAgICAgIF8uZm9yRWFjaChjb21wZXRpdGlvbi5wbGF5ZXJzLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgICAgICAgIGlmIChwbGF5ZXIucG9zaXRpb24gPj0gb3BlblBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLnBvc2l0aW9uIC09IDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmVkIHRoZSBwbGF5ZXIgZnJvbSB0aGUgY29tcGV0aXRpb25cbiAgICAgICAgICAgIHZhciByZW1vdmVkUGxheWVyID0gXy5yZW1vdmUoY29tcGV0aXRpb24ucGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICAgICAgICByZXR1cm4gcGxheWVyLl9pZCA9PT0gdm0uY3VycmVudFVzZXJQbGF5ZXIuX2lkO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIE1ha2UgYSBuZXcgYXJyYXkgb2YgYWxsIHRoZSBwbGF5ZXJzIHN0aWxsIG9uIHRoZSBjb21wZXRpdGlvblxuICAgICAgICAgICAgLy8gb25seSB1c2UgdGhlIHByb3BlcnRpZXMgd2Ugd2FudCB0byBzdG9yZSBpbiB0aGUgY29tcGV0aXRpb24gZG9jdW1lbnRcbiAgICAgICAgICAgIHZhciB1cGRhdGVkUGxheWVycyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS5udW1iZXJPZlJlYWxQbGF5ZXJzIC0gMTsgKytpKSB7XG4gICAgICAgICAgICAgIHZhciB1cGRhdGVkUGxheWVyID0ge1xuICAgICAgICAgICAgICAgIF9pZDogY29tcGV0aXRpb24ucGxheWVyc1tpXS5faWQsXG4gICAgICAgICAgICAgICAgZmlyc3ROYW1lOiBjb21wZXRpdGlvbi5wbGF5ZXJzW2ldLmZpcnN0TmFtZSxcbiAgICAgICAgICAgICAgICBsYXN0TmFtZTogY29tcGV0aXRpb24ucGxheWVyc1tpXS5sYXN0TmFtZSxcbiAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogY29tcGV0aXRpb24ucGxheWVyc1tpXS5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogY29tcGV0aXRpb24ucGxheWVyc1tpXS5wb3NpdGlvblxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIHVwZGF0ZWRQbGF5ZXJzLnB1c2godXBkYXRlZFBsYXllcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENhbGwgc2VydmljZSB0byByZW1vdmUgdGhlIHBsYXllclxuICAgICAgICAgICAgY29tcGV0aXRpb25zU2VydmljZS5yZW1vdmVkUGxheWVyRnJvbUNvbXBldGl0aW9uKHZtLmNvbXBldGl0aW9uSWQsIHJlbW92ZWRQbGF5ZXJbMF0sIHVwZGF0ZWRQbGF5ZXJzKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmVtb3ZpbmdDdXJyZW50VXNlciA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWd1cmUgb3V0IHdoYXQgdGhlIGFwcHJvcHJpYXRlIGFjdGlvbiBpcyBiYXNlZCBvbiB0aGUgcGxheWVyIGNsaWNraW5nIGFuZCB0aGUgcGxheWVyIGJlaW5nIGNsaWNrZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwbGF5ZXJDbGljayhwbGF5ZXIpIHtcbiAgICAgIC8vIGNsaWNrZWQgb24gZW1wdHkgc3BvdFxuICAgICAgaWYgKHBsYXllci5wb3NpdGlvbiA9PT0gOTkgJiYgIXZtLmN1cnJlbnRVc2VySXNPbkNvbXBldGl0aW9uKSB7XG4gICAgICAgIGFkZEN1cnJlbnRVc2VyVG9Db21wZXRpdGlvbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGxheWVyLnNob3dDaGFsbGVuZ2VNb2RhbCA9ICFwbGF5ZXIuc2hvd0NoYWxsZW5nZU1vZGFsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZnJlc2ggdGhlIGNvbXBldGl0aW9uIGJlY2FzdWUgb2YgYW4gdXBkYXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVmcmVzaENvbXBldGl0aW9uKCkge1xuICAgICAgY29tcGV0aXRpb25zU2VydmljZS5nZXRDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChjb21wZXRpdGlvbikge1xuICAgICAgICB2bS5jb21wZXRpdGlvbiA9IGNvbXBldGl0aW9uLmRhdGE7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6Y29tcGV0aXRpb25fdXBkYXRlZCcsIGZ1bmN0aW9uIChfLCBjaGFsbGVuZ2VEZXRhaWxzKSB7XG4gICAgICBpZiAodm0uY29tcGV0aXRpb25JZCA9PT0gY2hhbGxlbmdlRGV0YWlscy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuaW5mbyhjaGFsbGVuZ2VEZXRhaWxzLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgcmVmcmVzaENvbXBldGl0aW9uKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ3dwbVVwZGF0ZUFkbWlucycsIHdwbVVwZGF0ZUFkbWlucyk7XG5cbiAgZnVuY3Rpb24gd3BtVXBkYXRlQWRtaW5zKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogY3RybEZ1bmMsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgY29tcGV0aXRpb246ICc9J1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NvbXBldGl0aW9ucy9jb21wb25lbnRzL3VwZGF0ZS1hZG1pbnMuaHRtbCdcbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoJHNjb3BlLCBjb21wZXRpdGlvbnNTZXJ2aWNlLCBjaGFsbGVuZ2VzU2VydmljZSwgdXNlclNlcnZpY2UsIGlkZW50aXR5U2VydmljZSkge1xuICAgIHZhciByZW1vdmVkQWRtaW5zID0gW107XG4gICAgdmFyIG9yaWdpbmFsQXZhaWxhYmxlQWRtaW5zID0gW107XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5hdmFpbGFibGVBZG1pbnMgPSBbXTtcbiAgICB2bS5hZGRlZEFkbWlucyA9IFtdO1xuICAgIHZtLnVzZXJJc1ByaW1hcnlBZG1pbiA9IGZhbHNlO1xuICAgIHZtLnVwZGF0ZUNvbXBldGl0aW9uID0gdXBkYXRlQ29tcGV0aXRpb247XG4gICAgdm0uY2FuY2VsVXBkYXRlID0gY2FuY2VsVXBkYXRlO1xuICAgIHZtLnJlbW92ZUFkbWluID0gcmVtb3ZlQWRtaW47XG4gICAgdm0uYWRkQWRtaW4gPSBhZGRBZG1pbjtcbiAgICB2bS5kaXNhYmxlU3VibWl0ID0gdHJ1ZTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICRzY29wZS4kd2F0Y2goJ3ZtLmNvbXBldGl0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodm0uY29tcGV0aXRpb24pIHtcbiAgICAgICAgICB2bS5hZGRlZEFkbWlucyA9IF8uY2xvbmVEZWVwKHZtLmNvbXBldGl0aW9uLmFkbWlucyk7XG4gICAgICAgICAgdm0uZGlzYWJsZVN1Ym1pdCA9IHRydWU7XG4gICAgICAgICAgdm0udXNlcklzUHJpbWFyeUFkbWluID0gXy5maW5kKHZtLmNvbXBldGl0aW9uLmFkbWlucywgeydwcmltYXJ5JzogdHJ1ZX0pLl9pZCA9PT0gaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZCA/IHRydWU6IGZhbHNlO1xuICAgICAgICAgIGdldEF2YWlsYWJsZUFkbWlucygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBdmFpbGFibGVBZG1pbnMoKSB7XG4gICAgICB2bS5hdmFpbGFibGVBZG1pbnMgPSBbXTtcbiAgICAgIHJlbW92ZWRBZG1pbnMgPSBbXTtcbiAgICAgIHVzZXJTZXJ2aWNlLmdldEFsbFVzZXJzKCkudGhlbihmdW5jdGlvbiAodXNlcnMpIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBjdXJyZW50IGFkbWlucyBmcm9tIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBhZG1pbnNcbiAgICAgICAgXy5mb3JFYWNoKHZtLmNvbXBldGl0aW9uLmFkbWlucywgZnVuY3Rpb24gKGNvbXBldGl0aW9uQWRtaW4pIHtcbiAgICAgICAgICBfLnJlbW92ZSh1c2Vycy5kYXRhLCBmdW5jdGlvbiAoYXZhaWxhYmxlQWRtaW4pe1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBldGl0aW9uQWRtaW4uX2lkID09PSBhdmFpbGFibGVBZG1pbi5faWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBPbmx5IHVzZSBjZXJ0YWluIHByb3BlcnRpZXMgb2YgdGhlIHVzZXIgZm9yIHRoZSBhZG1pbiByZWNvcmRcbiAgICAgICAgXy5mb3JFYWNoKHVzZXJzLmRhdGEsIGZ1bmN0aW9uIChhdmFpbGFibGVBZG1pbikge1xuICAgICAgICAgIHZtLmF2YWlsYWJsZUFkbWlucy5wdXNoKHtcbiAgICAgICAgICAgIGZpcnN0TmFtZTogYXZhaWxhYmxlQWRtaW4uZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IGF2YWlsYWJsZUFkbWluLmxhc3ROYW1lLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IGF2YWlsYWJsZUFkbWluLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgZW1haWw6IGF2YWlsYWJsZUFkbWluLnVzZXJuYW1lLFxuICAgICAgICAgICAgX2lkOiBhdmFpbGFibGVBZG1pbi5faWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgb3JpZ2luYWxBdmFpbGFibGVBZG1pbnMgPSBfLmNsb25lRGVlcCh2bS5hdmFpbGFibGVBZG1pbnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSB0aGUgdXBkYXRlcyB0aGF0IHdlcmUgcmVxdXN0ZWRcbiAgICBmdW5jdGlvbiB1cGRhdGVDb21wZXRpdGlvbigpIHtcbiAgICAgIHZtLmNvbXBldGl0aW9uLmFkbWlucyA9IHZtLmFkZGVkQWRtaW5zO1xuICAgICAgY29tcGV0aXRpb25zU2VydmljZS51cGRhdGVDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbikudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZtLmRpc2FibGVTdWJtaXQgPSB0cnVlO1xuICAgICAgfSk7ICAgXG4gICAgfVxuXG4gICAgLy8gQ2FuY2VsIHRoZSB1cGRhdGUgYW5kIHB1dCBldmVyeXRoaW5nIGJhY2sgdG8gdGhlIG9yZ2luYWxcbiAgICBmdW5jdGlvbiBjYW5jZWxVcGRhdGUoKSB7XG4gICAgICByZW1vdmVkQWRtaW5zID0gW107XG4gICAgICB2bS5hZGRlZEFkbWlucyA9IF8uY2xvbmVEZWVwKHZtLmNvbXBldGl0aW9uLmFkbWlucyk7XG4gICAgICB2bS5hdmFpbGFibGVBZG1pbnMgPSBfLmNsb25lRGVlcChvcmlnaW5hbEF2YWlsYWJsZUFkbWlucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbiBhZG1pbiBmcm9tIHRoZSBjb21wZXRpdGlvblxuICAgICAqIFF1ZXVlIHVwIHRoZSBhZG1pbnMgdG8gYmUgcmVtb3ZlZCBhbmQgcmVtb3ZlIHRoZW0gZnJvbSB0aGUgZGlzcGxheVxuICAgICAqIEBwYXJhbSAge29iamVjdH0gYWRtaW5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVBZG1pbihhZG1pbikge1xuICAgICAgcmVtb3ZlZEFkbWlucy5wdXNoKGFkbWluKTtcbiAgICAgIHZtLmF2YWlsYWJsZUFkbWlucy5wdXNoKF8ucmVtb3ZlKHZtLmFkZGVkQWRtaW5zLCB7X2lkOiBhZG1pbi5faWR9KVswXSk7XG4gICAgICB2bS5kaXNhYmxlU3VibWl0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBhZG1pbiB0byB0aGUgY29tcGV0aXRpb25cbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IGFkbWluXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkQWRtaW4oYWRtaW4pIHtcbiAgICAgIHZtLmFkZGVkQWRtaW5zLnB1c2goXy5yZW1vdmUodm0uYXZhaWxhYmxlQWRtaW5zLCB7X2lkOiBhZG1pbi5faWR9KVswXSk7XG4gICAgICB2bS5kaXNhYmxlU3VibWl0ID0gZmFsc2U7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd3cG1VcGRhdGVQbGF5ZXJzJywgd3BtVXBkYXRlUGxheWVycyk7XG5cbiAgZnVuY3Rpb24gd3BtVXBkYXRlUGxheWVycygpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IGN0cmxGdW5jLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGNvbXBldGl0aW9uOiAnPSdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogJy9jb21wZXRpdGlvbnMvY29tcG9uZW50cy91cGRhdGUtcGxheWVycy5odG1sJ1xuICAgIH07XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjdHJsRnVuYygkc2NvcGUsICRmaWx0ZXIsIGNvbXBldGl0aW9uc1NlcnZpY2UsIGNoYWxsZW5nZXNTZXJ2aWNlLCB1c2VyU2VydmljZSwgbm90aWZ5U2VydmljZSkge1xuICAgIHZhciByZW1vdmVkUGxheWVycyA9IFtdO1xuICAgIHZhciBvcmlnaW5hbEF2YWlsYWJsZVBsYXllcnMgPSBbXTtcbiAgICB2YXIgbWF4TGV2ZWxzID0gNztcbiAgICB2YXIgbWF4UGxheWVycyA9IG51bGw7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5hdmFpbGFibGVQbGF5ZXJzID0gW107XG4gICAgdm0uYWRkZWRQbGF5ZXJzID0gW107XG4gICAgdm0udXBkYXRlQ29tcGV0aXRpb24gPSB1cGRhdGVDb21wZXRpdGlvbjtcbiAgICB2bS5jYW5jZWxVcGRhdGUgPSBjYW5jZWxVcGRhdGU7XG4gICAgdm0ucmVvcmRlclBsYXllcnMgPSByZW9yZGVyUGxheWVycztcbiAgICB2bS5yZW1vdmVQbGF5ZXIgPSByZW1vdmVQbGF5ZXI7XG4gICAgdm0uYWRkUGxheWVyID0gYWRkUGxheWVyO1xuICAgIHZtLmRpc2FibGVTdWJtaXQgPSB0cnVlO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBtYXhpbXVtIG51bWJlciBvZiBwbGF5ZXJzIGJhc2VkIG9uIHRoZSBtYXhpbXVtIG51bWJlciBvZiBsZXZlbHNcbiAgICAgIGZvciAodmFyIGkgPSBtYXhMZXZlbHM7IGkgPiAwOyAtLWkpIHtcbiAgICAgICAgbWF4UGxheWVycyArPSBpO1xuICAgICAgfVxuICAgICAgJHNjb3BlLiR3YXRjaCgndm0uY29tcGV0aXRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS5jb21wZXRpdGlvbikge1xuICAgICAgICAgIHZtLmFkZGVkUGxheWVycyA9IF8uY2xvbmVEZWVwKHZtLmNvbXBldGl0aW9uLnBsYXllcnMpO1xuICAgICAgICAgIHZtLmRpc2FibGVTdWJtaXQgPSB0cnVlO1xuICAgICAgICAgIGdldEF2YWlsYWJsZVBsYXllcnMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QXZhaWxhYmxlUGxheWVycygpIHtcbiAgICAgIHZtLmF2YWlsYWJsZVBsYXllcnMgPSBbXTtcbiAgICAgIHJlbW92ZWRQbGF5ZXJzID0gW107XG4gICAgICB1c2VyU2VydmljZS5nZXRBbGxVc2VycygpLnRoZW4oZnVuY3Rpb24gKHVzZXJzKSB7XG4gICAgICAgIF8uZm9yRWFjaCh2bS5jb21wZXRpdGlvbi5wbGF5ZXJzLCBmdW5jdGlvbiAoY29tcGV0aXRpb25QbGF5ZXIpIHtcbiAgICAgICAgICBfLnJlbW92ZSh1c2Vycy5kYXRhLCBmdW5jdGlvbiAoYXZhaWxhYmxlUGxheWVyKXtcbiAgICAgICAgICAgIHJldHVybiBjb21wZXRpdGlvblBsYXllci5faWQgPT09IGF2YWlsYWJsZVBsYXllci5faWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBPbmx5IHVzZSBjZXJ0YWluIHByb3BlcnRpZXMgb2YgdGhlIHVzZXIgZm9yIHRoZSBwbGF5ZXIgcmVjb3JkXG4gICAgICAgIF8uZm9yRWFjaCh1c2Vycy5kYXRhLCBmdW5jdGlvbiAoYXZhaWxhYmxlUGxheWVyKSB7XG4gICAgICAgICAgdm0uYXZhaWxhYmxlUGxheWVycy5wdXNoKHtcbiAgICAgICAgICAgIGZpcnN0TmFtZTogYXZhaWxhYmxlUGxheWVyLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBhdmFpbGFibGVQbGF5ZXIubGFzdE5hbWUsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogYXZhaWxhYmxlUGxheWVyLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgZW1haWw6IGF2YWlsYWJsZVBsYXllci51c2VybmFtZSxcbiAgICAgICAgICAgIF9pZDogYXZhaWxhYmxlUGxheWVyLl9pZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIG9yaWdpbmFsQXZhaWxhYmxlUGxheWVycyA9IF8uY2xvbmVEZWVwKHZtLmF2YWlsYWJsZVBsYXllcnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSB0aGUgdXBkYXRlcyB0aGF0IHdlcmUgcmVxdXN0ZWRcbiAgICBmdW5jdGlvbiB1cGRhdGVDb21wZXRpdGlvbigpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbi50eXBlID09PSAndmVyc3VzJyAmJiB2bS5hZGRlZFBsYXllcnMubGVuZ3RoICUgMiA+IDApIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5lcnJvcignQSBWZXJzdXMgY29tcGV0aXRpb24gbXVzdCBoYXZlIGFuIGV2ZW4gbnVtYmVyIG9mIHBsYXllcnMnKTtcbiAgICAgIH0gZWxzZSBpZiAodm0uYWRkZWRQbGF5ZXJzLmxlbmd0aCA+IG1heFBsYXllcnMpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5lcnJvcignQSBjb21wZXRpdGlvbiBjYW4gaGF2ZSBhIG1heGltdW0gb2YgJyArIG1heFBsYXllcnMgKyAnIHBsYXllcnMnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF8uZm9yRWFjaChyZW1vdmVkUGxheWVycywgZnVuY3Rpb24ocGxheWVyKSB7XG4gICAgICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZGVsZXRlQWN0aXZlQ2hhbGxlbmdlQnlDb21wZXRpdGlvbkJ5UGxheWVyKHZtLmNvbXBldGl0aW9uLl9pZCwgcGxheWVyLl9pZCk7XG4gICAgICAgIH0pO1xuICAgICAgICB2bS5jb21wZXRpdGlvbi5wbGF5ZXJzID0gdm0uYWRkZWRQbGF5ZXJzO1xuICAgICAgICBjb21wZXRpdGlvbnNTZXJ2aWNlLnVwZGF0ZUNvbXBldGl0aW9uKHZtLmNvbXBldGl0aW9uKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2bS5kaXNhYmxlU3VibWl0ID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2FuY2VsIHRoZSB1cGRhdGUgYW5kIHB1dCBldmVyeXRoaW5nIGJhY2sgdG8gdGhlIG9yZ2luYWxcbiAgICBmdW5jdGlvbiBjYW5jZWxVcGRhdGUoKSB7XG4gICAgICByZW1vdmVkUGxheWVycyA9IFtdO1xuICAgICAgdm0uYWRkZWRQbGF5ZXJzID0gXy5jbG9uZURlZXAodm0uY29tcGV0aXRpb24ucGxheWVycyk7XG4gICAgICB2bS5hdmFpbGFibGVQbGF5ZXJzID0gXy5jbG9uZURlZXAob3JpZ2luYWxBdmFpbGFibGVQbGF5ZXJzKTtcbiAgICB9XG5cbiAgICAvLyBSZW9yZGVyIHRoZSBwbGF5ZXJzIGJhc2VkIG9uIHRoZSBkcmFnLWRyb3BcbiAgICBmdW5jdGlvbiByZW9yZGVyUGxheWVycygpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbi50eXBlID09PSAndmVyc3VzJykge1xuICAgICAgICByZW9yZGVyVmVyc3VzUGxheWVycygpO1xuICAgICAgfSBlbHNlIGlmICh2bS5jb21wZXRpdGlvbi50eXBlID09PSAncHlyYW1pZCcpIHtcbiAgICAgICAgcmVvcmRlclB5cmFtaWRQbGF5ZXJzKCk7XG4gICAgICB9XG4gICAgICB2bS5kaXNhYmxlU3VibWl0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciB0aGUgcGxheWVycyBiYXNlZCBvbiB0aGUgZHJhZy1kcm9wXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlclB5cmFtaWRQbGF5ZXJzKCkge1xuICAgICAgdmFyIGkgPSAxO1xuICAgICAgXy5mb3JFYWNoKHZtLmFkZGVkUGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICBwbGF5ZXIucG9zaXRpb24gPSBpO1xuICAgICAgICArK2k7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW9yZGVyVmVyc3VzUGxheWVycygpIHtcbiAgICAgIC8vIFNldCBhbGwgcGxheWVycyB0byB0ZWFtIDJcbiAgICAgIF8uZm9yRWFjaCh2bS5hZGRlZFBsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgcGxheWVyLnBvc2l0aW9uID0gMjtcbiAgICAgIH0pO1xuICAgICAgLy8gU2V0IHRoZSBmaXJzdCBoYWxmIG9mIHRoZSBwbGF5ZXJzIHRvIHRlYW0gMVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAodm0uYWRkZWRQbGF5ZXJzLmxlbmd0aCAvIDIpOyBpKyspIHtcbiAgICAgICAgdm0uYWRkZWRQbGF5ZXJzW2ldLnBvc2l0aW9uID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgcGxheWVyIGZyb20gdGhlIGNvbXBldGl0aW9uXG4gICAgICogUXVldWUgdXAgdGhlIHBsYXllcnMgdG8gYmUgcmVtb3ZlZCBhbmQgcmVtb3ZlIHRoZW0gZnJvbSB0aGUgZGlzcGxheVxuICAgICAqIEBwYXJhbSAge29iamVjdH0gcGxheWVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlUGxheWVyKHBsYXllcikge1xuICAgICAgcmVtb3ZlZFBsYXllcnMucHVzaChwbGF5ZXIpO1xuICAgICAgdm0uYXZhaWxhYmxlUGxheWVycy5wdXNoKF8ucmVtb3ZlKHZtLmFkZGVkUGxheWVycywge19pZDogcGxheWVyLl9pZH0pWzBdKTtcbiAgICAgIHJlb3JkZXJQbGF5ZXJzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIHBsYXllciB0byB0aGUgbmV3IGNvbXBldGl0aW9uXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBwbGF5ZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRQbGF5ZXIocGxheWVyKSB7XG4gICAgICB2bS5hZGRlZFBsYXllcnMucHVzaChfLnJlbW92ZSh2bS5hdmFpbGFibGVQbGF5ZXJzLCB7X2lkOiBwbGF5ZXIuX2lkfSlbMF0pO1xuICAgICAgcmVvcmRlclBsYXllcnMoKTtcbiAgICAgIHZtLmRpc2FibGVTdWJtaXQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd3cG1WZXJzdXMnLCB3cG1WZXJzdXMpO1xuXG4gIGZ1bmN0aW9uIHdwbVZlcnN1cygpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2NvbXBldGl0aW9ucy9jb21wb25lbnRzL3ZlcnN1cy5odG1sJyxcbiAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICBzY29wZToge1xuICAgICAgICBjb21wZXRpdGlvbjogJz0nXG4gICAgICB9LFxuICAgICAgY29udHJvbGxlcjogY3RybEZ1bmMsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlXG4gICAgfTtcblxuICAgIHJldHVybiBkaXJlY3RpdmU7XG4gIH1cblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY3RybEZ1bmMoJHNjb3BlLCBjb21wZXRpdGlvbnNTZXJ2aWNlLCBpZGVudGl0eVNlcnZpY2UsIGNoYWxsZW5nZXNTZXJ2aWNlLCBub3RpZnlTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5jb21wZXRpdGlvbklkID0gbnVsbDtcbiAgICB2bS5jdXJyZW50VXNlcklzQWRtaW4gPSBmYWxzZTtcbiAgICB2bS5jdXJyZW50VXNlcklzUGVuZGluZyA9IGZhbHNlO1xuICAgIHZtLmN1cnJlbnRVc2VySXNPbkNvbXBldGl0aW9uID0gZmFsc2U7XG4gICAgdm0uYWN0aXZlQ2hhbGxlbmdlID0gbnVsbDtcbiAgICB2bS5oYXNBY3RpdmVDaGFsbGVuZ2UgPSBmYWxzZTtcbiAgICB2bS5jdXJyZW50VXNlclBsYXllciA9IG51bGw7XG4gICAgdm0uY3JlYXRlQ2hhbGxlbmdlID0gY3JlYXRlQ2hhbGxlbmdlO1xuICAgIHZtLmNvbXBsZXRlQ2hhbGxlbmdlID0gY29tcGxldGVDaGFsbGVuZ2U7XG4gICAgdm0uY2hhbGxlbmdlRXhwaXJlVGltZSA9IG51bGw7XG4gICAgdm0uc2hvd0NvbnRyb2xzID0gZmFsc2U7XG4gICAgdm0uc2hvd0NoYWxsZW5nZU1vZGFsID0gZmFsc2U7XG4gICAgdm0udG9nZ2xlQ29udHJvbHMgPSB0b2dnbGVDb250cm9scztcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICRzY29wZS4kd2F0Y2goJ3ZtLmNvbXBldGl0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodm0uY29tcGV0aXRpb24pIHtcbiAgICAgICAgICB2bS5jb21wZXRpdGlvbklkID0gdm0uY29tcGV0aXRpb24uX2lkO1xuICAgICAgICAgIHZtLnNob3dDb250cm9scyA9IGZhbHNlO1xuICAgICAgICAgIHZtLnNob3dDaGFsbGVuZ2VNb2RhbCA9IGZhbHNlO1xuICAgICAgICAgIGdyb3VwUGxheWVycygpO1xuICAgICAgICAgIGdldEN1cnJlbnRVc2VyU3RhdHVzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdyb3VwIHBsYXllcnMgYnkgdGVhbVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdyb3VwUGxheWVycygpIHtcbiAgICAgIHZtLmNvbXBldGl0aW9uLnRlYW1zID0gW1xuICAgICAgICB7XG4gICAgICAgICAgcGxheWVyczogXy5maWx0ZXIodm0uY29tcGV0aXRpb24ucGxheWVycywgWydwb3NpdGlvbicsIDFdKSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBsYXllcnM6IF8uZmlsdGVyKHZtLmNvbXBldGl0aW9uLnBsYXllcnMsIFsncG9zaXRpb24nLCAyXSksXG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlndXJlIG91dCBpZiBlYWNoIHBsYXllciBpcyBhbHJlYWR5IGNoYWxsZW5nZWQgYW5kIHNldCBzb21lIHN0dWZmXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0Q3VycmVudFVzZXJTdGF0dXMoKSB7XG4gICAgICBcbiAgICAgIHZtLmN1cnJlbnRVc2VySXNBZG1pbiA9IGZhbHNlO1xuICAgICAgdm0uY3VycmVudFVzZXJJc1BlbmRpbmcgPSBmYWxzZTtcbiAgICAgIGlmIChpZGVudGl0eVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBjdXJyZW50IHVzZXIgaXMgYW4gYWRtaW4gb2YgdGhpcyBjb21wZXRpdGlvblxuICAgICAgICB2bS5jdXJyZW50VXNlcklzQWRtaW4gPSBfLnNvbWUodm0uY29tcGV0aXRpb24uYWRtaW5zLCBbJ19pZCcsIGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWRdKTtcbiAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIGEgcGVuZGluZyByZXF1ZXN0IHRvIGpvaW5cbiAgICAgICAgdm0uY3VycmVudFVzZXJJc1BlbmRpbmcgPSBfLnNvbWUodm0uY29tcGV0aXRpb24ucGVuZGluZ1BsYXllcnMsIFsnX2lkJywgaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLl9pZF0pO1xuICAgICAgfVxuXG4gICAgICB2bS5jdXJyZW50VXNlcklzT25Db21wZXRpdGlvbiA9IGZhbHNlO1xuICAgICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gZmFsc2U7XG4gICAgICBfLmZvckVhY2godm0uY29tcGV0aXRpb24ucGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICAvLyBGaW5kIHRoZSBjdXJyZW50IHVzZXIgaWYgdGhleSBhcmUgb24gdGhpcyBjb21wZXRpdGlvbiBhbmQgc2V0IHNvbWUgcHJvcGVydGllc1xuICAgICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpICYmIHBsYXllci5faWQgPT09IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWQpIHtcbiAgICAgICAgICB2bS5jdXJyZW50VXNlcklzT25Db21wZXRpdGlvbiA9IHRydWU7XG4gICAgICAgICAgcGxheWVyLmNsYXNzID0gJ2N1cnJlbnQtdXNlcic7XG4gICAgICAgICAgdm0uY3VycmVudFVzZXJQbGF5ZXIgPSBwbGF5ZXI7XG4gICAgICAgICAgdm0uY29tcGV0aXRpb24udGVhbXNbcGxheWVyLnBvc2l0aW9uIC0gMV0uY2xhc3MgPSAnY3VycmVudC11c2VyLXRlYW0nO1xuICAgICAgICAgIHZtLmNvbXBldGl0aW9uLmNsYXNzID0gJ2N1cnJlbnQtdXNlci1vbi1jb21wZXRpdGlvbic7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhbiBhY3RpdmUgY2hhbGxlbmdlIGZvciB0aGlzIGNvbXBldGl0aW9uXG4gICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRBY3RpdmVDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgaWYgKGNoYWxsZW5nZS5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2bS5hY3RpdmVDaGFsbGVuZ2UgPSBjaGFsbGVuZ2UuZGF0YVswXTtcbiAgICAgICAgICB2bS5oYXNBY3RpdmVDaGFsbGVuZ2UgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gVHJhY2sgd2hlbiB0aGUgY2hhbGxlbmdlIHdpbGwgZXhwaXJlXG4gICAgICAgICAgaWYgKHZtLmFjdGl2ZUNoYWxsZW5nZS50aW1lTGltaXQgIT09IDApIHtcbiAgICAgICAgICAgIHZhciB0aW1lVG9FeHBpcmUgPSBtb21lbnQoKS5kaWZmKG1vbWVudCh2bS5hY3RpdmVDaGFsbGVuZ2UuY3JlYXRlZCkuYWRkKHZtLmFjdGl2ZUNoYWxsZW5nZS50aW1lTGltaXQsICdkJyksICdzJykgKiAtMTtcbiAgICAgICAgICAgIC8vIElmIHRoZSBjaGFsbGVuZ2UgaGFzIG5vdCB5ZXQgZXhwaXJlZCBkaXNwbGF5IGEgY291bnRkb3duXG4gICAgICAgICAgICBpZiAodGltZVRvRXhwaXJlID4gMCkge1xuICAgICAgICAgICAgICB2bS5jaGFsbGVuZ2VFeHBpcmVUaW1lID0gdGltZVRvRXhwaXJlO1xuICAgICAgICAgICAgICAvLyBJZiB0aGUgY2hhbGxlbmdlIGV4cGlyZWQgd2hpbGUgbm8gb25lIHdhcyB2aWV3aW5nIHRoaXMgY29tcGV0aXRpb24gY29tcGxldGUgdGhlIGNoYWxsZW5nZSBieSBmb3JmZWl0XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRpbWVUb0V4cGlyZSA8PSAwKSB7XG4gICAgICAgICAgICAgIGNvbXBsZXRlQ2hhbGxlbmdlKG51bGwsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9nZ2xlQ29udHJvbHMoKSB7XG4gICAgICBpZiAodm0uaGFzQWN0aXZlQ2hhbGxlbmdlICYmIHZtLmN1cnJlbnRVc2VySXNPbkNvbXBldGl0aW9uKSB7XG4gICAgICAgIHZtLnNob3dDb250cm9scyA9ICF2bS5zaG93Q29udHJvbHM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hhbGxlbmdlKHRlYW0pIHtcbiAgICAgIHZtLnNob3dDaGFsbGVuZ2VNb2RhbCA9IGZhbHNlO1xuICAgICAgaWYgKHZtLmhhc0FjdGl2ZUNoYWxsZW5nZSkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmVycm9yKCdTb3JyeSwgeW91IGFyZSBhbHJlYWR5IGluIGFuIGFjdGl2ZSBjaGFsbGVuZ2UuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bS5oYXNBY3RpdmVDaGFsbGVuZ2UgPSB0cnVlO1xuICAgICAgICAvLyBDbG9zZSB0aGUgY2hhbGxlbmdlIG1vZGFsXG4gICAgICAgIHZhciBjaGFsbGVuZ2UgPSB7XG4gICAgICAgICAgdHlwZTogdm0uY29tcGV0aXRpb24udHlwZSxcbiAgICAgICAgICBjb21wZXRpdGlvbk5hbWU6IHZtLmNvbXBldGl0aW9uLm5hbWUsXG4gICAgICAgICAgY29tcGV0aXRpb25JZDogdm0uY29tcGV0aXRpb25JZCxcbiAgICAgICAgICBjb21wbGV0ZTogZmFsc2UsXG4gICAgICAgICAgZm9yZmVpdDogZmFsc2UsXG4gICAgICAgICAgdGltZUxpbWl0OiB2bS5jb21wZXRpdGlvbi5mb3JmZWl0RGF5cyxcbiAgICAgICAgICBjaGFsbGVuZ2VyOiB7XG4gICAgICAgICAgICB0ZWFtOiB2bS5jdXJyZW50VXNlclBsYXllci5wb3NpdGlvbixcbiAgICAgICAgICAgIF9pZDogdm0uY3VycmVudFVzZXJQbGF5ZXIuX2lkXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHBvbmVudDoge1xuICAgICAgICAgICAgdGVhbTogdGVhbVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBjaGFsbGVuZ2VcbiAgICAgICAgLy8gV2Vic29ja2V0IGV2ZW50IHdpbGwgcmVmcmVzaCB0aGUgY29tcGV0aXRpb25cbiAgICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuY3JlYXRlVmVyc3VzQ2hhbGxlbmdlKGNoYWxsZW5nZSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gQ2xvc2UgdGhlIGNvbXBldGl0aW9uIHNpZGViYXJcbiAgICAgICAgICB2bS5jb21wZXRpdGlvbk1lbnVUb2dnbGUgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGxldGUgYSBjaGFsbGVuZ2UgYnkgYSB1c2VyIGludGVyYWN0aW9uIG9yIGEgZm9yZmVpdFxuICAgICAqIFxuICAgICAqIEBwYXJhbSAge051bWJlcn0gd2lubmluZ1RlYW1cbiAgICAgKiBAcGFyYW0gIHtib29sZWFufSBmb3JmZWl0XG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBmb3JmZWl0TG9zZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wbGV0ZUNoYWxsZW5nZSh3aW5uaW5nVGVhbSwgZm9yZmVpdCkge1xuICAgICAgdm0uaGFzQWN0aXZlQ2hhbGxlbmdlID0gZmFsc2U7XG4gICAgICB2YXIgY2hhbGxlbmdlID0gdm0uYWN0aXZlQ2hhbGxlbmdlO1xuICAgICAgLy8gSWYgdGhlcmUgaXMgYSBmb3JmZWl0XG4gICAgICBpZiAoZm9yZmVpdCkge1xuICAgICAgICBjaGFsbGVuZ2UuZm9yZmVpdCA9IHRydWU7XG4gICAgICAgIGNoYWxsZW5nZS53aW5uZXIgPSAnY2hhbGxlbmdlcic7XG4gICAgICAvLyBGaWd1cmUgb3V0IHdobyB0aGUgd2lubmVyIHdhcyB0byBzdG9yZSBpbiB0aGUgY2hhbGxlbmdlIHJlY29yZFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHZtLmFjdGl2ZUNoYWxsZW5nZS5jaGFsbGVuZ2VyLnRlYW0gPT09IHdpbm5pbmdUZWFtKSB7XG4gICAgICAgICAgY2hhbGxlbmdlLndpbm5lciA9ICdjaGFsbGVuZ2VyJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFsbGVuZ2Uud2lubmVyID0gJ29wcG9uZW50JztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaGFsbGVuZ2VzU2VydmljZS5jb21wbGV0ZVZlcnN1c0NoYWxsZW5nZShjaGFsbGVuZ2UpO1xuICAgICAgdm0uY29tcGV0aXRpb25NZW51VG9nZ2xlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVmcmVzaCB0aGUgY29tcGV0aXRpb24gYmVjYXN1ZSBvZiBhbiB1cGRhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWZyZXNoQ29tcGV0aXRpb24oKSB7XG4gICAgICBjb21wZXRpdGlvbnNTZXJ2aWNlLmdldENvbXBldGl0aW9uKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKGNvbXBldGl0aW9uKSB7XG4gICAgICAgIHZtLmNvbXBldGl0aW9uID0gY29tcGV0aXRpb24uZGF0YTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czpjb21wZXRpdGlvbl91cGRhdGVkJywgZnVuY3Rpb24gKF8sIGNoYWxsZW5nZURldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5pbmZvKGNoYWxsZW5nZURldGFpbHMuZGVzY3JpcHRpb24pO1xuICAgICAgICByZWZyZXNoQ29tcGV0aXRpb24oKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5mYWN0b3J5KCdjb21wZXRpdGlvbnNTZXJ2aWNlJywgY29tcGV0aXRpb25zU2VydmljZSk7XG5cbiAgZnVuY3Rpb24gY29tcGV0aXRpb25zU2VydmljZSgkaHR0cCkge1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgZ2V0Q29tcGV0aXRpb246IGdldENvbXBldGl0aW9uLFxuICAgICAgZ2V0Q29tcGV0aXRpb25zRm9yVXNlcjogZ2V0Q29tcGV0aXRpb25zRm9yVXNlcixcbiAgICAgIGdldFB1YmxpY0NvbXBldGl0aW9uczogZ2V0UHVibGljQ29tcGV0aXRpb25zLFxuICAgICAgZ2V0UHJpdmF0ZUNvbXBldGl0aW9uczogZ2V0UHJpdmF0ZUNvbXBldGl0aW9ucyxcbiAgICAgIGNyZWF0ZUNvbXBldGl0aW9uOiBjcmVhdGVDb21wZXRpdGlvbixcbiAgICAgIHVwZGF0ZUNvbXBldGl0aW9uOiB1cGRhdGVDb21wZXRpdGlvbixcbiAgICAgIGRlbGV0ZUNvbXBldGl0aW9uOiBkZWxldGVDb21wZXRpdGlvbixcbiAgICAgIHN3YXBQb3NpdGlvbnM6IHN3YXBQb3NpdGlvbnMsXG4gICAgICBhZGRQbGF5ZXJUb0NvbXBldGl0aW9uOiBhZGRQbGF5ZXJUb0NvbXBldGl0aW9uLFxuICAgICAgYWRkUGxheWVyVG9Db21wZXRpdGlvblJlcXVlc3Q6IGFkZFBsYXllclRvQ29tcGV0aXRpb25SZXF1ZXN0LFxuICAgICAgcmVtb3ZlZFBsYXllckZyb21Db21wZXRpdGlvbjogcmVtb3ZlZFBsYXllckZyb21Db21wZXRpdGlvbixcbiAgICAgIGFwcHJvdmVQZW5kaW5nUGxheWVyOiBhcHByb3ZlUGVuZGluZ1BsYXllcixcbiAgICAgIGRlbnlQZW5kaW5nUGxheWVyOiBkZW55UGVuZGluZ1BsYXllclxuICAgIH07XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgYSBjb21wZXRpdGlvbiBmcm9tIHRoZSBkYXRhYmFzZSAob3IgbWVtb3J5KVxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbXBldGl0aW9uIGlkIGZvciB0aGUgcmVxdWVzdGVkIGNvbXBldGl0aW9uXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBjb21wZXRpdGlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldENvbXBldGl0aW9uKGNvbXBldGl0aW9uSWQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY29tcGV0aXRpb24nLCB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgY29tcGV0aXRpb25zIGZyb20gdGhlIGRhdGFiYXNlIHRoYXQgYSBwYXJ0aWN1bGFyIHVzZXIgaXMgaW5jbHVkZWQgaW5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dXNlcklkfSB0aGUgdXNlciBpZCBmb3IgdGhlIHJlcXVlc3RlZCB1c2VyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBjb21wZXRpdGlvbnNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRDb21wZXRpdGlvbnNGb3JVc2VyKHVzZXJJZCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jb21wZXRpdGlvbnMvdXNlcicsIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgdXNlcklkOiB1c2VySWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYWN0aXZlIHB1YmxpYyBjb21wZXRpdGlvbnMgZnJvbSB0aGUgZGF0YWJhc2VcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gY29tcGV0aXRpb25zXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UHVibGljQ29tcGV0aXRpb25zKCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jb21wZXRpdGlvbnMvcHVibGljJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgcHJpdmF0ZSBjb21wZXRpdGlvbnMgZnJvbSB0aGUgZGF0YWJhc2VcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gY29tcGV0aXRpb25zXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UHJpdmF0ZUNvbXBldGl0aW9ucygpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY29tcGV0aXRpb25zL3ByaXZhdGUnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDb21wZXRpdGlvbihjb21wZXRpdGlvbikge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY29tcGV0aXRpb25zL2NyZWF0ZScsIHtcbiAgICAgICAgY29tcGV0aXRpb246IGNvbXBldGl0aW9uXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVDb21wZXRpdGlvbihjb21wZXRpdGlvbikge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY29tcGV0aXRpb25zL3VwZGF0ZScsIHtcbiAgICAgICAgY29tcGV0aXRpb246IGNvbXBldGl0aW9uXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWxldGVDb21wZXRpdGlvbihjb21wZXRpdGlvbklkKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZGVsZXRlKCcvYXBpL2NvbXBldGl0aW9ucy9kZWxldGUnLCAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN3YXBQb3NpdGlvbnMoY29tcGV0aXRpb25JZCwgY2hhbGxlbmdlciwgb3Bwb25lbnQpIHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2NvbXBldGl0aW9ucy9zd2FwUG9zaXRpb25zJywge1xuICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkLFxuICAgICAgICBjaGFsbGVuZ2VyOiBjaGFsbGVuZ2VyLFxuICAgICAgICBvcHBvbmVudDogb3Bwb25lbnRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFBsYXllclRvQ29tcGV0aXRpb24oY29tcGV0aXRpb25JZCwgcGxheWVyKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jb21wZXRpdGlvbnMvYWRkUGxheWVyJywge1xuICAgICAgICBjb21wZXRpdGlvbklkOiBjb21wZXRpdGlvbklkLFxuICAgICAgICBwbGF5ZXI6IHBsYXllclxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkUGxheWVyVG9Db21wZXRpdGlvblJlcXVlc3QoY29tcGV0aXRpb24sIHBsYXllcikge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY29tcGV0aXRpb25zL2FkZFBsYXllclJlcXVlc3QnLCB7XG4gICAgICAgIGNvbXBldGl0aW9uOiBjb21wZXRpdGlvbixcbiAgICAgICAgcGxheWVyOiBwbGF5ZXJcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZWRQbGF5ZXJGcm9tQ29tcGV0aXRpb24oY29tcGV0aXRpb25JZCwgcmVtb3ZlZFBsYXllciwgcGxheWVycykge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY29tcGV0aXRpb25zL3JlbW92ZVBsYXllcicsIHtcbiAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgcmVtb3ZlZFBsYXllcjogcmVtb3ZlZFBsYXllcixcbiAgICAgICAgcGxheWVyczogcGxheWVyc1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwcm92ZVBlbmRpbmdQbGF5ZXIoY29tcGV0aXRpb25JZCwgcGxheWVyKSB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jb21wZXRpdGlvbnMvYXBwcm92ZVBsYXllcicsIHtcbiAgICAgICAgY29tcGV0aXRpb25JZDogY29tcGV0aXRpb25JZCxcbiAgICAgICAgcGxheWVyOiBwbGF5ZXJcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbnlQZW5kaW5nUGxheWVyKGNvbXBldGl0aW9uSWQsIHBsYXllcikge1xuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY29tcGV0aXRpb25zL2RlbnlQbGF5ZXInLCB7XG4gICAgICAgIGNvbXBldGl0aW9uSWQ6IGNvbXBldGl0aW9uSWQsXG4gICAgICAgIHBsYXllcjogcGxheWVyXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignQ29tcGV0aXRpb25BZG1pbkN0cmwnLCBDb21wZXRpdGlvbkFkbWluQ3RybCk7XG5cbiAgZnVuY3Rpb24gQ29tcGV0aXRpb25BZG1pbkN0cmwoJHNjb3BlLCAkc3RhdGUsICRzdGF0ZVBhcmFtcywgJGZpbHRlciwgY29tcGV0aXRpb25zU2VydmljZSwgaWRlbnRpdHlTZXJ2aWNlLCBub3RpZnlTZXJ2aWNlLCBjaGFsbGVuZ2VzU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uY29tcGV0aXRpb25JZCA9IG51bGw7XG4gICAgdm0udXBkYXRlQ29tcGV0aXRpb25SZXN0cmljdEpvaW5zID0gdXBkYXRlQ29tcGV0aXRpb25SZXN0cmljdEpvaW5zO1xuICAgIHZtLnVwZGF0ZUNvbXBldGl0aW9uUHJpdmF0ZSA9IHVwZGF0ZUNvbXBldGl0aW9uUHJpdmF0ZTtcbiAgICB2bS5kZWxldGVDb21wZXRpdGlvbiA9IGRlbGV0ZUNvbXBldGl0aW9uO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIHZtLmNvbXBldGl0aW9uSWQgPSAkc3RhdGVQYXJhbXMuY29tcGV0aXRpb25JZDtcbiAgICAgICAgcmVmcmVzaENvbXBldGl0aW9uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkc3RhdGUuZ28oJ2NvbXBldGl0aW9ucy5teUNvbXBldGl0aW9ucycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZnJlc2hDb21wZXRpdGlvbigpIHtcbiAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2UuZ2V0Q29tcGV0aXRpb24odm0uY29tcGV0aXRpb25JZCkudGhlbihmdW5jdGlvbiAoY29tcGV0aXRpb24pIHtcbiAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoaXMgdXNlciBpcyBhbiBhZG1pbiBvZiB0aGlzIGNvbXBldGl0aW9uXG4gICAgICAgIGlmIChjb21wZXRpdGlvbi5kYXRhICYmIF8uc29tZShjb21wZXRpdGlvbi5kYXRhLmFkbWlucywgWydfaWQnLCBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuX2lkXSkpIHtcbiAgICAgICAgICB2bS5pc0FkbWluID0gdHJ1ZTtcbiAgICAgICAgICAvLyBEaXNwbGF5IHRoZSBwbGF5ZXJzIGluIHRoZSBwcm9wZXIgb3JkZXJcbiAgICAgICAgICBjb21wZXRpdGlvbi5kYXRhLnBsYXllcnMgPSAkZmlsdGVyKCdvcmRlckJ5JykoY29tcGV0aXRpb24uZGF0YS5wbGF5ZXJzLCAncG9zaXRpb24nKTtcbiAgICAgICAgICB2bS5jb21wZXRpdGlvbiA9IGNvbXBldGl0aW9uLmRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJHN0YXRlLmdvKCdjb21wZXRpdGlvbnMubXlDb21wZXRpdGlvbnMnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRDb21wbGV0ZWRDaGFsbGVuZ2VzQnlDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChjaGFsbGVuZ2VzKSB7XG4gICAgICAgIHZtLmNoYWxsZW5nZXMgPSBjaGFsbGVuZ2VzLmRhdGE7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBQZXJmb3JtIHRoZSB1cGRhdGVzIHRoYXQgd2VyZSByZXF1c3RlZFxuICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbXBldGl0aW9uUmVzdHJpY3RKb2lucygpIHtcbiAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2UuZ2V0Q29tcGV0aXRpb24odm0uY29tcGV0aXRpb25JZCkudGhlbihmdW5jdGlvbiAoY29tcGV0aXRpb24pIHtcbiAgICAgICAgdmFyIHVwZGF0ZWRDb21wZXRpdGlvbiA9IGNvbXBldGl0aW9uLmRhdGE7XG4gICAgICAgIHVwZGF0ZWRDb21wZXRpdGlvbi5yZXN0cmljdEpvaW5zID0gdm0uY29tcGV0aXRpb24ucmVzdHJpY3RKb2lucztcbiAgICAgICAgY29tcGV0aXRpb25zU2VydmljZS51cGRhdGVDb21wZXRpdGlvbih1cGRhdGVkQ29tcGV0aXRpb24pO1xuICAgICAgfSk7ICAgICAgXG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSB0aGUgdXBkYXRlcyB0aGF0IHdlcmUgcmVxdXN0ZWRcbiAgICBmdW5jdGlvbiB1cGRhdGVDb21wZXRpdGlvblByaXZhdGUoKSB7XG4gICAgICBjb21wZXRpdGlvbnNTZXJ2aWNlLmdldENvbXBldGl0aW9uKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKGNvbXBldGl0aW9uKSB7XG4gICAgICAgIHZhciB1cGRhdGVkQ29tcGV0aXRpb24gPSBjb21wZXRpdGlvbi5kYXRhO1xuICAgICAgICB1cGRhdGVkQ29tcGV0aXRpb24ucHJpdmF0ZSA9IHZtLmNvbXBldGl0aW9uLnByaXZhdGU7XG4gICAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2UudXBkYXRlQ29tcGV0aXRpb24odXBkYXRlZENvbXBldGl0aW9uKTtcbiAgICAgIH0pOyAgICAgIFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUNvbXBldGl0aW9uKCkge1xuICAgICAgc3dhbCh7XG4gICAgICAgIHRpdGxlOiAnRGVsZXRlIENvbXBldGl0aW9uPycsXG4gICAgICAgIHRleHQ6ICdUaGlzIGNhbiBub3QgYmUgdW5kb25lJyxcbiAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdEZWxldGUnLFxuICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAnTmV2ZXJtaW5kJyxcbiAgICAgICAgY2xvc2VPbkNvbmZpcm06IHRydWUsXG4gICAgICAgIGNsb3NlT25DYW5jZWw6IHRydWVcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29tcGV0aXRpb25zU2VydmljZS5kZWxldGVDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkc3RhdGUuZ28oJ2NvbXBldGl0aW9ucy5teUNvbXBldGl0aW9ucycpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czpjb21wZXRpdGlvbl91cGRhdGVkJywgZnVuY3Rpb24gKF8sIGNvbXBldGl0aW9uRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNvbXBldGl0aW9uRGV0YWlscy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuaW5mbyhjb21wZXRpdGlvbkRldGFpbHMuZGVzY3JpcHRpb24pO1xuICAgICAgICByZWZyZXNoQ29tcGV0aXRpb24oKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czpjb21wZXRpdGlvbl9kZWxldGVkJywgZnVuY3Rpb24gKF8sIGNvbXBldGl0aW9uRGV0YWlscykge1xuICAgICAgaWYgKHZtLmNvbXBldGl0aW9uSWQgPT09IGNvbXBldGl0aW9uRGV0YWlscy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuaW5mbyhjb21wZXRpdGlvbkRldGFpbHMuZGVzY3JpcHRpb24pO1xuICAgICAgICAkc3RhdGUuZ28oJ2NvbXBldGl0aW9ucy5teUNvbXBldGl0aW9ucycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0NvbXBldGl0aW9uU3RhdHNDdHJsJywgQ29tcGV0aXRpb25TdGF0c0N0cmwpO1xuXG4gIGZ1bmN0aW9uIENvbXBldGl0aW9uU3RhdHNDdHJsKCRzY29wZSwgJHN0YXRlUGFyYW1zLCAkc3RhdGUsIGNvbXBldGl0aW9uc1NlcnZpY2UsIG5vdGlmeVNlcnZpY2UsIGNoYWxsZW5nZXNTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5jb21wZXRpdGlvbklkID0gbnVsbDtcbiAgICB2bS5jb21wZXRpdGlvbiA9IHt9O1xuICAgIHZtLnBsYXllcnNSZXN1bHRzID0gW107XG4gICAgdm0uY2hhbGxlbmdlcyA9IFtdO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5jb21wZXRpdGlvbklkKSB7XG4gICAgICAgIHZtLmNvbXBldGl0aW9uSWQgPSAkc3RhdGVQYXJhbXMuY29tcGV0aXRpb25JZDtcbiAgICAgICAgcmVmcmVzaENvbXBldGl0aW9uKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVmcmVzaENvbXBldGl0aW9uKCkge1xuICAgICAgY29tcGV0aXRpb25zU2VydmljZS5nZXRDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChjb21wZXRpdGlvbikge1xuICAgICAgICBpZiAoY29tcGV0aXRpb24uZGF0YSkge1xuICAgICAgICAgIHZtLmNvbXBldGl0aW9uID0gY29tcGV0aXRpb24uZGF0YTtcbiAgICAgICAgICBpZiAodm0uY29tcGV0aXRpb24udHlwZSA9PT0gJ3B5cmFtaWQnKSB7XG4gICAgICAgICAgICBfLmZvckVhY2godm0uY29tcGV0aXRpb24ucGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICAgICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRQbGF5ZXJSZXN1bHRzQnlDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkLCBwbGF5ZXIuX2lkKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLnJlc3VsdHMgPSByZXN1bHRzLmRhdGE7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh2bS5jb21wZXRpdGlvbi50eXBlID09PSAndmVyc3VzJykge1xuICAgICAgICAgICAgdm0udGVhbXMgPSBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBudW1iZXI6IDFcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG51bWJlcjogMlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkc3RhdGUuZ28oJ2NvbXBldGl0aW9ucy5teUNvbXBldGl0aW9ucycpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIFVzZWQgZm9yIHRoZSBjb21wbGV0ZWQgY2hhbGxlbmdlcyBkaXJlY3RpdmVcbiAgICAgIGNoYWxsZW5nZXNTZXJ2aWNlLmdldENvbXBsZXRlZENoYWxsZW5nZXNCeUNvbXBldGl0aW9uKHZtLmNvbXBldGl0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKGNoYWxsZW5nZXMpIHtcbiAgICAgICAgdm0uY2hhbGxlbmdlcyA9IGNoYWxsZW5nZXMuZGF0YTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czpjb21wZXRpdGlvbl91cGRhdGVkJywgZnVuY3Rpb24gKF8sIGNoYWxsZW5nZURldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5pbmZvKGNoYWxsZW5nZURldGFpbHMuZGVzY3JpcHRpb24pO1xuICAgICAgICByZWZyZXNoQ29tcGV0aXRpb24oKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFdhdGNoIGZvciB3ZWJzb2NrZXQgZXZlbnRcbiAgICAkc2NvcGUuJG9uKCd3czpjb21wZXRpdGlvbl9kZWxldGVkJywgZnVuY3Rpb24gKF8sIGNoYWxsZW5nZURldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQpIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5pbmZvKGNoYWxsZW5nZURldGFpbHMuZGVzY3JpcHRpb24pO1xuICAgICAgICAkc3RhdGUuZ28oJ2NvbXBldGl0aW9ucy5teUNvbXBldGl0aW9ucycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0NvbXBldGl0aW9uQ3RybCcsIENvbXBldGl0aW9uQ3RybCk7XG5cbiAgZnVuY3Rpb24gQ29tcGV0aXRpb25DdHJsKCRzY29wZSwgJHN0YXRlLCAkc3RhdGVQYXJhbXMsIGNvbXBldGl0aW9uc1NlcnZpY2UsIG5vdGlmeVNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmNvbXBldGl0aW9uSWQgPSBudWxsO1xuICAgIHZtLmNvbXBldGl0aW9uID0gbnVsbDtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGlmICgkc3RhdGVQYXJhbXMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICB2bS5jb21wZXRpdGlvbklkID0gJHN0YXRlUGFyYW1zLmNvbXBldGl0aW9uSWQ7XG5cbiAgICAgICAgY29tcGV0aXRpb25zU2VydmljZS5nZXRDb21wZXRpdGlvbih2bS5jb21wZXRpdGlvbklkKS50aGVuKGZ1bmN0aW9uIChjb21wZXRpdGlvbikge1xuICAgICAgICAgIGlmIChjb21wZXRpdGlvbi5kYXRhKSB7XG4gICAgICAgICAgICB2bS5jb21wZXRpdGlvbiA9IGNvbXBldGl0aW9uLmRhdGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRzdGF0ZS5nbygnY29tcGV0aXRpb25zLm15Q29tcGV0aXRpb25zJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6Y29tcGV0aXRpb25fZGVsZXRlZCcsIGZ1bmN0aW9uIChfLCBjb21wZXRpdGlvbkRldGFpbHMpIHtcbiAgICAgIGlmICh2bS5jb21wZXRpdGlvbklkID09PSBjb21wZXRpdGlvbkRldGFpbHMuY29tcGV0aXRpb25JZCkge1xuICAgICAgICBub3RpZnlTZXJ2aWNlLmluZm8oY29tcGV0aXRpb25EZXRhaWxzLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgJHN0YXRlLmdvKCdjb21wZXRpdGlvbnMubXlDb21wZXRpdGlvbnMnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdDb21wZXRpdGlvbnNDdHJsJywgQ29tcGV0aXRpb25zQ3RybCk7XG5cbiAgZnVuY3Rpb24gQ29tcGV0aXRpb25zQ3RybChjb21wZXRpdGlvbnNTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS5jb21wZXRpdGlvbnMgPSBbXTtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2UuZ2V0UHVibGljQ29tcGV0aXRpb25zKCkudGhlbihmdW5jdGlvbiAoY29tcGV0aXRpb25zKSB7XG4gICAgICAgIHZtLmNvbXBldGl0aW9ucyA9IGNvbXBldGl0aW9ucy5kYXRhO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIi8qKlxuICogQ3JlYXRlcyBhIGNvbXBldGl0aW9uXG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0NyZWF0ZUNvbXBldGl0aW9uQ3RybCcsIENyZWF0ZUNvbXBldGl0aW9uQ3RybCk7XG5cbiAgZnVuY3Rpb24gQ3JlYXRlQ29tcGV0aXRpb25DdHJsKCRzdGF0ZSwgdXNlclNlcnZpY2UsIGNvbXBldGl0aW9uc1NlcnZpY2UsIGlkZW50aXR5U2VydmljZSwgbm90aWZ5U2VydmljZSkge1xuICAgIHZhciBicmVha1BvaW50cyA9IFtdO1xuICAgIHZhciBtYXhMZXZlbHMgPSA3O1xuICAgIHZhciBtYXhQbGF5ZXJzID0gbnVsbDtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLm5ld0NvbXBldGl0aW9uID0ge1xuICAgICAgcGxheWVyczogW10sXG4gICAgICByZXN0cmljdEpvaW5zOiBmYWxzZSxcbiAgICAgIHByaXZhdGU6IGZhbHNlXG4gICAgfTtcbiAgICB2bS5hdmFpbGFibGVQbGF5ZXJzID0gW107XG4gICAgdm0uYWRkZWRQbGF5ZXJzID0gW107XG4gICAgdm0uY3JlYXRlQ29tcGV0aXRpb24gPSBjcmVhdGVDb21wZXRpdGlvbjtcbiAgICB2bS5hZGRQbGF5ZXIgPSBhZGRQbGF5ZXI7XG4gICAgdm0ucmVtb3ZlUGxheWVyID0gcmVtb3ZlUGxheWVyO1xuICAgIHZtLnJlb3JkZXJQbGF5ZXJzID0gcmVvcmRlclBsYXllcnM7XG4gICAgdm0ubmV3Q29tcGV0aXRpb24uZm9yZmVpdERheXMgPSAxO1xuICAgIHZtLmNvbXBldGl0aW9uVHlwZXMgPSBbJ3B5cmFtaWQnLCAndmVyc3VzJ107XG5cbiAgICBhY3RpdmF0ZSgpO1xuICAgIFxuICAgIC8qKlxuICAgICAqIFJ1bnMgb24gY29udHJvbGxlciBpbnN0YW50aWF0aW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICB1c2VyU2VydmljZS5nZXRBbGxVc2VycygpLnRoZW4oZnVuY3Rpb24gKHVzZXJzKSB7XG4gICAgICAgIHZtLmF2YWlsYWJsZVBsYXllcnMgPSB1c2Vycy5kYXRhO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIERldGVybWluZSB0aGUgbWF4aW11bSBudW1iZXIgb2YgcGxheWVycyBiYXNlZCBvbiB0aGUgbWF4aW11bSBudW1iZXIgb2YgbGV2ZWxzXG4gICAgICBmb3IgKHZhciBpID0gbWF4TGV2ZWxzOyBpID4gMDsgLS1pKSB7XG4gICAgICAgIG1heFBsYXllcnMgKz0gaTtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIGJyZWFrIHBvaW50cyBhcnJheVxuICAgICAgZm9yIChpID0gMDsgaSA8IG1heExldmVsczsgaSsrKSB7XG4gICAgICAgIGJyZWFrUG9pbnRzLnB1c2goKCgoaSAqIChpICsgMSkpIC8gMikpICsgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIHBsYXllciB0byB0aGUgbmV3IGNvbXBldGl0aW9uXG4gICAgICogQ2hlY2tzIHRvIG1ha2Ugc3VyZSB5b3UgYXJlIG5vdCBhZGRpbmcgdG9vIG1hbnkgcGxheWVyc1xuICAgICAqIEBwYXJhbSAge29iamVjdH0gcGxheWVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkUGxheWVyKHBsYXllcikge1xuICAgICAgdm0uYWRkZWRQbGF5ZXJzLnB1c2goXy5yZW1vdmUodm0uYXZhaWxhYmxlUGxheWVycywge19pZDogcGxheWVyLl9pZH0pWzBdKTtcbiAgICAgIHJlb3JkZXJQbGF5ZXJzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHByZXZpdW9zbHkgYWRkZWQgcGxheWVyIGZyb20gdGhlIGNvbXBldGl0aW9uXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBwbGF5ZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVQbGF5ZXIocGxheWVyKSB7XG4gICAgICB2bS5hdmFpbGFibGVQbGF5ZXJzLnB1c2goXy5yZW1vdmUodm0uYWRkZWRQbGF5ZXJzLCB7X2lkOiBwbGF5ZXIuX2lkfSlbMF0pO1xuICAgICAgcmVvcmRlclBsYXllcnMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYWtlIGNoYW5nZXMgYmFzZWQgb24gdGhlIGNvbXBldGl0aW9uIHR5cGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW9yZGVyUGxheWVycygpIHtcbiAgICAgIGlmICh2bS5uZXdDb21wZXRpdGlvbi50eXBlID09PSAndmVyc3VzJykge1xuICAgICAgICByZW9yZGVyVmVyc3VzUGxheWVycygpO1xuICAgICAgfSBlbHNlIGlmICh2bS5uZXdDb21wZXRpdGlvbi50eXBlID09PSAncHlyYW1pZCcpIHtcbiAgICAgICAgcmVvcmRlclB5cmFtaWRQbGF5ZXJzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciB0aGUgcGxheWVycyBiYXNlZCBvbiB0aGUgZHJhZy1kcm9wXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlclB5cmFtaWRQbGF5ZXJzKCkge1xuICAgICAgdmFyIGkgPSAxO1xuICAgICAgXy5mb3JFYWNoKHZtLmFkZGVkUGxheWVycywgZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgICBwbGF5ZXIucG9zaXRpb24gPSBpO1xuICAgICAgICArK2k7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW9yZGVyVmVyc3VzUGxheWVycygpIHtcbiAgICAgIC8vIFNldCBhbGwgcGxheWVycyB0byB0ZWFtIDJcbiAgICAgIF8uZm9yRWFjaCh2bS5hZGRlZFBsYXllcnMsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgcGxheWVyLnBvc2l0aW9uID0gMjtcbiAgICAgIH0pO1xuICAgICAgLy8gU2V0IHRoZSBmaXJzdCBoYWxmIG9mIHRoZSBwbGF5ZXJzIHRvIHRlYW0gMVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAodm0uYWRkZWRQbGF5ZXJzLmxlbmd0aCAvIDIpOyBpKyspIHtcbiAgICAgICAgdm0uYWRkZWRQbGF5ZXJzW2ldLnBvc2l0aW9uID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIGNvbXBldGl0aW9uXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBjb21wZXRpdGlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBldGl0aW9uKGNvbXBldGl0aW9uKSB7XG4gICAgICBpZiAoY29tcGV0aXRpb24udHlwZSA9PT0gJ3ZlcnN1cycgJiYgdm0uYWRkZWRQbGF5ZXJzLmxlbmd0aCAlIDIgPiAwKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ0EgVmVyc3VzIGNvbXBldGl0aW9uIG11c3QgaGF2ZSBhbiBldmVuIG51bWJlciBvZiBwbGF5ZXJzJyk7XG4gICAgICB9IGVsc2UgaWYgKHZtLmFkZGVkUGxheWVycy5sZW5ndGggPiBtYXhQbGF5ZXJzKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ0EgY29tcGV0aXRpb24gY2FuIGhhdmUgYSBtYXhpbXVtIG9mICcgKyBtYXhQbGF5ZXJzICsgJyBwbGF5ZXJzJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbmd1bGFyLmZvckVhY2godm0uYWRkZWRQbGF5ZXJzLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgICAgdmFyIGFkZFBsYXllciA9IHtcbiAgICAgICAgICAgIF9pZDogcGxheWVyLl9pZCxcbiAgICAgICAgICAgIGVtYWlsOiBwbGF5ZXIudXNlcm5hbWUsXG4gICAgICAgICAgICBmaXJzdE5hbWU6IHBsYXllci5maXJzdE5hbWUsXG4gICAgICAgICAgICBsYXN0TmFtZTogcGxheWVyLmxhc3ROYW1lLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IHBsYXllci5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiBwbGF5ZXIucG9zaXRpb25cbiAgICAgICAgICB9O1xuICAgICAgICAgIGNvbXBldGl0aW9uLnBsYXllcnMucHVzaChhZGRQbGF5ZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29tcGV0aXRpb24uYWRtaW5zID0gW3tcbiAgICAgICAgICBfaWQ6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5faWQsXG4gICAgICAgICAgZW1haWw6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci51c2VybmFtZSxcbiAgICAgICAgICBmaXJzdE5hbWU6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5maXJzdE5hbWUsXG4gICAgICAgICAgbGFzdE5hbWU6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5sYXN0TmFtZSxcbiAgICAgICAgICBkaXNwbGF5TmFtZTogaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLmRpc3BsYXlOYW1lLFxuICAgICAgICAgIHByaW1hcnk6IHRydWVcbiAgICAgICAgfV07XG5cbiAgICAgICAgLy8gRmlndXJlIG91dCB0aGUgbnVtYmVyIG9mIGxldmVscyBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIHBsYXllcnNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBicmVha1BvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChjb21wZXRpdGlvbi5wbGF5ZXJzLmxlbmd0aCA8IGJyZWFrUG9pbnRzW2ldKSB7XG4gICAgICAgICAgICBjb21wZXRpdGlvbi5sZXZlbHMgPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29tcGV0aXRpb25zU2VydmljZS5jcmVhdGVDb21wZXRpdGlvbihjb21wZXRpdGlvbikudGhlbihmdW5jdGlvbiAobmV3Q29tcGV0aXRpb24pIHtcbiAgICAgICAgICAkc3RhdGUuZ28oJ2NvbXBldGl0aW9ucy52aWV3Jywge1xuICAgICAgICAgICAgY29tcGV0aXRpb25JZDogbmV3Q29tcGV0aXRpb24uZGF0YS5faWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ015Q29tcGV0aXRpb25zQ3RybCcsIE15Q29tcGV0aXRpb25zQ3RybCk7XG5cbiAgZnVuY3Rpb24gTXlDb21wZXRpdGlvbnNDdHJsKCRzY29wZSwgY29tcGV0aXRpb25zU2VydmljZSwgY2hhbGxlbmdlc1NlcnZpY2UsIGlkZW50aXR5U2VydmljZSwgbm90aWZ5U2VydmljZSkge1xuICAgIHZhciBteUNvbXBldGl0aW9ucyA9IFtdO1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uYWN0aXZlQ2hhbGxlbmdlID0gbnVsbDtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGdldENvbXBldGl0aW9uc0ZvclVzZXIoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDb21wZXRpdGlvbnNGb3JVc2VyKCkge1xuICAgICAgbXlDb21wZXRpdGlvbnMgPSBbXTtcbiAgICAgIHZtLmFjdGl2ZUNoYWxsZW5nZSA9IG51bGw7XG4gICAgICBpZiAoaWRlbnRpdHlTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgIGNvbXBldGl0aW9uc1NlcnZpY2UuZ2V0Q29tcGV0aXRpb25zRm9yVXNlcihpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuX2lkKS50aGVuKGZ1bmN0aW9uIChjb21wZXRpdGlvbnMpIHtcbiAgICAgICAgICB2bS5jb21wZXRpdGlvbnMgPSBjb21wZXRpdGlvbnMuZGF0YTtcbiAgICAgICAgICBfLmZvckVhY2godm0uY29tcGV0aXRpb25zLCBmdW5jdGlvbihjb21wZXRpdGlvbikge1xuICAgICAgICAgICAgbXlDb21wZXRpdGlvbnMucHVzaChjb21wZXRpdGlvbi5faWQpO1xuICAgICAgICAgICAgaWYgKGNvbXBldGl0aW9uLnR5cGUgPT09ICdweXJhbWlkJykge1xuICAgICAgICAgICAgICBjaGFsbGVuZ2VzU2VydmljZS5nZXRBY3RpdmVDaGFsbGVuZ2VCeUNvbXBldGl0aW9uQnlQbGF5ZXIoY29tcGV0aXRpb24uX2lkLCBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuX2lkKS50aGVuKGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hhbGxlbmdlLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgIGNvbXBldGl0aW9uLmFjdGl2ZUNoYWxsZW5nZSA9IGNoYWxsZW5nZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgaWYgKGNvbXBldGl0aW9uLmFjdGl2ZUNoYWxsZW5nZS50aW1lTGltaXQgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGV0aXRpb24uYWN0aXZlQ2hhbGxlbmdlLmV4cGlyZXMgPSAobW9tZW50KCkuZGlmZihtb21lbnQoY29tcGV0aXRpb24uYWN0aXZlQ2hhbGxlbmdlLmNyZWF0ZWQpLmFkZChjb21wZXRpdGlvbi5hY3RpdmVDaGFsbGVuZ2UudGltZUxpbWl0LCAnZCcpLCdzJykpICogLTE7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tcGV0aXRpb24udHlwZSA9PT0gJ3ZlcnN1cycpIHtcbiAgICAgICAgICAgICAgY2hhbGxlbmdlc1NlcnZpY2UuZ2V0QWN0aXZlQ2hhbGxlbmdlc0J5Q29tcGV0aXRpb24oY29tcGV0aXRpb24uX2lkKS50aGVuKGZ1bmN0aW9uIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hhbGxlbmdlLmRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgY29tcGV0aXRpb24uYWN0aXZlQ2hhbGxlbmdlID0gY2hhbGxlbmdlLmRhdGFbMF07XG4gICAgICAgICAgICAgICAgICBpZiAoY29tcGV0aXRpb24uYWN0aXZlQ2hhbGxlbmdlLnRpbWVMaW1pdCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wZXRpdGlvbi5hY3RpdmVDaGFsbGVuZ2UuZXhwaXJlcyA9IChtb21lbnQoKS5kaWZmKG1vbWVudChjb21wZXRpdGlvbi5hY3RpdmVDaGFsbGVuZ2UuY3JlYXRlZCkuYWRkKGNvbXBldGl0aW9uLmFjdGl2ZUNoYWxsZW5nZS50aW1lTGltaXQsICdkJyksJ3MnKSkgKiAtMTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXYXRjaCBmb3Igd2Vic29ja2V0IGV2ZW50XG4gICAgJHNjb3BlLiRvbignd3M6Y29tcGV0aXRpb25fdXBkYXRlZCcsIGZ1bmN0aW9uIChfLCBjaGFsbGVuZ2VEZXRhaWxzKSB7XG4gICAgICBpZiAobXlDb21wZXRpdGlvbnMuaW5kZXhPZihjaGFsbGVuZ2VEZXRhaWxzLmNvbXBldGl0aW9uSWQpID49IDApIHtcbiAgICAgICAgbm90aWZ5U2VydmljZS5pbmZvKGNoYWxsZW5nZURldGFpbHMuZGVzY3JpcHRpb24pO1xuICAgICAgICBnZXRDb21wZXRpdGlvbnNGb3JVc2VyKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignVXNlckN0cmwnLCBVc2VyQ3RybCk7XG5cbiAgZnVuY3Rpb24gVXNlckN0cmwoaWRlbnRpdHlTZXJ2aWNlLCB1c2VyU2VydmljZSwgbm90aWZ5U2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0udXNlciA9ICB7XG4gICAgICBfaWQ6ICBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuX2lkLFxuICAgICAgZmlyc3ROYW1lOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuZmlyc3ROYW1lLFxuICAgICAgbGFzdE5hbWU6IGlkZW50aXR5U2VydmljZS5jdXJyZW50VXNlci5sYXN0TmFtZSxcbiAgICAgIGRpc3BsYXlOYW1lOiBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIuZGlzcGxheU5hbWVcbiAgICB9O1xuICAgIHZtLnVwZGF0ZVVzZXIgPSB1cGRhdGVVc2VyO1xuICAgIHZtLnVzZXJGb3JtID0ge307XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7fVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlVXNlciAodXNlcikge1xuICAgICAgaWYgKHVzZXIucGFzc3dvcmQgIT09IHVzZXIuY29uZmlybVBhc3N3b3JkKSB7XG4gICAgICAgIG5vdGlmeVNlcnZpY2UuZXJyb3IoJ1Bhc3N3b3JkcyBkb25cXCd0IG1hdGNoIScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgYW55IG9mIHRoZSBuYW1lcyB3ZXJlIHVwZGF0ZWQgd2UnbGwgbmVlZCB0byB1cGRhdGUgdGhlbSBpbiB0aGUgb3RoZXIgY29sbGVjdGlvbnMnXG4gICAgICAgIHZhciB1c2VyVXBkYXRlcyA9IHtcbiAgICAgICAgICBfaWQ6IHVzZXIuX2lkXG4gICAgICAgIH07XG4gICAgICAgIGlmICh1c2VyLmZpcnN0TmFtZSAhPT0gaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLmZpcnN0TmFtZSB8fCB1c2VyLmxhc3ROYW1lICE9PSBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIubGFzdE5hbWUgfHwgdXNlci5kaXNwbGF5TmFtZSAhPT0gaWRlbnRpdHlTZXJ2aWNlLmN1cnJlbnRVc2VyLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgICAgdXNlclVwZGF0ZXMuZmlyc3ROYW1lID0gdXNlci5maXJzdE5hbWU7XG4gICAgICAgICAgdXNlclVwZGF0ZXMubGFzdE5hbWUgPSB1c2VyLmxhc3ROYW1lO1xuICAgICAgICAgIHVzZXJVcGRhdGVzLmRpc3BsYXlOYW1lID0gdXNlci5kaXNwbGF5TmFtZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXNlci5wYXNzd29yZCAmJiB1c2VyLnBhc3N3b3JkLmxlbnRnaCA+IDApIHtcbiAgICAgICAgICB1c2VyVXBkYXRlcy5wYXNzd29yZCA9IHVzZXIucGFzc3dvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgdXNlclNlcnZpY2UudXBkYXRlVXNlcih1c2VyVXBkYXRlcykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbm90aWZ5U2VydmljZS5zdWNjZXNzKCdZb3VyIGluZm9ybWF0aW9uIGhhcyBiZWVuIHVwZGF0ZWQnKTtcbiAgICAgICAgICB2bS51c2VyRm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgICAvLyBVcGRhdGUgdGhlIGN1cnJlbnQgdXNlciB3aXRoIHRoZSB1cGRhdGVkIGRhdGFcbiAgICAgICAgICB2YXIgY3VycmVudFVzZXJDbG9uZSA9IGFuZ3VsYXIuY29weShpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIpO1xuICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKGN1cnJlbnRVc2VyQ2xvbmUsIHVzZXJVcGRhdGVzKTtcbiAgICAgICAgICBpZGVudGl0eVNlcnZpY2UuY3VycmVudFVzZXIgPSBjdXJyZW50VXNlckNsb25lO1xuICAgICAgICAgIHZtLnVzZXIuY29uZmlybVBhc3N3b3JkID0gdm0udXNlci5wYXNzd29yZCA9ICcnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdjT3ZlcmZsb3cnLCBjT3ZlcmZsb3cpO1xuXG4gIGZ1bmN0aW9uIGNPdmVyZmxvdyhzY3JvbGxiYXJTZXJ2aWNlKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIHJlc3RyaWN0OiAnQycsXG4gICAgICBsaW5rOiBsaW5rRnVuYyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcblxuICAgIGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgdmFyIHNjcm9sbGF4aXMgPSBhdHRycy5zY3JvbGxheGlzIHx8ICd5JztcbiAgICAgIHZhciB0aGVtZSA9IGF0dHJzLnRoZW1lIHx8ICdtaW5pbWFsLWRhcmsnO1xuICAgICAgdmFyIG1vdXNld2hlZWxheGlzID0gYXR0cnMubW91c2V3aGVlbGF4aXMgfHwgJ3knO1xuICAgICAgaWYgKCEkKCdodG1sJykuaGFzQ2xhc3MoJ2lzbW9iaWxlJykpIHtcbiAgICAgICAgc2Nyb2xsYmFyU2VydmljZS5tYWxpaHVTY3JvbGwoZWxlbWVudCwgdGhlbWUsIHNjcm9sbGF4aXMsIG1vdXNld2hlZWxheGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd0b2dnbGVTdWJtZW51JywgdG9nZ2xlU3VibWVudSk7XG5cbiAgZnVuY3Rpb24gdG9nZ2xlU3VibWVudSgpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIGxpbms6IGxpbmtGdW5jLFxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsKSB7XG4gICAgICBlbC5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLm5leHQoKS5zbGlkZVRvZ2dsZSgyMDApO1xuICAgICAgICBlbC5wYXJlbnQoKS50b2dnbGVDbGFzcygndG9nZ2xlZCcpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgnd2F2ZXNFZmZlY3QnLCB3YXZlc0VmZmVjdCk7XG5cbiAgZnVuY3Rpb24gd2F2ZXNFZmZlY3QoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIHJlc3RyaWN0OiAnQycsXG4gICAgICBsaW5rOiBsaW5rRnVuYyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcblxuICAgIGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICBpZiAoZWxlbWVudC5oYXNDbGFzcygnYnRuLWljb24nKSB8fCBlbGVtZW50Lmhhc0NsYXNzKCdidG4tZmxvYXQnKSkge1xuICAgICAgICBXYXZlcy5hdHRhY2goZWxlbWVudCwgWyd3YXZlcy1jaXJjbGUnXSk7XG4gICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuaGFzQ2xhc3MoJ2J0bi1saWdodCcpKSB7XG4gICAgICAgIFdhdmVzLmF0dGFjaChlbGVtZW50LCBbJ3dhdmVzLWxpZ2h0J10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgV2F2ZXMuYXR0YWNoKGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBXYXZlcy5pbml0KCk7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgnZmdMaW5lJywgZmdMaW5lKTtcblxuICBmdW5jdGlvbiBmZ0xpbmUoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIHJlc3RyaWN0OiAnQycsXG4gICAgICBsaW5rOiBsaW5rRnVuYyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcblxuICAgIGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICB2YXIgaW5wdXQgPSBlbGVtZW50LmNoaWxkcmVuKCkuZmlyc3QoKTtcbiAgICAgIHZhciBpc0Zsb2F0TGFiZWwgPSBlbGVtZW50LnBhcmVudCgpLmhhc0NsYXNzKCdmZy1mbG9hdCcpO1xuICAgICAgaW5wdXQuZm9jdXMoZnVuY3Rpb24gKCkge1xuICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdmZy10b2dnbGVkJyk7XG4gICAgICB9KTtcblxuICAgICAgaW5wdXQuYmx1cihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNGbG9hdExhYmVsIHx8IChpc0Zsb2F0TGFiZWwgJiYgaW5wdXQudmFsKCkubGVuZ3RoID09PSAwKSkge1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2ZnLXRvZ2dsZWQnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
