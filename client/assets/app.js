angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","luegg.directives"]),function(){"use strict ";function e(e){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache"}e.$inject=["$httpProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e){var t=this;t.$state=e}e.$inject=["$state"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,i,a){var o={superAdmin:r,admin:t,user:n};a.html5Mode(!0),i.otherwise("/"),i.when("/pyramids/","/pyramids"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("pyramids",{url:"/pyramids",views:{content:{controller:"PyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramids.html"}}}).state("pyramids.myPyramids",{url:"/my-pyramids",views:{"content@":{controller:"MyPyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/my-pyramids.html"}},resolve:{auth:o.user}}).state("pyramids.view",{url:"/view/:pyramidId",views:{"content@":{controller:"PyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramid.html"}}}).state("pyramids.create",{url:"/create",views:{"content@":{controller:"CreatePyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/create-pyramid.html"}},resolve:{auth:o.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}})}function t(e){return e.authorizeCurrentUserForRoute("admin")}function r(e){return e.authorizeCurrentUserForRoute("super-admin")}function n(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),t.$inject=["authService"],r.$inject=["authService"],n.$inject=["authService"]}(),function(){"use strict";function e(e,t,r){e.$on("$stateChangeError",function(e,r,n,i,a,o){"not authorized"===o&&(t.go("login"),t.previous=r)}),e.$on("$stateChangeStart",function(){r.setSidebarStatus(!1)})}e.$inject=["$rootScope","$state","sidebarService"],angular.module("app").run(e)}(),function(){"use strict";function e(e,t,r,n,i){function a(e,n){var a=r.defer();return t.post("/login",{username:e,password:n}).then(function(e){e.data.success?(i.currentUser=e.data.user,a.resolve(!0)):a.resolve(!1)}),a.promise}function o(e){var n=r.defer();return t.post("/api/users",{userData:e}).then(function(e){e.data?(i.currentUser=e.data,n.resolve(!0)):n.resolve(!1)}),n.promise}function l(){var n=r.defer();return t.post("/logout",{logout:!0}).then(function(){i.currentUser=void 0,n.resolve(),e.go("home")}),n.promise}function c(e){return!!i.isAuthorized(e)||r.reject("not authorized")}function s(){return!!i.isAuthenticated()||r.reject("not authorized")}var u={authenticateUser:a,createUser:o,logout:l,authorizeCurrentUserForRoute:c,authenticatedUserForRoute:s};return u}e.$inject=["$state","$http","$q","userService","identityService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e,t){function r(){return e.get("/api/users").then(function(e){return e})}var n={getAllUsers:r};return n}e.$inject=["$http","identityService"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@"},templateUrl:"/challenges/components/active-challenges.html"};return e}function t(e,t){function r(){n()}function n(){i.challenges=[],t.getActiveChallengesByCompetition(i.competitionId).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){e.expires=moment().diff(moment(e.created).add(e.timeLimit,"h"),"s")*-1}))})}var i=this;i.challenges=[],r(),e.$on("ws:challenge_created",function(e,t){i.competitionId===t.competitionId&&n()}),e.$on("ws:challenge_completed",function(e,t){i.competitionId===t.competitionId&&n()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpActiveChalleneges",e)}(),function(){"use strict";function e(e,t,r){function n(){}function i(n,i){t.authenticateUser(n,i).then(function(t){t?e.previous?e.go(e.previous):e.go("home"):r.error("Username / password combinaiton incorrect")})}var a=this;a.login=i,n()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,t,r,n){function i(){}function a(e){e.password!==e.confirmPassword?n.error("Passwords don't match!"):r.createUser(e).then(function(e){t.go("home")})}var o=this;o.register=a,i()}e.$inject=["$scope","$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(e){function t(t){return e.post("/api/challenges/create",{challenge:t})}function r(t){return e.post("/api/challenges/complete",{challenge:t})}function n(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function i(t){return e.get("/api/challenges/active/competition",{params:{competitionId:t}})}function a(t,r){return e.get("/api/challenges/active/competition/player",{params:{competitionId:t,playerId:r}})}var o={createChallenge:t,completeChallenge:r,getChallengesByCompetition:n,getActiveChallengesByCompetition:i,getActiveChallengeByCompetitionByPlayer:a};return o}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/footer.html"};return e}function t(e,t){function r(){t.logout()}var n=this;n.indentity=e,n.logout=r}t.$inject=["identityService","authService"],angular.module("app").directive("kpFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"headerCtrl",restrict:"A",templateUrl:"/common/components/header.html"};return e}function t(e,t,r){function n(){a.sidebarStatus.left=!a.sidebarStatus.left,e.setSidebarStatus(a.sidebarStatus.left)}function i(){r.logout()}var a=this;a.indentity=t,a.logout=i,a.sidebarStatus=e.getSidebarStatus(),a.toggleSidebar=n}t.$inject=["sidebarService","identityService","authService"],angular.module("app").directive("kpHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"/common/components/sidebar.html"};return e}function t(e,t,r){function n(){t.logout()}var i=this;i.indentity=e,i.logout=n,i.sidebarStatus=r.getSidebarStatus()}t.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("kpSidebar",e)}(),function(){"use strict";function e(e){function t(){return!!this.currentUser}function r(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var n;null!==e.bootstrappedUserObject&&(n=e.bootstrappedUserObject);var i={currentUser:n,isAuthenticated:t,isAuthorized:r};return i}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,t,r){$.notify({message:e,url:t,target:r},{type:"info"})}function t(e,t,r){$.notify({message:e,url:t,target:r},{type:"success"})}function r(e,t,r){$.notify({message:e,url:t,target:r},{type:"warning"})}function n(e,t,r){$.notify({message:e,url:t,target:r},{type:"danger"})}function i(e,t,r){$.notify({message:e,url:t,target:r},{type:"inverse"})}var a={info:e,success:t,warning:r,error:n,inverse:i};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85}}),a}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(){return r}function t(e){r.left=e}var r={left:!1,right:!1},n={getSidebarStatus:e,setSidebarStatus:t};return n}angular.module("app").factory("sidebarService",e)}(),angular.module("app").service("websocketService",["$rootScope","$window",function(e,t){function r(){return"https:"===t.location.protocol?"wss://"+t.location.host:"ws://"+t.location.host}var n;this.connect=function(){n=new WebSocket(r()),n.onmessage=function(t){var r=JSON.parse(t.data);e.$broadcast("ws:"+r.topic,r.data)}},this.send=function(e,t){var r=JSON.stringify({topic:e,data:t});n.send(r)}}]).run(["websocketService",function(e){e.connect()}]),function(){"use strict";function e(){function e(){}e()}angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/pyramids/components/pyramid.html",replace:!0,scope:{competitionId:"@"},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,r,n,i,a){function o(){t.getPyramid(h.competitionId).then(function(e){h.pyramid=e.data,h.levels=[];for(var t=1;t<=e.data.levels;++t)h.levels.push(t);l(),c(),u(),d(),p()})}function l(){h.pyramid.players=r("orderBy")(h.pyramid.players,"position")}function c(){_.forEach(h.pyramid.players,function(e){i.currentUser&&e._id===i.currentUser._id&&(h.isCurrentUserOnPyramid=!0,e.class="current-user",h.currentUserPlayer=e,a.getActiveChallengeByCompetitionByPlayer(h.competitionId,e._id).then(function(e){e.data&&(h.hasActiveChallenge=!0)}))}),a.getActiveChallengesByCompetition(h.competitionId).then(function(e){_.forEach(e.data,function(e){var t=_.find(h.pyramid.players,{_id:e.challenger._id});t.class="unavailable",t.challenge={position:"challenger"};var r=_.find(h.pyramid.players,{_id:e.opponent._id});r.class="unavailable",r.challenge={position:"opponent"};var n=moment().diff(moment(e.created).add(e.timeLimit,"h"),"s")*-1;n>0?r.challenge.expires=n:n<=0&&v(null,!0,r)}),m()})}function s(){h.breakPoints=[];for(var e=0;e<h.pyramid.levels;e++)h.breakPoints.push(e*(e+1)/2+1)}function u(){h.numberOfBlocks=0;for(var e=h.pyramid.levels;e>0;e--)h.numberOfBlocks+=e}function d(){for(var e=h.pyramid.players.length;e<h.numberOfBlocks;e++)h.pyramid.players.push({firstName:"Empty",lastName:"Spot",position:99,class:"empty"})}function p(){var e=0;s();for(var t=0;t<h.pyramid.players.length;t++)h.breakPoints.indexOf(t+1)>-1&&(e+=1),h.pyramid.players[t].level=e}function m(){var e=h.currentUserPlayer.level>1?h.currentUserPlayer.level-1:null;_.forEach(h.pyramid.players,function(t){t.level===e&&99!==t.position&&"unavailable"!==t.class&&(h.availableChallenges=!0,t.available=!0)})}function f(e){if(e.available){h.hasActiveChallenge=!0;var t={competitionId:h.competitionId,complete:!1,forfeit:!1,timeLimit:24,challenger:{_id:h.currentUserPlayer._id,firstName:h.currentUserPlayer.firstName,lastName:h.currentUserPlayer.lastName,nickname:h.currentUserPlayer.nickname,position:h.currentUserPlayer.position},opponent:{_id:e._id,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname,position:e.position}};a.createChallenge(t).then(function(){y(),h.pyramidMenuToggle=!1})}else n.error("Sorry, that is not a valid challenge.")}function v(e,r,n){var i=n||h.currentUserPlayer;a.getActiveChallengeByCompetitionByPlayer(h.competitionId,i._id).then(function(n){h.hasActiveChallenge=!1;var i=!1;r?(n.data.forfeit=!0,n.data.challenger.winner=!0,i=!0):e?n.data.challenger._id===h.currentUserPlayer._id?(n.data.challenger.winner=!0,i=!0):n.data.opponent.winner=!0:n.data.challenger._id===h.currentUserPlayer._id?n.data.opponent.winner=!0:(n.data.challenger.winner=!0,i=!0),i?t.swapPositions(h.competitionId,n.data.opponent,n.data.challenger).then(function(){a.completeChallenge(n.data)}):a.completeChallenge(n.data),h.pyramidMenuToggle=!1})}function g(e){v(null,!0,e)}function y(){t.getPyramid(h.competitionId).then(function(e){h.pyramid=e.data,l(),c(),d(),p()})}var h=this;h.pyramid={},h.breakPoints=[],h.numberOfBlocks=0,h.isCurrentUserOnPyramid=!1,h.hasActiveChallenge=!1,h.availableChallenges=!1,h.createChallenge=f,h.completeChallenge=v,h.challengeExpired=g,h.currentUserPlayer={},h.pyramidMenuToggle=!1,o(),e.$on("ws:challenge_created",function(e,t){h.competitionId===t.competitionId&&(n.info(t.description),y())}),e.$on("ws:challenge_completed",function(e,t){h.competitionId===t.competitionId&&(n.info(t.description),y())})}t.$inject=["$scope","pyramidsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("kpPyramid",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/pyramid",{params:{pyramidId:t}})}function r(t){return e.get("/api/pyramids/user",{params:{userId:t}})}function n(t){return e.post("/api/pyramids/create",{pyramid:t})}function i(t,r,n){return e.post("/api/pyramids/swapPositions",{pyramidId:t,challenger:r,opponent:n})}function a(t,r){return e.post("/api/pyramids/addPlayer",{pyramidId:t,player:r})}var o={getPyramid:t,getPyramidsForUser:r,createPyramid:n,swapPositions:i,addPlayerToPyramid:a};return o}e.$inject=["$http"],angular.module("app").factory("pyramidsService",e)}(),function(){"use strict";function e(e,t,r,n){function i(){r.getAllUsers().then(function(e){l.availablePlayers=e.data})}function a(e){c+=1;var t={position:c,_id:e._id,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname};l.newPyramid.players.push(t),_.remove(l.availablePlayers,{_id:e._id})}function o(t){n.createPyramid(t).then(function(t){e.go("pyramids.view",{pyramidId:t.data._id})})}var l=this;l.availablePlayers=[],l.addPlayerToPyramid=a,l.createPyramid=o,i();var c=0}e.$inject=["$state","$stateParams","userService","pyramidsService"],angular.module("app").controller("AddPlayerCtrl",e)}(),function(){"use strict";function e(e,t,r){function n(){t.getAllUsers().then(function(e){l.availablePlayers=e.data})}function i(e){l.availablePlayerAdded=!1,l.addedPlayerAdded=!0,l.addedPlayers.push(_.remove(l.availablePlayers,{_id:e._id})[0])}function a(e){l.availablePlayerAdded=!0,l.addedPlayerAdded=!1,l.availablePlayers.push(_.remove(l.addedPlayers,{_id:e._id})[0])}function o(t){angular.forEach(l.addedPlayers,function(e){c+=1;var t={position:c,_id:e._id,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname};l.newPyramid.players.push(t)}),r.createPyramid(t).then(function(t){e.go("pyramids.view",{pyramidId:t.data._id})})}var l=this;l.newPyramid={players:[]},l.availablePlayers=[],l.addedPlayers=[],l.createPyramid=o,l.addPlayer=i,l.removePlayer=a,l.newPyramid.levels=4,l.newPyramid.forfeitHours=24,n();var c=0}e.$inject=["$state","userService","pyramidsService"],angular.module("app").controller("CreatePyramidCtrl",e)}(),function(){"use strict";function e(e,t,r){function n(){t.getPyramidsForUser(r.currentUser._id).then(function(e){i.pyramids=e.data})}var i=this;i.pyramids=null,n()}e.$inject=["$state","pyramidsService","identityService"],angular.module("app").controller("MyPyramidsCtrl",e)}(),function(){"use strict";function e(e){function t(){e.pyramidId&&(r.pyramidId=e.pyramidId)}var r=this;r.pyramidId=null,t()}e.$inject=["$stateParams"],angular.module("app").controller("PyramidCtrl",e)}(),function(){"use strict";function e(){function e(){}var t=this;t.pyramids=null,e()}angular.module("app").controller("PyramidsCtrl",e)}(),function(){"use strict";function e(){function e(e,t){t.click(function(){t.next().slideToggle(200),t.parent().toggleClass("toggled")})}var t={restrict:"A",link:e};return t}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,t){t.hasClass("btn-icon")||t.hasClass("btn-float")?Waves.attach(t,["waves-circle"]):t.hasClass("btn-light")?Waves.attach(t,["waves-light"]):Waves.attach(t),Waves.init()}var t={restrict:"C",link:e};return t}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,t){var r=t.children().first(),n=t.parent().hasClass("fg-float");r.focus(function(){t.addClass("fg-toggled")}),r.blur(function(){(!n||n&&0===r.val().length)&&t.removeClass("fg-toggled")})}var t={restrict:"C",link:e};return t}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;base64,
