angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","luegg.directives"]),function(){"use strict ";function e(e){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache"}e.$inject=["$httpProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e){var t=this;t.$state=e}e.$inject=["$state"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,a,i){var o={superAdmin:n,admin:t,user:r};i.html5Mode(!0),a.otherwise("/"),a.when("/pyramids/","/pyramids"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("pyramids",{url:"/pyramids",views:{content:{controller:"PyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramids.html"}}}).state("pyramids.myPyramids",{url:"/my-pyramids",views:{"content@":{controller:"MyPyramidsCtrl",controllerAs:"vm",templateUrl:"pyramids/views/my-pyramids.html"}},resolve:{auth:o.user}}).state("pyramids.view",{url:"/view/:pyramidId",views:{"content@":{controller:"PyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/pyramid.html"}}}).state("pyramids.create",{url:"/create",views:{"content@":{controller:"CreatePyramidCtrl",controllerAs:"vm",templateUrl:"pyramids/views/create-pyramid.html"}},resolve:{auth:o.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}})}function t(e){return e.authorizeCurrentUserForRoute("admin")}function n(e){return e.authorizeCurrentUserForRoute("super-admin")}function r(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),t.$inject=["authService"],n.$inject=["authService"],r.$inject=["authService"]}(),function(){"use strict";function e(e,t,n){e.$on("$stateChangeError",function(e,n,r,a,i,o){"not authorized"===o&&(t.go("login"),t.previous=n)}),e.$on("$stateChangeStart",function(){n.setSidebarStatus(!1)})}e.$inject=["$rootScope","$state","sidebarService"],angular.module("app").run(e)}(),function(){"use strict";function e(e,t,n,r,a){function i(e,r){var i=n.defer();return t.post("/login",{username:e,password:r}).then(function(e){e.data.success?(a.currentUser=e.data.user,i.resolve(!0)):i.resolve(!1)}),i.promise}function o(e){var r=n.defer();return t.post("/api/users",{userData:e}).then(function(t){t.data?(i(e.username,e.password),r.resolve(!0)):r.resolve(!1)}),r.promise}function l(){var r=n.defer();return t.post("/logout",{logout:!0}).then(function(){a.currentUser=void 0,r.resolve(),e.go("home")}),r.promise}function s(e){return!!a.isAuthorized(e)||n.reject("not authorized")}function c(){return!!a.isAuthenticated()||n.reject("not authorized")}var u={authenticateUser:i,createUser:o,logout:l,authorizeCurrentUserForRoute:s,authenticatedUserForRoute:c};return u}e.$inject=["$state","$http","$q","userService","identityService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e,t){function n(){return e.get("/api/users").then(function(e){return e})}var r={getAllUsers:n};return r}e.$inject=["$http","identityService"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(e,t,n){function r(){}function a(r,a){t.authenticateUser(r,a).then(function(t){t?e.previous?e.go(e.previous):e.go("home"):n.error("Username / password combinaiton incorrect")})}var i=this;i.login=a,r()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,t,n,r){function a(){}function i(e){e.password!==e.confirmPassword?r.error("Passwords don't match!"):n.createUser(e).then(function(){t.go("home")})}var o=this;o.register=i,a()}e.$inject=["$scope","$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@"},templateUrl:"/challenges/components/active-challenges.html"};return e}function t(e,t){function n(){r()}function r(){a.challenges=[],t.getActiveChallengesByCompetition(a.competitionId).then(function(e){e.data.length>0&&(a.challenges=e.data,_.forEach(a.challenges,function(e){0!==e.timeLimit&&(e.expires=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1)}))})}var a=this;a.challenges=[],n(),e.$on("ws:challenge_created",function(e,t){a.competitionId===t.competitionId&&r()}),e.$on("ws:challenge_completed",function(e,t){a.competitionId===t.competitionId&&r()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpActiveChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",scope:{competitionId:"@"},templateUrl:"/challenges/components/completed-challenges.html"};return e}function t(e,t){function n(){r()}function r(){i.challenges=[],t.getCompletedChallengesByCompetition(i.competitionId,a).then(function(e){e.data.length>0&&(i.challenges=e.data,_.forEach(i.challenges,function(e){e.loser="challenger"===e.winner?"opponent":"challenger",e.whenCompleted=moment(e.completed).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd",sameElse:"DD/MM/YYYY"})}))})}var a=3,i=this;i.challenges=[],n(),e.$on("ws:challenge_completed",function(e,t){i.competitionId===t.competitionId&&r()})}t.$inject=["$scope","challengesService"],angular.module("app").directive("kpCompletedChalleneges",e)}(),function(){"use strict";function e(e){function t(t){return e.post("/api/challenges/create",{challenge:t})}function n(t){return e.post("/api/challenges/complete",{challenge:t})}function r(t){return e.get("/api/challenges/competition",{params:{competitionId:t}})}function a(t){return e.get("/api/challenges/active/competition",{params:{competitionId:t}})}function i(t,n){return e.get("/api/challenges/active/competition/player",{params:{competitionId:t,playerId:n}})}function o(t,n){return e.get("/api/challenges/completed/competition",{params:{competitionId:t,limit:n}})}var l={createChallenge:t,completeChallenge:n,getChallengesByCompetition:r,getActiveChallengesByCompetition:a,getActiveChallengeByCompetitionByPlayer:i,getCompletedChallengesByCompetition:o};return l}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"A",templateUrl:"/common/components/footer.html"};return e}function t(e,t){function n(){t.logout()}var r=this;r.indentity=e,r.logout=n}t.$inject=["identityService","authService"],angular.module("app").directive("kpFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"headerCtrl",restrict:"A",templateUrl:"/common/components/header.html"};return e}function t(e,t,n){function r(){i.sidebarStatus.left=!i.sidebarStatus.left,e.setSidebarStatus(i.sidebarStatus.left)}function a(){n.logout()}var i=this;i.indentity=t,i.logout=a,i.sidebarStatus=e.getSidebarStatus(),i.toggleSidebar=r}t.$inject=["sidebarService","identityService","authService"],angular.module("app").directive("kpHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"/common/components/sidebar.html"};return e}function t(e,t,n){function r(){t.logout()}var a=this;a.indentity=e,a.logout=r,a.sidebarStatus=n.getSidebarStatus()}t.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("kpSidebar",e)}(),function(){"use strict";function e(e){function t(){return!!this.currentUser}function n(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var r;null!==e.bootstrappedUserObject&&(r=e.bootstrappedUserObject);var a={currentUser:r,isAuthenticated:t,isAuthorized:n};return a}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,t,n){$.notify({message:e,url:t,target:n},{type:"info"})}function t(e,t,n){$.notify({message:e,url:t,target:n},{type:"success"})}function n(e,t,n){$.notify({message:e,url:t,target:n},{type:"warning"})}function r(e,t,n){$.notify({message:e,url:t,target:n},{type:"danger"})}function a(e,t,n){$.notify({message:e,url:t,target:n},{type:"inverse"})}var i={info:e,success:t,warning:n,error:r,inverse:a};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85}}),i}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(){return n}function t(e){n.left=e}var n={left:!1,right:!1},r={getSidebarStatus:e,setSidebarStatus:t};return r}angular.module("app").factory("sidebarService",e)}(),angular.module("app").service("websocketService",["$rootScope","$window",function(e,t){function n(){return"https:"===t.location.protocol?"wss://"+t.location.host:"ws://"+t.location.host}var r;this.connect=function(){r=new WebSocket(n()),r.onmessage=function(t){var n=JSON.parse(t.data);e.$broadcast("ws:"+n.topic,n.data)}},this.send=function(e,t){var n=JSON.stringify({topic:e,data:t});r.send(n)}}]).run(["websocketService",function(e){e.connect()}]),function(){"use strict";function e(){function e(){}e()}angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"/pyramids/components/pyramid.html",replace:!0,scope:{competitionId:"@"},controller:t,controllerAs:"vm",bindToController:!0};return e}function t(e,t,n,r,a,i,o){function l(){n.getPyramid(b.competitionId).then(function(e){if(e.data){b.pyramid=e.data,b.levels=[];for(var n=1;n<=e.data.levels;++n)b.levels.push(n);s(),c(),d(),p(),m()}else t.go("pyramids.myPyramids")})}function s(){b.pyramid.players=r("orderBy")(b.pyramid.players,"position")}function c(){_.forEach(b.pyramid.players,function(e){i.isAuthenticated()&&e._id===i.currentUser._id&&(b.currentUserIsOnPyramid=!0,e.class="current-user",b.currentUserPlayer=e,o.getActiveChallengeByCompetitionByPlayer(b.competitionId,e._id).then(function(e){e.data&&(b.hasActiveChallenge=!0)}))}),o.getActiveChallengesByCompetition(b.competitionId).then(function(e){_.forEach(e.data,function(e){var t=_.find(b.pyramid.players,{_id:e.challenger._id});t.class="unavailable",t.challenge={position:"challenger"};var n=_.find(b.pyramid.players,{_id:e.opponent._id});if(n.class="unavailable",n.challenge={position:"opponent"},0!==e.timeLimit){var r=moment().diff(moment(e.created).add(e.timeLimit,"d"),"s")*-1;r>0?n.challenge.expires=r:r<=0&&h(null,!0,n)}}),f()})}function u(){b.breakPoints=[];for(var e=0;e<b.pyramid.levels;e++)b.breakPoints.push(e*(e+1)/2+1)}function d(){b.numberOfBlocks=0;for(var e=b.pyramid.levels;e>0;e--)b.numberOfBlocks+=e}function p(){b.numberOfRealPlayers=b.pyramid.players.length;for(var e=b.pyramid.players.length;e<b.numberOfBlocks;e++)b.pyramid.players.push({firstName:"Empty",lastName:"Spot",position:99,class:"empty"})}function m(){var e=0;u();for(var t=0;t<b.pyramid.players.length;t++)b.breakPoints.indexOf(t+1)>-1&&(e+=1),b.pyramid.players[t].level=e}function f(){var e=b.currentUserPlayer.level>1?b.currentUserPlayer.level-1:null;_.forEach(b.pyramid.players,function(t){t.level===e&&99!==t.position&&"unavailable"!==t.class&&(b.availableChallenges=!0,t.available=!0)})}function y(e){if(e.available){b.hasActiveChallenge=!0;var t={competitionId:b.competitionId,complete:!1,forfeit:!1,timeLimit:b.pyramid.forfeitDays,challenger:{_id:b.currentUserPlayer._id,firstName:b.currentUserPlayer.firstName,lastName:b.currentUserPlayer.lastName,nickname:b.currentUserPlayer.nickname,position:b.currentUserPlayer.position},opponent:{_id:e._id,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname,position:e.position}};o.createChallenge(t).then(function(){b.pyramidMenuToggle=!1})}else a.error("Sorry, that is not a valid challenge.")}function h(e,t,r){var a=r||b.currentUserPlayer;o.getActiveChallengeByCompetitionByPlayer(b.competitionId,a._id).then(function(a){b.hasActiveChallenge=!1;var i=!1;t?(a.data.forfeit=!0,"opponent"===r.challenge.position?(a.data.challenger.winner=!0,a.data.winner="challenger",i=!0):(a.data.opponent.winner=!0,a.data.winner="opponent")):e?a.data.challenger._id===b.currentUserPlayer._id?(a.data.challenger.winner=!0,a.data.winner="challenger",i=!0):(a.data.opponent.winner=!0,a.data.winner="opponent"):a.data.challenger._id===b.currentUserPlayer._id?(a.data.opponent.winner=!0,a.data.winner="opponent"):(a.data.challenger.winner=!0,a.data.winner="challenger",i=!0),i?n.swapPositions(b.competitionId,a.data.opponent,a.data.challenger).then(function(){o.completeChallenge(a.data).then(function(){$&&w()})}):o.completeChallenge(a.data).then(function(){$&&w()}),b.pyramidMenuToggle=!1})}function g(e){h(null,!0,e)}function v(){if(i.isAuthenticated())if(b.numberOfRealPlayers<b.numberOfBlocks){var e={_id:i.currentUser._id,firstName:i.currentUser.firstName,lastName:i.currentUser.lastName,position:b.numberOfRealPlayers+1};n.addPlayerToPyramid(b.competitionId,e)}else a.warning("Sorry, this pyramid is full");else t.go("login")}function P(){swal({title:"Leave Pyramid?",text:"You will lose your spot and forfeit any active challenges.",type:"error",showCancelButton:!0,confirmButtonText:"Yes, leave",confirmButtonClass:"btn-danger",cancelButtonText:"No, stay",closeOnConfirm:!1,closeOnCancel:!0},function(){w(),swal("OK, you'r out!","You've been removed from the pyramid.","success")})}function w(){i.isAuthenticated()&&b.currentUserIsOnPyramid&&($=!0,b.hasActiveChallenge?h(null,!0,b.currentUserPlayer):(b.currentUserIsOnPyramid=!1,b.hasActiveChallenge=!1,n.getPyramid(b.competitionId).then(function(e){var t=e.data,r=b.currentUserPlayer.position;_.forEach(t.players,function(e){e.position>=r&&(e.position-=1)});for(var a=_.remove(t.players,function(e){return e._id===b.currentUserPlayer._id}),i=[],o=0;o<b.numberOfRealPlayers-1;++o){var l={_id:t.players[o]._id,firstName:t.players[o].firstName,lastName:t.players[o].lastName,position:t.players[o].position};i.push(l)}n.removedPlayerFromPyramid(b.competitionId,a[0],i).then(function(){$=!1})})))}function C(){n.getPyramid(b.competitionId).then(function(e){b.pyramid=e.data,s(),c(),p(),m()})}var b=this;b.pyramid={},b.breakPoints=[],b.numberOfBlocks=0,b.currentUserIsOnPyramid=!1,b.hasActiveChallenge=!1,b.availableChallenges=!1,b.createChallenge=y,b.completeChallenge=h,b.challengeExpired=g,b.currentUserPlayer={},b.pyramidMenuToggle=!1,b.addCurrentUserToPyramid=v,b.confirmRemoveCurrentUserFromPyramid=P,b.numberOfRealPlayers=0,l();var $=!1;e.$on("ws:challenge_created",function(e,t){b.competitionId===t.competitionId&&(a.info(t.description),C())}),e.$on("ws:challenge_completed",function(e,t){b.competitionId===t.competitionId&&(a.info(t.description),$||C())}),e.$on("ws:player_added",function(e,t){b.competitionId===t.competitionId&&(a.info(t.description),C())}),e.$on("ws:player_removed",function(e,t){b.competitionId===t.competitionId&&(a.info(t.description),C())})}t.$inject=["$scope","$state","pyramidsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("kpPyramid",e)}(),function(){"use strict";function e(e){function t(t){return e.get("/api/pyramid",{params:{pyramidId:t}})}function n(t){return e.get("/api/pyramids/user",{params:{userId:t}})}function r(t){return e.post("/api/pyramids/create",{pyramid:t})}function a(t,n,r){return e.post("/api/pyramids/swapPositions",{pyramidId:t,challenger:n,opponent:r})}function i(t,n){return e.post("/api/pyramids/addPlayer",{pyramidId:t,player:n})}function o(t,n,r){return e.post("/api/pyramids/removePlayer",{pyramidId:t,removedPlayer:n,players:r})}var l={getPyramid:t,getPyramidsForUser:n,createPyramid:r,swapPositions:a,addPlayerToPyramid:i,removedPlayerFromPyramid:o};return l}e.$inject=["$http"],angular.module("app").factory("pyramidsService",e)}(),function(){"use strict";function e(e,t,n,r,a){function i(){n.getAllUsers().then(function(e){u.availablePlayers=e.data})}function o(e){u.addedPlayers.length<u.allowedPlayers?(u.addedPlayerAdded=!0,u.addedPlayers.push(_.remove(u.availablePlayers,{_id:e._id})[0])):a.error("All spots have been filled.<br />If you want to add more people please increase the levels.")}function l(e){u.addedPlayerAdded=!1,u.availablePlayers.push(_.remove(u.addedPlayers,{_id:e._id})[0])}function s(e){u.allowedPlayers=0;for(var t=e;t>0;t--)u.allowedPlayers+=t;if(u.addedPlayers.length>u.allowedPlayers){var n=u.addedPlayers.splice(u.allowedPlayers);u.availablePlayers=u.availablePlayers.concat(n),a.warning("Players were removed becasue there are not enough spots on the pyramid.")}}function c(e){angular.forEach(u.addedPlayers,function(e){d+=1;var t={position:d,_id:e._id,firstName:e.firstName,lastName:e.lastName,nickname:e.nickname};u.newPyramid.players.push(t)}),r.createPyramid(e).then(function(e){t.go("pyramids.view",{pyramidId:e.data._id})})}var u=this;u.newPyramid={players:[]},u.availablePlayers=[],u.addedPlayers=[],u.createPyramid=c,u.addPlayer=o,u.removePlayer=l,u.allowedPlayers=10,u.newPyramid.levels=4,u.newPyramid.forfeitDays=1,i(),e.$watch("vm.newPyramid.levels",function(e,t){e!==t&&s(e)});var d=0}e.$inject=["$scope","$state","userService","pyramidsService","notifyService"],angular.module("app").controller("CreatePyramidCtrl",e)}(),function(){"use strict";function e(e,t,n){function r(){t.getPyramidsForUser(n.currentUser._id).then(function(e){a.pyramids=e.data})}var a=this;a.pyramids=null,r()}e.$inject=["$state","pyramidsService","identityService"],angular.module("app").controller("MyPyramidsCtrl",e)}(),function(){"use strict";function e(e){function t(){e.pyramidId&&(n.pyramidId=e.pyramidId)}var n=this;n.pyramidId=null,t()}e.$inject=["$stateParams"],angular.module("app").controller("PyramidCtrl",e)}(),function(){"use strict";function e(){function e(){}var t=this;t.pyramids=null,e()}angular.module("app").controller("PyramidsCtrl",e)}(),function(){"use strict";function e(){function e(e,t){t.click(function(){t.next().slideToggle(200),t.parent().toggleClass("toggled")})}var t={restrict:"A",link:e};return t}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,t){t.hasClass("btn-icon")||t.hasClass("btn-float")?Waves.attach(t,["waves-circle"]):t.hasClass("btn-light")?Waves.attach(t,["waves-light"]):Waves.attach(t),Waves.init()}var t={restrict:"C",link:e};return t}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,t){var n=t.children().first(),r=t.parent().hasClass("fg-float");n.focus(function(){t.addClass("fg-toggled")}),n.blur(function(){(!r||r&&0===n.val().length)&&t.removeClass("fg-toggled")})}var t={restrict:"C",link:e};return t}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;base64,
