angular.module("app",["ui.router","ui.bootstrap","ngAnimate","angular-loading-bar","nouislider","localytics.directives","timer","LocalStorageModule","angular-sortable-view","angular.vertilize","ngTable","chart.js"]),function(){"use strict ";function e(e,n,i,t){e.defaults.headers.get||(e.defaults.headers.get={}),e.defaults.headers.get["If-Modified-Since"]="Fri, 01 Jan 2016 05:00:00 GMT",e.defaults.headers.get["Cache-Control"]="no-cache",e.defaults.headers.get.Pragma="no-cache",n.options({appendToBody:!0}),i.errorOnUnhandledRejections(!1),t.setOptions({responsive:!0})}e.$inject=["$httpProvider","$uibTooltipProvider","$qProvider","ChartJsProvider"],angular.module("app").config(e)}(),function(){"use strict";function e(e,n){function i(e){n.set("sidebarLocked",e)}var t=this;t.$state=e,t.lockSidebar=n.get("sidebarLocked"),t.toggleSidebarLocked=i}e.$inject=["$state","localStorageService"],angular.module("app").controller("AppCtrl",e)}(),function(){"use strict";function e(e,a,l){var o={superAdmin:i,admin:n,user:t};l.html5Mode(!0),a.otherwise("/"),a.when("/competitions/","/competitions"),a.when("/admin/","/admin"),a.when("/player/","/player"),e.state("home",{url:"/",views:{content:{controller:"HomeCtrl",controllerAs:"vm",templateUrl:"common/views/home.html"}}}).state("competitions",{url:"/competitions",views:{content:{controller:"CompetitionsCtrl",controllerAs:"vm",templateUrl:"competitions/views/competitions.html"}}}).state("competitions.myCompetitions",{url:"/my-competitions",views:{"content@":{controller:"MyCompetitionsCtrl",controllerAs:"vm",templateUrl:"competitions/views/my-competitions.html"}},resolve:{auth:o.user}}).state("competitions.view",{url:"/view/:competitionId",views:{"content@":{controller:"CompetitionCtrl",controllerAs:"vm",templateUrl:"competitions/views/competition.html"}}}).state("competitions.stats",{url:"/stats/:competitionId",views:{"content@":{controller:"CompetitionStatsCtrl",controllerAs:"vm",templateUrl:"competitions/views/competition-stats.html"}}}).state("competitions.admin",{url:"/admin/:competitionId",views:{"content@":{controller:"CompetitionAdminCtrl",controllerAs:"vm",templateUrl:"competitions/views/competition-admin.html"}},resolve:{auth:o.user}}).state("competitions.create",{url:"/create",views:{"content@":{controller:"CreateCompetitionCtrl",controllerAs:"vm",templateUrl:"competitions/views/create-competition.html"}},resolve:{auth:o.user}}).state("player",{url:"/player",views:{content:{controller:"PlayerCompetitionsCtrl",controllerAs:"vm",templateUrl:"players/views/player-competitions.html"}}}).state("player.competitions",{url:"/competitions/:userId",views:{"content@":{controller:"PlayerCompetitionsCtrl",controllerAs:"vm",templateUrl:"players/views/player-competitions.html"}}}).state("player.competition",{url:"/competition/:userId/:competitionId",views:{"content@":{controller:"PlayerCompetitionCtrl",controllerAs:"vm",templateUrl:"players/views/player-competition.html"}}}).state("player.admin",{url:"/admin",views:{"content@":{controller:"PlayerAdminCtrl",controllerAs:"vm",templateUrl:"players/views/player-admin.html"}},resolve:{auth:o.user}}).state("login",{url:"/login",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("register",{url:"/register",views:{content:{controller:"RegisterCtrl",controllerAs:"vm",templateUrl:"authentication/views/register.html"}}}).state("verify",{url:"/verification",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("verification",{url:"/verification/:userId/:verificationToken",views:{content:{controller:"VerificationCtrl",controllerAs:"vm",templateUrl:"authentication/views/verification.html"}}}).state("password-reset-request",{url:"/password-reset",views:{content:{controller:"PasswordResetCtrl",controllerAs:"vm",templateUrl:"authentication/views/password-reset.html"}}}).state("password-reset",{url:"/password-reset/:userId/:verificationToken",views:{content:{controller:"PasswordResetCtrl",controllerAs:"vm",templateUrl:"authentication/views/password-reset.html"}}}).state("admin",{url:"/admin",views:{content:{controller:"LoginCtrl",controllerAs:"vm",templateUrl:"authentication/views/login.html"}}}).state("admin.users",{url:"/users",views:{"content@":{controller:"EditUserAdminCtrl",controllerAs:"vm",templateUrl:"admin/views/edit-user-admin.html"}},resolve:{auth:o.superAdmin}})}function n(e){return e.authorizeCurrentUserForRoute("admin")}function i(e){return e.authorizeCurrentUserForRoute("super-admin")}function t(e){return e.authenticatedUserForRoute()}e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("app").config(e),n.$inject=["authService"],i.$inject=["authService"],t.$inject=["authService"]}(),function(){"use strict";function e(e,n,i,t){e.$on("$stateChangeError",function(e,i,t,a,l,o){"not authorized"===o&&(n.go("login"),n.previous=i,n.prevParams=t)}),e.$on("$stateChangeStart",function(){t.setSidebarStatus(!1),i[0].body.scrollTop=i[0].documentElement.scrollTop=0})}e.$inject=["$rootScope","$state","$document","sidebarService"],angular.module("app").run(e)}(),angular.module("app").run(["$templateCache",function(e){e.put("admin/views/edit-user-admin.html",'<div class="container">\n    <div class="row">\n        <div class="col-md-6">\n            <ul>\n                <li ng-repeat="user in vm.users" ng-click="vm.selectUser(user)">\n                    {{user.firstName}} {{user.lastName}}</span>\n                </li>\n            </ul>\n        </div>\n        <div class="col-md-6">\n            <div class="block-header">\n                <h2>User Information</h2>\n            </div>\n            <div class="card">\n                <div class="card-header">\n                    <h2>Update User Info</h2>\n                </div>\n                <div class="card-body card-padding">\n                    <form role="form" name="vm.userForm" ng-submit="vm.updateUser(vm.selectedUser)" novalidate>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control fg-input" ng-model="vm.selectedUser.firstName" placeholder="First Name">\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control fg-input" ng-model="vm.selectedUser.lastName" placeholder="Last Name">\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control fg-input" ng-model="vm.selectedUser.displayName" placeholder="Display Name">\n                            </div>\n                        </div>\n                        <div class="text-center">\n                            <button type="submit" class="btn btn-primary waves-effect" ng-disabled="vm.userForm.$invalid || !vm.userForm.$dirty">Update</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("authentication/views/login.html",'<div class="container login-page">\n    <div class="row">\n        <div class="col-md-6 col-md-offset-3">\n            <div class="block-header">\n                <h2>Welcome to WannaPlayMe</h2>\n            </div>\n            <div class="card">\n                <div class="card-header">\n                    <h2>Login</h2>\n                </div>\n                <div class="card-body card-padding">\n                    <form role="form" name="loginForm" ng-submit="vm.login(vm.username, vm.password)" novalidate>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="email" class="form-control fg-input" ng-model="vm.username" placeholder="Email">\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="password" class="form-control fg-input" ng-model="vm.password" placeholder="Password">\n                            </div>\n                        </div>\n                        <div class="text-center">\n                            <button type="submit" class="btn btn-primary waves-effect">Sign In</button>\n                        </div>\n                        <div class="row">\n                            <div class="col-xs-6">\n                                <a ui-sref="register">New User</a>\n                            </div>\n                            <div class="col-xs-6 text-right">\n                                <a ui-sref="password-reset-request">Forgot Password</a>\n                            </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("authentication/views/password-reset.html",'<div class="container">\n    <div class="row">\n        <div class="col-md-6 col-md-offset-3">\n            <div class="block-header">\n                <h2>Password Reset</h2>\n            </div>\n            <div class="card" ng-if="!vm.verified">\n                <div class="card-body card-padding">\n                    <p>Enter your email address</p>\n                    <form role="form" name="generatePasswordResetLinkForm" ng-submit="vm.generatePasswordResetLink(vm.username)" novalidate>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="email" class="form-control fg-input" ng-model="vm.username" placeholder="Email" required>\n                            </div>\n                        </div>\n                        <div class="text-center">\n                            <button type="submit" class="btn btn-primary waves-effect" ng-disabled="generatePasswordResetLinkForm.$invalid">Submit</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <div class="card" ng-if="vm.verified">\n                <div class="card-body card-padding">\n                    <p>Enter a new password</p>\n                    <form role="form" name="resetPasswordForm" ng-submit="vm.resetPassword(vm.resetPasswordForm)" novalidate>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="password" class="form-control fg-input" ng-model="vm.resetPasswordForm.password" placeholder="New Password" required>\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="password" class="form-control fg-input" ng-model="vm.resetPasswordForm.confirmPassword" placeholder="New Password again" required>\n                            </div>\n                        </div>\n                        <div class="text-center">\n                            <button type="submit" class="btn btn-primary waves-effect" ng-disabled="resetPasswordForm.$invalid">Submit</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("authentication/views/register.html",'<div class="container">\n    <div class="row">\n        <div class="col-md-6 col-md-offset-3">\n            <div class="block-header">\n                <h2>Register for WannaPlayMe</h2>\n            </div>\n            <div class="card">\n                <div class="card-header">\n                    <h2>Register</h2>\n                </div>\n                <div class="card-body card-padding">\n                    <form role="form" name="newUserForm" ng-submit="vm.register(vm.newUser)" novalidate>\n                        <div class="form-group fg-float m-b-30">\n                            <div class="fg-line">\n                                <input class="form-control" type="email" name="username" ng-model="vm.newUser.username" required>\n                                <label class="fg-label">Email</label>\n                            </div>\n                        </div>\n                        <div class="form-group fg-float m-b-30">\n                            <div class="fg-line">\n                                <input class="form-control" type="password" ng-model="vm.newUser.password" required>\n                                <label class="fg-label">Password</label>\n                            </div>\n                        </div>\n                        <div class="form-group fg-float m-b-30">\n                            <div class="fg-line">\n                                <input class="form-control" type="password" ng-model="vm.newUser.confirmPassword" required>\n                                <label class="fg-label">Confirm Password</label>\n                            </div>\n                        </div>\n                        <div class="form-group fg-float m-b-30">\n                            <div class="fg-line">\n                                <input class="form-control" type="text" ng-model="vm.newUser.firstName" required>\n                                <label class="fg-label">First Name</label>\n                            </div>\n                        </div>\n                        <div class="form-group fg-float m-b-30">\n                            <div class="fg-line">\n                                <input class="form-control" type="text" ng-model="vm.newUser.lastName" required>\n                                <label class="fg-label">Last Name</label>\n                            </div>\n                        </div>\n                        <div class="form-group fg-float m-b-30">\n                            <div class="fg-line">\n                                <input class="form-control" type="text" ng-model="vm.newUser.displayName">\n                                <label class="fg-label">Display Name</label>\n                            </div>\n                        </div>\n                        <div class="text-center">\n                            <button type="submit" class="btn btn-primary waves-effect" ng-disabled="newUserForm.$invalid">Register</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("authentication/views/verification.html",'<div class="container">\n    <div class="block-header">\n        <h2>Welcome to WannaPlayMe</h2>\n    </div>\n    <div class="card">\n        <div class="card-header">\n            <h2>Verification Status</h2>\n        </div>\n        <div class="card-body card-padding">\n            <p ng-if="!vm.verifying">Please check your email for the verification link</p>\n            <div ng-if="vm.verifying">\n                <p ng-if="vm.verified === null">We are checking on your account.  Hold tight...</p>\n                <div ng-if="vm.verified"> \n                    <p>Your email address has been verified!</p>\n                    <p>You may now <a ui-sref="login">log in</a> and start competing.</p>\n                </div>\n                <p ng-if="vm.verified === false">Sorry.  We were unable to verify your information.  Please check your verification email from WannaPlayMe and try again.</p>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("challenges/components/active-challenges.html",'<div class="card active-challenges">\n    <div class="card-header">\n        <h2>Active Challenges</h2>\n    </div>\n    <div class="card-body card-padding" ng-if="vm.challenges === null">Getting active challenges...</div>\n    <div class="card-body card-padding" ng-if="vm.challenges.length === 0">No challenges at this time</div>\n    <div class="card-body table-responsive hidden-xs" ng-if="vm.challenges.length > 0">\n        <table ng-table="vm.tableData" class="table table-striped table-vmiddle">\n            <tr ng-repeat="challenge in $data">\n                <td data-title="\'Challenger\'">\n                    {{challenge.challenger.displayName}}\n                </td>\n                <td data-title="\'Opponent\'">\n                    {{challenge.opponent.displayName}}\n                </td>\n                <td data-title="\'Forfeit\'">\n                    <i class="zmdi zmdi-time"></i>\n                    <span ng-if="challenge.expires >= .5">{{challenge.expires | number: 0}}hrs</span>\n                    <span ng-if="challenge.expires < .5">Soon</span>\n                    <i class="zmdi zmdi-close-circle-o delete-challenge-control" ng-click="vm.deleteChallenge(challenge._id, $index)" ng-if="vm.allowDelete"></i>\n                </td>\n            </tr>\n        </table>\n    </div>\n\n    <div class="card-body table-responsive visible-xs" ng-if="vm.challenges.length > 0">\n        <table ng-table="vm.tableData" class="table table-striped table-vmiddle">\n            <tr ng-repeat="challenge in $data">\n                <td data-title="\'Challenger\'">\n                    {{challenge.challenger.displayName}}\n                </td>\n                <td data-title="\'Opponent\'">\n                    {{challenge.opponent.displayName}}\n                    <i class="zmdi zmdi-close-circle-o delete-challenge-control" ng-click="vm.deleteChallenge(challenge._id, $index)" ng-if="vm.allowDelete"></i>\n                </td>\n            </tr>\n        </table>\n    </div>\n</div>'),e.put("challenges/components/completed-challenges.html",'<div class="card completed-challenges">\n    <div class="card-header">\n        <h2>Completed Challenges</h2>\n    </div>\n    <div class="card-body card-padding" ng-if="vm.challenges === null">Getting completed challenges...</div>\n    <div class="card-body card-padding" ng-if="vm.challenges.length === 0">No completed challenges</div>\n    <div class="card-body table-responsive hidden-xs" ng-if="vm.challenges.length > 0">\n        <table ng-table="vm.tableData" class="table table-striped table-vmiddle">\n            <tr ng-repeat="challenge in $data">\n                <td data-title="\'Winner\'">\n                    {{challenge[challenge.winner].displayName}}\n                </td>\n                <td data-title="\'Loser\'">\n                    {{challenge[challenge.loser].displayName}}\n                </td>\n                <td data-title="\'Date\'">\n                    {{challenge.whenCompleted}}\n                    <i class="zmdi zmdi-close-circle-o delete-challenge-control" ng-click="vm.deleteChallenge(challenge._id, $index)" ng-if="vm.allowDelete"></i>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class="card-body table-responsive visible-xs" ng-if="vm.challenges.length > 0">\n        <table ng-table="vm.tableData" class="table table-striped table-vmiddle">\n            <tr ng-repeat="challenge in $data">\n                <td data-title="\'Winner\'">\n                    {{challenge[challenge.winner].displayName}}\n                </td>\n                <td data-title="\'Loser\'">\n                    {{challenge[challenge.loser].displayName}}\n                    <i class="zmdi zmdi-close-circle-o delete-challenge-control" ng-click="vm.deleteChallenge(challenge._id, $index)" ng-if="vm.allowDelete"></i>\n                </td>\n            </tr>\n        </table>\n    </div>\n</div>'),e.put("challenges/components/player-overall-results.html",'<div class="card player-statistics">\n    <div class="card-header ch-alt">\n        <h2>\n            <button class="btn btn-primary btn-icon waves-circle">\n                {{vm.player.level}}\n            </button>\n            <span class="player-name">{{vm.player.displayName}}</span>\n            <small ng-if="vm.player.displayName !== vm.player.firstName + \' \' + vm.player.lastName" class="player-name">{{vm.player.firstName}} {{vm.player.lastName}}</small>\n        </h2>\n    </div>\n    <div class="card-body card-padding-sm">\n        <div class="row">\n            <div class="col-sm-4 col-md-2">\n                <div class="p-15 text-center" ng-class="vm.streak.type === \'winning\' ? \'bgm-green\' : \'bgm-red\'">\n                    <div class="c-white m-b-5"><span class="text-capitalize">{{vm.streak.type}}</span> Streak</div>\n                    <h2 class="m-0 c-white f-300">{{vm.streak.value}}</h2>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2">\n                <div class="bg-app-gray p-15 text-center">\n                    <div class="c-green m-b-5">Total Wins</div>\n                    <h2 class="m-0 c-green f-300">{{vm.wins.total}}</h2>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2">\n                <div class="bg-app-gray p-15 text-center">\n                    <div class="c-red m-b-5">Total Loses</div>\n                    <h2 class="m-0 c-red f-300">{{vm.loses.total}}</h2>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2 text-center">\n                <div class="bg-app-gray p-10 text-center">\n                    <h5>Move Up</h5>\n                    <div>Wins: {{vm.wins.asChallenger}}</div>\n                    <div>Loses: {{vm.loses.asChallenger}}</div>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2 text-center">\n                <div class="bg-app-gray p-10 text-center">\n                    <h5>Defend</h5>\n                    <div>Wins: {{vm.wins.asOpponent}}</div>\n                    <div>Loses: {{vm.loses.asOpponent}}</div>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2 text-center">\n                <div class="bg-app-gray p-10 text-center">\n                    <h5>Forfeit</h5>\n                    <div>Wins: {{vm.wins.byForfeit}}</div>\n                    <div>Loses: {{vm.loses.byForfeit}}</div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("challenges/components/team-overall-results.html",'<div class="card player-statistics">\n    <div class="card-header ch-alt">\n        <h2 ng-if="!vm.singlePlayerTeams">Team {{vm.team}}</h2>\n        <h2 ng-if="vm.singlePlayerTeams">\n            <span class="player-name">{{vm.displayName}}</span>\n            <small ng-if="vm.displayName !== vm.playerName" class="player-name">{{vm.playerName}}</small>\n        </h2>\n    </div>\n    <div class="card-body card-padding-sm">\n        <div class="row">\n            <div class="col-sm-4 col-md-2">\n                <div class="p-15 text-center" ng-class="vm.streak.type === \'winning\' ? \'bgm-green\' : \'bgm-red\'">\n                    <div class="c-white m-b-5"><span class="text-capitalize">{{vm.streak.type}}</span> Streak</div>\n                    <h2 class="m-0 c-white f-300">{{vm.streak.value}}</h2>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2">\n                <div class="bg-app-gray p-15 text-center">\n                    <div class="c-green m-b-5">Total Wins</div>\n                    <h2 class="m-0 c-green f-300">{{vm.wins.total}}</h2>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2">\n                <div class="bg-app-gray p-15 text-center">\n                    <div class="c-red m-b-5">Total Loses</div>\n                    <h2 class="m-0 c-red f-300">{{vm.loses.total}}</h2>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2 text-center">\n                <div class="bg-app-gray p-10 text-center">\n                    <h5>As Challenger</h5>\n                    <div>Wins: {{vm.wins.asChallenger}}</div>\n                    <div>Loses: {{vm.loses.asChallenger}}</div>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2 text-center">\n                <div class="bg-app-gray p-10 text-center">\n                    <h5>As Opponent</h5>\n                    <div>Wins: {{vm.wins.asOpponent}}</div>\n                    <div>Loses: {{vm.loses.asOpponent}}</div>\n                </div>\n            </div>\n            <div class="col-sm-4 col-md-2 text-center">\n                <div class="bg-app-gray p-10 text-center">\n                    <h5>Forfeit</h5>\n                    <div>Wins: {{vm.wins.byForfeit}}</div>\n                    <div>Loses: {{vm.loses.byForfeit}}</div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("common/components/footer.html",'Copyright &copy; 2017 The Maestro\n\n<ul class="f-menu">\n    <li><a ui-sref="home">Home</a></li>\n    <li ng-if="!vm.indentity.isAuthenticated()"><a ui-sref="login">Login</a></li>\n    <li ng-if="vm.indentity.isAuthenticated()"><a href="" ng-click="vm.logout()">Logout</a></li>\n</ul>\n'),e.put("common/components/header.html",'<ul class="header-inner clearfix">\n    <li id="menu-trigger" target="mainmenu" ng-click="headerCtrl.toggleSidebar()" ng-class="{ \'open\': headerCtrl.sidebarStatus.left === true }">\n        <div class="line-wrap">\n            <div class="line top"></div>\n            <div class="line center"></div>\n            <div class="line bottom"></div>\n        </div>\n    </li>\n    <li class="logo hidden-xs">\n        <a data-ui-sref="home">\n            <img src="/images/wpm-logo-white.png" alt="WannaPlayMe" />\n        </a>\n    </li>\n    <li class="logo visible-xs">\n        <a data-ui-sref="home">\n            <img src="/images/wpm-logo-white-xs.png" alt="WannaPlayMe" />\n        </a>\n    </li>\n    <li class="pull-right">\n        <ul class="top-menu">\n            <li class="dropdown" uib-dropdown ng-if="headerCtrl.indentity.isAuthenticated()">\n                <a href="" uib-dropdown-toggle>\n                    <i class="tm-icon zmdi zmdi-notifications"></i>\n                    <i class="tmn-counts animate-zoom" ng-if="headerCtrl.alerts.length > 0">{{headerCtrl.alerts.length}}</i>\n                </a>\n                <div class="dropdown-menu dropdown-menu-lg pull-right">\n                    <div class="listview" id="notifications">\n                        <div class="lv-header">Alerts\n                            <ul class="actions">\n                                <li><a href="" ng-click="headerCtrl.clearAllAlerts()" ng-if="headerCtrl.alerts.length > 0"><i class="zmdi zmdi-check-all"></i></a></li>\n                            </ul>\n                        </div>\n                        <div class="lv-body">\n                            <a ui-sref="{{alert.details.state}}({{alert.details.stateParams}})" class="lv-item" ng-repeat="alert in headerCtrl.alerts" ng-click="headerCtrl.clearAlert(alert._id, $index)">\n                                <div class="media">\n                                    <div class="media-body">\n                                        <div class="lv-title">{{alert.details.title}}</div><small class="lv-small">{{alert.details.description}}</small>\n                                    </div>\n                                </div>\n                            </a> \n                            <div class="p-20" ng-if="headerCtrl.alerts.length === 0">Nothing to see here...</div>                           \n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li class="dropdown" uib-dropdown ng-if="headerCtrl.indentity.isAuthenticated()">\n                <a uib-dropdown-toggle href="">\n                    <i class="tm-icon zmdi zmdi-account"></i>\n                </a>\n                <ul class="dropdown-menu dm-icon pull-right">\n                    <li>\n                        <a ui-sref="player.admin"><i class="zmdi zmdi-account-circle"></i> {{headerCtrl.indentity.currentUser.firstName}} {{headerCtrl.indentity.currentUser.lastName}}</a>\n                    </li>\n                    <li>\n                        <a ng-click="headerCtrl.logout()" href=""><i class="fa fa-sign-out"></i> Logout</a>\n                    </li>\n                </ul>\n            </li>\n            <li ng-if="!headerCtrl.indentity.isAuthenticated()">\n                <a ui-sref="login">\n                    <i class="tm-icon zmdi zmdi-sign-in"></i>\n                </a>\n            </li>\n        </ul>\n    </li>\n</ul>'),e.put("common/components/sidebar.html",'<div class="sidebar-inner">\n    <ul class="main-menu">\n        <li ui-sref-active="active">\n            <a ui-sref="home"><i class="zmdi zmdi-home"></i> Home</a>\n        </li>\n        <li ui-sref-active="active" ng-if="!vm.indentity.isAuthenticated()">\n            <a ui-sref="login"><i class="zmdi zmdi-sign-in"></i> Login</a>\n        </li>\n        <li ui-sref-active="active" ng-if="!vm.indentity.isAuthenticated()">\n            <a ui-sref="register"><i class="zmdi zmdi-account-add"></i> Register</a>\n        </li>\n        <li ui-sref-active="active">\n            <a ui-sref="competitions.myCompetitions"><i class="zmdi zmdi-triangle-up"></i> My Competitions</a>\n        </li>\n        <li ui-sref-active="active">\n            <a ui-sref="competitions.create"><i class="zmdi zmdi-plus"></i> Create Competition</a>\n        </li>\n    </ul>\n</div>\n<div class="lock-sidebar">\n    <div class="toggle-switch" id="toggle-width" data-ts-color="blue">\n        <label for="lock-sidebar" class="ts-label">unlock</label>\n        <input id="lock-sidebar" type="checkbox" hidden="hidden" ng-model="appCtrl.lockSidebar" ng-change="appCtrl.toggleSidebarLocked(appCtrl.lockSidebar)">\n        <label for="lock-sidebar" class="ts-helper"></label>\n        <label for="lock-sidebar" class="ts-label">lock</label>\n    </div>\n</div>'),e.put("common/views/home.html",'<div class="container">\n    <div class="block-header">\n        <h2>Welcome to Wanna<b>Play</b>Me</h2>\n    </div>\n    <div class="card">\n        <div class="card-header ch-alt">\n            <h2>What is Wanna<b>Play</b>Me?</h2>\n        </div>\n        <div class="card-body card-padding-sm">\n            <p>Wanna<b>Play</b>Me is a competition tracking app.  It allows you to set up a competition between you and others, challenge them to a match in whatever your competition is and track the results of the competition.</p>\n        </div> \n    </div>\n    <div class="block-header">\n        <h2>Active Public Competitions</h2>\n    </div>\n    <div class="row" ng-if="vm.publicCompetitions.length > 0">\n        <div class="col-sm-4" ng-repeat="competition in vm.publicCompetitions" wpm-competition-compact competition="competition"></div>\n    </div>\n    <div class="card" ng-if="vm.publicCompetitions.length === 0">\n        <div class="card-body card-padding-sm">\n            <p>No competitions yet :(</p>\n        </div> \n    </div>\n    <div class="block-header" ng-if="vm.privateCompetitions.length > 0">\n        <h2>Private Competitions</h2>\n    </div>\n    <div class="row">\n        <div class="col-sm-4" ng-repeat="competition in vm.privateCompetitions" wpm-competition-compact competition="competition"></div>\n    </div>\n</div>'),e.put("competitions/components/competition-compact.html",'<div class="card">\n    <div class="card-header ch-alt">\n        <h2>{{vm.competition.name}}</h2>\n        <a ui-sref="competitions.view({competitionId: vm.competition._id})" class="btn bgm-blue btn-float">\n            <i ng-if="vm.competition.type===\'pyramid\'" class="zmdi zmdi-triangle-up"></i>\n            <i ng-if="vm.competition.type===\'versus\'" class="zmdi zmdi-graphic-eq"></i>\n        </a>\n    </div>\n    <div class="card-body card-padding-sm">\n        <div><i class="zmdi zmdi-play-circle-outline"></i> {{vm.competition.activity}}</div>\n        <div><i class="zmdi zmdi-accounts"></i> {{vm.competition.players.length}}</div>\n        <div ng-if="vm.competition.activeChallenge">\n            <i class="zmdi zmdi-notifications-active c-red"></i>\n            <div class="badge pull-right" ng-if="vm.competition.activeChallenge.expires > 0">\n                <i class="zmdi zmdi-time"></i>\n                <timer interval="1000" countdown="vm.competition.activeChallenge.expires" max-time-unit="\'hour\'">{{hours}}:{{mminutes}}:{{sseconds}}</timer>\n            </div>\n        </div>\n    </div>\n</div>'),
e.put("competitions/components/pending-players.html",'<div class="card pending-players" ng-if="vm.competition.pendingPlayers.length > 0">\n    <div class="card-header ch-alt">\n        <h2>Pending Players</h2>\n    </div>\n    <div class="card-body c-overflow" scrollaxis="x">\n        <div class="pending-player bg-app-gray" ng-repeat="player in vm.competition.pendingPlayers">\n            <div class="player-name">{{player.displayName}}</div>\n            <div ng-if="player.displayName !== player.firstName + \' \' + player.lastName" class="player-name">{{player.firstName}} {{player.lastName}}</div>\n            <div class="btns-group text-center">\n                <button class="btn btn-primary" ng-click="vm.approvePendingPlayer(player)">Approve</button>\n                <button class="btn btn-danger" ng-click="vm.denyPendingPlayer(player)">Deny</button>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("competitions/components/pyramid-rules.html",'<div class="card">\n    <div class="card-header">\n        <h2>Competition Rules</h2>\n    </div>\n    <div class="card-body card-padding">\n        <div class="row" vertilize-container>\n            <div class="col-sm-4 m-b-25" vertilize>\n                <p class="c-black">Challenges</p>\n                <p>Players can only issue one challenge at a time.<br />\n                    Players can only challenge players on the level directly above them.<br />\n                    Players can only be involved in one active challenge per competition.</p>\n            </div>\n            <div class="col-sm-4 m-b-25" ng-if="vm.competition.waitingPeriodDays >= 1" vertilize>\n                <p class="c-black">Rechallenges</p>\n                <p>After losing (or forfeiting) a match, the loser must wait a period of time before they can challenge the winner again.</p>\n                <p>Number of days before rechallenge:</p>\n                <p class="text-center f-20">{{vm.competition.waitingPeriodDays}} day<span ng-if="vm.competition.waitingPeriodDays > 1">s</span></p>\n            </div>\n            <div class="col-sm-4 m-b-25" ng-if="vm.competition.forfeitDays >= 1" vertilize>\n                <p class="c-black">Forfeits</p>\n                <p>If a challenge result has not been entered after a period of time, the opponent forfeits and swicthes places with the challenger in the competition.</p>\n                <p>Number of days before forfeit:</p>\n                <p class="text-center f-20">{{vm.competition.forfeitDays}} day<span ng-if="vm.competition.forfeitDays > 1">s</span></p>\n            </div>\n            <div class="col-sm-4 m-b-25" vertilize>\n                <p class="c-black">Holds</p>\n                <p>Players can place themselves on hold when they are unable to play matches (ex. out of the office).<br />\n                    Players on hold can not be challenges and cannot challenge other players.<br />\n                    Players must remove the hold before they can resume participation in the competition.<br />\n                    Holds should not be used to avoid challenges from particular players.</p>\n            </div>\n            <div class="col-sm-4 m-b-25" ng-if="!vm.competition.allowWeekendChallenges" vertilize>\n                <p class="c-black">Weekends</p>\n                <p>Challenges are not allowed on weekends.<br />\n                All incomplete (result not entered) challenges will be cancelled on Friday at 5:00pm.<br />\n                Players can resume issuing challenges on Monday.</p>\n            </div>\n            <div class="col-sm-4 m-b-25" vertilize>\n                <p class="c-black">Disputes</p>\n                <p>If you have a dispute regarding a challenge or rules violations you can address it with a competition admin.</p>\n                <p>You competition admin(s) are:</p>\n                <ul>\n                    <li ng-repeat="admin in vm.competition.admins">{{admin.displayName}}</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("competitions/components/pyramid.html",'<div class="container pyramid-container">\n    <div class="card">\n        <!-- Competition -->\n        <div class="ms-body">\n            <div class="listview lv-message">\n                <div class="lv-header-alt clearfix">\n                    <div class="lvh-label hidden-xs">{{vm.competition.activity}}</div>\n                    <ul class="lv-actions actions">\n                        <li ng-if="vm.currentUserIsAdmin">\n                            <a ui-sref="competitions.admin({competitionId: vm.competitionId})">\n                                <i class="zmdi zmdi-edit"></i>\n                            </a>\n                        </li>\n                        <li>\n                            <a ui-sref="competitions.stats({competitionId: vm.competitionId})">\n                                <i class="zmdi zmdi-trending-up"></i>\n                            </a>\n                        </li>\n                        <li ng-if="vm.currentUserIsOnCompetition">\n                            <a href="" ng-click="vm.confirmRemoveCurrentUserFromCompetition()">\n                                <i class="zmdi zmdi-close-circle-o"></i>\n                            </a>\n                        </li>\n                        <li ng-if="!vm.currentUserIsOnCompetition && !vm.currentUserIsPending && vm.numberOfRealPlayers < vm.maxPlayers">\n                            <a href="" ng-click="vm.addCurrentUserToCompetition()">\n                                <i class="zmdi zmdi-account-add"></i>\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n                <div class="lv-body pyramid">\n                    <div ng-repeat="level in vm.levels" class="level level-{{level}}">\n                        <div class="level-marker">{{level}}</div>\n                        <div ng-repeat="player in vm.competition.players" ng-if="player.level === level" class="pyramid-block" ng-class="player.class">\n                            <!-- Player info -->\n                            <a class="player-name" ui-sref="player.competitions({userId: player._id})" ng-if="player.position !== 99">{{player.displayName}}</a>\n                            <div class="player-name" ng-if="player.position === 99">{{player.displayName}}</div>\n                            <div ng-if="player.displayName !== player.firstName + \' \' + player.lastName" class="player-name">{{player.firstName}} {{player.lastName}}</div>\n\n                            <!-- Info tray -->\n                            <div class="tray"\n                                ng-class="{\'open\': player.expandTray}"\n                                ng-if="player.available || player.waitUntil || player.hold || player._id === vm.currentUserPlayer._id || player.challenge || (!vm.currentUserIsOnCompetition && player.position === 99)">\n                                <!-- Tray expand icon -->\n                                <i class="zmdi zmdi-chevron-up cur-pointer tray-expander"\n                                    ng-class="player.expandTray ? \'zmdi-chevron-down\' : \'zmdi-chevron-up\'"\n                                    ng-click="player.expandTray = !player.expandTray"\n                                    ng-if="player._id === vm.currentUserPlayer._id && vm.hasActiveChallenge"></i>\n                                <!-- Active challenge time -->\n                                <div ng-if="player.challenge && player.challenge.position === \'opponent\' && player.challenge.expires" ng-class="{\'c-red\': player.challenge.expires < .5}">\n                                    <i class="zmdi zmdi-timer"></i>\n                                    <span ng-if="player.challenge.expires >= .5">{{player.challenge.expires | number: 0}}hrs</span>\n                                    <span ng-if="player.challenge.expires < .5">Forfeit Soon</span>\n                                </div>\n                                <!-- Show create challenge modal -->\n                                <div class="c-green cur-pointer"\n                                    ng-if="player.available"\n                                    ng-click="vm.confirmCreateChallenge(player)">Challenge Player</div>\n                                <!-- Display who this person has challenged -->\n                                <div\n                                    ng-if="player.challenge && player.challenge.position === \'challenger\'">\n                                    <i class="zmdi zmdi-triangle-up"></i> {{player.challenge.opponent}}</div>\n                                <!-- Show complete challenge modal -->\n                                <div class="cur-pointer c-blue"\n                                    ng-if="vm.hasActiveChallenge && player._id === vm.currentUserPlayer._id"\n                                    ng-click="vm.playerClick(player)">\n                                    <i class="zmdi zmdi-check sm"></i> Match Result</div>\n                                <!-- Show cancel active challenge modal -->\n                                <div class="cur-pointer c-red"\n                                    ng-if="vm.hasActiveChallenge && player._id === vm.currentUserPlayer._id && player.challenge.position === \'challenger\'"\n                                    ng-click="vm.confirmCancelChallenge()">\n                                        <i class="zmdi zmdi-close-circle-o sm"></i> Cancel Challenge</div>\n                                <!-- Show forfeit active challenge modal -->\n                                <div class="cur-pointer c-red"\n                                    ng-if="player._id === vm.currentUserPlayer._id && vm.hasActiveChallenge && player.challenge.position === \'opponent\'"\n                                    ng-click="vm.confirmForfeitChallenge(player)">\n                                    <i class="zmdi zmdi-flag sm"></i> Forfeit Match</div>\n                                <!-- Join the competition -->\n                                <div class="cur-pointer"\n                                    ng-if="!vm.currentUserIsOnCompetition && player.position === 99"\n                                    ng-click="vm.playerClick(player)">Join</div>\n                                <!-- Show waiting period -->\n                                <div class="c-orange"\n                                    ng-if="player.waitUntil">\n                                    <i class="zmdi zmdi-time-countdown"></i> {{player.waitUntil}}</div>\n                                <!-- Show on hold modal -->\n                                <div class="cur-pointer c-blue"\n                                    ng-if="!vm.hasActiveChallenge && player._id === vm.currentUserPlayer._id && !player.hold"\n                                    ng-click="vm.putPlayerOnHold(player)">\n                                    <i class="zmdi zmdi-alert-octagon"></i> Put On Hold</div>\n                                <!-- Show holding period -->\n                                <div class="c-orange"\n                                    ng-if="player.hold">\n                                    <i class="zmdi zmdi-alert-octagon"></i> On Hold\n                                    <i class="zmdi zmdi-close-circle-o cancel cur-pointer"\n                                        ng-if="player._id === vm.currentUserPlayer._id"\n                                        ng-click="vm.cancelPlayerHold(player)"></i>\n                                </div>\n\n                            </div>\n                            <!-- Complete a challenge modal -->\n                            <div class="complete-challenge-modal" ng-if="player._id === vm.currentUserPlayer._id && player.showChallengeModal">\n                                <i class="zmdi zmdi-close" ng-click="vm.playerClick(player)"></i>\n                                <p class="m-b-5 m-t-5">Your Result</p>\n                                <div class="btn-container">\n                                    <button class="btn btn-success waves-effect" ng-click="vm.completeChallenge(true)">Won</button>\n                                    <button class="btn btn-danger waves-effect" ng-click="vm.completeChallenge(false)">Lost</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("competitions/components/update-admins.html",'<div class="card">\n    <div class="card-header ch-alt">\n        <h2>Update Admins</h2>\n    </div>\n    <div class="card-body card-padding-sm">\n        <div class="row swapper">\n            <div class="col-sm-5 m-b-30">            \n                <label>Available Admins</label>\n                <ul>\n                    <li ng-repeat="admin in vm.availableAdmins" ng-click="vm.addAdmin(admin)">\n                        <span class="name">{{admin.firstName}} {{admin.lastName}}</span>\n                    </li>\n                </ul>\n            </div>\n            <span class="col-sm-1">\n                <i class="zmdi zmdi-swap hidden-xs"></i>\n                <i class="zmdi zmdi-swap-vertical visible-xs"></i>\n            </span>\n            <div class="col-sm-6 m-b-30">\n                <label>Competition Admins</label>\n                <ul>\n                    <li ng-repeat="admin in vm.addedAdmins">\n                        <span class="position"><i class="zmdi zmdi-star" ng-if="admin.primary"></i></span>\n                        <span class="name">{{admin.firstName}} {{admin.lastName}}</span>\n                        <i class="zmdi zmdi-close-circle-o" ng-click="vm.removeAdmin(admin, $index)" ng-if="!admin.primary && vm.userIsPrimaryAdmin"></i>\n                    </li>\n                </ul>\n            </div>\n            <div class="btns-group text-center">\n                <button type="submit" class="btn btn-primary" ng-click="vm.updateCompetition()" ng-disabled="vm.disableSubmit">\n                    <i class="zmdi zmdi-check"></i> Update Admins\n                </button>\n                <button class="btn btn-default" ng-click="vm.cancelUpdate()" ng-disabled="vm.disableSubmit">\n                    <i class="zmdi zmdi-close"></i> Cancel\n                </button>\n            </div>\n        </div>       \n    </div> \n</div>'),e.put("competitions/components/update-players.html",'<div class="card">\n    <div class="card-header ch-alt">\n        <h2>Update Palyers</h2>\n    </div>\n    <div class="card-body card-padding-sm">\n        <div class="row swapper {{vm.competition.type}}swap">\n            <div class="col-sm-5 m-b-30">            \n                <label>Available Players</label>\n                <ul>\n                    <li ng-repeat="player in vm.availablePlayers" ng-click="vm.addPlayer(player)">\n                        <span class="name">{{player.firstName}} {{player.lastName}}</span>\n                    </li>\n                </ul>\n            </div>\n            <span class="col-sm-1">\n                <i class="zmdi zmdi-swap hidden-xs"></i>\n                <i class="zmdi zmdi-swap-vertical visible-xs"></i>\n            </span>\n            <div class="col-sm-6 m-b-30">\n                <label>Competition Players</label>\n                <ul sv-root sv-part="vm.addedPlayers" sv-on-sort="vm.reorderPlayers()">\n                    <li ng-repeat="player in vm.addedPlayers" class="sortable added-player" ng-class="\'added-player\' + ($index + 1)" sv-element>\n                        <span class="position">{{player.position}}</span>\n                        <span class="name" sv-handle>{{player.firstName}} {{player.lastName}}</span>\n                        <i class="zmdi zmdi-close-circle-o" ng-click="vm.removePlayer(player, $index)"></i>\n                    </li>\n                </ul>\n            </div>\n            <div class="btns-group text-center">\n                <button type="submit" class="btn btn-primary" ng-click="vm.updateCompetition()" ng-disabled="vm.disableSubmit">\n                    <i class="zmdi zmdi-check"></i> Update Players\n                </button>\n                <button class="btn btn-default" ng-click="vm.cancelUpdate()" ng-disabled="vm.disableSubmit">\n                    <i class="zmdi zmdi-close"></i> Cancel\n                </button>\n            </div>\n        </div>\n    </div> \n</div>'),e.put("competitions/components/versus.html",'<div class="container versus-container">\n    <div class="card">\n        <!-- Competition -->\n        <div class="ms-body">\n            <div class="listview lv-message">\n                <div class="lv-header-alt clearfix">\n                    <div class="lvh-label hidden-xs">{{vm.competition.activity}}</div>\n                    <ul class="lv-actions actions">\n                        <li ng-if="vm.currentUserIsAdmin">\n                            <a ui-sref="competitions.admin({competitionId: vm.competitionId})">\n                                <i class="zmdi zmdi-edit"></i>\n                            </a>\n                        </li>\n                        <li>\n                            <a ui-sref="competitions.stats({competitionId: vm.competitionId})">\n                                <i class="zmdi zmdi-trending-up"></i>\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n                <div class="lv-body versus" vertilize-container>\n                    <div class="complete-challenege-modal {{vm.competition.class}}" ng-if="vm.hasActiveChallenge" ng-click="vm.toggleControls()" ng-class="{\'show-controls\': vm.showControls}">\n                        <i class="zmdi zmdi-close-circle-o" ng-if="vm.showControls"></i>\n                        <div class="expire-countdown" ng-if="vm.challengeExpireTime && !vm.showControls">\n                            <i class="zmdi zmdi-time" ng-if="vm.activeChallenge.opponent.team === 1"></i>\n                            <span>{{vm.challengeExpireTime | number: 0}}hrs</span>\n                            <i class="zmdi zmdi-time" ng-if="vm.activeChallenge.opponent.team === 2"></i>\n                        </div>\n                        <div class="complete-challenge-controls" ng-if="vm.showControls">\n                            <p>Who won?</p>\n                            <div class="btn-container">\n                                <button class="btn btn-primary btn-lg" type="button" ng-click="vm.completeChallenge(1)">Team 1</button>\n                                <button class="btn btn-primary btn-lg" type="button" ng-click="vm.completeChallenge(2)">Team 2</button>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="versus-team {{team.class}}" ng-repeat="team in vm.competition.teams" ng-click="vm.showChallengeModal = !vm.showChallengeModal" ng-class="{\'available\': !vm.hasActiveChallenge && vm.currentUserIsOnCompetition && vm.currentUserPlayer.position !== $index + 1}" vertilize>\n                        <div ng-if="!vm.singlePlayerTeams" class="team-name">Team {{$index + 1}}</div>\n                        <div ng-repeat="player in team.players" class="versus-player" ng-class="player.class">\n                            <div class="player-name">{{player.displayName}}</div>\n                            <div ng-if="player.displayName !== player.firstName + \' \' + player.lastName" class="player-name">{{player.firstName}} {{player.lastName}}</div>\n                        </div>\n                        <div class="create-challenge-modal" ng-if="!vm.hasActiveChallenge && vm.currentUserIsOnCompetition && vm.currentUserPlayer.position !== $index+1 && vm.showChallengeModal">\n                            <i class="zmdi zmdi-close-circle-o"></i>\n                            <button class="btn btn-success btn-lg waves-effect" ng-click="vm.createChallenge($index + 1)">Challenge?</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("competitions/views/competition-admin.html",'<div class="container">\n    <div class="block-header">\n        <h2>{{vm.competition.name}} Admin</h2>\n        <ul class="actions">\n            <li>\n                <a ui-sref="competitions.view({competitionId: vm.competitionId})">\n                    <i ng-if="vm.competition.type===\'pyramid\'" class="zmdi zmdi-triangle-up"></i>\n                    <i ng-if="vm.competition.type===\'versus\'" class="zmdi zmdi-graphic-eq"></i>\n                </a>\n            </li>\n            <li>\n                <a ui-sref="competitions.stats({competitionId: vm.competitionId})">\n                    <i class="zmdi zmdi-trending-up"></i>\n                </a>\n            </li>\n        </ul>\n    </div>\n    <div wpm-active-challeneges competition="vm.competition" allow-delete="vm.isAdmin"></div>\n    <div wpm-completed-challeneges competition="vm.competition" allow-delete="vm.isAdmin"></div>\n    <div wpm-pending-players competition="vm.competition"></div>\n    <div class="row">\n        <div class="col-sm-4">\n            <div class="card">\n                <div class="card-header ch-alt">\n                    <h2>Delete Competition</h2>\n                </div>\n                <div class="card-body card-padding-sm text-center">\n                    <button class="btn btn-danger" ng-click="vm.deleteCompetition()">Delete</button>\n                </div>\n            </div>\n        </div>\n        <div class="col-sm-4">\n            <div class="card">\n                <div class="card-header ch-alt">\n                    <h2>Player Joins</h2>\n                </div>\n                <div class="card-body card-padding-sm">\n                    <div class="checkbox player-joins-checkbox">\n                        <label>\n                            <input type="checkbox" value="" ng-model="vm.competition.restrictJoins" ng-change="vm.updateCompetitionRestrictJoins()">\n                            <i class="input-helper"></i>\n                            Admins must approve join requets\n                        </label>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="col-sm-4">\n            <div class="card">\n                <div class="card-header ch-alt">\n                    <h2>Private Status</h2>\n                </div>\n                <div class="card-body card-padding-sm">\n                    <div class="checkbox player-joins-checkbox">\n                        <label>\n                            <input type="checkbox" value="" ng-model="vm.competition.private" ng-change="vm.updateCompetitionPrivate()">\n                            <i class="input-helper"></i>\n                            Make this competition private\n                        </label>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div wpm-update-players competition="vm.competition"></div>\n    <div wpm-update-admins competition="vm.competition"></div>\n</div>'),e.put("competitions/views/competition-stats.html",'<div class="container">\n    <div class="block-header">\n        <h2>{{vm.competition.name}}</h2>\n        <ul class="actions">\n            <li>\n                <a ui-sref="competitions.view({competitionId: vm.competitionId})">\n                    <i ng-if="vm.competition.type===\'pyramid\'" class="zmdi zmdi-triangle-up"></i>\n                    <i ng-if="vm.competition.type===\'versus\'" class="zmdi zmdi-graphic-eq"></i>\n                </a>\n            </li>\n        </ul>\n    </div>\n    <div wpm-completed-challeneges competition="vm.competition" challenges-per-page="10"></div>\n    <div ng-if="vm.competition.type === \'pyramid\'" ng-repeat="player in vm.competition.players | orderObjectBy: \'position\'" wpm-player-overall-results player="player"></div>\n    <div ng-if="vm.competition.type === \'versus\'" ng-repeat="team in vm.teams | orderObjectBy: \'number\'" wpm-team-overall-results competition="vm.competition" challenges="vm.challenges" team="team.number"></div>\n</div>'),e.put("competitions/views/competition.html",'<div class="container">\n    <div class="block-header">\n        <h2>{{vm.competition.name}}</h2>\n    </div>\n</div>\n<div wpm-pyramid ng-if="vm.competitionId && vm.competition.type === \'pyramid\'" competition="vm.competition"></div>\n<div wpm-versus ng-if="vm.competitionId && vm.competition.type === \'versus\'" competition="vm.competition"></div>\n<div class="container">\n    <div class="row">\n        <div class="col-md-6">\n            <div wpm-active-challeneges competition="vm.competition" challenges-per-page="5"></div>\n        </div>\n        <div class="col-md-6">\n            <div wpm-completed-challeneges competition="vm.competition" challenges-per-page="5"></div>\n        </div>\n    </div>\n    <div class="row">\n        <div class="col-md-12">\n            <div wpm-pyramid-rules ng-if="vm.competition.type === \'pyramid\'" competition="vm.competition"></div>\n        </div>\n    </div>\n</div>'),e.put("competitions/views/competitions.html",'<div class="container">\n    <div class="block-header">\n        <h2>Active Competitions</h2>\n    </div>\n    <div class="row" ng-if="vm.competitions.length > 0">\n        <div class="col-sm-4" ng-repeat="competition in vm.competitions" wpm-competition-compact competition="competition"></div>\n    </div>\n    <div class="card" ng-if="vm.competitions.length === 0">\n        <div class="card-body card-padding-sm">\n            <p>No competitions yet :(</p>\n        </div> \n    </div>\n</div>'),e.put("competitions/views/create-competition.html",'<div class="container">\n    <div class="block-header">\n        <h2>Create a New Competition</h2>\n    </div>\n    <div class="card">\n        <div class="card-header">\n            <h2>Competition Details</h2>\n        </div>\n        <div class="card-body card-padding">\n            <form name="createCompetitionForm" class="create-competition-form" ng-submit="vm.createCompetition(vm.newCompetition)" novalidate>\n                <div class="row">\n                    <div class="col-sm-4">\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control" ng-model="vm.newCompetition.name" placeholder="Competition Name" required>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-sm-4">\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control" ng-model="vm.newCompetition.activity" placeholder="Competition Activity" required>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-sm-4">\n                        <div class="form-group">\n\t\t\t\t\t\t\t<select class="w-100" chosen data-placeholder-text-single="\'Competition Type\'" disable-search="true" ng-model="vm.newCompetition.type" ng-options="competitionType as competitionType for competitionType in vm.competitionTypes" ng-change="vm.reorderPlayers()" required>\n\t\t\t\t\t\t\t\t<option value=""></option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="col-sm-5 m-t-5">\n                        <label class="m-b-10">Forfeit Days:\n                            <span ng-if="vm.newCompetition.forfeitDays === 0"> No Limit</span>\n                            <span ng-if="vm.newCompetition.forfeitDays > 0">{{ vm.newCompetition.forfeitDays }}</span>\n                        </label>\n                        <div class="input-slider m-b-30" slider ng-model="vm.newCompetition.forfeitDays" start="0" end="5" step="1" data-is-color="blue"></div>\n                    </div>\n                    <div class="col-sm-6 col-sm-offset-1 m-t-5" ng-if="vm.newCompetition.type !== \'versus\'">\n                        <label class="m-b-10">Rechallenge Wait Days:\n                            <span ng-if="vm.newCompetition.waitingPeriodDays === 0"> No Limit</span>\n                            <span ng-if="vm.newCompetition.waitingPeriodDays > 0">{{ vm.newCompetition.waitingPeriodDays }}</span>\n                        </label>\n                        <div class="input-slider m-b-30" slider ng-model="vm.newCompetition.waitingPeriodDays" start="0" end="5" step="1" data-is-color="blue"></div>\n                    </div>\n                </div>\n                <div class="row swapper {{vm.newCompetition.type}}swap">\n                    <div class="col-sm-5 m-b-30">\n                        <label>Available Players</label>\n                        <ul>\n                            <li ng-repeat="player in vm.availablePlayers" ng-click="vm.addPlayer(player)">\n                                <span class="name">{{player.firstName}} {{player.lastName}}</span>\n                            </li>\n                        </ul>\n                    </div>\n                    <span class="col-sm-1">\n                        <i class="zmdi zmdi-swap hidden-xs"></i>\n                        <i class="zmdi zmdi-swap-vertical visible-xs"></i>\n                    </span>\n                    <div class="col-sm-6 m-b-30">\n                        <label>Competition Players</label>\n                        <ul sv-root sv-part="vm.addedPlayers" sv-on-sort="vm.reorderPlayers()">\n                            <li ng-repeat="player in vm.addedPlayers" class="sortable added-player" ng-class="\'added-player\' + ($index + 1)" sv-element>\n                                <span class="position">{{player.position}}</span>\n                                <span class="name" sv-handle>{{player.firstName}} {{player.lastName}}</span>\n                                <i class="zmdi zmdi-close-circle-o" ng-click="vm.removePlayer(player, $index)"></i>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <div class="m-b-30">\n                    <div class="checkbox m-b-15">\n                        <label>\n                            <input type="checkbox" value="" ng-model="vm.newCompetition.restrictJoins">\n                            <i class="input-helper"></i>\n                            Admins must approve join requets\n                        </label>\n                    </div>\n                </div>\n                <div class="m-b-30">\n                    <div class="checkbox m-b-15">\n                        <label>\n                            <input type="checkbox" value="" ng-model="vm.newCompetition.private">\n                            <i class="input-helper"></i>\n                            Make this competitions private\n                        </label>\n                    </div>\n                </div>\n                <div class="m-b-30">\n                    <div class="checkbox m-b-15">\n                        <label>\n                            <input type="checkbox" value="" ng-model="vm.newCompetition.allowWeekendChallenges">\n                            <i class="input-helper"></i>\n                            Allow weekend challenges\n                        </label>\n                    </div>\n                </div>\n                <div class="btns-group text-center">\n                    <button type="submit" class="btn btn-primary" ng-disabled="createCompetitionForm.$invalid">\n                        <i class="zmdi zmdi-check"></i> Create Competition\n                    </button>\n                    <a class="btn" ui-sref="competitions">\n                        <i class="zmdi zmdi-close"></i> Cancel\n                    </a>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>'),
e.put("competitions/views/my-competitions.html",'<div class="container">\n    <div class="block-header">\n        <h2>My Competitions</h2>\n    </div>\n    <div class="card" ng-if="vm.competitions.length === 0">\n        <div class="card-header">\n            <h2>Sorry, you don\'t have any competitions!</h2>\n        </div>\n        <div class="card-body card-padding">\n            <p>Create a new competition or add yourself to an existing one.</p>\n        </div>\n    </div>\n    <div class="row" vertilize-container>\n        <div class="col-sm-4" ng-repeat="competition in vm.competitions" wpm-competition-compact competition="competition" vertilize></div>\n    </div>\n</div>'),e.put("players/views/player-admin.html",'<div class="container">\n    <div class="row">\n        <div class="col-md-6 col-md-offset-3">\n            <div class="block-header">\n                <h2>User Information</h2>\n            </div>\n            <div class="card">\n                <div class="card-header">\n                    <h2>Update User Info</h2>\n                </div>\n                <div class="card-body card-padding">\n                    <form role="form" name="vm.userForm" ng-submit="vm.updateUser(vm.user)" novalidate>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control fg-input" ng-model="vm.user.firstName" placeholder="First Name">\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control fg-input" ng-model="vm.user.lastName" placeholder="Last Name">\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="text" class="form-control fg-input" ng-model="vm.user.displayName" placeholder="Display Name">\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="password" class="form-control fg-input" ng-model="vm.user.password" placeholder="Password">\n                            </div>\n                        </div>\n                        <div class="form-group m-b-30">\n                            <div class="fg-line">\n                                <input type="password" class="form-control fg-input" ng-model="vm.user.confirmPassword" placeholder="Confirm Password">\n                            </div>\n                        </div>\n                        <div class="text-center">\n                            <button type="submit" class="btn btn-primary waves-effect" ng-disabled="vm.userForm.$invalid || !vm.userForm.$dirty">Update</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("players/views/player-competition.html",'<div class="container">\n    <div class="block-header">\n        <h2>{{vm.player.displayName}}\n            <small>Statistics</small>\n        </h2>\n    </div>\n    <div class="card">\n        <div class="card-header">\n                    <h2>Overall Statistics</h2>\n                </div>\n        <div class="card-body card-padding">\n            <div class="row">\n                <div class="col-md-6">\n                    <canvas class="chart chart-bar" chart-data="vm.overall" chart-labels="vm.chart.labels" chart-colors="vm.chart.colors" chart-options="vm.overallChart.options"></canvas>\n                </div>\n                <div class="col-md-3">\n                    <div class="p-15 text-center" ng-class="vm.streak.type === \'winning\' ? \'bgm-green\' : \'bgm-red\'">\n                        <div class="c-white m-b-5"><span class="text-capitalize">{{vm.streak.type}}</span> Streak</div>\n                        <h2 class="m-0 c-white f-300">{{vm.streak.value}}</h2>\n                    </div>\n                    <div class="bg-app-gray p-15 text-center">\n                        <div class="c-green m-b-5">Total Wins</div>\n                        <h2 class="m-0 c-green f-300">{{vm.wins.total}}</h2>\n                    </div>\n                    <div class="bg-app-gray p-15 text-center">\n                        <div class="c-red m-b-5">Total Loses</div>\n                        <h2 class="m-0 c-red f-300">{{vm.loses.total}}</h2>\n                    </div>\n                </div>\n                <div class="col-md-3">\n                    <div class="bg-app-gray p-10 text-center">\n                        <h5>Moving Up</h5>\n                        <div>Wins: {{vm.wins.asChallenger}}</div>\n                        <div>Loses: {{vm.loses.asChallenger}}</div>\n                    </div>\n                    <div class="bg-app-gray p-10 text-center">\n                        <h5>Defending</h5>\n                        <div>Wins: {{vm.wins.asOpponent}}</div>\n                        <div>Loses: {{vm.loses.asOpponent}}</div>\n                    </div>\n                    <div class="bg-app-gray p-10 text-center">\n                        <h5>Forfeits</h5>\n                        <div>Wins: {{vm.wins.byForfeit}}</div>\n                        <div>Loses: {{vm.loses.byForfeit}}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class="row">\n        <div class="col-md-3" ng-repeat="player in vm.otherPlayers">\n            <div class="card">\n                <div class="card-header">\n                    <h2><div class="nowrap-ellip">vs. {{player.displayName}}</div>\n                        <small>{{player.firstName}} {{player.lastName}}</small>\n                    </h2>\n                </div>\n                <div class="card-body card-padding">\n                    <canvas class="chart chart-pie" chart-data="player.data" chart-labels="vm.chart.labels" chart-colors="vm.chart.colors" chart-options="vm.chart.options"></canvas>\n                    <div class="flc-pie">\n                        <table>\n                            <tbody>\n                                <tr>\n                                    <td class="legendColorBox">\n                                        <div>\n                                            <div class="wins"></div>\n                                        </div>\n                                    </td>\n                                    <td class="legendLabel">Wins: <b>{{player.wins}}</b></td>\n                                    <td class="legendColorBox">\n                                        <div>\n                                            <div class="loses"></div>\n                                        </div>\n                                    </td>\n                                    <td class="legendLabel">Loses: <b>{{player.loses}}</b></td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),e.put("players/views/player-competitions.html",'<div class="container">\n    <div class="block-header">\n        <h2>Player Competitions</h2>\n    </div>\n    <div class="row">\n        <div class="col-md-6" ng-if="vm.pyramids.length > 0">\n            <div class="card">\n                <div class="card-header">\n                    <h2>Pyramid Competitions</h2>\n                </div>\n                <div class="card-body card-padding">\n                    <ul class="clist clist-pyramid">\n                        <li ng-repeat="pyramid in vm.pyramids">\n                            <a ui-sref="player.competition({userId: vm.userId, competitionId: pyramid._id})">{{pyramid.name}}</a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n        <!--\n        <div class="col-md-6" ng-if="vm.versus.length > 0">\n            <div class="card">\n                <div class="card-header">\n                    <h2>Versus Competitions</h2>\n                </div>\n                <div class="card-body card-padding">\n                    <ul class="clist clist-pyramid">\n                        <li ng-repeat="v in vm.versus">\n                            <a ui-sref="player.competition({userId: vm.userId, competitionId: v._id})">{{v.name}}</a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n        -->\n    </div>\n</div>')}]),function(){"use strict";function e(e,n,i){function t(){a()}function a(){n.getAllUsers().then(function(e){c.users=e.data,s=_.cloneDeep(c.users)})}function l(e){c.selectedUser=e,r=_.cloneDeep(e)}function o(e){var t=[];if(_.forEach(s,function(e){t.push(e.displayName.toLowerCase())}),e.firstName.length<1||e.lastName.length<1||e.displayName.length<1)i.error("Don't leave names blank!  How will people know who you are?");else if(e.displayName!==r.displayName&&_.indexOf(t,e.displayName.toLowerCase())>-1)i.error("Sorry, someone else is already using that display name");else{var o={_id:e._id,firstName:e.firstName,lastName:e.lastName,displayName:e.displayName};n.updateUser(o).then(function(){i.success("User information has been updated"),l(),a()})}}var s=[],r=null,c=this;c.users=null,c.selectedUser=null,c.selectUser=l,c.updateUser=o,c.userForm={},t()}e.$inject=["identityService","userService","notifyService"],angular.module("app").controller("EditUserAdminCtrl",e)}(),function(){"use strict";function e(e,n,i){function t(){}function a(t,a){n.authenticateUser(t,a).then(function(n){n?"unverified"===n?i.error("You must verify your email before you can login"):e.previous?(e.go(e.previous,e.prevParams),e.previous=null,e.prevParams=null):e.go("competitions.myCompetitions"):i.error("Username / password combinaiton incorrect")})}var l=this;l.login=a,t()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("LoginCtrl",e)}(),function(){"use strict";function e(e,n,i,t,a,l){function o(){l.isAuthenticated()?e.go("home"):n.userId&&n.verificationToken&&i.verifyUser(n.userId,n.verificationToken).then(function(e){e.data&&(c.verified=!0)})}function s(n){i.generatePasswordResetLink(n).then(function(n){n.data?(t.success("Please check your email for a password reset link"),e.go("home")):t.error("Could not find that email address")})}function r(l){l.password!==l.confirmPassword?t.error("Passwords don't match!"):i.resetPassword(n.userId,n.verificationToken,l.password).then(function(n){n.data&&a.authenticateUser(n.data.username,l.password).then(function(n){e.go("home")})})}var c=this;c.username="",c.verified=!1,c.resetPasswordForm={},c.generatePasswordResetLink=s,c.resetPassword=r,o()}e.$inject=["$state","$stateParams","userService","notifyService","authService","identityService"],angular.module("app").controller("PasswordResetCtrl",e)}(),function(){"use strict";function e(e,n,i){function t(){}function a(t){t.password!==t.confirmPassword?i.error("Passwords don't match!"):(t.displayName||(t.displayName=t.firstName+" "+t.lastName),n.createUser(t).then(function(){e.go("verify")}))}var l=this;l.register=a,t()}e.$inject=["$state","authService","notifyService"],angular.module("app").controller("RegisterCtrl",e)}(),function(){"use strict";function e(e,n,i){function t(){n.userId&&n.verificationToken&&(a.verifying=!0,a.verified=null,i.verifyUser(n.userId,n.verificationToken).then(function(e){e.data?a.verified=!0:a.verified=!1}))}var a=this;a.verified=void 0,a.verifying=!1,t()}e.$inject=["$state","$stateParams","userService"],angular.module("app").controller("VerificationCtrl",e)}(),function(){"use strict";function e(e,n,i,t,a,l){function o(e,t){var l=i.defer();return n.post("/login",{username:e,password:t}).then(function(e){e.data.success?(a.currentUser=e.data.user,l.resolve(!0)):"unverified"===e.data.message?l.resolve("unverified"):l.resolve(!1)}),l.promise}function s(e){var t=i.defer();return n.post("/api/users",{userData:e}).then(function(e){e.data?t.resolve(!0):t.resolve(!1)},function(e){"Error: Email already in use"===e.data.reason&&l.error("Sorry, an account already exists with that email address.")}),t.promise}function r(){var t=i.defer();return n.post("/logout",{logout:!0}).then(function(){a.currentUser=void 0,t.resolve(),e.go("home")}),t.promise}function c(e){return!!a.isAuthorized(e)||i.reject("not authorized")}function d(){return!!a.isAuthenticated()||i.reject("not authorized")}var m={authenticateUser:o,createUser:s,logout:r,authorizeCurrentUserForRoute:c,authenticatedUserForRoute:d};return m}e.$inject=["$state","$http","$q","userService","identityService","notifyService"],angular.module("app").factory("authService",e)}(),function(){"use strict";function e(e){function n(){return e.get("/api/users").then(function(e){return e})}function i(){return e.get("/api/users/verified").then(function(e){return _.forEach(e.data,function(e){e.displayName||(e.displayName=e.firstName+" "+e.lastName)}),e})}function t(n,i){return e.get("/api/user/verification",{params:{userId:n,verificationToken:i}})}function a(n){return e.get("/api/user/password/link",{params:{username:n}})}function l(n,i,t){return e.put("/api/user/password/reset",{userId:n,verificationToken:i,password:t})}function o(n){return e.put("/api/user",{user:n})}var s={getAllUsers:n,getVerifiedUsers:i,verifyUser:t,generatePasswordResetLink:a,resetPassword:l,updateUser:o};return s}e.$inject=["$http"],angular.module("app").factory("userService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{competition:"=",allowDelete:"=",numberOfChallenges:"@",challengesPerPage:"@"},templateUrl:"challenges/components/active-challenges.html"};return e}function n(e,n,i){function t(){e.$watch("vm.competition",function(){o.competition&&a()})}function a(){n.getActiveChallengesByCompetition(o.competition._id).then(function(e){o.challenges=e.data,e.data.length>0&&(o.tableData=new i({page:1,count:o.challengesPerPage||5},{counts:[],total:o.challenges.length,getData:function(e,n){e.resolve(o.challenges.slice((n.page()-1)*n.count(),n.page()*n.count()))}}),_.forEach(o.challenges,function(e){if("versus"===e.type&&(o.competition.players.length>2?(e.challenger.displayName="Team "+e.challenger.team,e.opponent.displayName="Team "+e.opponent.team):(e.challenger.displayName=_.find(o.competition.players,{position:e.challenger.team}).displayName,e.opponent.displayName=_.find(o.competition.players,{position:e.opponent.team}).displayName)),0!==e.timeLimit){var n=moment().diff(moment(e.created).add(e.timeLimit,"d"))*-1;e.expires=moment.duration(n).asHours()}}))})}function l(e,i){swal({title:"Delete Challenge Result?",text:"It'll be like it never happened",type:"error",showCancelButton:!0,confirmButtonText:"Delete",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){n.deleteChallenge(o.competition._id,e).then(function(){o.challenges.splice(i,1)})})}var o=this;o.challenges=null,o.deleteChallenge=l,t()}n.$inject=["$scope","challengesService","ngTableParams"],angular.module("app").directive("wpmActiveChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{competition:"=",allowDelete:"=",numberOfChallenges:"@",challengesPerPage:"@"},templateUrl:"challenges/components/completed-challenges.html"};return e}function n(e,n,i,t){function a(){e.$watch("vm.competition",function(){s.competition&&l()})}function l(){i.getCompletedChallengesByCompetition(s.competition._id,s.numberOfChallenges).then(function(e){s.challenges=e.data,e.data.length>0&&(s.tableData=new t({page:1,count:s.challengesPerPage||5},{counts:[],total:s.challenges.length,getData:function(e,n){e.resolve(s.challenges.slice((n.page()-1)*n.count(),n.page()*n.count()))}}),_.forEach(s.challenges,function(e){e.loser="challenger"===e.winner?"opponent":"challenger","versus"===e.type&&(s.competition.players.length>2?(e.challenger.displayName="Team "+e.challenger.team,e.opponent.displayName="Team "+e.opponent.team):(e.challenger.displayName=_.find(s.competition.players,{position:e.challenger.team}).displayName,e.opponent.displayName=_.find(s.competition.players,{position:e.opponent.team}).displayName)),e.whenCompleted=moment(e.completed).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd",sameElse:"MMM DD, YYYY"})}))})}function o(e,n){swal({title:"Delete Challenge Result?",text:"You'll still need to reorder the players on your own",type:"error",showCancelButton:!0,confirmButtonText:"Delete",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){i.deleteChallenge(s.competition._id,e).then(function(){s.challenges.splice(n,1)})})}var s=this;s.challenges=null,s.deleteChallenge=o,a()}n.$inject=["$scope","$state","challengesService","ngTableParams"],angular.module("app").directive("wpmCompletedChalleneges",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{player:"="},templateUrl:"challenges/components/player-overall-results.html"};return e}function n(e){function n(){e.$watch("vm.player.results",function(){l.player&&(i(l.player),t(l.player),a(l.player))})}function i(e){for(var n=[],i=0;i<l.maxLevels;i++)n.push(i*(i+1)/2+1);e.level=n.length;for(var t=0;t<n.length;t++)if(e.position<n[t+1]){e.level=n.indexOf(n[t])+1;break}}function t(e){var n,i=0,t=!0;_.forEach(e.results,function(a){t&&("challenger"===a.winner&&a.challenger._id===e._id||"opponent"===a.winner&&a.opponent._id===e._id?"losing"!==n?(i+=1,n="winning"):t=!1:("opponent"===a.winner&&a.challenger._id===e._id||"challenger"===a.winner&&a.opponent._id===e._id)&&("winning"!==n?(i+=1,n="losing"):t=!1)),l.streak={type:n,value:i}})}function a(e){l.wins.asOpponent=_.size(_.filter(e.results,function(n){return n.opponent._id===e._id&&"opponent"===n.winner})),l.wins.asChallenger=_.size(_.filter(e.results,function(n){return n.challenger._id===e._id&&"challenger"===n.winner})),l.wins.total=l.wins.asChallenger+l.wins.asOpponent,l.wins.byForfeit=_.size(_.filter(e.results,function(n){return n.forfeit&&(n.challenger._id===e._id&&"challenger"===n.winner||n.opponent._id===e._id&&"opponent"===n.winner)})),l.loses.asOpponent=_.size(_.filter(e.results,function(n){return n.opponent._id===e._id&&"challenger"===n.winner})),l.loses.asChallenger=_.size(_.filter(e.results,function(n){return n.challenger._id===e._id&&"opponent"===n.winner})),l.loses.total=l.loses.asChallenger+l.loses.asOpponent,l.loses.byForfeit=_.size(_.filter(e.results,function(n){return n.forfeit&&(n.challenger._id===e._id&&"opponent"===n.winner||n.opponent._id===e._id&&"challenger"===n.winner)}))}var l=this;l.maxLevels=7,l.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},l.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},l.streak={type:null,value:0},n()}n.$inject=["$scope"],angular.module("app").directive("wpmPlayerOverallResults",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{competition:"=",team:"=",challenges:"="},templateUrl:"challenges/components/team-overall-results.html"};return e}function n(e){function n(){e.$watch("vm.challenges",function(){a.challenges&&a.challenges.length>0&&a.competition&&(i(a.team,a.challenges),t(a.team,a.challenges),2===a.competition.players.length&&(a.singlePlayerTeams=!0,a.displayName=_.find(a.competition.players,{position:a.team}).displayName,a.playerName=_.find(a.competition.players,{position:a.team}).firstName+" "+_.find(a.competition.players,{position:a.team}).lastName))})}function i(e,n){var i,t=0,l=!0;_.forEach(n,function(n){l&&("challenger"===n.winner&&n.challenger.team===e||"opponent"===n.winner&&n.opponent.team===e?"losing"!==i?(t+=1,i="winning"):l=!1:("opponent"===n.winner&&n.challenger.team===e||"challenger"===n.winner&&n.opponent.team===e)&&("winning"!==i?(t+=1,i="losing"):l=!1)),a.streak={type:i,value:t}})}function t(e,n){a.wins.asOpponent=_.size(_.filter(n,function(n){return n.opponent.team===e&&"opponent"===n.winner})),a.wins.asChallenger=_.size(_.filter(n,function(n){return n.challenger.team===e&&"challenger"===n.winner})),a.wins.total=a.wins.asChallenger+a.wins.asOpponent,a.wins.byForfeit=_.size(_.filter(n,function(n){return n.forfeit&&(n.challenger.team===e&&"challenger"===n.winner||n.opponent.team===e&&"opponent"===n.winner)})),a.loses.asOpponent=_.size(_.filter(n,function(n){return n.opponent.team===e&&"challenger"===n.winner})),a.loses.asChallenger=_.size(_.filter(n,function(n){return n.challenger.team===e&&"opponent"===n.winner})),a.loses.total=a.loses.asChallenger+a.loses.asOpponent,a.loses.byForfeit=_.size(_.filter(n,function(n){return n.forfeit&&(n.challenger.team===e&&"opponent"===n.winner||n.opponent.team===e&&"challenger"===n.winner)}))}var a=this;a.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},a.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},a.streak={type:null,value:0},a.singlePlayerTeams=!1,n()}n.$inject=["$scope"],angular.module("app").directive("wpmTeamOverallResults",e)}(),function(){"use strict";function e(e){function n(n){return e.post("/api/challenges/pyramid/create",{challenge:n})}function i(n){return e.put("/api/challenges/pyramid/cancel",{challenge:n})}function t(n){return e.post("/api/challenges/versus/create",{challenge:n})}function a(n){return e.post("/api/challenges/pyramid/complete",{challenge:n})}function l(n){return e.post("/api/challenges/versus/complete",{challenge:n})}function o(n){return e.get("/api/challenges/competition",{params:{competitionId:n}})}function s(n){return e.get("/api/challenges/active/competition",{params:{competitionId:n}})}function r(n,i){return e.get("/api/challenges/active/competition/player",{params:{competitionId:n,playerId:i}})}function c(n,i){return e.get("/api/challenges/completed/competition",{params:{competitionId:n,limit:i}})}function d(n,i){return e.delete("/api/challenges/active/competition/player/delete",{params:{competitionId:n,playerId:i}})}function m(n,i){return e.delete("/api/challenges/delete",{params:{competitionId:n,challengeId:i}})}function p(n){return e.delete("/api/challenges/active/delete",{params:{competitionId:n}})}function v(n,i){return e.get("/api/challenges/results/competition/player",{params:{competitionId:n,playerId:i}})}var u={createPyramidChallenge:n,createVersusChallenge:t,cancelPyramidChallenge:i,completePyramidChallenge:a,completeVersusChallenge:l,getChallengesByCompetition:o,getActiveChallengesByCompetition:s,getActiveChallengeByCompetitionByPlayer:r,getCompletedChallengesByCompetition:c,deleteActiveChallengeByCompetitionByPlayer:d,deleteChallenge:m,deleteAllActiveChallenges:p,getPlayerResultsByCompetition:v};return u}e.$inject=["$http"],angular.module("app").factory("challengesService",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",templateUrl:"common/components/footer.html"};return e}function n(e,n){function i(){n.logout()}var t=this;t.indentity=e,t.logout=i}n.$inject=["identityService","authService"],angular.module("app").directive("wpmFooter",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"headerCtrl",restrict:"A",templateUrl:"common/components/header.html"};return e}function n(e,n,i,t,a){function l(){o(),e.$watch("headerCtrl.indentity.currentUser",function(){i.isAuthenticated()&&o()})}function o(){m.alerts=[],i.isAuthenticated()&&a.getActiveAlertsByPlayer(i.currentUser._id).then(function(e){m.alerts=e.data})}function s(e,n){a.clearAlert(e).then(function(){m.alerts.splice(n,1)})}function r(){a.clearAllAlertsByPlayer(i.currentUser._id).then(function(){m.alerts=[]})}function c(){n.setSidebarStatus(!m.sidebarStatus.left)}function d(){t.logout()}var m=this;m.indentity=i,m.logout=d,m.sidebarStatus=n.getSidebarStatus(),m.toggleSidebar=c,m.clearAlert=s,m.clearAllAlerts=r,m.alerts=[],l(),e.$on("ws:update_alerts",function(e,n){i.isAuthenticated()&&_.some(n,["userId",i.currentUser._id])&&o()})}n.$inject=["$scope","sidebarService","identityService","authService","alertsService"],angular.module("app").directive("wpmHeader",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"sidebarCtrl",restrict:"A",templateUrl:"common/components/sidebar.html"};return e}function n(e,n,i){function t(){n.logout()}var a=this;a.indentity=e,a.logout=t,a.sidebarStatus=i.getSidebarStatus()}n.$inject=["identityService","authService","sidebarService"],angular.module("app").directive("wpmSidebar",e)}(),function(){"use strict";function e(){return function(e,n){if(!angular.isObject(e))return e;var i=[];for(var t in e)i.push(e[t]);return i.sort(function(e,i){return e=parseInt(e[n]),i=parseInt(i[n]),e-i}),i}}angular.module("app").filter("orderObjectBy",e)}(),function(){"use strict";function e(e){function n(n){return e.get("/api/alerts/",{params:{userId:n}})}function i(n){return e.put("/api/alert/clear",{alertId:n})}function t(n){return e.put("/api/alerts/clear",{userId:n})}var a={getActiveAlertsByPlayer:n,clearAlert:i,clearAllAlertsByPlayer:t};return a}e.$inject=["$http"],angular.module("app").factory("alertsService",e)}(),function(){"use strict";function e(e){function n(){return!!this.currentUser}function i(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}var t;null!==e.bootstrappedUserObject&&(t=e.bootstrappedUserObject);var a={currentUser:t,isAuthenticated:n,isAuthorized:i};return a}e.$inject=["$window"],angular.module("app").factory("identityService",e)}(),function(){"use strict";function e(){function e(e,n,i){$.notify({message:e,url:n,target:i},{type:"info"})}function n(e,n,i){$.notify({message:e,url:n,target:i},{type:"success"})}function i(e,n,i){$.notify({message:e,url:n,target:i},{type:"warning"})}function t(e,n,i){$.notify({message:e,url:n,target:i},{type:"danger"})}function a(e,n,i){$.notify({message:e,url:n,target:i},{type:"inverse"})}var l={info:e,success:n,warning:i,error:t,inverse:a};return $.notifyDefaults({newest_on_top:!0,offset:{x:20,y:85},delay:5e3}),l}angular.module("app").factory("notifyService",e)}(),function(){"use strict";function e(){function e(e,n,i,t){$(e).mCustomScrollbar({theme:n,scrollInertia:100,axis:i,mouseWheel:{enable:!0,axis:t,preventDefault:!0}})}var n={malihuScroll:e};return n}angular.module("app").factory("scrollbarService",e)}(),function(){"use strict";function e(){function e(){return i}function n(e){i.left=e}var i={left:!1,right:!1},t={getSidebarStatus:e,setSidebarStatus:n};return t}angular.module("app").factory("sidebarService",e)}(),function(){"use strict";function e(e,n,i){function t(){return"https:"===n.location.protocol?"wss://"+n.location.host:"ws://"+n.location.host}function a(){o=new WebSocket(t()),o.onmessage=function(n){r=0;var i=JSON.parse(n.data);e.$broadcast("ws:"+i.topic,i.data)},o.onclose=function(){r<s.length?(console.log("WebSocket closed. Reconnecting..."),i(a,1e3*s[r]),r+=1):console.log("Giving up on WebSocket")}}function l(e,n){var i=JSON.stringify({topic:e,data:n});o.send(i)}var o,s=[3,10,100,1e3],r=0,c={connect:a,send:l};return c}e.$inject=["$rootScope","$window","$timeout"],angular.module("app").factory("websocketService",e).run(["websocketService",function(e){e.connect()}])}(),function(){"use strict";function e(e,n){function i(){e.getPublicCompetitions().then(function(e){t.publicCompetitions=e.data}),n.isAuthorized("super-admin")&&e.getPrivateCompetitions().then(function(e){t.privateCompetitions=e.data})}var t=this;t.publicCompetitions=[],t.privateCompetitions=[],i()}e.$inject=["competitionsService","identityService"],angular.module("app").controller("HomeCtrl",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"competitions/components/competition-compact.html"};return e}function n(){function e(){}e()}angular.module("app").directive("wpmCompetitionCompact",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"competitions/components/pending-players.html"};return e}function n(e){function n(){}function i(n){n.position=a.competition.players.length+1,e.approvePendingPlayer(a.competition._id,n)}function t(n){e.denyPendingPlayer(a.competition._id,n)}var a=this;a.pendingPlayers=[],a.approvePendingPlayer=i,a.denyPendingPlayer=t,n()}n.$inject=["competitionsService"],angular.module("app").directive("wpmPendingPlayers",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"competitions/components/pyramid-rules.html"};return e}function n(){function e(){}e()}angular.module("app").directive("wpmPyramidRules",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"competitions/components/pyramid.html",replace:!0,scope:{competition:"="},controller:n,controllerAs:"vm",bindToController:!0};return e}function n(e,n,i,t,a,l,o){function s(){for(var n=z;n>0;--n)$.maxPlayers+=n;e.$watch("vm.competition",function(){$.competition&&($.competitionId=$.competition._id,r(),c(),d(),p(),v(),u())})}function r(){$.challengesAllowed=!0,!$.competition.allowWeekendChallenges&&("Fri"===moment().format("ddd")&&moment().format("H")>=17||"Sat"===moment().format("ddd")||"Sun"===moment().format("ddd"))&&($.challengesAllowed=!1)}function c(){$.competition.players=t("orderBy")($.competition.players,"position")}function d(){_.forEach($.competition.players,function(e){e.hold&&(e.class="hold")}),o.getActiveChallengesByCompetition($.competitionId).then(function(e){!$.challengesAllowed&&e.data.length>0?o.deleteAllActiveChallenges($.competitionId):_.forEach(e.data,function(e){var n=_.find($.competition.players,{_id:e.challenger._id});n.class="unavailable",n.available=!1,n.challenge={position:"challenger",opponent:_.find($.competition.players,{_id:e.opponent._id}).displayName};var i=_.find($.competition.players,{_id:e.opponent._id});if(i.class="unavailable",i.available=!1,i.challenge={position:"opponent"},0!==e.timeLimit){var t=moment().diff(moment(e.created).add(e.timeLimit,"d"))*-1,a=moment.duration(t).asHours();t>0?i.challenge.expires=a:t<=0&&P(null,!0,i)}}),$.currentUserIsAdmin=!1,$.currentUserIsPending=!1,l.isAuthenticated()&&($.currentUserIsAdmin=_.some($.competition.admins,["_id",l.currentUser._id]),$.currentUserIsPending=_.some($.competition.pendingPlayers,["_id",l.currentUser._id])),$.currentUserIsOnCompetition=!1,$.hasActiveChallenge=!1,_.forEach($.competition.players,function(e){l.isAuthenticated()&&e._id===l.currentUser._id&&($.currentUserIsOnCompetition=!0,e.class=e.class?e.class+" current-user":"current-user",$.currentUserPlayer=e,e.hold||o.getActiveChallengeByCompetitionByPlayer($.competitionId,e._id).then(function(n){if(n.data){$.hasActiveChallenge=!0,$.activeChallengeOpponent=n.data.challenger._id===e._id?n.data.opponent:n.data.challenger;var i=_.find($.competition.players,{_id:$.activeChallengeOpponent._id});i.class=i.class?i.class+" current-opponent":"current-opponent"}else $.challengesAllowed&&g()}))})})}function m(){$.breakPoints=[];for(var e=0;e<z;e++)$.breakPoints.push(e*(e+1)/2+1)}function p(){var e=0;$.levels=[],m();for(var n=0;n<$.competition.players.length;n++)$.breakPoints.indexOf(n+1)>-1&&(e+=1,$.levels.push(e)),$.competition.players[n].level=e}function v(){$.numberOfBlocks=0;for(var e=_.last($.levels);e>0;e--)$.numberOfBlocks+=e}function u(){$.numberOfRealPlayers=$.competition.players.length;for(var e=$.competition.players.length;e<$.numberOfBlocks;e++)$.competition.players.push({
firstName:"Empty",lastName:"Spot",displayName:"Empty Spot",position:99,class:"empty",_id:"XX"});p()}function g(){if($.availableChallenges=!1,$.currentUserIsOnCompetition&&!$.hasActiveChallenge){var e=$.currentUserPlayer.level>1?$.currentUserPlayer.level-1:null;_.forEach($.competition.players,function(n){var i=null;n.level!==e||99===n.position||"unavailable"===n.class||n.available===!1||n.hold||(i=_.find($.currentUserPlayer.waitingPeriods,{player:n._id}),i&&moment().isBefore(i.expires)?(n.class="waiting",n.waitUntil=moment(i.expires).format("MMM Do  LT")):($.availableChallenges=!0,n.available=!0,n.class="available"))})}}function h(e){swal({title:"Challenge "+e.displayName+"?",text:"You can do it!",showCancelButton:!0,confirmButtonClass:"btn-success",confirmButtonText:"Yes, challenge!",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){f(e)})}function f(e){if(e.available){$.hasActiveChallenge=!0;var n={type:$.competition.type,competitionName:$.competition.name,competitionId:$.competitionId,complete:!1,forfeit:!1,timeLimit:$.competition.forfeitDays,challenger:{_id:$.currentUserPlayer._id,email:$.currentUserPlayer.email,firstName:$.currentUserPlayer.firstName,lastName:$.currentUserPlayer.lastName,displayName:$.currentUserPlayer.displayName,position:$.currentUserPlayer.position},opponent:{_id:e._id,email:e.email,firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,position:e.position}};o.createPyramidChallenge(n).then(function(){$.competitionMenuToggle=!1})}else a.error("Sorry, that is not a valid challenge.")}function y(){swal({title:"Cancel challenge",text:"Are you sure you want to cancel this challenge?",showCancelButton:!0,confirmButtonClass:"btn-danger",confirmButtonText:"Yes, cancel it",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){b()})}function b(){o.getActiveChallengeByCompetitionByPlayer($.competitionId,$.currentUserPlayer._id).then(function(e){e.data&&e.data.challenger._id===$.currentUserPlayer._id&&o.cancelPyramidChallenge(e.data).then(function(){$.hasActiveChallenge=!1})})}function w(e){swal({title:"Hold my spot!",text:"You'll have to remove the hold when you're ready to play again",showCancelButton:!0,confirmButtonClass:"btn-primary",confirmButtonText:"Hold Please!",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){i.putPlayerOnHold($.competitionId,e)})}function C(e){i.cancelPlayerHold($.competitionId,e._id,e.displayName)}function P(e,n,t){var a=t||$.currentUserPlayer;o.getActiveChallengeByCompetitionByPlayer($.competitionId,a._id).then(function(a){$.hasActiveChallenge=!1;var l=!1;n?(a.data.forfeit=!0,"opponent"===t.challenge.position?(a.data.winner="challenger",l=!0):a.data.winner="opponent"):e?a.data.challenger._id===$.currentUserPlayer._id?(a.data.winner="challenger",l=!0):a.data.winner="opponent":a.data.challenger._id===$.currentUserPlayer._id?a.data.winner="opponent":(a.data.winner="challenger",l=!0);var s,r=null;"opponent"===a.data.winner?(r=a.data.opponent,s=a.data.challenger):(r=a.data.challenger,s=a.data.opponent),i.createWaitingPeriod($.competitionId,s._id,r._id,$.competition.waitingPeriodDays),l?i.swapPositions($.competitionId,a.data.opponent,a.data.challenger).then(function(){o.completePyramidChallenge(a.data).then(function(){O&&x()})}):o.completePyramidChallenge(a.data).then(function(){O&&x()}),$.competitionMenuToggle=!1})}function N(e){swal({title:"Forfeit challenge?",text:"Are you sure you want to forfeit this challenge?",showCancelButton:!0,confirmButtonClass:"btn-danger",confirmButtonText:"Yes, forfeit",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){U(e)})}function U(e){P(null,!0,e)}function A(){if(l.isAuthenticated())if($.numberOfRealPlayers<$.maxPlayers){var e={_id:l.currentUser._id,firstName:l.currentUser.firstName,lastName:l.currentUser.lastName,displayName:l.currentUser.displayName,email:l.currentUser.username,position:$.numberOfRealPlayers+1};$.competition.restrictJoins?swal({title:"Send Join Request?",text:"This is a closed competition so an admin must approve your request",type:"warning",showCancelButton:!0,confirmButtonText:"Send Request",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){i.addPlayerToCompetitionRequest($.competition,e).then(function(){$.currentUserIsPending=!0}),swal("Request Sent","You will receive an email once an admin processes the request.","success")}):swal({title:"Join Competition?",text:"You'll be added to the bottom",type:"warning",showCancelButton:!0,confirmButtonText:"Join",cancelButtonText:"Nevermind",closeOnConfirm:!1,closeOnCancel:!0},function(){i.addPlayerToCompetition($.competitionId,e),swal("Welcome Aboard!","Now start fighting your way to the top","success")})}else a.warning("Sorry, this competition is full");else a.warning("Please login to join a competition"),n.previous="competitions.view",n.prevParams={competitionId:$.competitionId},n.go("login")}function I(){swal({title:"Leave Competition?",text:"You will lose your spot and forfeit any active challenges.",type:"error",showCancelButton:!0,confirmButtonText:"Yes, leave",confirmButtonClass:"btn-danger",cancelButtonText:"No, stay",closeOnConfirm:!1,closeOnCancel:!0},function(){x(),swal("OK, you'r out!","You've been removed from the competition.","success")})}function x(){l.isAuthenticated()&&$.currentUserIsOnCompetition&&(O=!0,$.hasActiveChallenge?P(null,!0,$.currentUserPlayer):($.currentUserIsOnCompetition=!1,$.hasActiveChallenge=!1,i.getCompetition($.competitionId).then(function(e){var n=e.data,t=$.currentUserPlayer.position;_.forEach(n.players,function(e){e.position>=t&&(e.position-=1)});for(var a=_.remove(n.players,function(e){return e._id===$.currentUserPlayer._id}),l=[],o=0;o<$.numberOfRealPlayers-1;++o){var s={_id:n.players[o]._id,firstName:n.players[o].firstName,lastName:n.players[o].lastName,displayName:n.players[o].displayName,position:n.players[o].position};l.push(s)}i.removedPlayerFromCompetition($.competitionId,a[0],l).then(function(){O=!1})})))}function k(e){99!==e.position||$.currentUserIsOnCompetition?e.showChallengeModal=!e.showChallengeModal:A()}function S(){i.getCompetition($.competitionId).then(function(e){$.competition=e.data})}var z=7,$=this;$.competitionId=null,$.breakPoints=[],$.levels=[],$.numberOfBlocks=0,$.currentUserIsOnCompetition=!1,$.currentUserIsPending=!1,$.currentUserIsAdmin=!1,$.hasActiveChallenge=!1,$.activeChallengeOpponent=null,$.availableChallenges=!1,$.confirmCreateChallenge=h,$.createChallenge=f,$.confirmCancelChallenge=y,$.cancelChallenge=b,$.completeChallenge=P,$.confirmForfeitChallenge=N,$.forfeitChallenge=U,$.putPlayerOnHold=w,$.cancelPlayerHold=C,$.currentUserPlayer={},$.competitionMenuToggle=!1,$.addCurrentUserToCompetition=A,$.confirmRemoveCurrentUserFromCompetition=I,$.playerClick=k,$.numberOfRealPlayers=0,$.maxPlayers=0,$.challengesAllowed=!0,s();var O=!1;e.$on("ws:competition_updated",function(e,n){$.competitionId===n.competitionId&&(a.info(n.description),S())})}n.$inject=["$scope","$state","competitionsService","$filter","notifyService","identityService","challengesService"],angular.module("app").directive("wpmPyramid",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"competitions/components/update-admins.html"};return e}function n(e,n,i,t,a){function l(){e.$watch("vm.competition",function(){v.competition&&(v.addedAdmins=_.cloneDeep(v.competition.admins),v.disableSubmit=!0,v.userIsPrimaryAdmin=_.find(v.competition.admins,{primary:!0})._id===a.currentUser._id,o())})}function o(){v.availableAdmins=[],m=[],t.getVerifiedUsers().then(function(e){_.forEach(v.competition.admins,function(n){_.remove(e.data,function(e){return n._id===e._id})}),_.forEach(e.data,function(e){v.availableAdmins.push({firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,email:e.username,_id:e._id})}),p=_.cloneDeep(v.availableAdmins)})}function s(){v.competition.admins=v.addedAdmins,n.updateCompetition(v.competition).then(function(){v.disableSubmit=!0})}function r(){m=[],v.addedAdmins=_.cloneDeep(v.competition.admins),v.availableAdmins=_.cloneDeep(p)}function c(e){m.push(e),v.availableAdmins.push(_.remove(v.addedAdmins,{_id:e._id})[0]),v.disableSubmit=!1}function d(e){v.addedAdmins.push(_.remove(v.availableAdmins,{_id:e._id})[0]),v.disableSubmit=!1}var m=[],p=[],v=this;v.availableAdmins=[],v.addedAdmins=[],v.userIsPrimaryAdmin=!1,v.updateCompetition=s,v.cancelUpdate=r,v.removeAdmin=c,v.addAdmin=d,v.disableSubmit=!0,l()}n.$inject=["$scope","competitionsService","challengesService","userService","identityService"],angular.module("app").directive("wpmUpdateAdmins",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:n,controllerAs:"vm",restrict:"A",scope:{competition:"="},templateUrl:"competitions/components/update-players.html"};return e}function n(e,n,i,t,a){function l(){for(var n=h;n>0;--n)f+=n;e.$watch("vm.competition",function(){y.competition&&(y.addedPlayers=_.cloneDeep(y.competition.players),y.disableSubmit=!0,o())})}function o(){y.availablePlayers=[],u=[],t.getVerifiedUsers().then(function(e){_.forEach(y.competition.players,function(n){_.remove(e.data,function(e){return n._id===e._id})}),_.forEach(e.data,function(e){y.availablePlayers.push({firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,email:e.username,_id:e._id})}),g=_.cloneDeep(y.availablePlayers)})}function s(){"versus"===y.competition.type&&y.addedPlayers.length%2>0?a.error("A Versus competition must have an even number of players"):y.addedPlayers.length>f?a.error("A competition can have a maximum of "+f+" players"):(_.forEach(u,function(e){i.deleteActiveChallengeByCompetitionByPlayer(y.competition._id,e._id)}),y.competition.players=y.addedPlayers,n.updateCompetition(y.competition).then(function(){y.disableSubmit=!0}))}function r(){u=[],y.addedPlayers=_.cloneDeep(y.competition.players),y.availablePlayers=_.cloneDeep(g)}function c(){"versus"===y.competition.type?m():"pyramid"===y.competition.type&&d(),y.disableSubmit=!1}function d(){var e=1;_.forEach(y.addedPlayers,function(n){n.position=e,++e})}function m(){_.forEach(y.addedPlayers,function(e){e.position=2});for(var e=0;e<y.addedPlayers.length/2;e++)y.addedPlayers[e].position=1}function p(e){u.push(e),y.availablePlayers.push(_.remove(y.addedPlayers,{_id:e._id})[0]),c()}function v(e){y.addedPlayers.push(_.remove(y.availablePlayers,{_id:e._id})[0]),c(),y.disableSubmit=!1}var u=[],g=[],h=7,f=null,y=this;y.availablePlayers=[],y.addedPlayers=[],y.updateCompetition=s,y.cancelUpdate=r,y.reorderPlayers=c,y.removePlayer=p,y.addPlayer=v,y.disableSubmit=!0,l()}n.$inject=["$scope","competitionsService","challengesService","userService","notifyService"],angular.module("app").directive("wpmUpdatePlayers",e)}(),function(){"use strict";function e(){var e={restrict:"A",templateUrl:"competitions/components/versus.html",replace:!0,scope:{competition:"="},controller:n,controllerAs:"vm",bindToController:!0};return e}function n(e,n,i,t,a){function l(){e.$watch("vm.competition",function(){p.competition&&(p.competitionId=p.competition._id,p.showControls=!1,p.showChallengeModal=!1,o(),s())})}function o(){p.competition.teams=[{players:_.filter(p.competition.players,["position",1])},{players:_.filter(p.competition.players,["position",2])}],2===p.competition.players.length&&(p.singlePlayerTeams=!0)}function s(){p.currentUserIsAdmin=!1,p.currentUserIsPending=!1,i.isAuthenticated()&&(p.currentUserIsAdmin=_.some(p.competition.admins,["_id",i.currentUser._id]),p.currentUserIsPending=_.some(p.competition.pendingPlayers,["_id",i.currentUser._id])),p.currentUserIsOnCompetition=!1,p.hasActiveChallenge=!1,_.forEach(p.competition.players,function(e){i.isAuthenticated()&&e._id===i.currentUser._id&&(p.currentUserIsOnCompetition=!0,e.class="current-user",p.currentUserPlayer=e,p.competition.teams[e.position-1].class="current-user-team",p.competition.class="current-user-on-competition")}),t.getActiveChallengesByCompetition(p.competitionId).then(function(e){if(e.data.length>0&&(p.activeChallenge=e.data[0],p.hasActiveChallenge=!0,0!==p.activeChallenge.timeLimit)){var n=moment().diff(moment(p.activeChallenge.created).add(p.activeChallenge.timeLimit,"d"))*-1,i=moment.duration(n).asHours();n>0?p.challengeExpireTime=i:n<=0&&d(null,!0)}})}function r(){p.hasActiveChallenge&&p.currentUserIsOnCompetition&&(p.showControls=!p.showControls)}function c(e){if(p.showChallengeModal=!1,p.hasActiveChallenge)a.error("Sorry, you are already in an active challenge.");else{p.hasActiveChallenge=!0;var n={type:p.competition.type,competitionName:p.competition.name,competitionId:p.competitionId,complete:!1,forfeit:!1,timeLimit:p.competition.forfeitDays,challenger:{team:p.currentUserPlayer.position,_id:p.currentUserPlayer._id},opponent:{team:e}};t.createVersusChallenge(n).then(function(){p.competitionMenuToggle=!1})}}function d(e,n){p.hasActiveChallenge=!1;var i=p.activeChallenge;n?(i.forfeit=!0,i.winner="challenger"):p.activeChallenge.challenger.team===e?i.winner="challenger":i.winner="opponent",t.completeVersusChallenge(i),p.competitionMenuToggle=!1}function m(){n.getCompetition(p.competitionId).then(function(e){p.competition=e.data})}var p=this;p.competitionId=null,p.currentUserIsAdmin=!1,p.currentUserIsPending=!1,p.currentUserIsOnCompetition=!1,p.activeChallenge=null,p.hasActiveChallenge=!1,p.currentUserPlayer=null,p.createChallenge=c,p.completeChallenge=d,p.challengeExpireTime=null,p.showControls=!1,p.showChallengeModal=!1,p.toggleControls=r,p.singlePlayerTeams=!1,l(),e.$on("ws:competition_updated",function(e,n){p.competitionId===n.competitionId&&(a.info(n.description),m())})}n.$inject=["$scope","competitionsService","identityService","challengesService","notifyService"],angular.module("app").directive("wpmVersus",e)}(),function(){"use strict";function e(e){function n(n){return e.get("/api/competition",{params:{competitionId:n}})}function i(n){return e.get("/api/competitions/user",{params:{userId:n}})}function t(){return e.get("/api/competitions/public")}function a(){return e.get("/api/competitions/private")}function l(n){return e.post("/api/competitions/create",{competition:n})}function o(n){return e.post("/api/competitions/update",{competition:n})}function s(n){return e.delete("/api/competitions/delete",{params:{competitionId:n}})}function r(n,i,t,a){return e.put("/api/competitions/createWaitingPeriod",{competitionId:n,loserId:i,winnerId:t,waitingPeriod:a})}function c(n,i,t){return e.post("/api/competitions/swapPositions",{competitionId:n,challenger:i,opponent:t})}function d(n,i){return e.post("/api/competitions/addPlayer",{competitionId:n,player:i})}function m(n,i){return e.post("/api/competitions/addPlayerRequest",{competition:n,player:i})}function p(n,i,t){return e.post("/api/competitions/removePlayer",{competitionId:n,removedPlayer:i,players:t})}function v(n,i){return e.post("/api/competitions/approvePlayer",{competitionId:n,player:i})}function u(n,i){return e.post("/api/competitions/denyPlayer",{competitionId:n,player:i})}function g(n,i){return e.put("/api/competitions/playerHold",{competitionId:n,player:i})}function h(n,i,t){return e.delete("/api/competitions/playerHold",{params:{competitionId:n,playerId:i,displayName:t}})}var f={getCompetition:n,getCompetitionsForUser:i,getPublicCompetitions:t,getPrivateCompetitions:a,createCompetition:l,updateCompetition:o,deleteCompetition:s,createWaitingPeriod:r,swapPositions:c,addPlayerToCompetition:d,addPlayerToCompetitionRequest:m,removedPlayerFromCompetition:p,approvePendingPlayer:v,denyPendingPlayer:u,putPlayerOnHold:g,cancelPlayerHold:h};return f}e.$inject=["$http"],angular.module("app").factory("competitionsService",e)}(),function(){"use strict";function e(e,n,i,t,a,l,o,s){function r(){i.competitionId?(v.competitionId=i.competitionId,c()):n.go("competitions.myCompetitions")}function c(){a.getCompetition(v.competitionId).then(function(e){e.data&&_.some(e.data.admins,["_id",l.currentUser._id])?(v.isAdmin=!0,e.data.players=t("orderBy")(e.data.players,"position"),v.competition=e.data):n.go("competitions.myCompetitions")}),s.getCompletedChallengesByCompetition(v.competitionId).then(function(e){v.challenges=e.data})}function d(){a.getCompetition(v.competitionId).then(function(e){var n=e.data;n.restrictJoins=v.competition.restrictJoins,a.updateCompetition(n)})}function m(){a.getCompetition(v.competitionId).then(function(e){var n=e.data;n.private=v.competition.private,a.updateCompetition(n)})}function p(){swal({title:"Delete Competition?",text:"This can not be undone",type:"error",showCancelButton:!0,confirmButtonText:"Delete",cancelButtonText:"Nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(){a.deleteCompetition(v.competitionId).then(function(){n.go("competitions.myCompetitions")})})}var v=this;v.competitionId=null,v.updateCompetitionRestrictJoins=d,v.updateCompetitionPrivate=m,v.deleteCompetition=p,r(),e.$on("ws:competition_updated",function(e,n){v.competitionId===n.competitionId&&(o.info(n.description),c())}),e.$on("ws:competition_deleted",function(e,i){v.competitionId===i.competitionId&&(o.info(i.description),n.go("competitions.myCompetitions"))})}e.$inject=["$scope","$state","$stateParams","$filter","competitionsService","identityService","notifyService","challengesService"],angular.module("app").controller("CompetitionAdminCtrl",e)}(),function(){"use strict";function e(e,n,i,t,a,l){function o(){n.competitionId&&(r.competitionId=n.competitionId,s())}function s(){t.getCompetition(r.competitionId).then(function(e){e.data?(r.competition=e.data,"pyramid"===r.competition.type?_.forEach(r.competition.players,function(e){l.getPlayerResultsByCompetition(r.competitionId,e._id).then(function(n){e.results=n.data})}):"versus"===r.competition.type&&(r.teams=[{number:1},{number:2}])):i.go("competitions.myCompetitions")}),l.getCompletedChallengesByCompetition(r.competitionId).then(function(e){r.challenges=e.data})}var r=this;r.competitionId=null,r.competition={},r.playersResults=[],r.challenges=[],o(),e.$on("ws:competition_updated",function(e,n){r.competitionId===n.competitionId&&(a.info(n.description),s())}),e.$on("ws:competition_deleted",function(e,n){r.competitionId===n.competitionId&&(a.info(n.description),i.go("competitions.myCompetitions"))})}e.$inject=["$scope","$stateParams","$state","competitionsService","notifyService","challengesService"],angular.module("app").controller("CompetitionStatsCtrl",e)}(),function(){"use strict";function e(e,n,i,t,a,l){function o(){i.competitionId&&(r.competitionId=i.competitionId,s())}function s(){t.getCompetition(r.competitionId).then(function(e){e.data?r.competition=e.data:n.go("competitions.myCompetitions")})}var r=this;r.competitionId=null,r.competition=null,o(),e.$on("ws:competition_deleted",function(e,i){r.competitionId===i.competitionId&&(l.info(i.description),n.go("competitions.myCompetitions"))})}e.$inject=["$scope","$state","$stateParams","competitionsService","challengesService","notifyService"],angular.module("app").controller("CompetitionCtrl",e)}(),function(){"use strict";function e(e){function n(){e.getPublicCompetitions().then(function(e){i.competitions=e.data})}var i=this;i.competitions=[],n()}e.$inject=["competitionsService"],angular.module("app").controller("CompetitionsCtrl",e)}(),function(){"use strict";function e(e,n,i,t,a){function l(){n.getVerifiedUsers().then(function(e){g.availablePlayers=e.data});for(var e=v;e>0;--e)u+=e;for(e=0;e<v;e++)p.push(e*(e+1)/2+1)}function o(e){g.addedPlayers.push(_.remove(g.availablePlayers,{_id:e._id})[0]),r()}function s(e){g.availablePlayers.push(_.remove(g.addedPlayers,{_id:e._id})[0]),r()}function r(){"versus"===g.newCompetition.type?d():"pyramid"===g.newCompetition.type&&c()}function c(){var e=1;_.forEach(g.addedPlayers,function(n){n.position=e,++e})}function d(){_.forEach(g.addedPlayers,function(e){e.position=2});for(var e=0;e<g.addedPlayers.length/2;e++)g.addedPlayers[e].position=1}function m(n){if("versus"===n.type&&g.addedPlayers.length%2>0)a.error("A Versus competition must have an even number of players");else if(g.addedPlayers.length>u)a.error("A competition can have a maximum of "+u+" players");else{angular.forEach(g.addedPlayers,function(e){var i={_id:e._id,email:e.username,firstName:e.firstName,lastName:e.lastName,displayName:e.displayName,position:e.position};n.players.push(i)}),n.admins=[{_id:t.currentUser._id,email:t.currentUser.username,firstName:t.currentUser.firstName,lastName:t.currentUser.lastName,displayName:t.currentUser.displayName,primary:!0}];for(var l=0;l<p.length;l++)if(n.players.length<p[l]){n.levels=l;break}i.createCompetition(n).then(function(n){e.go("competitions.view",{competitionId:n.data._id})})}}var p=[],v=7,u=null,g=this;g.newCompetition={players:[],restrictJoins:!1,private:!1,allowWeekendChallenges:!1},g.availablePlayers=[],g.addedPlayers=[],g.createCompetition=m,g.addPlayer=o,g.removePlayer=s,g.reorderPlayers=r,g.newCompetition.forfeitDays=1,g.newCompetition.waitingPeriodDays=1,g.competitionTypes=["pyramid","versus"],l()}e.$inject=["$state","userService","competitionsService","identityService","notifyService"],angular.module("app").controller("CreateCompetitionCtrl",e)}(),function(){"use strict";function e(e,n,i,t,a){function l(){o()}function o(){s=[],r.activeChallenge=null,t.isAuthenticated()&&n.getCompetitionsForUser(t.currentUser._id).then(function(e){r.competitions=e.data,_.forEach(r.competitions,function(e){s.push(e._id),"pyramid"===e.type?i.getActiveChallengeByCompetitionByPlayer(e._id,t.currentUser._id).then(function(n){n.data&&(e.activeChallenge=n.data,0!==e.activeChallenge.timeLimit&&(e.activeChallenge.expires=moment().diff(moment(e.activeChallenge.created).add(e.activeChallenge.timeLimit,"d"),"s")*-1))}):"versus"===e.type&&i.getActiveChallengesByCompetition(e._id).then(function(n){n.data.length>0&&(e.activeChallenge=n.data[0],0!==e.activeChallenge.timeLimit&&(e.activeChallenge.expires=moment().diff(moment(e.activeChallenge.created).add(e.activeChallenge.timeLimit,"d"),"s")*-1))})})})}var s=[],r=this;r.activeChallenge=null,l(),e.$on("ws:competition_updated",function(e,n){s.indexOf(n.competitionId)>=0&&(a.info(n.description),o())})}e.$inject=["$scope","competitionsService","challengesService","identityService","notifyService"],angular.module("app").controller("MyCompetitionsCtrl",e)}(),function(){"use strict";function e(e,n,i){function t(){e.currentUser.displayName||(o.user.displayName=e.currentUser.firstName+" "+e.currentUser.lastName),l=_.cloneDeep(o.user)}function a(t){var a=[];n.getAllUsers().then(function(s){if(_.forEach(s.data,function(e){a.push(e.displayName.toLowerCase())}),t.password!==t.confirmPassword)i.error("Passwords don't match!");else if(t.firstName.length<1||t.lastName.length<1||t.displayName.length<1)i.error("Don't leave names blank!  How will people know who you are?");else if(l.displayName!==t.displayName&&_.indexOf(a,t.displayName.toLowerCase())>-1)i.error("Sorry, someone else is already using that display name");else if(!e.isAuthorized("super-admin")&&t.displayName.toLowerCase().indexOf("maestro")>-1)i.error("Sorry, there's only one Maestro");else{var r={_id:t._id};(t.firstName!==e.currentUser.firstName&&t.firstName.length>0||t.lastName!==e.currentUser.lastName&&t.lastName.length>0||t.displayName!==e.currentUser.displayName&&t.displayName.length>0)&&(r.firstName=t.firstName,r.lastName=t.lastName,r.displayName=t.displayName),t.password&&t.password.lentgh>0&&(r.password=t.password),n.updateUser(r).then(function(){i.success("Your information has been updated"),o.userForm.$setPristine();var n=angular.copy(e.currentUser);angular.extend(n,r),e.currentUser=n,o.user.confirmPassword=o.user.password=""})}})}var l=null,o=this;o.user={_id:e.currentUser._id,firstName:e.currentUser.firstName,lastName:e.currentUser.lastName,displayName:e.currentUser.displayName},o.updateUser=a,o.userForm={},t()}e.$inject=["identityService","userService","notifyService"],angular.module("app").controller("PlayerAdminCtrl",e)}(),function(){"use strict";function e(e,n,i){function t(){n.userId&&n.competitionId?(r.userId=n.userId,r.competitionId=n.competitionId,a()):e.go("home")}function a(){i.getPlayerResultsByCompetition(r.competitionId,r.userId).then(function(e){o(e.data),s(e.data),l(e.data)})}function l(e){var n=[];_.forEach(e,function(e){n.push(e.challenger._id),n.push(e.opponent._id)}),n=_.uniq(n),_.pull(n,r.userId),_.forEach(n,function(n){var i={_id:n,wins:0,loses:0};_.forEach(e,function(e){"challenger"===e.winner&&e.challenger._id===r.userId&&e.opponent._id===n?(i.wins+=1,i.displayName=e.opponent.displayName,i.firstName=e.opponent.firstName,i.lastName=e.opponent.lastName,r.player={displayName:e.challenger.displayName,firstName:e.challenger.firstName,lastName:e.challenger.lastName}):"opponent"===e.winner&&e.opponent._id===r.userId&&e.challenger._id===n?(i.wins+=1,i.displayName=e.challenger.displayName,i.firstName=e.challenger.firstName,i.lastName=e.challenger.lastName,r.player={displayName:e.opponent.displayName,firstName:e.opponent.firstName,lastName:e.opponent.lastName}):"challenger"===e.winner&&e.opponent._id===r.userId&&e.challenger._id===n?(i.loses+=1,i.displayName=e.challenger.displayName,i.firstName=e.challenger.firstName,i.lastName=e.challenger.lastName,r.player={displayName:e.opponent.displayName,firstName:e.opponent.firstName,lastName:e.opponent.lastName}):"opponent"===e.winner&&e.challenger._id===r.userId&&e.opponent._id===n&&(i.loses+=1,i.displayName=e.opponent.displayName,i.firstName=e.opponent.firstName,i.lastName=e.opponent.lastName,r.player={displayName:e.challenger.displayName,firstName:e.challenger.firstName,lastName:e.challenger.lastName})}),i.data=[i.wins,i.loses],r.otherPlayers.push(i)})}function o(e){var n,i=0,t=!0;_.forEach(e,function(e){t&&("challenger"===e.winner&&e.challenger._id===r.userId||"opponent"===e.winner&&e.opponent._id===r.userId?"losing"!==n?(i+=1,n="winning"):t=!1:("opponent"===e.winner&&e.challenger._id===r.userId||"challenger"===e.winner&&e.opponent._id===r.userId)&&("winning"!==n?(i+=1,n="losing"):t=!1)),r.streak={type:n,value:i}})}function s(e){r.wins.asOpponent=_.size(_.filter(e,function(e){return e.opponent._id===r.userId&&"opponent"===e.winner})),r.wins.asChallenger=_.size(_.filter(e,function(e){return e.challenger._id===r.userId&&"challenger"===e.winner})),r.wins.total=r.wins.asChallenger+r.wins.asOpponent,r.wins.byForfeit=_.size(_.filter(e,function(e){return e.forfeit&&(e.challenger._id===r.userId&&"challenger"===e.winner||e.opponent._id===r.userId&&"opponent"===e.winner)})),r.loses.asOpponent=_.size(_.filter(e,function(e){return e.opponent._id===r.userId&&"challenger"===e.winner})),r.loses.asChallenger=_.size(_.filter(e,function(e){return e.challenger._id===r.userId&&"opponent"===e.winner})),r.loses.total=r.loses.asChallenger+r.loses.asOpponent,r.loses.byForfeit=_.size(_.filter(e,function(e){return e.forfeit&&(e.challenger._id===r.userId&&"opponent"===e.winner||e.opponent._id===r.userId&&"challenger"===e.winner)})),r.overall.push(r.wins.total),r.overall.push(r.loses.total)}var r=this;r.userId=null,r.player={},r.otherPlayers=[],r.chart={labels:["Wins","Loses"],colors:[{backgroundColor:"#4CAF50",pointBackgroundColor:"#4CAF50"},{backgroundColor:"#F44336",pointBackgroundColor:"#F44336"}],options:{animation:{animateScale:!0}}},r.wins={total:0,asChallenger:0,asOpponent:0,byForfeit:0},r.loses={total:0,asChallenger:0,asOpponent:0,byForfeit:0},r.streak={type:null,value:0},r.overall=[],r.overallChart={options:{scales:{yAxes:[{ticks:{beginAtZero:!0,stepSize:1}}]}}},t()}e.$inject=["$state","$stateParams","challengesService"],angular.module("app").controller("PlayerCompetitionCtrl",e)}(),function(){"use strict";function e(e,n,i,t){function a(){n.userId?(o.userId=n.userId,l()):e.go("home")}function l(){i.getCompetitionsForUser(o.userId).then(function(e){e.data?(o.pyramids=_.filter(e.data,{type:"pyramid"}),o.versus=_.filter(e.data,{type:"versus"})):t.info("This player is not involved in any competitions")})}var o=this;o.userId=null,o.pyramids=[],o.versus=[],a()}e.$inject=["$state","$stateParams","competitionsService","notifyService"],angular.module("app").controller("PlayerCompetitionsCtrl",e)}(),function(){"use strict";function e(e){function n(n,i,t){var a=t.scrollaxis||"y",l=t.theme||"minimal-dark",o=t.mousewheelaxis||"y";$("html").hasClass("ismobile")||e.malihuScroll(i,l,a,o)}var i={restrict:"C",link:n};return i}e.$inject=["scrollbarService"],angular.module("app").directive("cOverflow",e)}(),function(){"use strict";function e(){function e(e,n){n.click(function(){n.next().slideToggle(200),n.parent().toggleClass("toggled")})}var n={restrict:"A",link:e};return n}angular.module("app").directive("toggleSubmenu",e)}(),function(){"use strict";function e(){function e(e,n){n.hasClass("btn-icon")||n.hasClass("btn-float")?Waves.attach(n,["waves-circle"]):n.hasClass("btn-light")?Waves.attach(n,["waves-light"]):Waves.attach(n),Waves.init()}var n={restrict:"C",link:e};return n}angular.module("app").directive("wavesEffect",e)}(),function(){"use strict";function e(){function e(e,n){var i=n.children().first(),t=n.parent().hasClass("fg-float");i.focus(function(){n.addClass("fg-toggled")}),i.blur(function(){(!t||t&&0===i.val().length)&&n.removeClass("fg-toggled")})}var n={restrict:"C",link:e};return n}angular.module("app").directive("fgLine",e)}();
//# sourceMappingURL=data:application/json;base64,
